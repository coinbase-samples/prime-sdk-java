/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonOrder;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiCandles;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiGetTradeReportOrderDetailsAndGraphDataResponse;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiGetTradeReportOrderFillsResponse;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiGetTradeReportVenueFillsResponse;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiProductStats;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiTradeReportOrder;
import io.swagger.client.model.CoinbaseCustodyApiActivity;
import io.swagger.client.model.CoinbaseCustodyApiCreateVideoUploadRequest;
import io.swagger.client.model.CoinbaseCustodyApiCurrency;
import io.swagger.client.model.CoinbaseCustodyApiDismissNotificationRequest;
import io.swagger.client.model.CoinbaseCustodyApiDismissNotificationResponse;
import io.swagger.client.model.CoinbaseCustodyApiFinishVideoUploadRequest;
import io.swagger.client.model.CoinbaseCustodyApiGetBalanceResponse;
import io.swagger.client.model.CoinbaseCustodyApiGetNotificationsResponse;
import io.swagger.client.model.CoinbaseCustodyApiGetStakeTimeEstimationResponse;
import io.swagger.client.model.CoinbaseCustodyApiGetStakingActivityDetailsResponse;
import io.swagger.client.model.CoinbaseCustodyApiGetUnstakeTimeEstimationResponse;
import io.swagger.client.model.CoinbaseCustodyApiGetVideoUploadPermissionsResponse;
import io.swagger.client.model.CoinbaseCustodyApiGetVotingWeightsResponse;
import io.swagger.client.model.CoinbaseCustodyApiGovernanceTopic;
import io.swagger.client.model.CoinbaseCustodyApiInvoice;
import io.swagger.client.model.CoinbaseCustodyApiListVideoUploadsResponse;
import io.swagger.client.model.CoinbaseCustodyApiSettings;
import io.swagger.client.model.CoinbaseCustodyApiStakingValidator;
import io.swagger.client.model.CoinbaseCustodyApiVideoUpload;
import io.swagger.client.model.CoinbaseCustodyApiWalletRewardsStatus;
import io.swagger.client.model.CoinbaseCustodyApiWalletStakingStatus;
import io.swagger.client.model.CoinbaseEngPrimeApiApiAcceptInvitationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiAcceptInvitationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiActivateAPIKeyRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiActivateAPIKeyRequestV2;
import io.swagger.client.model.CoinbaseEngPrimeApiApiActivateAPIKeyResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiActivityConsensusAuditResult;
import io.swagger.client.model.CoinbaseEngPrimeApiApiAddressBookResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiBulkUserRolesUpdateRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiBulkUserRolesUpdateResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCancelTransactionRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCancelTransactionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiConfig;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateAPIKeyRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateAPIKeyRequestV2;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateAPIKeyResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateInvitationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateOrderFillsDocumentRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateOrderFillsDocumentResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateTestTransactionRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateTestTransactionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateTransactionRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateTransactionV2Request;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateWalletRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateWalletResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateWalletV2Request;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateWeb3ActionRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiDeactivateAPIKeyRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiDeactivateAPIKeyRequestV2;
import io.swagger.client.model.CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiDeleteAddressBookEntryResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiDeletePaymentMethodRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiDeletePaymentMethodResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiDownloadActivityReportResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGenerateDALReportResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGenerateFinancingReportResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGenerateReportingCenterDocumentResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGenerateStatementResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGenerateWeb3ReportResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetAPIKeyCountResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetAPIKeyResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetActivityFiltersResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetAllocationByOrderResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetAllocationLegResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetAllocationsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetBalancesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetBillingEmailListResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetBillingPreferenceResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetConversionSummariesV2Response;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetCounterpartyResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetCurrenciesInfoResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetDepositInstructionsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetDeviceGroupResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetDocumentDownloadLinksResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetDocumentResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetDocumentSignatureStatusResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetEvaluationResultResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetExchangeRateResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetFidoRegistrationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetFinancingProductPermisionsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetGovernanceStatusResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetGovernanceTopicsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetGovernanceVotesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetIVPortfolioBalancesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetIVRestrictionsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetIntrospectResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetInvestmentVehiclePortfoliosResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetInvestmentVehicleResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetInvitationsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetInvoiceDownloadLinkResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetInvoicesRemainingBalanceResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetIvDomicileCategoryRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetIvDomicileCategoryResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetLatestTestTransactionRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetLatestTestTransactionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetOrganizationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPendingConsensusResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPortfolioActivitiesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPortfolioCommissionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPostTradeCreditResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPreferenceResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPrimeActivitiesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPrimeActivityDetailsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2Response;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPrimeActivityFiltersResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetRateCardResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetReportingCenterDownloadLinkResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetReportingCenterFiltersResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetReverseAllocationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetSignedDocumentResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetStablecoinRewardsEarningsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetStablecoinRewardsEnrollmentResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetStatementResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetTeamMemberDetailResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetTeamMembersResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetTransferMethodsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetUserEntityLevelPermissionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetUserHierarchyResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetUserInAppNotificationsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetUserInfoResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetUserPortfoliosResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetUserPreferencesForChannelResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetUserRolesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetVehicleBillingPermissionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetWalletAssetSettingsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetWalletDefiBalancesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetWalletResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetWalletVestingStatusResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiInitiateTransactionSigningRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiInitiateTransactionSigningResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiInvoice;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListAPIKeysResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListActiveValidatorsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListBulkPoliciesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListDeviceGroupsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListPaymentMethodsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListPortfolioConciseUsersResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListPortfolioUsersResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListReportingCenterDataResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListSignerIdsForActivityResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListTradingWalletCryptoDepositAddressesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListUserInvitationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListWalletTokensResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListWalletsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListWalletsV2Response;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListWeb3SecurityKeysResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiLlcRolloutResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiNewConsensusActivityResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiOrderPreviewResponseBody;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPortfolio;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostAddressBookEntryRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostAddressBookEntryResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostAllocationPreviewRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostAllocationPreviewResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostAllocationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostAllocationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostApprovePortfolioActivityRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostApprovePortfolioActivityResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostApproveVehicleActivityRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostApproveVehicleActivityResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostBulkActionActivitiesRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostBulkActionActivitiesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostBulkActionSettingsRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostBulkActionSettingsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostBulkUserInvitationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostBulkUserInvitationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostCancelOrderRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostCancelOrderResponseBody;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostDelegationAccountResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostDocumentSignatureRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostDocumentSignatureResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostEntitySettingsRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostEntitySettingsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostFidoChallengeCreateResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostFidoChallengeRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostFidoChallengeResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostFidoRegistrationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostFidoRegistrationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostGovernanceStatusRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostGovernanceStatusResponseBody;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostGovernanceVoteRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostGovernanceVoteResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostNetAllocationPreviewRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostOrderPreviewRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostOrderRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostOrderResponseBody;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostPortfolioSettingsRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostPortfolioSettingsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostPreviewUserChangeRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostPreviewUserChangeResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostPushNotificationDeviceDeregistrationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostPushNotificationDeviceRegistrationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostRejectPortfolioActivityRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostRejectPortfolioActivityResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostRejectVehicleActivityRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostRejectVehicleActivityResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostReverseAllocationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUpdateBillingAddressRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUpdateBillingAddressResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUpdateBillingEmailListRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUpdateBillingEmailListResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUpdateBillingPreferenceRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUserInAppNotificationStatusesRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUserPreferencesRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUserUpdateRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPreviewTransactionRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPreviewTransactionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiProducts;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSignalWeb3ActionRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSignalWeb3ActionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSpotPrice;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSystemStatusResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateWalletNameRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateWalletNameResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateWeb3DeviceRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateWeb3DeviceResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpsertPolicyChangeRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpsertPolicyChangeResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUserPreferences;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateAddressRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateAddressResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateCounterpartyRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateCounterpartyResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateWeb3AuthorizationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateWeb3AuthorizationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyResponse;
import io.swagger.client.model.CoinbaseEngPrimeFeesApiGetFeeInfoResponse;
import io.swagger.client.model.CoinbaseEngPrimeReportingApiDocument;
import io.swagger.client.model.CoinbaseEngPrimeReportingApiStatement;
import io.swagger.client.model.CoinbaseFinancingGetAllLocatesByPortfolioResponse;
import io.swagger.client.model.CoinbaseFinancingGetConversionSummariesV2Response;
import io.swagger.client.model.CoinbaseFinancingGetCurrentLocatesResponse;
import io.swagger.client.model.CoinbaseFinancingGetDalCollateralSnapshotsResponse;
import io.swagger.client.model.CoinbaseFinancingGetLocateAssetsResponse;
import io.swagger.client.model.CoinbaseFinancingPortfolioOverviewResponse;
import io.swagger.client.model.CoinbaseFinancingSubmitDALRecallRequest;
import io.swagger.client.model.CoinbaseFinancingSubmitDALRecallResponse;
import io.swagger.client.model.CoinbaseFinancingSubmitLocatesRequest;
import io.swagger.client.model.CoinbaseFinancingSubmitLocatesResponse;
import io.swagger.client.model.CoinbaseFinancingSubmitMultipleLocatesRequest;
import io.swagger.client.model.CoinbaseFinancingSubmitMultipleLocatesResponse;
import io.swagger.client.model.EngPrimeBillingApiGetAUCFeeTiersResponse;
import io.swagger.client.model.EngPrimePolicyApiListPoliciesResponse;
import io.swagger.client.model.GrpcGatewayRuntimeError;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.StreamResultOfCoinbaseBrokerageProxyTradingApiGetCandlesStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseBrokerageProxyTradingApiGetDepthStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseBrokerageProxyTradingApiGetLadderStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseBrokerageProxyTradingApiGetMarketTradesStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseBrokerageProxyTradingApiGetOrderSimulationResponse;
import io.swagger.client.model.StreamResultOfCoinbaseBrokerageProxyTradingApiGetProductStatsStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseBrokerageProxyTradingApiOrderStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivitiesStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivityStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivitiesStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2StreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetProductsStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetUserInAppNotificationsStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetVehicleCurrenciesStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetVehicleSpotPricesStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingProductStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiVehicleFinancingStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponseV2;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PrimeApiApi
 */
@Ignore
public class PrimeApiApiTest {

    private final PrimeApiApi api = new PrimeApiApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIBulkUserRolesUpdateTest() throws ApiException {
        String userId = null;
        CoinbaseEngPrimeApiApiBulkUserRolesUpdateRequest body = null;
        CoinbaseEngPrimeApiApiBulkUserRolesUpdateResponse response = api.primeAPIBulkUserRolesUpdate(userId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPICancelTransactionTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiCancelTransactionRequest body = null;
        CoinbaseEngPrimeApiApiCancelTransactionResponse response = api.primeAPICancelTransaction(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPICreateOrUpdatePreferenceTest() throws ApiException {
        String vehicleId = null;
        CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceRequest body = null;
        CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceResponse response = api.primeAPICreateOrUpdatePreference(vehicleId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPICreateOrderFillsDocumentTest() throws ApiException {
        String portfolioId = null;
        String orderId = null;
        CoinbaseEngPrimeApiApiCreateOrderFillsDocumentRequest body = null;
        CoinbaseEngPrimeApiApiCreateOrderFillsDocumentResponse response = api.primeAPICreateOrderFillsDocument(portfolioId, orderId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPICreateTestTransactionTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiCreateTestTransactionRequest body = null;
        CoinbaseEngPrimeApiApiCreateTestTransactionResponse response = api.primeAPICreateTestTransaction(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPICreateTransactionTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiCreateTransactionRequest body = null;
        CoinbaseEngPrimeApiApiNewConsensusActivityResponse response = api.primeAPICreateTransaction(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPICreateTransactionV2Test() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiCreateTransactionV2Request body = null;
        CoinbaseEngPrimeApiApiNewConsensusActivityResponse response = api.primeAPICreateTransactionV2(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPICreateVideoUploadTest() throws ApiException {
        CoinbaseCustodyApiCreateVideoUploadRequest body = null;
        CoinbaseCustodyApiVideoUpload response = api.primeAPICreateVideoUpload(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPICreateWalletTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiCreateWalletRequest body = null;
        CoinbaseEngPrimeApiApiCreateWalletResponse response = api.primeAPICreateWallet(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPICreateWalletV2Test() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiCreateWalletV2Request body = null;
        CoinbaseEngPrimeApiApiNewConsensusActivityResponse response = api.primeAPICreateWalletV2(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPICreateWeb3ActionTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiCreateWeb3ActionRequest body = null;
        CoinbaseEngPrimeApiApiNewConsensusActivityResponse response = api.primeAPICreateWeb3Action(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIDeleteAddressBookEntryTest() throws ApiException {
        String portfolioId = null;
        String addressEntryId = null;
        CoinbaseEngPrimeApiApiDeleteAddressBookEntryResponse response = api.primeAPIDeleteAddressBookEntry(portfolioId, addressEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIDeletePaymentMethodTest() throws ApiException {
        String vehicleId = null;
        String paymentMethodId = null;
        CoinbaseEngPrimeApiApiDeletePaymentMethodRequest body = null;
        CoinbaseEngPrimeApiApiDeletePaymentMethodResponse response = api.primeAPIDeletePaymentMethod(vehicleId, paymentMethodId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIDismissNotificationTest() throws ApiException {
        CoinbaseCustodyApiDismissNotificationRequest body = null;
        CoinbaseCustodyApiDismissNotificationResponse response = api.primeAPIDismissNotification(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIDownloadActivityReportTest() throws ApiException {
        String portfolioId = null;
        String organizationId = null;
        List<String> categories = null;
        List<String> currencies = null;
        List<String> types = null;
        List<String> secondaryTypes = null;
        List<String> statuses = null;
        String startDate = null;
        String endDate = null;
        String search = null;
        CoinbaseEngPrimeApiApiDownloadActivityReportResponse response = api.primeAPIDownloadActivityReport(portfolioId, organizationId, categories, currencies, types, secondaryTypes, statuses, startDate, endDate, search);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIEnrollInStablecoinRewardsTest() throws ApiException {
        String vehicleId = null;
        String currency = null;
        CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsRequest body = null;
        CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsResponse response = api.primeAPIEnrollInStablecoinRewards(vehicleId, currency, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIFetchInviteeAccessByEmailTest() throws ApiException {
        CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailRequest body = null;
        CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailResponse response = api.primeAPIFetchInviteeAccessByEmail(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIFinishVideoUploadTest() throws ApiException {
        String uploadId = null;
        CoinbaseCustodyApiFinishVideoUploadRequest body = null;
        CoinbaseCustodyApiVideoUpload response = api.primeAPIFinishVideoUpload(uploadId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGenerateDALReportTest() throws ApiException {
        String vehicleId = null;
        String dateStart = null;
        String dateEnd = null;
        CoinbaseEngPrimeApiApiGenerateDALReportResponse response = api.primeAPIGenerateDALReport(vehicleId, dateStart, dateEnd);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGenerateFinancingReportTest() throws ApiException {
        String vehicleId = null;
        String startUnix = null;
        String endUnix = null;
        List<String> portfolioIds = null;
        List<String> reportTypes = null;
        CoinbaseEngPrimeApiApiGenerateFinancingReportResponse response = api.primeAPIGenerateFinancingReport(vehicleId, startUnix, endUnix, portfolioIds, reportTypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGenerateReportingCenterDocumentTest() throws ApiException {
        String reportType = null;
        String stakingReportGenerationArgsPortfolioId = null;
        String stakingReportGenerationArgsStartUnix = null;
        String stakingReportGenerationArgsEndUnix = null;
        CoinbaseEngPrimeApiApiGenerateReportingCenterDocumentResponse response = api.primeAPIGenerateReportingCenterDocument(reportType, stakingReportGenerationArgsPortfolioId, stakingReportGenerationArgsStartUnix, stakingReportGenerationArgsEndUnix);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGenerateStatementTest() throws ApiException {
        String vehicleId = null;
        String portfolioId = null;
        String startDate = null;
        String endDate = null;
        String startDateRfc3339 = null;
        String endDateRfc3339 = null;
        List<String> portfolioIds = null;
        String statementType = null;
        CoinbaseEngPrimeApiApiGenerateStatementResponse response = api.primeAPIGenerateStatement(vehicleId, portfolioId, startDate, endDate, startDateRfc3339, endDateRfc3339, portfolioIds, statementType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGenerateWeb3ReportTest() throws ApiException {
        String portfolioId = null;
        String startUnix = null;
        String endUnix = null;
        CoinbaseEngPrimeApiApiGenerateWeb3ReportResponse response = api.primeAPIGenerateWeb3Report(portfolioId, startUnix, endUnix);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetAPIKeyTest() throws ApiException {
        String portfolioId = null;
        String accessKey = null;
        CoinbaseEngPrimeApiApiGetAPIKeyResponse response = api.primeAPIGetAPIKey(portfolioId, accessKey);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetAPIKeyCountTest() throws ApiException {
        String portfolioId = null;
        String createdByUserId = null;
        List<String> states = null;
        CoinbaseEngPrimeApiApiGetAPIKeyCountResponse response = api.primeAPIGetAPIKeyCount(portfolioId, createdByUserId, states);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetAPIKeyCountV2Test() throws ApiException {
        String groupId = null;
        String createdByUserId = null;
        List<String> states = null;
        CoinbaseEngPrimeApiApiGetAPIKeyCountResponse response = api.primeAPIGetAPIKeyCountV2(groupId, createdByUserId, states);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetAPIKeyV2Test() throws ApiException {
        String groupId = null;
        String accessKey = null;
        CoinbaseEngPrimeApiApiGetAPIKeyResponse response = api.primeAPIGetAPIKeyV2(groupId, accessKey);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetAPIKeysTest() throws ApiException {
        String portfolioId = null;
        String searchText = null;
        String cursor = null;
        Integer limit = null;
        List<String> states = null;
        CoinbaseEngPrimeApiApiListAPIKeysResponse response = api.primeAPIGetAPIKeys(portfolioId, searchText, cursor, limit, states);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetAPIKeysV2Test() throws ApiException {
        String groupId = null;
        String searchText = null;
        String cursor = null;
        Integer limit = null;
        List<String> states = null;
        String type = null;
        CoinbaseEngPrimeApiApiListAPIKeysResponse response = api.primeAPIGetAPIKeysV2(groupId, searchText, cursor, limit, states, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetAUCFeeTiersTest() throws ApiException {
        String portfolioId = null;
        EngPrimeBillingApiGetAUCFeeTiersResponse response = api.primeAPIGetAUCFeeTiers(portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetActivityFiltersTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiGetActivityFiltersResponse response = api.primeAPIGetActivityFilters(portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetAddressBookTest() throws ApiException {
        String portfolioId = null;
        String currencySymbol = null;
        String search = null;
        String cursor = null;
        Integer limit = null;
        String sortDirection = null;
        String type = null;
        CoinbaseEngPrimeApiApiAddressBookResponse response = api.primeAPIGetAddressBook(portfolioId, currencySymbol, search, cursor, limit, sortDirection, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetAllLocateByPortfolioTest() throws ApiException {
        String entityId = null;
        String portfolioId = null;
        String search = null;
        String sortKey = null;
        List<String> filtersStatuses = null;
        String filtersStartConversionDate = null;
        String filtersEndConversionDate = null;
        Long paginationLimit = null;
        String paginationCursor = null;
        String paginationDirection = null;
        CoinbaseFinancingGetAllLocatesByPortfolioResponse response = api.primeAPIGetAllLocateByPortfolio(entityId, portfolioId, search, sortKey, filtersStatuses, filtersStartConversionDate, filtersEndConversionDate, paginationLimit, paginationCursor, paginationDirection);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetAllocationByOrderTest() throws ApiException {
        String portfolioId = null;
        String orderId = null;
        CoinbaseEngPrimeApiApiGetAllocationByOrderResponse response = api.primeAPIGetAllocationByOrder(portfolioId, orderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetAllocationLegTest() throws ApiException {
        String portfolioId = null;
        String allocationLegId = null;
        CoinbaseEngPrimeApiApiGetAllocationLegResponse response = api.primeAPIGetAllocationLeg(portfolioId, allocationLegId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetAllocationsTest() throws ApiException {
        String portfolioId = null;
        List<String> allocationIds = null;
        CoinbaseEngPrimeApiApiGetAllocationsResponse response = api.primeAPIGetAllocations(portfolioId, allocationIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetBalancesTest() throws ApiException {
        String balanceOwnerReferenceId = null;
        String balanceOwnerPrimeWallet = null;
        List<String> visibility = null;
        CoinbaseEngPrimeApiApiGetBalancesResponse response = api.primeAPIGetBalances(balanceOwnerReferenceId, balanceOwnerPrimeWallet, visibility);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetBillingEmailListTest() throws ApiException {
        String vehicleId = null;
        CoinbaseEngPrimeApiApiGetBillingEmailListResponse response = api.primeAPIGetBillingEmailList(vehicleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetBillingPreferenceTest() throws ApiException {
        String vehicleId = null;
        CoinbaseEngPrimeApiApiGetBillingPreferenceResponse response = api.primeAPIGetBillingPreference(vehicleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetCandlesTest() throws ApiException {
        String productId = null;
        String start = null;
        String end = null;
        String granularity = null;
        String geolocationLocality = null;
        String geolocationCountry = null;
        String userId = null;
        CoinbaseBrokerageProxyTradingApiCandles response = api.primeAPIGetCandles(productId, start, end, granularity, geolocationLocality, geolocationCountry, userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetCandlesStreamTest() throws ApiException {
        String productId = null;
        String granularity = null;
        Integer limit = null;
        String updateInterval = null;
        String geolocationLocality = null;
        String geolocationCountry = null;
        String userId = null;
        StreamResultOfCoinbaseBrokerageProxyTradingApiGetCandlesStreamResponse response = api.primeAPIGetCandlesStream(productId, granularity, limit, updateInterval, geolocationLocality, geolocationCountry, userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetConfigTest() throws ApiException {
        String name = null;
        CoinbaseEngPrimeApiApiConfig response = api.primeAPIGetConfig(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetConversionSummariesTest() throws ApiException {
        String vehicleId = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        CoinbaseFinancingGetConversionSummariesV2Response response = api.primeAPIGetConversionSummaries(vehicleId, startDate, endDate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetConversionSummariesV2Test() throws ApiException {
        String vehicleId = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        CoinbaseEngPrimeApiApiGetConversionSummariesV2Response response = api.primeAPIGetConversionSummariesV2(vehicleId, startDate, endDate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetCounterpartyTest() throws ApiException {
        String portfolioId = null;
        Boolean qcCounterparty = null;
        CoinbaseEngPrimeApiApiGetCounterpartyResponse response = api.primeAPIGetCounterparty(portfolioId, qcCounterparty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetCurrenciesInfoTest() throws ApiException {
        String queryLevel = null;
        List<String> queryIds = null;
        CoinbaseEngPrimeApiApiGetCurrenciesInfoResponse response = api.primeAPIGetCurrenciesInfo(queryLevel, queryIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetCurrentLocatesTest() throws ApiException {
        String entityId = null;
        String portfolioId = null;
        List<String> locateIds = null;
        String conversionDate = null;
        CoinbaseFinancingGetCurrentLocatesResponse response = api.primeAPIGetCurrentLocates(entityId, portfolioId, locateIds, conversionDate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetDalCollateralSnapshotsTest() throws ApiException {
        String entityId = null;
        CoinbaseFinancingGetDalCollateralSnapshotsResponse response = api.primeAPIGetDalCollateralSnapshots(entityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetDepositInstructionsTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        String transferMethodType = null;
        CoinbaseEngPrimeApiApiGetDepositInstructionsResponse response = api.primeAPIGetDepositInstructions(portfolioId, walletId, transferMethodType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetDepthStreamTest() throws ApiException {
        String productId = null;
        String updateInterval = null;
        String geolocationLocality = null;
        String geolocationCountry = null;
        StreamResultOfCoinbaseBrokerageProxyTradingApiGetDepthStreamResponse response = api.primeAPIGetDepthStream(productId, updateInterval, geolocationLocality, geolocationCountry);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetDeviceGroupTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiGetDeviceGroupResponse response = api.primeAPIGetDeviceGroup(portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetDocumentTest() throws ApiException {
        String vehicleId = null;
        String documentKey = null;
        CoinbaseEngPrimeApiApiGetDocumentResponse response = api.primeAPIGetDocument(vehicleId, documentKey);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetDocumentDownloadLinksTest() throws ApiException {
        String documentId = null;
        String portfolioId = null;
        CoinbaseEngPrimeApiApiGetDocumentDownloadLinksResponse response = api.primeAPIGetDocumentDownloadLinks(documentId, portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetDocumentSignatureStatusTest() throws ApiException {
        String vehicleId = null;
        String documentKey = null;
        CoinbaseEngPrimeApiApiGetDocumentSignatureStatusResponse response = api.primeAPIGetDocumentSignatureStatus(vehicleId, documentKey);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetEntitySettingsTest() throws ApiException {
        String entityId = null;
        List<CoinbaseCustodyApiSettings> response = api.primeAPIGetEntitySettings(entityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetEvaluationResultTest() throws ApiException {
        String portfolioId = null;
        String activityId = null;
        String transactionId = null;
        String hierarchyHierarchyType = null;
        String hierarchyHierarchyId = null;
        CoinbaseEngPrimeApiApiGetEvaluationResultResponse response = api.primeAPIGetEvaluationResult(portfolioId, activityId, transactionId, hierarchyHierarchyType, hierarchyHierarchyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetExchangeRateTest() throws ApiException {
        String portfolioId = null;
        String sourceCurrencySymbol = null;
        String destinationCurrencySymbol = null;
        CoinbaseEngPrimeApiApiGetExchangeRateResponse response = api.primeAPIGetExchangeRate(portfolioId, sourceCurrencySymbol, destinationCurrencySymbol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetFidoRegistrationTest() throws ApiException {
        String userId = null;
        CoinbaseEngPrimeApiApiGetFidoRegistrationResponse response = api.primeAPIGetFidoRegistration(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetFinancingProductPermisionsTest() throws ApiException {
        String vehicleId = null;
        CoinbaseEngPrimeApiApiGetFinancingProductPermisionsResponse response = api.primeAPIGetFinancingProductPermisions(vehicleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetGovernanceStatusTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        CoinbaseEngPrimeApiApiGetGovernanceStatusResponse response = api.primeAPIGetGovernanceStatus(portfolioId, walletId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetGovernanceTopicTest() throws ApiException {
        String vehicleId = null;
        String currencySymbol = null;
        String topicId = null;
        CoinbaseCustodyApiGovernanceTopic response = api.primeAPIGetGovernanceTopic(vehicleId, currencySymbol, topicId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetGovernanceTopicsTest() throws ApiException {
        String vehicleId = null;
        String currencySymbol = null;
        String cursor = null;
        Integer limit = null;
        String sortDirection = null;
        String search = null;
        CoinbaseEngPrimeApiApiGetGovernanceTopicsResponse response = api.primeAPIGetGovernanceTopics(vehicleId, currencySymbol, cursor, limit, sortDirection, search);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetGovernanceVotesTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        String cursor = null;
        Integer limit = null;
        String sortDirection = null;
        CoinbaseEngPrimeApiApiGetGovernanceVotesResponse response = api.primeAPIGetGovernanceVotes(portfolioId, walletId, cursor, limit, sortDirection);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetGovernanceVotingWeightsTest() throws ApiException {
        String walletId = null;
        List<String> topicIds = null;
        String portfolioId = null;
        CoinbaseCustodyApiGetVotingWeightsResponse response = api.primeAPIGetGovernanceVotingWeights(walletId, topicIds, portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetIVPortfolioBalancesTest() throws ApiException {
        String vehicleId = null;
        String currencySymbol = null;
        CoinbaseEngPrimeApiApiGetIVPortfolioBalancesResponse response = api.primeAPIGetIVPortfolioBalances(vehicleId, currencySymbol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetIVRestrictionsTest() throws ApiException {
        String vehicleId = null;
        String currencySymbol = null;
        CoinbaseEngPrimeApiApiGetIVRestrictionsResponse response = api.primeAPIGetIVRestrictions(vehicleId, currencySymbol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetIntrospectTest() throws ApiException {
        CoinbaseEngPrimeApiApiGetIntrospectResponse response = api.primeAPIGetIntrospect();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetInvestmentVehicleTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiGetInvestmentVehicleResponse response = api.primeAPIGetInvestmentVehicle(portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetInvestmentVehiclePortfoliosTest() throws ApiException {
        String userId = null;
        String portfolioId = null;
        String vehicleId = null;
        Boolean includeRoles = null;
        Integer paginationLimit = null;
        Integer paginationOffset = null;
        CoinbaseEngPrimeApiApiGetInvestmentVehiclePortfoliosResponse response = api.primeAPIGetInvestmentVehiclePortfolios(userId, portfolioId, vehicleId, includeRoles, paginationLimit, paginationOffset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetInvoiceDownloadLinkTest() throws ApiException {
        String vehicleId = null;
        String uuid = null;
        CoinbaseEngPrimeApiApiGetInvoiceDownloadLinkResponse response = api.primeAPIGetInvoiceDownloadLink(vehicleId, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetInvoicesTest() throws ApiException {
        String vehicleId = null;
        String invoiceNumber = null;
        Integer billingYear = null;
        List<CoinbaseCustodyApiInvoice> response = api.primeAPIGetInvoices(vehicleId, invoiceNumber, billingYear);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetInvoicesRemainingBalanceTest() throws ApiException {
        String vehicleId = null;
        CoinbaseEngPrimeApiApiGetInvoicesRemainingBalanceResponse response = api.primeAPIGetInvoicesRemainingBalance(vehicleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetIvDomicileCategoryTest() throws ApiException {
        String vehicleId = null;
        CoinbaseEngPrimeApiApiGetIvDomicileCategoryRequest body = null;
        CoinbaseEngPrimeApiApiGetIvDomicileCategoryResponse response = api.primeAPIGetIvDomicileCategory(vehicleId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetLadderStreamTest() throws ApiException {
        String productId = null;
        String updateInterval = null;
        String aggregation = null;
        Boolean feeAdjust = null;
        String orderAmount = null;
        String geolocationLocality = null;
        String geolocationCountry = null;
        StreamResultOfCoinbaseBrokerageProxyTradingApiGetLadderStreamResponse response = api.primeAPIGetLadderStream(productId, updateInterval, aggregation, feeAdjust, orderAmount, geolocationLocality, geolocationCountry);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetLatestTestTransactionTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiGetLatestTestTransactionRequest body = null;
        CoinbaseEngPrimeApiApiGetLatestTestTransactionResponse response = api.primeAPIGetLatestTestTransaction(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetLlCRolloutTest() throws ApiException {
        CoinbaseEngPrimeApiApiLlcRolloutResponse response = api.primeAPIGetLlCRollout();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetLocateAssetsTest() throws ApiException {
        String entityId = null;
        OffsetDateTime date = null;
        CoinbaseFinancingGetLocateAssetsResponse response = api.primeAPIGetLocateAssets(entityId, date);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetMarketTradesStreamTest() throws ApiException {
        String productId = null;
        Integer limit = null;
        String updateInterval = null;
        List<String> venueFilters = null;
        String sideFilter = null;
        String orderByField = null;
        String sortDirection = null;
        StreamResultOfCoinbaseBrokerageProxyTradingApiGetMarketTradesStreamResponse response = api.primeAPIGetMarketTradesStream(productId, limit, updateInterval, venueFilters, sideFilter, orderByField, sortDirection);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetNotificationPreferencesForChannelTest() throws ApiException {
        String userId = null;
        String channel = null;
        CoinbaseEngPrimeApiApiGetUserPreferencesForChannelResponse response = api.primeAPIGetNotificationPreferencesForChannel(userId, channel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetNotificationsTest() throws ApiException {
        String organizationId = null;
        String type = null;
        CoinbaseCustodyApiGetNotificationsResponse response = api.primeAPIGetNotifications(organizationId, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetOrderTest() throws ApiException {
        String orderId = null;
        String portfolioId = null;
        CoinbaseBrokerageProxyCommonOrder response = api.primeAPIGetOrder(orderId, portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetOrderSimulationStreamTest() throws ApiException {
        String productId = null;
        String updateInterval = null;
        String orderAmount = null;
        Boolean feeAdjust = null;
        StreamResultOfCoinbaseBrokerageProxyTradingApiGetOrderSimulationResponse response = api.primeAPIGetOrderSimulationStream(productId, updateInterval, orderAmount, feeAdjust);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetOrdersStreamTest() throws ApiException {
        String updateInterval = null;
        String productId = null;
        String status = null;
        String userId = null;
        String portfolioId = null;
        String productType = null;
        List<String> orderPlacementSources = null;
        String riskManagementType = null;
        String contractExpiryType = null;
        Boolean orderPlacementFilterApplyNotFilter = null;
        List<String> orderPlacementFilterOrderPlacementSources = null;
        StreamResultOfCoinbaseBrokerageProxyTradingApiOrderStreamResponse response = api.primeAPIGetOrdersStream(updateInterval, productId, status, userId, portfolioId, productType, orderPlacementSources, riskManagementType, contractExpiryType, orderPlacementFilterApplyNotFilter, orderPlacementFilterOrderPlacementSources);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetOrganizationTest() throws ApiException {
        String vehicleId = null;
        CoinbaseEngPrimeApiApiGetOrganizationResponse response = api.primeAPIGetOrganization(vehicleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPendingConsensusTest() throws ApiException {
        String userId = null;
        String entityId = null;
        String referenceType = null;
        CoinbaseEngPrimeApiApiGetPendingConsensusResponse response = api.primeAPIGetPendingConsensus(userId, entityId, referenceType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiPortfolio response = api.primeAPIGetPortfolio(portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioActivitiesTest() throws ApiException {
        String portfolioId = null;
        List<String> states = null;
        List<String> currencies = null;
        String type = null;
        String startDate = null;
        String endDate = null;
        String search = null;
        String cursor = null;
        Integer limit = null;
        String sortDirection = null;
        CoinbaseEngPrimeApiApiGetPortfolioActivitiesResponse response = api.primeAPIGetPortfolioActivities(portfolioId, states, currencies, type, startDate, endDate, search, cursor, limit, sortDirection);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioActivitiesStreamTest() throws ApiException {
        String portfolioId = null;
        List<String> states = null;
        List<String> currencies = null;
        String type = null;
        String startDate = null;
        String endDate = null;
        String search = null;
        String cursor = null;
        Integer limit = null;
        String sortDirection = null;
        StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivitiesStreamResponse response = api.primeAPIGetPortfolioActivitiesStream(portfolioId, states, currencies, type, startDate, endDate, search, cursor, limit, sortDirection);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioActivityTest() throws ApiException {
        String portfolioId = null;
        String activityId = null;
        CoinbaseCustodyApiActivity response = api.primeAPIGetPortfolioActivity(portfolioId, activityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioActivityStreamTest() throws ApiException {
        String portfolioId = null;
        String activityId = null;
        StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivityStreamResponse response = api.primeAPIGetPortfolioActivityStream(portfolioId, activityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioBalancesTest() throws ApiException {
        String portfolioId = null;
        String currencySymbol = null;
        CoinbaseCustodyApiGetBalanceResponse response = api.primeAPIGetPortfolioBalances(portfolioId, currencySymbol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioBalancesStreamTest() throws ApiException {
        String portfolioId = null;
        String currencySymbol = null;
        StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse response = api.primeAPIGetPortfolioBalancesStream(portfolioId, currencySymbol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioCommissionTest() throws ApiException {
        String portfolioId = null;
        String productId = null;
        CoinbaseEngPrimeApiApiGetPortfolioCommissionResponse response = api.primeAPIGetPortfolioCommission(portfolioId, productId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioConciseUsersTest() throws ApiException {
        String portfolioId = null;
        String cursor = null;
        Integer limit = null;
        String sortDirection = null;
        String search = null;
        List<String> roles = null;
        List<String> secondaryRoles = null;
        CoinbaseEngPrimeApiApiListPortfolioConciseUsersResponse response = api.primeAPIGetPortfolioConciseUsers(portfolioId, cursor, limit, sortDirection, search, roles, secondaryRoles);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioFeeInfoTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeFeesApiGetFeeInfoResponse response = api.primeAPIGetPortfolioFeeInfo(portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioFinancingProductPermissionsTest() throws ApiException {
        String portfolioId = null;
        List<String> portfolioIds = null;
        CoinbaseFinancingPortfolioOverviewResponse response = api.primeAPIGetPortfolioFinancingProductPermissions(portfolioId, portfolioIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioFinancingProductStreamTest() throws ApiException {
        String portfolioId = null;
        String productId = null;
        String updateInterval = null;
        StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingProductStreamResponse response = api.primeAPIGetPortfolioFinancingProductStream(portfolioId, productId, updateInterval);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioFinancingStreamTest() throws ApiException {
        String portfolioId = null;
        String updateInterval = null;
        StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingStreamResponse response = api.primeAPIGetPortfolioFinancingStream(portfolioId, updateInterval);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioInvitationsTest() throws ApiException {
        String portfolioId = null;
        List<String> states = null;
        CoinbaseEngPrimeApiApiGetInvitationsResponse response = api.primeAPIGetPortfolioInvitations(portfolioId, states);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioSettingsTest() throws ApiException {
        String portfolioId = null;
        List<CoinbaseCustodyApiSettings> response = api.primeAPIGetPortfolioSettings(portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioUsersTest() throws ApiException {
        String portfolioId = null;
        String cursor = null;
        Integer limit = null;
        String sortDirection = null;
        String search = null;
        String permission = null;
        List<String> roles = null;
        List<String> secondaryRoles = null;
        Boolean restrictEntityUsers = null;
        CoinbaseEngPrimeApiApiListPortfolioUsersResponse response = api.primeAPIGetPortfolioUsers(portfolioId, cursor, limit, sortDirection, search, permission, roles, secondaryRoles, restrictEntityUsers);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioWalletsBalancesTest() throws ApiException {
        String portfolioId = null;
        String currencySymbol = null;
        CoinbaseCustodyApiGetBalanceResponse response = api.primeAPIGetPortfolioWalletsBalances(portfolioId, currencySymbol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfolioWalletsBalancesStreamTest() throws ApiException {
        String portfolioId = null;
        String currencySymbol = null;
        StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse response = api.primeAPIGetPortfolioWalletsBalancesStream(portfolioId, currencySymbol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPortfoliosFinancingProductPermissionsTest() throws ApiException {
        String vehicleId = null;
        List<String> portfolioIds = null;
        CoinbaseFinancingPortfolioOverviewResponse response = api.primeAPIGetPortfoliosFinancingProductPermissions(vehicleId, portfolioIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPostTradeCreditTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiGetPostTradeCreditResponse response = api.primeAPIGetPostTradeCredit(portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPreferenceTest() throws ApiException {
        String vehicleId = null;
        CoinbaseEngPrimeApiApiGetPreferenceResponse response = api.primeAPIGetPreference(vehicleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPrimeActivitiesTest() throws ApiException {
        String portfolioId = null;
        String organizationId = null;
        List<String> statuses = null;
        List<String> currencies = null;
        List<String> types = null;
        List<String> secondaryTypes = null;
        String startDate = null;
        String endDate = null;
        String search = null;
        String cursor = null;
        Integer limit = null;
        List<String> categories = null;
        Boolean processingInFront = null;
        String statusUpdatedAtStart = null;
        String statusUpdatedAtEnd = null;
        String sortDirection = null;
        CoinbaseEngPrimeApiApiGetPrimeActivitiesResponse response = api.primeAPIGetPrimeActivities(portfolioId, organizationId, statuses, currencies, types, secondaryTypes, startDate, endDate, search, cursor, limit, categories, processingInFront, statusUpdatedAtStart, statusUpdatedAtEnd, sortDirection);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPrimeActivitiesStreamTest() throws ApiException {
        String portfolioId = null;
        String organizationId = null;
        List<String> statuses = null;
        List<String> currencies = null;
        List<String> types = null;
        List<String> secondaryTypes = null;
        String startDate = null;
        String endDate = null;
        String search = null;
        String cursor = null;
        Integer limit = null;
        List<String> categories = null;
        Boolean processingInFront = null;
        String sortDirection = null;
        StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivitiesStreamResponse response = api.primeAPIGetPrimeActivitiesStream(portfolioId, organizationId, statuses, currencies, types, secondaryTypes, startDate, endDate, search, cursor, limit, categories, processingInFront, sortDirection);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPrimeActivityConsensusAuditTest() throws ApiException {
        String portfolioId = null;
        String activityId = null;
        CoinbaseEngPrimeApiApiActivityConsensusAuditResult response = api.primeAPIGetPrimeActivityConsensusAudit(portfolioId, activityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPrimeActivityDetailsTest() throws ApiException {
        String portfolioId = null;
        String activityId = null;
        CoinbaseEngPrimeApiApiGetPrimeActivityDetailsResponse response = api.primeAPIGetPrimeActivityDetails(portfolioId, activityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPrimeActivityDetailsStreamTest() throws ApiException {
        String portfolioId = null;
        String activityId = null;
        StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsStreamResponse response = api.primeAPIGetPrimeActivityDetailsStream(portfolioId, activityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPrimeActivityDetailsStreamV2Test() throws ApiException {
        String portfolioId = null;
        String activityId = null;
        StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2StreamResponse response = api.primeAPIGetPrimeActivityDetailsStreamV2(portfolioId, activityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPrimeActivityDetailsV2Test() throws ApiException {
        String portfolioId = null;
        String activityId = null;
        CoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2Response response = api.primeAPIGetPrimeActivityDetailsV2(portfolioId, activityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPrimeActivityFiltersTest() throws ApiException {
        String portfolioId = null;
        List<String> categories = null;
        List<String> statuses = null;
        CoinbaseEngPrimeApiApiGetPrimeActivityFiltersResponse response = api.primeAPIGetPrimeActivityFilters(portfolioId, categories, statuses);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetPrimeInvoicesTest() throws ApiException {
        String vehicleId = null;
        String invoiceNumber = null;
        Integer billingYear = null;
        List<CoinbaseEngPrimeApiApiInvoice> response = api.primeAPIGetPrimeInvoices(vehicleId, invoiceNumber, billingYear);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetProductStatsTest() throws ApiException {
        String productId = null;
        String geolocationLocality = null;
        String geolocationCountry = null;
        CoinbaseBrokerageProxyTradingApiProductStats response = api.primeAPIGetProductStats(productId, geolocationLocality, geolocationCountry);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetProductStatsStreamTest() throws ApiException {
        String productId = null;
        String updateInterval = null;
        String geolocationLocality = null;
        String geolocationCountry = null;
        StreamResultOfCoinbaseBrokerageProxyTradingApiGetProductStatsStreamResponse response = api.primeAPIGetProductStatsStream(productId, updateInterval, geolocationLocality, geolocationCountry);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetProductsTest() throws ApiException {
        Long limit = null;
        List<String> productId = null;
        String portfolioId = null;
        CoinbaseEngPrimeApiApiProducts response = api.primeAPIGetProducts(limit, productId, portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetProductsStreamTest() throws ApiException {
        String updateInterval = null;
        Long limit = null;
        List<String> productId = null;
        String portfolioId = null;
        StreamResultOfCoinbaseEngPrimeApiApiGetProductsStreamResponse response = api.primeAPIGetProductsStream(updateInterval, limit, productId, portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetRateCardTest() throws ApiException {
        String currency = null;
        CoinbaseEngPrimeApiApiGetRateCardResponse response = api.primeAPIGetRateCard(currency);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetReportingCenterDownloadLinkTest() throws ApiException {
        String portfolioId = null;
        String s3Bucket = null;
        String s3Key = null;
        String type = null;
        CoinbaseEngPrimeApiApiGetReportingCenterDownloadLinkResponse response = api.primeAPIGetReportingCenterDownloadLink(portfolioId, s3Bucket, s3Key, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetReportingCenterFiltersTest() throws ApiException {
        String vehicleId = null;
        CoinbaseEngPrimeApiApiGetReportingCenterFiltersResponse response = api.primeAPIGetReportingCenterFilters(vehicleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetReportingDocumentByOrderIdTest() throws ApiException {
        String portfolioId = null;
        String orderId = null;
        CoinbaseEngPrimeReportingApiDocument response = api.primeAPIGetReportingDocumentByOrderId(portfolioId, orderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetReverseAllocationTest() throws ApiException {
        String portfolioId = null;
        String allocationId = null;
        CoinbaseEngPrimeApiApiGetReverseAllocationResponse response = api.primeAPIGetReverseAllocation(portfolioId, allocationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetSignedDocumentTest() throws ApiException {
        String vehicleId = null;
        String documentKey = null;
        CoinbaseEngPrimeApiApiGetSignedDocumentResponse response = api.primeAPIGetSignedDocument(vehicleId, documentKey);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetStablecoinRewardsEarningsTest() throws ApiException {
        String vehicleId = null;
        String portfolioId = null;
        String currency = null;
        CoinbaseEngPrimeApiApiGetStablecoinRewardsEarningsResponse response = api.primeAPIGetStablecoinRewardsEarnings(vehicleId, portfolioId, currency);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetStablecoinRewardsEnrollmentTest() throws ApiException {
        String vehicleId = null;
        String currency = null;
        CoinbaseEngPrimeApiApiGetStablecoinRewardsEnrollmentResponse response = api.primeAPIGetStablecoinRewardsEnrollment(vehicleId, currency);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetStakeTimeEstimationTest() throws ApiException {
        String portfolioId = null;
        String currencySymbol = null;
        CoinbaseCustodyApiGetStakeTimeEstimationResponse response = api.primeAPIGetStakeTimeEstimation(portfolioId, currencySymbol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetStakingActivityDetailsTest() throws ApiException {
        String portfolioId = null;
        String activityId = null;
        CoinbaseCustodyApiGetStakingActivityDetailsResponse response = api.primeAPIGetStakingActivityDetails(portfolioId, activityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetStatementTest() throws ApiException {
        String statementId = null;
        String portfolioId = null;
        List<String> portfolioIds = null;
        CoinbaseEngPrimeApiApiGetStatementResponse response = api.primeAPIGetStatement(statementId, portfolioId, portfolioIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetStatementsTest() throws ApiException {
        String portfolioId = null;
        Integer year = null;
        List<CoinbaseEngPrimeReportingApiStatement> response = api.primeAPIGetStatements(portfolioId, year);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetSystemStatusTest() throws ApiException {
        CoinbaseEngPrimeApiApiSystemStatusResponse response = api.primeAPIGetSystemStatus();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetTeamMemberDetailsTest() throws ApiException {
        String entityId = null;
        String userId = null;
        String email = null;
        CoinbaseEngPrimeApiApiGetTeamMemberDetailResponse response = api.primeAPIGetTeamMemberDetails(entityId, userId, email);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetTeamMembersTest() throws ApiException {
        String queryLevel = null;
        List<String> queryIds = null;
        String cursor = null;
        Integer limit = null;
        String sortDirection = null;
        String search = null;
        String permission = null;
        List<String> roles = null;
        List<String> secondaryRoles = null;
        String accessTypeFilter = null;
        CoinbaseEngPrimeApiApiGetTeamMembersResponse response = api.primeAPIGetTeamMembers(queryLevel, queryIds, cursor, limit, sortDirection, search, permission, roles, secondaryRoles, accessTypeFilter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetTradeReportGraphDataTest() throws ApiException {
        String orderId = null;
        String portfolioId = null;
        String intervalSize = null;
        CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse response = api.primeAPIGetTradeReportGraphData(orderId, portfolioId, intervalSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetTradeReportOrderDetailsTest() throws ApiException {
        String orderId = null;
        String portfolioId = null;
        CoinbaseBrokerageProxyTradingApiTradeReportOrder response = api.primeAPIGetTradeReportOrderDetails(orderId, portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetTradeReportOrderDetailsAndGraphDataTest() throws ApiException {
        String orderId = null;
        String portfolioId = null;
        CoinbaseBrokerageProxyTradingApiGetTradeReportOrderDetailsAndGraphDataResponse response = api.primeAPIGetTradeReportOrderDetailsAndGraphData(orderId, portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetTradeReportOrderFillsTest() throws ApiException {
        String orderId = null;
        String portfolioId = null;
        Long limit = null;
        String beforeTradeId = null;
        String afterTradeId = null;
        String cursor = null;
        CoinbaseBrokerageProxyTradingApiGetTradeReportOrderFillsResponse response = api.primeAPIGetTradeReportOrderFills(orderId, portfolioId, limit, beforeTradeId, afterTradeId, cursor);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetTradeReportVenueFillsTest() throws ApiException {
        String orderId = null;
        String portfolioId = null;
        CoinbaseBrokerageProxyTradingApiGetTradeReportVenueFillsResponse response = api.primeAPIGetTradeReportVenueFills(orderId, portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetTransferMethodsTest() throws ApiException {
        String vehicleId = null;
        String currencySymbol = null;
        String transactionType = null;
        CoinbaseEngPrimeApiApiGetTransferMethodsResponse response = api.primeAPIGetTransferMethods(vehicleId, currencySymbol, transactionType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetUnstakeTimeEstimationTest() throws ApiException {
        String portfolioId = null;
        String currencySymbol = null;
        CoinbaseCustodyApiGetUnstakeTimeEstimationResponse response = api.primeAPIGetUnstakeTimeEstimation(portfolioId, currencySymbol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetUserEntityLevelPermissionTest() throws ApiException {
        String entityId = null;
        String permission = null;
        CoinbaseEngPrimeApiApiGetUserEntityLevelPermissionResponse response = api.primeAPIGetUserEntityLevelPermission(entityId, permission);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetUserHierarchyTest() throws ApiException {
        String userId = null;
        List<String> experiences = null;
        CoinbaseEngPrimeApiApiGetUserHierarchyResponse response = api.primeAPIGetUserHierarchy(userId, experiences);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetUserInAppNotificationsTest() throws ApiException {
        Integer limit = null;
        String portfolioFilterPortfolioId = null;
        CoinbaseEngPrimeApiApiGetUserInAppNotificationsResponse response = api.primeAPIGetUserInAppNotifications(limit, portfolioFilterPortfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetUserInAppNotificationsStreamTest() throws ApiException {
        Integer limit = null;
        String portfolioFilterPortfolioId = null;
        StreamResultOfCoinbaseEngPrimeApiApiGetUserInAppNotificationsStreamResponse response = api.primeAPIGetUserInAppNotificationsStream(limit, portfolioFilterPortfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetUserInfoTest() throws ApiException {
        String userId = null;
        String portfolioId = null;
        CoinbaseEngPrimeApiApiGetUserInfoResponse response = api.primeAPIGetUserInfo(userId, portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetUserInvitationsTest() throws ApiException {
        List<String> states = null;
        CoinbaseEngPrimeApiApiGetInvitationsResponse response = api.primeAPIGetUserInvitations(states);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetUserPortfoliosTest() throws ApiException {
        String userId = null;
        Integer paginationLimit = null;
        Integer paginationOffset = null;
        CoinbaseEngPrimeApiApiGetUserPortfoliosResponse response = api.primeAPIGetUserPortfolios(userId, paginationLimit, paginationOffset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetUserPreferencesTest() throws ApiException {
        String userId = null;
        CoinbaseEngPrimeApiApiUserPreferences response = api.primeAPIGetUserPreferences(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetUserRolesTest() throws ApiException {
        String userId = null;
        String portfolioId = null;
        CoinbaseEngPrimeApiApiGetUserRolesResponse response = api.primeAPIGetUserRoles(userId, portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetVehicleBalancesTest() throws ApiException {
        String vehicleId = null;
        String currencySymbol = null;
        CoinbaseCustodyApiGetBalanceResponse response = api.primeAPIGetVehicleBalances(vehicleId, currencySymbol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetVehicleBalancesStreamTest() throws ApiException {
        String vehicleId = null;
        String currencySymbol = null;
        StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse response = api.primeAPIGetVehicleBalancesStream(vehicleId, currencySymbol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetVehicleBillingPermissionTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiGetVehicleBillingPermissionResponse response = api.primeAPIGetVehicleBillingPermission(portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetVehicleCurrenciesTest() throws ApiException {
        String vehicleId = null;
        List<String> currencySymbols = null;
        Boolean onlyBillableCurrencies = null;
        List<CoinbaseCustodyApiCurrency> response = api.primeAPIGetVehicleCurrencies(vehicleId, currencySymbols, onlyBillableCurrencies);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetVehicleCurrenciesStreamTest() throws ApiException {
        String vehicleId = null;
        List<String> currencySymbols = null;
        Boolean onlyBillableCurrencies = null;
        StreamResultOfCoinbaseEngPrimeApiApiGetVehicleCurrenciesStreamResponse response = api.primeAPIGetVehicleCurrenciesStream(vehicleId, currencySymbols, onlyBillableCurrencies);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetVehicleFinancingStreamTest() throws ApiException {
        String vehicleId = null;
        String updateInterval = null;
        StreamResultOfCoinbaseEngPrimeApiApiVehicleFinancingStreamResponse response = api.primeAPIGetVehicleFinancingStream(vehicleId, updateInterval);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetVehiclePortfolioMarginStreamTest() throws ApiException {
        String vehicleId = null;
        String updateInterval = null;
        StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponse response = api.primeAPIGetVehiclePortfolioMarginStream(vehicleId, updateInterval);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetVehiclePortfolioMarginStreamV2Test() throws ApiException {
        String vehicleId = null;
        String updateInterval = null;
        String marginSummaryContext = null;
        StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponseV2 response = api.primeAPIGetVehiclePortfolioMarginStreamV2(vehicleId, updateInterval, marginSummaryContext);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetVehicleSpotPricesTest() throws ApiException {
        String vehicleId = null;
        String fiatCurrencySymbol = null;
        List<String> currencySymbols = null;
        Map<String, CoinbaseEngPrimeApiApiSpotPrice> response = api.primeAPIGetVehicleSpotPrices(vehicleId, fiatCurrencySymbol, currencySymbols);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetVehicleSpotPricesStreamTest() throws ApiException {
        String vehicleId = null;
        String fiatCurrencySymbol = null;
        List<String> currencySymbols = null;
        StreamResultOfCoinbaseEngPrimeApiApiGetVehicleSpotPricesStreamResponse response = api.primeAPIGetVehicleSpotPricesStream(vehicleId, fiatCurrencySymbol, currencySymbols);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetVehicleValidatorsTest() throws ApiException {
        String vehicleId = null;
        String currencySymbol = null;
        String walletId = null;
        List<CoinbaseCustodyApiStakingValidator> response = api.primeAPIGetVehicleValidators(vehicleId, currencySymbol, walletId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetVideoUploadTest() throws ApiException {
        String uploadId = null;
        CoinbaseCustodyApiVideoUpload response = api.primeAPIGetVideoUpload(uploadId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetVideoUploadPermissionsTest() throws ApiException {
        String transactionId = null;
        CoinbaseCustodyApiGetVideoUploadPermissionsResponse response = api.primeAPIGetVideoUploadPermissions(transactionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetWalletTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        CoinbaseEngPrimeApiApiGetWalletResponse response = api.primeAPIGetWallet(portfolioId, walletId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetWalletAssetSettingsTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        CoinbaseEngPrimeApiApiGetWalletAssetSettingsResponse response = api.primeAPIGetWalletAssetSettings(portfolioId, walletId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetWalletBalancesTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        String currencySymbol = null;
        CoinbaseCustodyApiGetBalanceResponse response = api.primeAPIGetWalletBalances(portfolioId, walletId, currencySymbol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetWalletBalancesStreamTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        String currencySymbol = null;
        StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse response = api.primeAPIGetWalletBalancesStream(portfolioId, walletId, currencySymbol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetWalletDefiBalancesTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        CoinbaseEngPrimeApiApiGetWalletDefiBalancesResponse response = api.primeAPIGetWalletDefiBalances(portfolioId, walletId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetWalletRewardsStatusTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        CoinbaseCustodyApiWalletRewardsStatus response = api.primeAPIGetWalletRewardsStatus(portfolioId, walletId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetWalletStakingStatusTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        CoinbaseCustodyApiWalletStakingStatus response = api.primeAPIGetWalletStakingStatus(portfolioId, walletId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetWalletTokensTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        CoinbaseEngPrimeApiApiListWalletTokensResponse response = api.primeAPIGetWalletTokens(portfolioId, walletId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetWalletVestingStatusTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        CoinbaseEngPrimeApiApiGetWalletVestingStatusResponse response = api.primeAPIGetWalletVestingStatus(portfolioId, walletId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIGetWalletsTest() throws ApiException {
        String portfolioId = null;
        List<String> states = null;
        List<String> currencySymbols = null;
        String cursor = null;
        Integer limit = null;
        String sortDirection = null;
        String search = null;
        List<String> types = null;
        List<String> actions = null;
        String sortField = null;
        CoinbaseEngPrimeApiApiListWalletsResponse response = api.primeAPIGetWallets(portfolioId, states, currencySymbols, cursor, limit, sortDirection, search, types, actions, sortField);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIInitiateTransactionSigningTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiInitiateTransactionSigningRequest body = null;
        CoinbaseEngPrimeApiApiInitiateTransactionSigningResponse response = api.primeAPIInitiateTransactionSigning(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIListActiveValidatorsTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        CoinbaseEngPrimeApiApiListActiveValidatorsResponse response = api.primeAPIListActiveValidators(portfolioId, walletId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIListBulkPoliciesForEntityTest() throws ApiException {
        String entityId = null;
        CoinbaseEngPrimeApiApiListBulkPoliciesResponse response = api.primeAPIListBulkPoliciesForEntity(entityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIListDeviceGroupsTest() throws ApiException {
        String listLevel = null;
        List<String> listIds = null;
        CoinbaseEngPrimeApiApiListDeviceGroupsResponse response = api.primeAPIListDeviceGroups(listLevel, listIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIListInvitationsForUserTest() throws ApiException {
        String entityId = null;
        String email = null;
        CoinbaseEngPrimeApiApiListUserInvitationResponse response = api.primeAPIListInvitationsForUser(entityId, email);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIListPaymentMethodsTest() throws ApiException {
        String vehicleId = null;
        CoinbaseEngPrimeApiApiListPaymentMethodsResponse response = api.primeAPIListPaymentMethods(vehicleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIListPoliciesTest() throws ApiException {
        String portfolioId = null;
        EngPrimePolicyApiListPoliciesResponse response = api.primeAPIListPolicies(portfolioId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIListReportingCenterDataTest() throws ApiException {
        String vehicleId = null;
        List<String> portfolioIds = null;
        String cursor = null;
        String limit = null;
        String year = null;
        String type = null;
        CoinbaseEngPrimeApiApiListReportingCenterDataResponse response = api.primeAPIListReportingCenterData(vehicleId, portfolioIds, cursor, limit, year, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIListSignerIdsForActivityTest() throws ApiException {
        String portfolioId = null;
        String activityId = null;
        CoinbaseEngPrimeApiApiListSignerIdsForActivityResponse response = api.primeAPIListSignerIdsForActivity(portfolioId, activityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIListTradingWalletCryptoDepositAddressesTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        String search = null;
        String cursor = null;
        Integer limit = null;
        String sortDirection = null;
        CoinbaseEngPrimeApiApiListTradingWalletCryptoDepositAddressesResponse response = api.primeAPIListTradingWalletCryptoDepositAddresses(portfolioId, walletId, search, cursor, limit, sortDirection);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIListVideoUploadsTest() throws ApiException {
        String transactionId = null;
        CoinbaseCustodyApiListVideoUploadsResponse response = api.primeAPIListVideoUploads(transactionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIListWalletsV2Test() throws ApiException {
        String portfolioId = null;
        List<String> states = null;
        List<String> currencySymbols = null;
        List<String> types = null;
        String cursor = null;
        String limit = null;
        String sortDirection = null;
        Boolean fetchWalletOptionResolveBalances = null;
        Boolean fetchWalletOptionResolveCurrency = null;
        Boolean fetchWalletOptionResolveStakingInfo = null;
        Boolean fetchWalletOptionResolveVestingInfo = null;
        Boolean fetchWalletOptionResolveAvailableActions = null;
        String name = null;
        String sortBy = null;
        List<String> actions = null;
        CoinbaseEngPrimeApiApiListWalletsV2Response response = api.primeAPIListWalletsV2(portfolioId, states, currencySymbols, types, cursor, limit, sortDirection, fetchWalletOptionResolveBalances, fetchWalletOptionResolveCurrency, fetchWalletOptionResolveStakingInfo, fetchWalletOptionResolveVestingInfo, fetchWalletOptionResolveAvailableActions, name, sortBy, actions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIListWeb3SecurityKeysTest() throws ApiException {
        String portfolioId = null;
        Boolean includeArchived = null;
        CoinbaseEngPrimeApiApiListWeb3SecurityKeysResponse response = api.primeAPIListWeb3SecurityKeys(portfolioId, includeArchived);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostAcceptInvitationTest() throws ApiException {
        String invitationId = null;
        CoinbaseEngPrimeApiApiAcceptInvitationRequest body = null;
        CoinbaseEngPrimeApiApiAcceptInvitationResponse response = api.primeAPIPostAcceptInvitation(invitationId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostActivateAPIKeyTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiActivateAPIKeyRequest body = null;
        CoinbaseEngPrimeApiApiActivateAPIKeyResponse response = api.primeAPIPostActivateAPIKey(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostActivateAPIKeyV2Test() throws ApiException {
        String groupId = null;
        CoinbaseEngPrimeApiApiActivateAPIKeyRequestV2 body = null;
        CoinbaseEngPrimeApiApiActivateAPIKeyResponse response = api.primeAPIPostActivateAPIKeyV2(groupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostAddressBookEntryTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiPostAddressBookEntryRequest body = null;
        CoinbaseEngPrimeApiApiPostAddressBookEntryResponse response = api.primeAPIPostAddressBookEntry(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostAllocationTest() throws ApiException {
        String sourcePortfolioId = null;
        CoinbaseEngPrimeApiApiPostAllocationRequest body = null;
        CoinbaseEngPrimeApiApiPostAllocationResponse response = api.primeAPIPostAllocation(sourcePortfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostAllocationPreviewTest() throws ApiException {
        String sourcePortfolioId = null;
        CoinbaseEngPrimeApiApiPostAllocationPreviewRequest body = null;
        CoinbaseEngPrimeApiApiPostAllocationPreviewResponse response = api.primeAPIPostAllocationPreview(sourcePortfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostApprovePortfolioActivityTest() throws ApiException {
        String portfolioId = null;
        String activityId = null;
        CoinbaseEngPrimeApiApiPostApprovePortfolioActivityRequest body = null;
        CoinbaseEngPrimeApiApiPostApprovePortfolioActivityResponse response = api.primeAPIPostApprovePortfolioActivity(portfolioId, activityId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostApproveVehicleActivityTest() throws ApiException {
        String vehicleId = null;
        String activityId = null;
        CoinbaseEngPrimeApiApiPostApproveVehicleActivityRequest body = null;
        CoinbaseEngPrimeApiApiPostApproveVehicleActivityResponse response = api.primeAPIPostApproveVehicleActivity(vehicleId, activityId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostBulkActionActivitiesTest() throws ApiException {
        CoinbaseEngPrimeApiApiPostBulkActionActivitiesRequest body = null;
        CoinbaseEngPrimeApiApiPostBulkActionActivitiesResponse response = api.primeAPIPostBulkActionActivities(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostBulkActionSettingTest() throws ApiException {
        CoinbaseEngPrimeApiApiPostBulkActionSettingsRequest body = null;
        CoinbaseEngPrimeApiApiPostBulkActionSettingsResponse response = api.primeAPIPostBulkActionSetting(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostBulkInvitationTest() throws ApiException {
        CoinbaseEngPrimeApiApiPostBulkUserInvitationRequest body = null;
        CoinbaseEngPrimeApiApiPostBulkUserInvitationResponse response = api.primeAPIPostBulkInvitation(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostCancelOrderTest() throws ApiException {
        CoinbaseEngPrimeApiApiPostCancelOrderRequest body = null;
        CoinbaseEngPrimeApiApiPostCancelOrderResponseBody response = api.primeAPIPostCancelOrder(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostCreateAPIKeyTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiCreateAPIKeyRequest body = null;
        CoinbaseEngPrimeApiApiCreateAPIKeyResponse response = api.primeAPIPostCreateAPIKey(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostCreateAPIKeyV2Test() throws ApiException {
        String groupId = null;
        CoinbaseEngPrimeApiApiCreateAPIKeyRequestV2 body = null;
        CoinbaseEngPrimeApiApiCreateAPIKeyResponse response = api.primeAPIPostCreateAPIKeyV2(groupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostDeactivateAPIKeyTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiDeactivateAPIKeyRequest body = null;
        CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse response = api.primeAPIPostDeactivateAPIKey(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostDeactivateAPIKeyV2Test() throws ApiException {
        String groupId = null;
        CoinbaseEngPrimeApiApiDeactivateAPIKeyRequestV2 body = null;
        CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse response = api.primeAPIPostDeactivateAPIKeyV2(groupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostDelegationAccountTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        CoinbaseEngPrimeApiApiPostDelegationAccountResponse response = api.primeAPIPostDelegationAccount(portfolioId, walletId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostDocumentSignatureTest() throws ApiException {
        String vehicleId = null;
        String documentKey = null;
        CoinbaseEngPrimeApiApiPostDocumentSignatureRequest body = null;
        CoinbaseEngPrimeApiApiPostDocumentSignatureResponse response = api.primeAPIPostDocumentSignature(vehicleId, documentKey, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostEntitySettingsTest() throws ApiException {
        String entityId = null;
        String key = null;
        CoinbaseEngPrimeApiApiPostEntitySettingsRequest body = null;
        CoinbaseEngPrimeApiApiPostEntitySettingsResponse response = api.primeAPIPostEntitySettings(entityId, key, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostFidoChallengeTest() throws ApiException {
        String userId = null;
        CoinbaseEngPrimeApiApiPostFidoChallengeRequest body = null;
        CoinbaseEngPrimeApiApiPostFidoChallengeResponse response = api.primeAPIPostFidoChallenge(userId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostFidoChallengeCreateTest() throws ApiException {
        String userId = null;
        CoinbaseEngPrimeApiApiPostFidoChallengeCreateResponse response = api.primeAPIPostFidoChallengeCreate(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostFidoRegistrationTest() throws ApiException {
        String userId = null;
        CoinbaseEngPrimeApiApiPostFidoRegistrationRequest body = null;
        CoinbaseEngPrimeApiApiPostFidoRegistrationResponse response = api.primeAPIPostFidoRegistration(userId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostGovernanceStatusTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        CoinbaseEngPrimeApiApiPostGovernanceStatusRequest body = null;
        CoinbaseEngPrimeApiApiPostGovernanceStatusResponseBody response = api.primeAPIPostGovernanceStatus(portfolioId, walletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostGovernanceVoteTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        CoinbaseEngPrimeApiApiPostGovernanceVoteRequest body = null;
        CoinbaseEngPrimeApiApiPostGovernanceVoteResponse response = api.primeAPIPostGovernanceVote(portfolioId, walletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostInvitationTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiCreateInvitationRequest body = null;
        CoinbaseEngPrimeApiApiNewConsensusActivityResponse response = api.primeAPIPostInvitation(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostNetAllocationPreviewTest() throws ApiException {
        String sourcePortfolioId = null;
        CoinbaseEngPrimeApiApiPostNetAllocationPreviewRequest body = null;
        CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse response = api.primeAPIPostNetAllocationPreview(sourcePortfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostOrderTest() throws ApiException {
        CoinbaseEngPrimeApiApiPostOrderRequest body = null;
        CoinbaseEngPrimeApiApiPostOrderResponseBody response = api.primeAPIPostOrder(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostOrderPreviewTest() throws ApiException {
        CoinbaseEngPrimeApiApiPostOrderPreviewRequest body = null;
        CoinbaseEngPrimeApiApiOrderPreviewResponseBody response = api.primeAPIPostOrderPreview(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostPortfolioSettingsTest() throws ApiException {
        String portfolioId = null;
        String key = null;
        CoinbaseEngPrimeApiApiPostPortfolioSettingsRequest body = null;
        CoinbaseEngPrimeApiApiPostPortfolioSettingsResponse response = api.primeAPIPostPortfolioSettings(portfolioId, key, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostPreviewUserChangeTest() throws ApiException {
        String portfolioId = null;
        String userId = null;
        CoinbaseEngPrimeApiApiPostPreviewUserChangeRequest body = null;
        CoinbaseEngPrimeApiApiPostPreviewUserChangeResponse response = api.primeAPIPostPreviewUserChange(portfolioId, userId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostPushNotificationDeviceDeregistrationTest() throws ApiException {
        CoinbaseEngPrimeApiApiPostPushNotificationDeviceDeregistrationRequest body = null;
        Object response = api.primeAPIPostPushNotificationDeviceDeregistration(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostPushNotificationDeviceRegistrationTest() throws ApiException {
        CoinbaseEngPrimeApiApiPostPushNotificationDeviceRegistrationRequest body = null;
        Object response = api.primeAPIPostPushNotificationDeviceRegistration(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostRejectPortfolioActivityTest() throws ApiException {
        String portfolioId = null;
        String activityId = null;
        CoinbaseEngPrimeApiApiPostRejectPortfolioActivityRequest body = null;
        CoinbaseEngPrimeApiApiPostRejectPortfolioActivityResponse response = api.primeAPIPostRejectPortfolioActivity(portfolioId, activityId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostRejectVehicleActivityTest() throws ApiException {
        String vehicleId = null;
        String activityId = null;
        CoinbaseEngPrimeApiApiPostRejectVehicleActivityRequest body = null;
        CoinbaseEngPrimeApiApiPostRejectVehicleActivityResponse response = api.primeAPIPostRejectVehicleActivity(vehicleId, activityId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostReverseAllocationTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiPostReverseAllocationRequest body = null;
        CoinbaseEngPrimeApiApiPostAllocationResponse response = api.primeAPIPostReverseAllocation(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostUpdateBillingAddressTest() throws ApiException {
        String vehicleId = null;
        CoinbaseEngPrimeApiApiPostUpdateBillingAddressRequest body = null;
        CoinbaseEngPrimeApiApiPostUpdateBillingAddressResponse response = api.primeAPIPostUpdateBillingAddress(vehicleId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostUpdateBillingEmailListTest() throws ApiException {
        String vehicleId = null;
        CoinbaseEngPrimeApiApiPostUpdateBillingEmailListRequest body = null;
        CoinbaseEngPrimeApiApiPostUpdateBillingEmailListResponse response = api.primeAPIPostUpdateBillingEmailList(vehicleId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostUpdateBillingPreferenceTest() throws ApiException {
        String vehicleId = null;
        CoinbaseEngPrimeApiApiPostUpdateBillingPreferenceRequest body = null;
        CoinbaseEngPrimeApiApiNewConsensusActivityResponse response = api.primeAPIPostUpdateBillingPreference(vehicleId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostUserInAppNotificationStatusesTest() throws ApiException {
        CoinbaseEngPrimeApiApiPostUserInAppNotificationStatusesRequest body = null;
        Object response = api.primeAPIPostUserInAppNotificationStatuses(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostUserPreferencesTest() throws ApiException {
        String userId = null;
        CoinbaseEngPrimeApiApiPostUserPreferencesRequest body = null;
        CoinbaseEngPrimeApiApiUserPreferences response = api.primeAPIPostUserPreferences(userId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostUserUpdateTest() throws ApiException {
        String portfolioId = null;
        String userId = null;
        CoinbaseEngPrimeApiApiPostUserUpdateRequest body = null;
        CoinbaseEngPrimeApiApiNewConsensusActivityResponse response = api.primeAPIPostUserUpdate(portfolioId, userId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostValidateAddressTest() throws ApiException {
        CoinbaseEngPrimeApiApiValidateAddressRequest body = null;
        CoinbaseEngPrimeApiApiValidateAddressResponse response = api.primeAPIPostValidateAddress(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPostValidateCounterpartyTest() throws ApiException {
        String counterpartyId = null;
        CoinbaseEngPrimeApiApiValidateCounterpartyRequest body = null;
        CoinbaseEngPrimeApiApiValidateCounterpartyResponse response = api.primeAPIPostValidateCounterparty(counterpartyId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIPreviewTransactionTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiPreviewTransactionRequest body = null;
        CoinbaseEngPrimeApiApiPreviewTransactionResponse response = api.primeAPIPreviewTransaction(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPISignalWeb3ActionTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiSignalWeb3ActionRequest body = null;
        CoinbaseEngPrimeApiApiSignalWeb3ActionResponse response = api.primeAPISignalWeb3Action(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPISubmitDALRecallTest() throws ApiException {
        String entityId = null;
        CoinbaseFinancingSubmitDALRecallRequest body = null;
        CoinbaseFinancingSubmitDALRecallResponse response = api.primeAPISubmitDALRecall(entityId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPISubmitLocatesTest() throws ApiException {
        String entityId = null;
        CoinbaseFinancingSubmitLocatesRequest body = null;
        CoinbaseFinancingSubmitLocatesResponse response = api.primeAPISubmitLocates(entityId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPISubmitMultipleLocatesTest() throws ApiException {
        String entityId = null;
        CoinbaseFinancingSubmitMultipleLocatesRequest body = null;
        CoinbaseFinancingSubmitMultipleLocatesResponse response = api.primeAPISubmitMultipleLocates(entityId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIUpdateNotificationPreferencesForChannelTest() throws ApiException {
        String userId = null;
        CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelRequest body = null;
        CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelResponse response = api.primeAPIUpdateNotificationPreferencesForChannel(userId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIUpdateWalletAssetSettingsTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsRequest body = null;
        CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsResponse response = api.primeAPIUpdateWalletAssetSettings(portfolioId, walletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIUpdateWalletNameTest() throws ApiException {
        String portfolioId = null;
        String walletId = null;
        CoinbaseEngPrimeApiApiUpdateWalletNameRequest body = null;
        CoinbaseEngPrimeApiApiUpdateWalletNameResponse response = api.primeAPIUpdateWalletName(portfolioId, walletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIUpdateWeb3DeviceTest() throws ApiException {
        CoinbaseEngPrimeApiApiUpdateWeb3DeviceRequest body = null;
        CoinbaseEngPrimeApiApiUpdateWeb3DeviceResponse response = api.primeAPIUpdateWeb3Device(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIUpsertPolicyChangeTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiUpsertPolicyChangeRequest body = null;
        CoinbaseEngPrimeApiApiUpsertPolicyChangeResponse response = api.primeAPIUpsertPolicyChange(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIValidateWeb3AuthorizationTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiValidateWeb3AuthorizationRequest body = null;
        CoinbaseEngPrimeApiApiValidateWeb3AuthorizationResponse response = api.primeAPIValidateWeb3Authorization(portfolioId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primeAPIValidateWeb3SecurityKeyTest() throws ApiException {
        String portfolioId = null;
        CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyRequest body = null;
        CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyResponse response = api.primeAPIValidateWeb3SecurityKey(portfolioId, body);

        // TODO: test validations
    }
    
}
