/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseCustodyApiBalanceScope;
import java.io.IOException;

/**
 * CoinbaseCustodyApiBalance
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseCustodyApiBalance {
  @SerializedName("currency_symbol")
  private String currencySymbol = null;

  @SerializedName("value")
  private String value = null;

  @SerializedName("withdrawable_value")
  private String withdrawableValue = null;

  @SerializedName("usd_value")
  private String usdValue = null;

  @SerializedName("scope")
  private CoinbaseCustodyApiBalanceScope scope = null;

  @SerializedName("withdrawable_usd_value")
  private String withdrawableUsdValue = null;

  @SerializedName("bonded_value")
  private String bondedValue = null;

  @SerializedName("reserved_value")
  private String reservedValue = null;

  @SerializedName("unbonding_value")
  private String unbondingValue = null;

  @SerializedName("unvested_value")
  private String unvestedValue = null;

  @SerializedName("vested_value")
  private String vestedValue = null;

  @SerializedName("currency_type")
  private String currencyType = null;

  @SerializedName("tradable_value")
  private String tradableValue = null;

  @SerializedName("tradable_usd_value")
  private String tradableUsdValue = null;

  @SerializedName("hold_tradable_value")
  private String holdTradableValue = null;

  @SerializedName("hold_tradable_usd_value")
  private String holdTradableUsdValue = null;

  @SerializedName("total_tradable_value")
  private String totalTradableValue = null;

  @SerializedName("total_tradable_usd_value")
  private String totalTradableUsdValue = null;

  @SerializedName("pending_rewards_value")
  private String pendingRewardsValue = null;

  @SerializedName("lifetime_rewards_value")
  private String lifetimeRewardsValue = null;

  @SerializedName("bondable_value")
  private String bondableValue = null;

  @SerializedName("omnibus_qc_value")
  private String omnibusQcValue = null;

  @SerializedName("omnibus_qc_usd_value")
  private String omnibusQcUsdValue = null;

  @SerializedName("hold_omnibus_qc_value")
  private String holdOmnibusQcValue = null;

  @SerializedName("hold_omnibus_qc_usd_value")
  private String holdOmnibusQcUsdValue = null;

  @SerializedName("total_omnibus_qc_value")
  private String totalOmnibusQcValue = null;

  @SerializedName("total_omnibus_qc_usd_value")
  private String totalOmnibusQcUsdValue = null;

  @SerializedName("hold_value")
  private String holdValue = null;

  @SerializedName("hold_usd_value")
  private String holdUsdValue = null;

  public CoinbaseCustodyApiBalance currencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
    return this;
  }

   /**
   * Get currencySymbol
   * @return currencySymbol
  **/
  @ApiModelProperty(required = true, value = "")
  public String getCurrencySymbol() {
    return currencySymbol;
  }

  public void setCurrencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
  }

  public CoinbaseCustodyApiBalance value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Total balance
   * @return value
  **/
  @ApiModelProperty(required = true, value = "Total balance")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public CoinbaseCustodyApiBalance withdrawableValue(String withdrawableValue) {
    this.withdrawableValue = withdrawableValue;
    return this;
  }

   /**
   * Withdrawable (i.e. available) balance for vault + trading balance
   * @return withdrawableValue
  **/
  @ApiModelProperty(required = true, value = "Withdrawable (i.e. available) balance for vault + trading balance")
  public String getWithdrawableValue() {
    return withdrawableValue;
  }

  public void setWithdrawableValue(String withdrawableValue) {
    this.withdrawableValue = withdrawableValue;
  }

  public CoinbaseCustodyApiBalance usdValue(String usdValue) {
    this.usdValue = usdValue;
    return this;
  }

   /**
   * Total balance in fiat
   * @return usdValue
  **/
  @ApiModelProperty(required = true, value = "Total balance in fiat")
  public String getUsdValue() {
    return usdValue;
  }

  public void setUsdValue(String usdValue) {
    this.usdValue = usdValue;
  }

  public CoinbaseCustodyApiBalance scope(CoinbaseCustodyApiBalanceScope scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @ApiModelProperty(value = "")
  public CoinbaseCustodyApiBalanceScope getScope() {
    return scope;
  }

  public void setScope(CoinbaseCustodyApiBalanceScope scope) {
    this.scope = scope;
  }

  public CoinbaseCustodyApiBalance withdrawableUsdValue(String withdrawableUsdValue) {
    this.withdrawableUsdValue = withdrawableUsdValue;
    return this;
  }

   /**
   * Withdrawable (i.e. available) balance for vault + trading balance in fiat
   * @return withdrawableUsdValue
  **/
  @ApiModelProperty(value = "Withdrawable (i.e. available) balance for vault + trading balance in fiat")
  public String getWithdrawableUsdValue() {
    return withdrawableUsdValue;
  }

  public void setWithdrawableUsdValue(String withdrawableUsdValue) {
    this.withdrawableUsdValue = withdrawableUsdValue;
  }

  public CoinbaseCustodyApiBalance bondedValue(String bondedValue) {
    this.bondedValue = bondedValue;
    return this;
  }

   /**
   * Balance which has been locked due to bonding/staking, potentially subject to an unbonding period
   * @return bondedValue
  **/
  @ApiModelProperty(required = true, value = "Balance which has been locked due to bonding/staking, potentially subject to an unbonding period")
  public String getBondedValue() {
    return bondedValue;
  }

  public void setBondedValue(String bondedValue) {
    this.bondedValue = bondedValue;
  }

  public CoinbaseCustodyApiBalance reservedValue(String reservedValue) {
    this.reservedValue = reservedValue;
    return this;
  }

   /**
   * Balance which must remain in the wallet untouched due to the protocol
   * @return reservedValue
  **/
  @ApiModelProperty(required = true, value = "Balance which must remain in the wallet untouched due to the protocol")
  public String getReservedValue() {
    return reservedValue;
  }

  public void setReservedValue(String reservedValue) {
    this.reservedValue = reservedValue;
  }

  public CoinbaseCustodyApiBalance unbondingValue(String unbondingValue) {
    this.unbondingValue = unbondingValue;
    return this;
  }

   /**
   * Balance which is currently in the process of unbonding
   * @return unbondingValue
  **/
  @ApiModelProperty(required = true, value = "Balance which is currently in the process of unbonding")
  public String getUnbondingValue() {
    return unbondingValue;
  }

  public void setUnbondingValue(String unbondingValue) {
    this.unbondingValue = unbondingValue;
  }

  public CoinbaseCustodyApiBalance unvestedValue(String unvestedValue) {
    this.unvestedValue = unvestedValue;
    return this;
  }

   /**
   * Unrealized balance subject to a vesting schedule
   * @return unvestedValue
  **/
  @ApiModelProperty(required = true, value = "Unrealized balance subject to a vesting schedule")
  public String getUnvestedValue() {
    return unvestedValue;
  }

  public void setUnvestedValue(String unvestedValue) {
    this.unvestedValue = unvestedValue;
  }

  public CoinbaseCustodyApiBalance vestedValue(String vestedValue) {
    this.vestedValue = vestedValue;
    return this;
  }

   /**
   * Realized vested balance (balance - unvested balance)
   * @return vestedValue
  **/
  @ApiModelProperty(required = true, value = "Realized vested balance (balance - unvested balance)")
  public String getVestedValue() {
    return vestedValue;
  }

  public void setVestedValue(String vestedValue) {
    this.vestedValue = vestedValue;
  }

  public CoinbaseCustodyApiBalance currencyType(String currencyType) {
    this.currencyType = currencyType;
    return this;
  }

   /**
   * Get currencyType
   * @return currencyType
  **/
  @ApiModelProperty(required = true, value = "")
  public String getCurrencyType() {
    return currencyType;
  }

  public void setCurrencyType(String currencyType) {
    this.currencyType = currencyType;
  }

  public CoinbaseCustodyApiBalance tradableValue(String tradableValue) {
    this.tradableValue = tradableValue;
    return this;
  }

   /**
   * Tradable (i.e. available) balance from trading balance wallet
   * @return tradableValue
  **/
  @ApiModelProperty(required = true, value = "Tradable (i.e. available) balance from trading balance wallet")
  public String getTradableValue() {
    return tradableValue;
  }

  public void setTradableValue(String tradableValue) {
    this.tradableValue = tradableValue;
  }

  public CoinbaseCustodyApiBalance tradableUsdValue(String tradableUsdValue) {
    this.tradableUsdValue = tradableUsdValue;
    return this;
  }

   /**
   * Tradable (i.e. available) balance from trading balance wallet in fiat
   * @return tradableUsdValue
  **/
  @ApiModelProperty(required = true, value = "Tradable (i.e. available) balance from trading balance wallet in fiat")
  public String getTradableUsdValue() {
    return tradableUsdValue;
  }

  public void setTradableUsdValue(String tradableUsdValue) {
    this.tradableUsdValue = tradableUsdValue;
  }

  public CoinbaseCustodyApiBalance holdTradableValue(String holdTradableValue) {
    this.holdTradableValue = holdTradableValue;
    return this;
  }

   /**
   * Hold balance from trading balance wallet
   * @return holdTradableValue
  **/
  @ApiModelProperty(required = true, value = "Hold balance from trading balance wallet")
  public String getHoldTradableValue() {
    return holdTradableValue;
  }

  public void setHoldTradableValue(String holdTradableValue) {
    this.holdTradableValue = holdTradableValue;
  }

  public CoinbaseCustodyApiBalance holdTradableUsdValue(String holdTradableUsdValue) {
    this.holdTradableUsdValue = holdTradableUsdValue;
    return this;
  }

   /**
   * Hold balance from trading balance wallet in fiat
   * @return holdTradableUsdValue
  **/
  @ApiModelProperty(required = true, value = "Hold balance from trading balance wallet in fiat")
  public String getHoldTradableUsdValue() {
    return holdTradableUsdValue;
  }

  public void setHoldTradableUsdValue(String holdTradableUsdValue) {
    this.holdTradableUsdValue = holdTradableUsdValue;
  }

  public CoinbaseCustodyApiBalance totalTradableValue(String totalTradableValue) {
    this.totalTradableValue = totalTradableValue;
    return this;
  }

   /**
   * Total balance of trading balance wallet (available + hold)
   * @return totalTradableValue
  **/
  @ApiModelProperty(required = true, value = "Total balance of trading balance wallet (available + hold)")
  public String getTotalTradableValue() {
    return totalTradableValue;
  }

  public void setTotalTradableValue(String totalTradableValue) {
    this.totalTradableValue = totalTradableValue;
  }

  public CoinbaseCustodyApiBalance totalTradableUsdValue(String totalTradableUsdValue) {
    this.totalTradableUsdValue = totalTradableUsdValue;
    return this;
  }

   /**
   * Total balance of trading balance wallet (available + hold) in fiat
   * @return totalTradableUsdValue
  **/
  @ApiModelProperty(required = true, value = "Total balance of trading balance wallet (available + hold) in fiat")
  public String getTotalTradableUsdValue() {
    return totalTradableUsdValue;
  }

  public void setTotalTradableUsdValue(String totalTradableUsdValue) {
    this.totalTradableUsdValue = totalTradableUsdValue;
  }

  public CoinbaseCustodyApiBalance pendingRewardsValue(String pendingRewardsValue) {
    this.pendingRewardsValue = pendingRewardsValue;
    return this;
  }

   /**
   * Pending bonding/staking rewards that have not yet been realized
   * @return pendingRewardsValue
  **/
  @ApiModelProperty(required = true, value = "Pending bonding/staking rewards that have not yet been realized")
  public String getPendingRewardsValue() {
    return pendingRewardsValue;
  }

  public void setPendingRewardsValue(String pendingRewardsValue) {
    this.pendingRewardsValue = pendingRewardsValue;
  }

  public CoinbaseCustodyApiBalance lifetimeRewardsValue(String lifetimeRewardsValue) {
    this.lifetimeRewardsValue = lifetimeRewardsValue;
    return this;
  }

   /**
   * Previously realized bonding/staking rewards
   * @return lifetimeRewardsValue
  **/
  @ApiModelProperty(required = true, value = "Previously realized bonding/staking rewards")
  public String getLifetimeRewardsValue() {
    return lifetimeRewardsValue;
  }

  public void setLifetimeRewardsValue(String lifetimeRewardsValue) {
    this.lifetimeRewardsValue = lifetimeRewardsValue;
  }

  public CoinbaseCustodyApiBalance bondableValue(String bondableValue) {
    this.bondableValue = bondableValue;
    return this;
  }

   /**
   * Balance available for bonding/staking
   * @return bondableValue
  **/
  @ApiModelProperty(value = "Balance available for bonding/staking")
  public String getBondableValue() {
    return bondableValue;
  }

  public void setBondableValue(String bondableValue) {
    this.bondableValue = bondableValue;
  }

  public CoinbaseCustodyApiBalance omnibusQcValue(String omnibusQcValue) {
    this.omnibusQcValue = omnibusQcValue;
    return this;
  }

   /**
   * Omnibus QC (i.e. available) balance from omnibus qc wallet
   * @return omnibusQcValue
  **/
  @ApiModelProperty(required = true, value = "Omnibus QC (i.e. available) balance from omnibus qc wallet")
  public String getOmnibusQcValue() {
    return omnibusQcValue;
  }

  public void setOmnibusQcValue(String omnibusQcValue) {
    this.omnibusQcValue = omnibusQcValue;
  }

  public CoinbaseCustodyApiBalance omnibusQcUsdValue(String omnibusQcUsdValue) {
    this.omnibusQcUsdValue = omnibusQcUsdValue;
    return this;
  }

   /**
   * Omnibus QC (i.e. available) balance from omnibus qc wallet in USD
   * @return omnibusQcUsdValue
  **/
  @ApiModelProperty(required = true, value = "Omnibus QC (i.e. available) balance from omnibus qc wallet in USD")
  public String getOmnibusQcUsdValue() {
    return omnibusQcUsdValue;
  }

  public void setOmnibusQcUsdValue(String omnibusQcUsdValue) {
    this.omnibusQcUsdValue = omnibusQcUsdValue;
  }

  public CoinbaseCustodyApiBalance holdOmnibusQcValue(String holdOmnibusQcValue) {
    this.holdOmnibusQcValue = holdOmnibusQcValue;
    return this;
  }

   /**
   * Hold balance from omnibus qc wallet
   * @return holdOmnibusQcValue
  **/
  @ApiModelProperty(required = true, value = "Hold balance from omnibus qc wallet")
  public String getHoldOmnibusQcValue() {
    return holdOmnibusQcValue;
  }

  public void setHoldOmnibusQcValue(String holdOmnibusQcValue) {
    this.holdOmnibusQcValue = holdOmnibusQcValue;
  }

  public CoinbaseCustodyApiBalance holdOmnibusQcUsdValue(String holdOmnibusQcUsdValue) {
    this.holdOmnibusQcUsdValue = holdOmnibusQcUsdValue;
    return this;
  }

   /**
   * Hold balance from omnibus qc wallet in USD
   * @return holdOmnibusQcUsdValue
  **/
  @ApiModelProperty(required = true, value = "Hold balance from omnibus qc wallet in USD")
  public String getHoldOmnibusQcUsdValue() {
    return holdOmnibusQcUsdValue;
  }

  public void setHoldOmnibusQcUsdValue(String holdOmnibusQcUsdValue) {
    this.holdOmnibusQcUsdValue = holdOmnibusQcUsdValue;
  }

  public CoinbaseCustodyApiBalance totalOmnibusQcValue(String totalOmnibusQcValue) {
    this.totalOmnibusQcValue = totalOmnibusQcValue;
    return this;
  }

   /**
   * Total balance of omnibus qc wallet (available + hold)
   * @return totalOmnibusQcValue
  **/
  @ApiModelProperty(required = true, value = "Total balance of omnibus qc wallet (available + hold)")
  public String getTotalOmnibusQcValue() {
    return totalOmnibusQcValue;
  }

  public void setTotalOmnibusQcValue(String totalOmnibusQcValue) {
    this.totalOmnibusQcValue = totalOmnibusQcValue;
  }

  public CoinbaseCustodyApiBalance totalOmnibusQcUsdValue(String totalOmnibusQcUsdValue) {
    this.totalOmnibusQcUsdValue = totalOmnibusQcUsdValue;
    return this;
  }

   /**
   * Total balance of omnibus qc wallet (available + hold) in USD
   * @return totalOmnibusQcUsdValue
  **/
  @ApiModelProperty(required = true, value = "Total balance of omnibus qc wallet (available + hold) in USD")
  public String getTotalOmnibusQcUsdValue() {
    return totalOmnibusQcUsdValue;
  }

  public void setTotalOmnibusQcUsdValue(String totalOmnibusQcUsdValue) {
    this.totalOmnibusQcUsdValue = totalOmnibusQcUsdValue;
  }

  public CoinbaseCustodyApiBalance holdValue(String holdValue) {
    this.holdValue = holdValue;
    return this;
  }

   /**
   * Total Hold balance
   * @return holdValue
  **/
  @ApiModelProperty(value = "Total Hold balance")
  public String getHoldValue() {
    return holdValue;
  }

  public void setHoldValue(String holdValue) {
    this.holdValue = holdValue;
  }

  public CoinbaseCustodyApiBalance holdUsdValue(String holdUsdValue) {
    this.holdUsdValue = holdUsdValue;
    return this;
  }

   /**
   * Total Hold in fiat
   * @return holdUsdValue
  **/
  @ApiModelProperty(value = "Total Hold in fiat")
  public String getHoldUsdValue() {
    return holdUsdValue;
  }

  public void setHoldUsdValue(String holdUsdValue) {
    this.holdUsdValue = holdUsdValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseCustodyApiBalance coinbaseCustodyApiBalance = (CoinbaseCustodyApiBalance) o;
    return Objects.equals(this.currencySymbol, coinbaseCustodyApiBalance.currencySymbol) &&
        Objects.equals(this.value, coinbaseCustodyApiBalance.value) &&
        Objects.equals(this.withdrawableValue, coinbaseCustodyApiBalance.withdrawableValue) &&
        Objects.equals(this.usdValue, coinbaseCustodyApiBalance.usdValue) &&
        Objects.equals(this.scope, coinbaseCustodyApiBalance.scope) &&
        Objects.equals(this.withdrawableUsdValue, coinbaseCustodyApiBalance.withdrawableUsdValue) &&
        Objects.equals(this.bondedValue, coinbaseCustodyApiBalance.bondedValue) &&
        Objects.equals(this.reservedValue, coinbaseCustodyApiBalance.reservedValue) &&
        Objects.equals(this.unbondingValue, coinbaseCustodyApiBalance.unbondingValue) &&
        Objects.equals(this.unvestedValue, coinbaseCustodyApiBalance.unvestedValue) &&
        Objects.equals(this.vestedValue, coinbaseCustodyApiBalance.vestedValue) &&
        Objects.equals(this.currencyType, coinbaseCustodyApiBalance.currencyType) &&
        Objects.equals(this.tradableValue, coinbaseCustodyApiBalance.tradableValue) &&
        Objects.equals(this.tradableUsdValue, coinbaseCustodyApiBalance.tradableUsdValue) &&
        Objects.equals(this.holdTradableValue, coinbaseCustodyApiBalance.holdTradableValue) &&
        Objects.equals(this.holdTradableUsdValue, coinbaseCustodyApiBalance.holdTradableUsdValue) &&
        Objects.equals(this.totalTradableValue, coinbaseCustodyApiBalance.totalTradableValue) &&
        Objects.equals(this.totalTradableUsdValue, coinbaseCustodyApiBalance.totalTradableUsdValue) &&
        Objects.equals(this.pendingRewardsValue, coinbaseCustodyApiBalance.pendingRewardsValue) &&
        Objects.equals(this.lifetimeRewardsValue, coinbaseCustodyApiBalance.lifetimeRewardsValue) &&
        Objects.equals(this.bondableValue, coinbaseCustodyApiBalance.bondableValue) &&
        Objects.equals(this.omnibusQcValue, coinbaseCustodyApiBalance.omnibusQcValue) &&
        Objects.equals(this.omnibusQcUsdValue, coinbaseCustodyApiBalance.omnibusQcUsdValue) &&
        Objects.equals(this.holdOmnibusQcValue, coinbaseCustodyApiBalance.holdOmnibusQcValue) &&
        Objects.equals(this.holdOmnibusQcUsdValue, coinbaseCustodyApiBalance.holdOmnibusQcUsdValue) &&
        Objects.equals(this.totalOmnibusQcValue, coinbaseCustodyApiBalance.totalOmnibusQcValue) &&
        Objects.equals(this.totalOmnibusQcUsdValue, coinbaseCustodyApiBalance.totalOmnibusQcUsdValue) &&
        Objects.equals(this.holdValue, coinbaseCustodyApiBalance.holdValue) &&
        Objects.equals(this.holdUsdValue, coinbaseCustodyApiBalance.holdUsdValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencySymbol, value, withdrawableValue, usdValue, scope, withdrawableUsdValue, bondedValue, reservedValue, unbondingValue, unvestedValue, vestedValue, currencyType, tradableValue, tradableUsdValue, holdTradableValue, holdTradableUsdValue, totalTradableValue, totalTradableUsdValue, pendingRewardsValue, lifetimeRewardsValue, bondableValue, omnibusQcValue, omnibusQcUsdValue, holdOmnibusQcValue, holdOmnibusQcUsdValue, totalOmnibusQcValue, totalOmnibusQcUsdValue, holdValue, holdUsdValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseCustodyApiBalance {\n");
    
    sb.append("    currencySymbol: ").append(toIndentedString(currencySymbol)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    withdrawableValue: ").append(toIndentedString(withdrawableValue)).append("\n");
    sb.append("    usdValue: ").append(toIndentedString(usdValue)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    withdrawableUsdValue: ").append(toIndentedString(withdrawableUsdValue)).append("\n");
    sb.append("    bondedValue: ").append(toIndentedString(bondedValue)).append("\n");
    sb.append("    reservedValue: ").append(toIndentedString(reservedValue)).append("\n");
    sb.append("    unbondingValue: ").append(toIndentedString(unbondingValue)).append("\n");
    sb.append("    unvestedValue: ").append(toIndentedString(unvestedValue)).append("\n");
    sb.append("    vestedValue: ").append(toIndentedString(vestedValue)).append("\n");
    sb.append("    currencyType: ").append(toIndentedString(currencyType)).append("\n");
    sb.append("    tradableValue: ").append(toIndentedString(tradableValue)).append("\n");
    sb.append("    tradableUsdValue: ").append(toIndentedString(tradableUsdValue)).append("\n");
    sb.append("    holdTradableValue: ").append(toIndentedString(holdTradableValue)).append("\n");
    sb.append("    holdTradableUsdValue: ").append(toIndentedString(holdTradableUsdValue)).append("\n");
    sb.append("    totalTradableValue: ").append(toIndentedString(totalTradableValue)).append("\n");
    sb.append("    totalTradableUsdValue: ").append(toIndentedString(totalTradableUsdValue)).append("\n");
    sb.append("    pendingRewardsValue: ").append(toIndentedString(pendingRewardsValue)).append("\n");
    sb.append("    lifetimeRewardsValue: ").append(toIndentedString(lifetimeRewardsValue)).append("\n");
    sb.append("    bondableValue: ").append(toIndentedString(bondableValue)).append("\n");
    sb.append("    omnibusQcValue: ").append(toIndentedString(omnibusQcValue)).append("\n");
    sb.append("    omnibusQcUsdValue: ").append(toIndentedString(omnibusQcUsdValue)).append("\n");
    sb.append("    holdOmnibusQcValue: ").append(toIndentedString(holdOmnibusQcValue)).append("\n");
    sb.append("    holdOmnibusQcUsdValue: ").append(toIndentedString(holdOmnibusQcUsdValue)).append("\n");
    sb.append("    totalOmnibusQcValue: ").append(toIndentedString(totalOmnibusQcValue)).append("\n");
    sb.append("    totalOmnibusQcUsdValue: ").append(toIndentedString(totalOmnibusQcUsdValue)).append("\n");
    sb.append("    holdValue: ").append(toIndentedString(holdValue)).append("\n");
    sb.append("    holdUsdValue: ").append(toIndentedString(holdUsdValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

