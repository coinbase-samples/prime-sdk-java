/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseBrokerageProxyEventsMaterializedApiCrossingType;
import io.swagger.client.model.CoinbaseBrokerageProxyEventsMaterializedApiExchangeCounterParty;
import java.io.IOException;

/**
 * CoinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok {
  @SerializedName("cross_id")
  private String crossId = null;

  @SerializedName("base_size")
  private String baseSize = null;

  @SerializedName("limit_price")
  private String limitPrice = null;

  @SerializedName("cross_type")
  private CoinbaseBrokerageProxyEventsMaterializedApiCrossingType crossType = null;

  @SerializedName("exchange_counter_party")
  private CoinbaseBrokerageProxyEventsMaterializedApiExchangeCounterParty exchangeCounterParty = null;

  public CoinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok crossId(String crossId) {
    this.crossId = crossId;
    return this;
  }

   /**
   * Get crossId
   * @return crossId
  **/
  @ApiModelProperty(value = "")
  public String getCrossId() {
    return crossId;
  }

  public void setCrossId(String crossId) {
    this.crossId = crossId;
  }

  public CoinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok baseSize(String baseSize) {
    this.baseSize = baseSize;
    return this;
  }

   /**
   * Get baseSize
   * @return baseSize
  **/
  @ApiModelProperty(value = "")
  public String getBaseSize() {
    return baseSize;
  }

  public void setBaseSize(String baseSize) {
    this.baseSize = baseSize;
  }

  public CoinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok limitPrice(String limitPrice) {
    this.limitPrice = limitPrice;
    return this;
  }

   /**
   * Get limitPrice
   * @return limitPrice
  **/
  @ApiModelProperty(value = "")
  public String getLimitPrice() {
    return limitPrice;
  }

  public void setLimitPrice(String limitPrice) {
    this.limitPrice = limitPrice;
  }

  public CoinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok crossType(CoinbaseBrokerageProxyEventsMaterializedApiCrossingType crossType) {
    this.crossType = crossType;
    return this;
  }

   /**
   * Get crossType
   * @return crossType
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyEventsMaterializedApiCrossingType getCrossType() {
    return crossType;
  }

  public void setCrossType(CoinbaseBrokerageProxyEventsMaterializedApiCrossingType crossType) {
    this.crossType = crossType;
  }

  public CoinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok exchangeCounterParty(CoinbaseBrokerageProxyEventsMaterializedApiExchangeCounterParty exchangeCounterParty) {
    this.exchangeCounterParty = exchangeCounterParty;
    return this;
  }

   /**
   * Get exchangeCounterParty
   * @return exchangeCounterParty
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyEventsMaterializedApiExchangeCounterParty getExchangeCounterParty() {
    return exchangeCounterParty;
  }

  public void setExchangeCounterParty(CoinbaseBrokerageProxyEventsMaterializedApiExchangeCounterParty exchangeCounterParty) {
    this.exchangeCounterParty = exchangeCounterParty;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok coinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok = (CoinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok) o;
    return Objects.equals(this.crossId, coinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok.crossId) &&
        Objects.equals(this.baseSize, coinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok.baseSize) &&
        Objects.equals(this.limitPrice, coinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok.limitPrice) &&
        Objects.equals(this.crossType, coinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok.crossType) &&
        Objects.equals(this.exchangeCounterParty, coinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok.exchangeCounterParty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crossId, baseSize, limitPrice, crossType, exchangeCounterParty);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseBrokerageProxyEventsMaterializedApiEntryOrderConfigurationBlockTradeLimitLimitFok {\n");
    
    sb.append("    crossId: ").append(toIndentedString(crossId)).append("\n");
    sb.append("    baseSize: ").append(toIndentedString(baseSize)).append("\n");
    sb.append("    limitPrice: ").append(toIndentedString(limitPrice)).append("\n");
    sb.append("    crossType: ").append(toIndentedString(crossType)).append("\n");
    sb.append("    exchangeCounterParty: ").append(toIndentedString(exchangeCounterParty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

