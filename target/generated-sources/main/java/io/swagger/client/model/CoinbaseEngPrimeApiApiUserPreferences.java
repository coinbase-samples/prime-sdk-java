/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseEngPrimeApiApiChartConfiguration;
import io.swagger.client.model.CoinbaseEngPrimeApiApiOrderTableColumn;
import io.swagger.client.model.CoinbaseEngPrimeApiApiStudyInputs;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CoinbaseEngPrimeApiApiUserPreferences
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseEngPrimeApiApiUserPreferences {
  @SerializedName("favorite_products")
  private List<String> favoriteProducts = new ArrayList<String>();

  @SerializedName("order_confirmation_window_toggle")
  private Boolean orderConfirmationWindowToggle = null;

  @SerializedName("study_inputs")
  private CoinbaseEngPrimeApiApiStudyInputs studyInputs = null;

  @SerializedName("ladder_level_doubleclick_ordering")
  private Boolean ladderLevelDoubleclickOrdering = null;

  @SerializedName("chart_configuration")
  private CoinbaseEngPrimeApiApiChartConfiguration chartConfiguration = null;

  @SerializedName("default_portfolio_id")
  private String defaultPortfolioId = null;

  @SerializedName("show_new_user_trade_experience")
  private Boolean showNewUserTradeExperience = null;

  @SerializedName("order_cancel_confirmation_window_toggle")
  private Boolean orderCancelConfirmationWindowToggle = null;

  @SerializedName("order_table_columns")
  private List<CoinbaseEngPrimeApiApiOrderTableColumn> orderTableColumns = new ArrayList<CoinbaseEngPrimeApiApiOrderTableColumn>();

  @SerializedName("pinned_orders")
  private List<String> pinnedOrders = new ArrayList<String>();

  @SerializedName("keyboard_shortcuts_toggle")
  private Boolean keyboardShortcutsToggle = null;

  @SerializedName("order_raise_exact_toggle")
  private Boolean orderRaiseExactToggle = null;

  @SerializedName("order_form_persist_toggle")
  private Boolean orderFormPersistToggle = null;

  @SerializedName("order_form_size_warnings_toggle")
  private Boolean orderFormSizeWarningsToggle = null;

  @SerializedName("ladder_iceberg_toggle")
  private Boolean ladderIcebergToggle = null;

  @SerializedName("prime_beta_toggle")
  private Boolean primeBetaToggle = null;

  public CoinbaseEngPrimeApiApiUserPreferences favoriteProducts(List<String> favoriteProducts) {
    this.favoriteProducts = favoriteProducts;
    return this;
  }

  public CoinbaseEngPrimeApiApiUserPreferences addFavoriteProductsItem(String favoriteProductsItem) {
    this.favoriteProducts.add(favoriteProductsItem);
    return this;
  }

   /**
   * List of productIds that the user has favorited
   * @return favoriteProducts
  **/
  @ApiModelProperty(required = true, value = "List of productIds that the user has favorited")
  public List<String> getFavoriteProducts() {
    return favoriteProducts;
  }

  public void setFavoriteProducts(List<String> favoriteProducts) {
    this.favoriteProducts = favoriteProducts;
  }

  public CoinbaseEngPrimeApiApiUserPreferences orderConfirmationWindowToggle(Boolean orderConfirmationWindowToggle) {
    this.orderConfirmationWindowToggle = orderConfirmationWindowToggle;
    return this;
  }

   /**
   * If true, will enable two-step confirmation for order placement
   * @return orderConfirmationWindowToggle
  **/
  @ApiModelProperty(required = true, value = "If true, will enable two-step confirmation for order placement")
  public Boolean isOrderConfirmationWindowToggle() {
    return orderConfirmationWindowToggle;
  }

  public void setOrderConfirmationWindowToggle(Boolean orderConfirmationWindowToggle) {
    this.orderConfirmationWindowToggle = orderConfirmationWindowToggle;
  }

  public CoinbaseEngPrimeApiApiUserPreferences studyInputs(CoinbaseEngPrimeApiApiStudyInputs studyInputs) {
    this.studyInputs = studyInputs;
    return this;
  }

   /**
   * Get studyInputs
   * @return studyInputs
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiStudyInputs getStudyInputs() {
    return studyInputs;
  }

  public void setStudyInputs(CoinbaseEngPrimeApiApiStudyInputs studyInputs) {
    this.studyInputs = studyInputs;
  }

  public CoinbaseEngPrimeApiApiUserPreferences ladderLevelDoubleclickOrdering(Boolean ladderLevelDoubleclickOrdering) {
    this.ladderLevelDoubleclickOrdering = ladderLevelDoubleclickOrdering;
    return this;
  }

   /**
   * If true, will enable ladder doucble-click execution
   * @return ladderLevelDoubleclickOrdering
  **/
  @ApiModelProperty(required = true, value = "If true, will enable ladder doucble-click execution")
  public Boolean isLadderLevelDoubleclickOrdering() {
    return ladderLevelDoubleclickOrdering;
  }

  public void setLadderLevelDoubleclickOrdering(Boolean ladderLevelDoubleclickOrdering) {
    this.ladderLevelDoubleclickOrdering = ladderLevelDoubleclickOrdering;
  }

  public CoinbaseEngPrimeApiApiUserPreferences chartConfiguration(CoinbaseEngPrimeApiApiChartConfiguration chartConfiguration) {
    this.chartConfiguration = chartConfiguration;
    return this;
  }

   /**
   * Get chartConfiguration
   * @return chartConfiguration
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiChartConfiguration getChartConfiguration() {
    return chartConfiguration;
  }

  public void setChartConfiguration(CoinbaseEngPrimeApiApiChartConfiguration chartConfiguration) {
    this.chartConfiguration = chartConfiguration;
  }

  public CoinbaseEngPrimeApiApiUserPreferences defaultPortfolioId(String defaultPortfolioId) {
    this.defaultPortfolioId = defaultPortfolioId;
    return this;
  }

   /**
   * The users default portfolioId
   * @return defaultPortfolioId
  **/
  @ApiModelProperty(value = "The users default portfolioId")
  public String getDefaultPortfolioId() {
    return defaultPortfolioId;
  }

  public void setDefaultPortfolioId(String defaultPortfolioId) {
    this.defaultPortfolioId = defaultPortfolioId;
  }

  public CoinbaseEngPrimeApiApiUserPreferences showNewUserTradeExperience(Boolean showNewUserTradeExperience) {
    this.showNewUserTradeExperience = showNewUserTradeExperience;
    return this;
  }

   /**
   * If true, the new user expirence will be enabled on the trade page
   * @return showNewUserTradeExperience
  **/
  @ApiModelProperty(value = "If true, the new user expirence will be enabled on the trade page")
  public Boolean isShowNewUserTradeExperience() {
    return showNewUserTradeExperience;
  }

  public void setShowNewUserTradeExperience(Boolean showNewUserTradeExperience) {
    this.showNewUserTradeExperience = showNewUserTradeExperience;
  }

  public CoinbaseEngPrimeApiApiUserPreferences orderCancelConfirmationWindowToggle(Boolean orderCancelConfirmationWindowToggle) {
    this.orderCancelConfirmationWindowToggle = orderCancelConfirmationWindowToggle;
    return this;
  }

   /**
   * If true, will enable two-step confirmation for order cancellation
   * @return orderCancelConfirmationWindowToggle
  **/
  @ApiModelProperty(required = true, value = "If true, will enable two-step confirmation for order cancellation")
  public Boolean isOrderCancelConfirmationWindowToggle() {
    return orderCancelConfirmationWindowToggle;
  }

  public void setOrderCancelConfirmationWindowToggle(Boolean orderCancelConfirmationWindowToggle) {
    this.orderCancelConfirmationWindowToggle = orderCancelConfirmationWindowToggle;
  }

  public CoinbaseEngPrimeApiApiUserPreferences orderTableColumns(List<CoinbaseEngPrimeApiApiOrderTableColumn> orderTableColumns) {
    this.orderTableColumns = orderTableColumns;
    return this;
  }

  public CoinbaseEngPrimeApiApiUserPreferences addOrderTableColumnsItem(CoinbaseEngPrimeApiApiOrderTableColumn orderTableColumnsItem) {
    this.orderTableColumns.add(orderTableColumnsItem);
    return this;
  }

   /**
   * Get orderTableColumns
   * @return orderTableColumns
  **/
  @ApiModelProperty(required = true, value = "")
  public List<CoinbaseEngPrimeApiApiOrderTableColumn> getOrderTableColumns() {
    return orderTableColumns;
  }

  public void setOrderTableColumns(List<CoinbaseEngPrimeApiApiOrderTableColumn> orderTableColumns) {
    this.orderTableColumns = orderTableColumns;
  }

  public CoinbaseEngPrimeApiApiUserPreferences pinnedOrders(List<String> pinnedOrders) {
    this.pinnedOrders = pinnedOrders;
    return this;
  }

  public CoinbaseEngPrimeApiApiUserPreferences addPinnedOrdersItem(String pinnedOrdersItem) {
    this.pinnedOrders.add(pinnedOrdersItem);
    return this;
  }

   /**
   * List of orderIds the user has pinned to the trade orders table
   * @return pinnedOrders
  **/
  @ApiModelProperty(required = true, value = "List of orderIds the user has pinned to the trade orders table")
  public List<String> getPinnedOrders() {
    return pinnedOrders;
  }

  public void setPinnedOrders(List<String> pinnedOrders) {
    this.pinnedOrders = pinnedOrders;
  }

  public CoinbaseEngPrimeApiApiUserPreferences keyboardShortcutsToggle(Boolean keyboardShortcutsToggle) {
    this.keyboardShortcutsToggle = keyboardShortcutsToggle;
    return this;
  }

   /**
   * If true, will enable keyboard shortcuts on the trade page
   * @return keyboardShortcutsToggle
  **/
  @ApiModelProperty(required = true, value = "If true, will enable keyboard shortcuts on the trade page")
  public Boolean isKeyboardShortcutsToggle() {
    return keyboardShortcutsToggle;
  }

  public void setKeyboardShortcutsToggle(Boolean keyboardShortcutsToggle) {
    this.keyboardShortcutsToggle = keyboardShortcutsToggle;
  }

  public CoinbaseEngPrimeApiApiUserPreferences orderRaiseExactToggle(Boolean orderRaiseExactToggle) {
    this.orderRaiseExactToggle = orderRaiseExactToggle;
    return this;
  }

   /**
   * If true, will return size inclusive of fees for SELL+sizeInQuote orders
   * @return orderRaiseExactToggle
  **/
  @ApiModelProperty(required = true, value = "If true, will return size inclusive of fees for SELL+sizeInQuote orders")
  public Boolean isOrderRaiseExactToggle() {
    return orderRaiseExactToggle;
  }

  public void setOrderRaiseExactToggle(Boolean orderRaiseExactToggle) {
    this.orderRaiseExactToggle = orderRaiseExactToggle;
  }

  public CoinbaseEngPrimeApiApiUserPreferences orderFormPersistToggle(Boolean orderFormPersistToggle) {
    this.orderFormPersistToggle = orderFormPersistToggle;
    return this;
  }

   /**
   * If true, will enable order form persistence on the trade page
   * @return orderFormPersistToggle
  **/
  @ApiModelProperty(required = true, value = "If true, will enable order form persistence on the trade page")
  public Boolean isOrderFormPersistToggle() {
    return orderFormPersistToggle;
  }

  public void setOrderFormPersistToggle(Boolean orderFormPersistToggle) {
    this.orderFormPersistToggle = orderFormPersistToggle;
  }

  public CoinbaseEngPrimeApiApiUserPreferences orderFormSizeWarningsToggle(Boolean orderFormSizeWarningsToggle) {
    this.orderFormSizeWarningsToggle = orderFormSizeWarningsToggle;
    return this;
  }

   /**
   * If true, will enable order form size warnings on the trade page
   * @return orderFormSizeWarningsToggle
  **/
  @ApiModelProperty(required = true, value = "If true, will enable order form size warnings on the trade page")
  public Boolean isOrderFormSizeWarningsToggle() {
    return orderFormSizeWarningsToggle;
  }

  public void setOrderFormSizeWarningsToggle(Boolean orderFormSizeWarningsToggle) {
    this.orderFormSizeWarningsToggle = orderFormSizeWarningsToggle;
  }

  public CoinbaseEngPrimeApiApiUserPreferences ladderIcebergToggle(Boolean ladderIcebergToggle) {
    this.ladderIcebergToggle = ladderIcebergToggle;
    return this;
  }

   /**
   * If true, will enable iceberg orders in the price ladder on the trade page
   * @return ladderIcebergToggle
  **/
  @ApiModelProperty(required = true, value = "If true, will enable iceberg orders in the price ladder on the trade page")
  public Boolean isLadderIcebergToggle() {
    return ladderIcebergToggle;
  }

  public void setLadderIcebergToggle(Boolean ladderIcebergToggle) {
    this.ladderIcebergToggle = ladderIcebergToggle;
  }

  public CoinbaseEngPrimeApiApiUserPreferences primeBetaToggle(Boolean primeBetaToggle) {
    this.primeBetaToggle = primeBetaToggle;
    return this;
  }

   /**
   * If true, will enable beta features for prime user
   * @return primeBetaToggle
  **/
  @ApiModelProperty(value = "If true, will enable beta features for prime user")
  public Boolean isPrimeBetaToggle() {
    return primeBetaToggle;
  }

  public void setPrimeBetaToggle(Boolean primeBetaToggle) {
    this.primeBetaToggle = primeBetaToggle;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseEngPrimeApiApiUserPreferences coinbaseEngPrimeApiApiUserPreferences = (CoinbaseEngPrimeApiApiUserPreferences) o;
    return Objects.equals(this.favoriteProducts, coinbaseEngPrimeApiApiUserPreferences.favoriteProducts) &&
        Objects.equals(this.orderConfirmationWindowToggle, coinbaseEngPrimeApiApiUserPreferences.orderConfirmationWindowToggle) &&
        Objects.equals(this.studyInputs, coinbaseEngPrimeApiApiUserPreferences.studyInputs) &&
        Objects.equals(this.ladderLevelDoubleclickOrdering, coinbaseEngPrimeApiApiUserPreferences.ladderLevelDoubleclickOrdering) &&
        Objects.equals(this.chartConfiguration, coinbaseEngPrimeApiApiUserPreferences.chartConfiguration) &&
        Objects.equals(this.defaultPortfolioId, coinbaseEngPrimeApiApiUserPreferences.defaultPortfolioId) &&
        Objects.equals(this.showNewUserTradeExperience, coinbaseEngPrimeApiApiUserPreferences.showNewUserTradeExperience) &&
        Objects.equals(this.orderCancelConfirmationWindowToggle, coinbaseEngPrimeApiApiUserPreferences.orderCancelConfirmationWindowToggle) &&
        Objects.equals(this.orderTableColumns, coinbaseEngPrimeApiApiUserPreferences.orderTableColumns) &&
        Objects.equals(this.pinnedOrders, coinbaseEngPrimeApiApiUserPreferences.pinnedOrders) &&
        Objects.equals(this.keyboardShortcutsToggle, coinbaseEngPrimeApiApiUserPreferences.keyboardShortcutsToggle) &&
        Objects.equals(this.orderRaiseExactToggle, coinbaseEngPrimeApiApiUserPreferences.orderRaiseExactToggle) &&
        Objects.equals(this.orderFormPersistToggle, coinbaseEngPrimeApiApiUserPreferences.orderFormPersistToggle) &&
        Objects.equals(this.orderFormSizeWarningsToggle, coinbaseEngPrimeApiApiUserPreferences.orderFormSizeWarningsToggle) &&
        Objects.equals(this.ladderIcebergToggle, coinbaseEngPrimeApiApiUserPreferences.ladderIcebergToggle) &&
        Objects.equals(this.primeBetaToggle, coinbaseEngPrimeApiApiUserPreferences.primeBetaToggle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(favoriteProducts, orderConfirmationWindowToggle, studyInputs, ladderLevelDoubleclickOrdering, chartConfiguration, defaultPortfolioId, showNewUserTradeExperience, orderCancelConfirmationWindowToggle, orderTableColumns, pinnedOrders, keyboardShortcutsToggle, orderRaiseExactToggle, orderFormPersistToggle, orderFormSizeWarningsToggle, ladderIcebergToggle, primeBetaToggle);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseEngPrimeApiApiUserPreferences {\n");
    
    sb.append("    favoriteProducts: ").append(toIndentedString(favoriteProducts)).append("\n");
    sb.append("    orderConfirmationWindowToggle: ").append(toIndentedString(orderConfirmationWindowToggle)).append("\n");
    sb.append("    studyInputs: ").append(toIndentedString(studyInputs)).append("\n");
    sb.append("    ladderLevelDoubleclickOrdering: ").append(toIndentedString(ladderLevelDoubleclickOrdering)).append("\n");
    sb.append("    chartConfiguration: ").append(toIndentedString(chartConfiguration)).append("\n");
    sb.append("    defaultPortfolioId: ").append(toIndentedString(defaultPortfolioId)).append("\n");
    sb.append("    showNewUserTradeExperience: ").append(toIndentedString(showNewUserTradeExperience)).append("\n");
    sb.append("    orderCancelConfirmationWindowToggle: ").append(toIndentedString(orderCancelConfirmationWindowToggle)).append("\n");
    sb.append("    orderTableColumns: ").append(toIndentedString(orderTableColumns)).append("\n");
    sb.append("    pinnedOrders: ").append(toIndentedString(pinnedOrders)).append("\n");
    sb.append("    keyboardShortcutsToggle: ").append(toIndentedString(keyboardShortcutsToggle)).append("\n");
    sb.append("    orderRaiseExactToggle: ").append(toIndentedString(orderRaiseExactToggle)).append("\n");
    sb.append("    orderFormPersistToggle: ").append(toIndentedString(orderFormPersistToggle)).append("\n");
    sb.append("    orderFormSizeWarningsToggle: ").append(toIndentedString(orderFormSizeWarningsToggle)).append("\n");
    sb.append("    ladderIcebergToggle: ").append(toIndentedString(ladderIcebergToggle)).append("\n");
    sb.append("    primeBetaToggle: ").append(toIndentedString(primeBetaToggle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

