/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CoinbaseEngPrimeApiApiWalletBalance
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseEngPrimeApiApiWalletBalance {
  @SerializedName("value")
  private String value = null;

  @SerializedName("usd_value")
  private String usdValue = null;

  @SerializedName("withdrawable_value")
  private String withdrawableValue = null;

  @SerializedName("withdrawable_usd_value")
  private String withdrawableUsdValue = null;

  @SerializedName("bonded_value")
  private String bondedValue = null;

  @SerializedName("reserved_value")
  private String reservedValue = null;

  @SerializedName("unbonding_value")
  private String unbondingValue = null;

  @SerializedName("unvested_value")
  private String unvestedValue = null;

  @SerializedName("vested_value")
  private String vestedValue = null;

  @SerializedName("pending_rewards_value")
  private String pendingRewardsValue = null;

  @SerializedName("lifetime_rewards_value")
  private String lifetimeRewardsValue = null;

  @SerializedName("bondable_value")
  private String bondableValue = null;

  public CoinbaseEngPrimeApiApiWalletBalance value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Total balance
   * @return value
  **/
  @ApiModelProperty(value = "Total balance")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public CoinbaseEngPrimeApiApiWalletBalance usdValue(String usdValue) {
    this.usdValue = usdValue;
    return this;
  }

   /**
   * Total balance in fiat
   * @return usdValue
  **/
  @ApiModelProperty(value = "Total balance in fiat")
  public String getUsdValue() {
    return usdValue;
  }

  public void setUsdValue(String usdValue) {
    this.usdValue = usdValue;
  }

  public CoinbaseEngPrimeApiApiWalletBalance withdrawableValue(String withdrawableValue) {
    this.withdrawableValue = withdrawableValue;
    return this;
  }

   /**
   * Withdrawable (i.e. available) balance for vault + trading balance
   * @return withdrawableValue
  **/
  @ApiModelProperty(value = "Withdrawable (i.e. available) balance for vault + trading balance")
  public String getWithdrawableValue() {
    return withdrawableValue;
  }

  public void setWithdrawableValue(String withdrawableValue) {
    this.withdrawableValue = withdrawableValue;
  }

  public CoinbaseEngPrimeApiApiWalletBalance withdrawableUsdValue(String withdrawableUsdValue) {
    this.withdrawableUsdValue = withdrawableUsdValue;
    return this;
  }

   /**
   * Withdrawable (i.e. available) balance for vault + trading balance in fiat
   * @return withdrawableUsdValue
  **/
  @ApiModelProperty(value = "Withdrawable (i.e. available) balance for vault + trading balance in fiat")
  public String getWithdrawableUsdValue() {
    return withdrawableUsdValue;
  }

  public void setWithdrawableUsdValue(String withdrawableUsdValue) {
    this.withdrawableUsdValue = withdrawableUsdValue;
  }

  public CoinbaseEngPrimeApiApiWalletBalance bondedValue(String bondedValue) {
    this.bondedValue = bondedValue;
    return this;
  }

   /**
   * Balance which has been locked due to bonding/staking, potentially subject to an unbonding period
   * @return bondedValue
  **/
  @ApiModelProperty(value = "Balance which has been locked due to bonding/staking, potentially subject to an unbonding period")
  public String getBondedValue() {
    return bondedValue;
  }

  public void setBondedValue(String bondedValue) {
    this.bondedValue = bondedValue;
  }

  public CoinbaseEngPrimeApiApiWalletBalance reservedValue(String reservedValue) {
    this.reservedValue = reservedValue;
    return this;
  }

   /**
   * Balance which must remain in the wallet untouched due to the protocol
   * @return reservedValue
  **/
  @ApiModelProperty(value = "Balance which must remain in the wallet untouched due to the protocol")
  public String getReservedValue() {
    return reservedValue;
  }

  public void setReservedValue(String reservedValue) {
    this.reservedValue = reservedValue;
  }

  public CoinbaseEngPrimeApiApiWalletBalance unbondingValue(String unbondingValue) {
    this.unbondingValue = unbondingValue;
    return this;
  }

   /**
   * Balance which is currently in the process of unbonding
   * @return unbondingValue
  **/
  @ApiModelProperty(value = "Balance which is currently in the process of unbonding")
  public String getUnbondingValue() {
    return unbondingValue;
  }

  public void setUnbondingValue(String unbondingValue) {
    this.unbondingValue = unbondingValue;
  }

  public CoinbaseEngPrimeApiApiWalletBalance unvestedValue(String unvestedValue) {
    this.unvestedValue = unvestedValue;
    return this;
  }

   /**
   * Unrealized balance subject to a vesting schedule
   * @return unvestedValue
  **/
  @ApiModelProperty(value = "Unrealized balance subject to a vesting schedule")
  public String getUnvestedValue() {
    return unvestedValue;
  }

  public void setUnvestedValue(String unvestedValue) {
    this.unvestedValue = unvestedValue;
  }

  public CoinbaseEngPrimeApiApiWalletBalance vestedValue(String vestedValue) {
    this.vestedValue = vestedValue;
    return this;
  }

   /**
   * Realized vested balance (balance - unvested balance)
   * @return vestedValue
  **/
  @ApiModelProperty(value = "Realized vested balance (balance - unvested balance)")
  public String getVestedValue() {
    return vestedValue;
  }

  public void setVestedValue(String vestedValue) {
    this.vestedValue = vestedValue;
  }

  public CoinbaseEngPrimeApiApiWalletBalance pendingRewardsValue(String pendingRewardsValue) {
    this.pendingRewardsValue = pendingRewardsValue;
    return this;
  }

   /**
   * Pending bonding/staking rewards that have not yet been realized
   * @return pendingRewardsValue
  **/
  @ApiModelProperty(value = "Pending bonding/staking rewards that have not yet been realized")
  public String getPendingRewardsValue() {
    return pendingRewardsValue;
  }

  public void setPendingRewardsValue(String pendingRewardsValue) {
    this.pendingRewardsValue = pendingRewardsValue;
  }

  public CoinbaseEngPrimeApiApiWalletBalance lifetimeRewardsValue(String lifetimeRewardsValue) {
    this.lifetimeRewardsValue = lifetimeRewardsValue;
    return this;
  }

   /**
   * Previously realized bonding/staking rewards
   * @return lifetimeRewardsValue
  **/
  @ApiModelProperty(value = "Previously realized bonding/staking rewards")
  public String getLifetimeRewardsValue() {
    return lifetimeRewardsValue;
  }

  public void setLifetimeRewardsValue(String lifetimeRewardsValue) {
    this.lifetimeRewardsValue = lifetimeRewardsValue;
  }

  public CoinbaseEngPrimeApiApiWalletBalance bondableValue(String bondableValue) {
    this.bondableValue = bondableValue;
    return this;
  }

   /**
   * Balance available for bonding/staking
   * @return bondableValue
  **/
  @ApiModelProperty(value = "Balance available for bonding/staking")
  public String getBondableValue() {
    return bondableValue;
  }

  public void setBondableValue(String bondableValue) {
    this.bondableValue = bondableValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseEngPrimeApiApiWalletBalance coinbaseEngPrimeApiApiWalletBalance = (CoinbaseEngPrimeApiApiWalletBalance) o;
    return Objects.equals(this.value, coinbaseEngPrimeApiApiWalletBalance.value) &&
        Objects.equals(this.usdValue, coinbaseEngPrimeApiApiWalletBalance.usdValue) &&
        Objects.equals(this.withdrawableValue, coinbaseEngPrimeApiApiWalletBalance.withdrawableValue) &&
        Objects.equals(this.withdrawableUsdValue, coinbaseEngPrimeApiApiWalletBalance.withdrawableUsdValue) &&
        Objects.equals(this.bondedValue, coinbaseEngPrimeApiApiWalletBalance.bondedValue) &&
        Objects.equals(this.reservedValue, coinbaseEngPrimeApiApiWalletBalance.reservedValue) &&
        Objects.equals(this.unbondingValue, coinbaseEngPrimeApiApiWalletBalance.unbondingValue) &&
        Objects.equals(this.unvestedValue, coinbaseEngPrimeApiApiWalletBalance.unvestedValue) &&
        Objects.equals(this.vestedValue, coinbaseEngPrimeApiApiWalletBalance.vestedValue) &&
        Objects.equals(this.pendingRewardsValue, coinbaseEngPrimeApiApiWalletBalance.pendingRewardsValue) &&
        Objects.equals(this.lifetimeRewardsValue, coinbaseEngPrimeApiApiWalletBalance.lifetimeRewardsValue) &&
        Objects.equals(this.bondableValue, coinbaseEngPrimeApiApiWalletBalance.bondableValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, usdValue, withdrawableValue, withdrawableUsdValue, bondedValue, reservedValue, unbondingValue, unvestedValue, vestedValue, pendingRewardsValue, lifetimeRewardsValue, bondableValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseEngPrimeApiApiWalletBalance {\n");
    
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    usdValue: ").append(toIndentedString(usdValue)).append("\n");
    sb.append("    withdrawableValue: ").append(toIndentedString(withdrawableValue)).append("\n");
    sb.append("    withdrawableUsdValue: ").append(toIndentedString(withdrawableUsdValue)).append("\n");
    sb.append("    bondedValue: ").append(toIndentedString(bondedValue)).append("\n");
    sb.append("    reservedValue: ").append(toIndentedString(reservedValue)).append("\n");
    sb.append("    unbondingValue: ").append(toIndentedString(unbondingValue)).append("\n");
    sb.append("    unvestedValue: ").append(toIndentedString(unvestedValue)).append("\n");
    sb.append("    vestedValue: ").append(toIndentedString(vestedValue)).append("\n");
    sb.append("    pendingRewardsValue: ").append(toIndentedString(pendingRewardsValue)).append("\n");
    sb.append("    lifetimeRewardsValue: ").append(toIndentedString(lifetimeRewardsValue)).append("\n");
    sb.append("    bondableValue: ").append(toIndentedString(bondableValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

