/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonBlockTradeLimitLimitFok;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonLimitLimitGtc;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonLimitLimitGtd;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonLiquidationMarketGtc;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonLiquidationMarketGtd;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonMarketMarketIoc;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonSorLimitFok;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonSorLimitIoc;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonStopLimitStopLimitGtc;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonStopLimitStopLimitGtd;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonTriggerStopLimitGtc;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonTriggerStopLimitGtd;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonTriggerTakeProfitStopLossGtc;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonTriggerTakeProfitStopLossGtd;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonTwapLimitGtd;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonVwapLimitGtd;
import java.io.IOException;

/**
 * CoinbaseBrokerageProxyCommonOrderConfiguration
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseBrokerageProxyCommonOrderConfiguration {
  @SerializedName("market_market_ioc")
  private CoinbaseBrokerageProxyCommonMarketMarketIoc marketMarketIoc = null;

  @SerializedName("sor_limit_ioc")
  private CoinbaseBrokerageProxyCommonSorLimitIoc sorLimitIoc = null;

  @SerializedName("sor_limit_fok")
  private CoinbaseBrokerageProxyCommonSorLimitFok sorLimitFok = null;

  @SerializedName("limit_limit_gtc")
  private CoinbaseBrokerageProxyCommonLimitLimitGtc limitLimitGtc = null;

  @SerializedName("limit_limit_gtd")
  private CoinbaseBrokerageProxyCommonLimitLimitGtd limitLimitGtd = null;

  @SerializedName("twap_limit_gtd")
  private CoinbaseBrokerageProxyCommonTwapLimitGtd twapLimitGtd = null;

  @SerializedName("vwap_limit_gtd")
  private CoinbaseBrokerageProxyCommonVwapLimitGtd vwapLimitGtd = null;

  @SerializedName("stop_limit_stop_limit_gtc")
  private CoinbaseBrokerageProxyCommonStopLimitStopLimitGtc stopLimitStopLimitGtc = null;

  @SerializedName("stop_limit_stop_limit_gtd")
  private CoinbaseBrokerageProxyCommonStopLimitStopLimitGtd stopLimitStopLimitGtd = null;

  @SerializedName("block_trade_limit_limit_fok")
  private CoinbaseBrokerageProxyCommonBlockTradeLimitLimitFok blockTradeLimitLimitFok = null;

  @SerializedName("liquidation_market_gtc")
  private CoinbaseBrokerageProxyCommonLiquidationMarketGtc liquidationMarketGtc = null;

  @SerializedName("liquidation_market_gtd")
  private CoinbaseBrokerageProxyCommonLiquidationMarketGtd liquidationMarketGtd = null;

  @SerializedName("trigger_stop_limit_gtc")
  private CoinbaseBrokerageProxyCommonTriggerStopLimitGtc triggerStopLimitGtc = null;

  @SerializedName("trigger_stop_limit_gtd")
  private CoinbaseBrokerageProxyCommonTriggerStopLimitGtd triggerStopLimitGtd = null;

  @SerializedName("trigger_take_profit_stop_loss_gtc")
  private CoinbaseBrokerageProxyCommonTriggerTakeProfitStopLossGtc triggerTakeProfitStopLossGtc = null;

  @SerializedName("trigger_take_profit_stop_loss_gtd")
  private CoinbaseBrokerageProxyCommonTriggerTakeProfitStopLossGtd triggerTakeProfitStopLossGtd = null;

  public CoinbaseBrokerageProxyCommonOrderConfiguration marketMarketIoc(CoinbaseBrokerageProxyCommonMarketMarketIoc marketMarketIoc) {
    this.marketMarketIoc = marketMarketIoc;
    return this;
  }

   /**
   * Get marketMarketIoc
   * @return marketMarketIoc
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonMarketMarketIoc getMarketMarketIoc() {
    return marketMarketIoc;
  }

  public void setMarketMarketIoc(CoinbaseBrokerageProxyCommonMarketMarketIoc marketMarketIoc) {
    this.marketMarketIoc = marketMarketIoc;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration sorLimitIoc(CoinbaseBrokerageProxyCommonSorLimitIoc sorLimitIoc) {
    this.sorLimitIoc = sorLimitIoc;
    return this;
  }

   /**
   * Get sorLimitIoc
   * @return sorLimitIoc
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonSorLimitIoc getSorLimitIoc() {
    return sorLimitIoc;
  }

  public void setSorLimitIoc(CoinbaseBrokerageProxyCommonSorLimitIoc sorLimitIoc) {
    this.sorLimitIoc = sorLimitIoc;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration sorLimitFok(CoinbaseBrokerageProxyCommonSorLimitFok sorLimitFok) {
    this.sorLimitFok = sorLimitFok;
    return this;
  }

   /**
   * Get sorLimitFok
   * @return sorLimitFok
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonSorLimitFok getSorLimitFok() {
    return sorLimitFok;
  }

  public void setSorLimitFok(CoinbaseBrokerageProxyCommonSorLimitFok sorLimitFok) {
    this.sorLimitFok = sorLimitFok;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration limitLimitGtc(CoinbaseBrokerageProxyCommonLimitLimitGtc limitLimitGtc) {
    this.limitLimitGtc = limitLimitGtc;
    return this;
  }

   /**
   * Get limitLimitGtc
   * @return limitLimitGtc
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonLimitLimitGtc getLimitLimitGtc() {
    return limitLimitGtc;
  }

  public void setLimitLimitGtc(CoinbaseBrokerageProxyCommonLimitLimitGtc limitLimitGtc) {
    this.limitLimitGtc = limitLimitGtc;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration limitLimitGtd(CoinbaseBrokerageProxyCommonLimitLimitGtd limitLimitGtd) {
    this.limitLimitGtd = limitLimitGtd;
    return this;
  }

   /**
   * Get limitLimitGtd
   * @return limitLimitGtd
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonLimitLimitGtd getLimitLimitGtd() {
    return limitLimitGtd;
  }

  public void setLimitLimitGtd(CoinbaseBrokerageProxyCommonLimitLimitGtd limitLimitGtd) {
    this.limitLimitGtd = limitLimitGtd;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration twapLimitGtd(CoinbaseBrokerageProxyCommonTwapLimitGtd twapLimitGtd) {
    this.twapLimitGtd = twapLimitGtd;
    return this;
  }

   /**
   * Get twapLimitGtd
   * @return twapLimitGtd
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonTwapLimitGtd getTwapLimitGtd() {
    return twapLimitGtd;
  }

  public void setTwapLimitGtd(CoinbaseBrokerageProxyCommonTwapLimitGtd twapLimitGtd) {
    this.twapLimitGtd = twapLimitGtd;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration vwapLimitGtd(CoinbaseBrokerageProxyCommonVwapLimitGtd vwapLimitGtd) {
    this.vwapLimitGtd = vwapLimitGtd;
    return this;
  }

   /**
   * Get vwapLimitGtd
   * @return vwapLimitGtd
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonVwapLimitGtd getVwapLimitGtd() {
    return vwapLimitGtd;
  }

  public void setVwapLimitGtd(CoinbaseBrokerageProxyCommonVwapLimitGtd vwapLimitGtd) {
    this.vwapLimitGtd = vwapLimitGtd;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration stopLimitStopLimitGtc(CoinbaseBrokerageProxyCommonStopLimitStopLimitGtc stopLimitStopLimitGtc) {
    this.stopLimitStopLimitGtc = stopLimitStopLimitGtc;
    return this;
  }

   /**
   * Get stopLimitStopLimitGtc
   * @return stopLimitStopLimitGtc
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonStopLimitStopLimitGtc getStopLimitStopLimitGtc() {
    return stopLimitStopLimitGtc;
  }

  public void setStopLimitStopLimitGtc(CoinbaseBrokerageProxyCommonStopLimitStopLimitGtc stopLimitStopLimitGtc) {
    this.stopLimitStopLimitGtc = stopLimitStopLimitGtc;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration stopLimitStopLimitGtd(CoinbaseBrokerageProxyCommonStopLimitStopLimitGtd stopLimitStopLimitGtd) {
    this.stopLimitStopLimitGtd = stopLimitStopLimitGtd;
    return this;
  }

   /**
   * Get stopLimitStopLimitGtd
   * @return stopLimitStopLimitGtd
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonStopLimitStopLimitGtd getStopLimitStopLimitGtd() {
    return stopLimitStopLimitGtd;
  }

  public void setStopLimitStopLimitGtd(CoinbaseBrokerageProxyCommonStopLimitStopLimitGtd stopLimitStopLimitGtd) {
    this.stopLimitStopLimitGtd = stopLimitStopLimitGtd;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration blockTradeLimitLimitFok(CoinbaseBrokerageProxyCommonBlockTradeLimitLimitFok blockTradeLimitLimitFok) {
    this.blockTradeLimitLimitFok = blockTradeLimitLimitFok;
    return this;
  }

   /**
   * Get blockTradeLimitLimitFok
   * @return blockTradeLimitLimitFok
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonBlockTradeLimitLimitFok getBlockTradeLimitLimitFok() {
    return blockTradeLimitLimitFok;
  }

  public void setBlockTradeLimitLimitFok(CoinbaseBrokerageProxyCommonBlockTradeLimitLimitFok blockTradeLimitLimitFok) {
    this.blockTradeLimitLimitFok = blockTradeLimitLimitFok;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration liquidationMarketGtc(CoinbaseBrokerageProxyCommonLiquidationMarketGtc liquidationMarketGtc) {
    this.liquidationMarketGtc = liquidationMarketGtc;
    return this;
  }

   /**
   * Get liquidationMarketGtc
   * @return liquidationMarketGtc
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonLiquidationMarketGtc getLiquidationMarketGtc() {
    return liquidationMarketGtc;
  }

  public void setLiquidationMarketGtc(CoinbaseBrokerageProxyCommonLiquidationMarketGtc liquidationMarketGtc) {
    this.liquidationMarketGtc = liquidationMarketGtc;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration liquidationMarketGtd(CoinbaseBrokerageProxyCommonLiquidationMarketGtd liquidationMarketGtd) {
    this.liquidationMarketGtd = liquidationMarketGtd;
    return this;
  }

   /**
   * Get liquidationMarketGtd
   * @return liquidationMarketGtd
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonLiquidationMarketGtd getLiquidationMarketGtd() {
    return liquidationMarketGtd;
  }

  public void setLiquidationMarketGtd(CoinbaseBrokerageProxyCommonLiquidationMarketGtd liquidationMarketGtd) {
    this.liquidationMarketGtd = liquidationMarketGtd;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration triggerStopLimitGtc(CoinbaseBrokerageProxyCommonTriggerStopLimitGtc triggerStopLimitGtc) {
    this.triggerStopLimitGtc = triggerStopLimitGtc;
    return this;
  }

   /**
   * Get triggerStopLimitGtc
   * @return triggerStopLimitGtc
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonTriggerStopLimitGtc getTriggerStopLimitGtc() {
    return triggerStopLimitGtc;
  }

  public void setTriggerStopLimitGtc(CoinbaseBrokerageProxyCommonTriggerStopLimitGtc triggerStopLimitGtc) {
    this.triggerStopLimitGtc = triggerStopLimitGtc;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration triggerStopLimitGtd(CoinbaseBrokerageProxyCommonTriggerStopLimitGtd triggerStopLimitGtd) {
    this.triggerStopLimitGtd = triggerStopLimitGtd;
    return this;
  }

   /**
   * Get triggerStopLimitGtd
   * @return triggerStopLimitGtd
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonTriggerStopLimitGtd getTriggerStopLimitGtd() {
    return triggerStopLimitGtd;
  }

  public void setTriggerStopLimitGtd(CoinbaseBrokerageProxyCommonTriggerStopLimitGtd triggerStopLimitGtd) {
    this.triggerStopLimitGtd = triggerStopLimitGtd;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration triggerTakeProfitStopLossGtc(CoinbaseBrokerageProxyCommonTriggerTakeProfitStopLossGtc triggerTakeProfitStopLossGtc) {
    this.triggerTakeProfitStopLossGtc = triggerTakeProfitStopLossGtc;
    return this;
  }

   /**
   * Get triggerTakeProfitStopLossGtc
   * @return triggerTakeProfitStopLossGtc
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonTriggerTakeProfitStopLossGtc getTriggerTakeProfitStopLossGtc() {
    return triggerTakeProfitStopLossGtc;
  }

  public void setTriggerTakeProfitStopLossGtc(CoinbaseBrokerageProxyCommonTriggerTakeProfitStopLossGtc triggerTakeProfitStopLossGtc) {
    this.triggerTakeProfitStopLossGtc = triggerTakeProfitStopLossGtc;
  }

  public CoinbaseBrokerageProxyCommonOrderConfiguration triggerTakeProfitStopLossGtd(CoinbaseBrokerageProxyCommonTriggerTakeProfitStopLossGtd triggerTakeProfitStopLossGtd) {
    this.triggerTakeProfitStopLossGtd = triggerTakeProfitStopLossGtd;
    return this;
  }

   /**
   * Get triggerTakeProfitStopLossGtd
   * @return triggerTakeProfitStopLossGtd
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyCommonTriggerTakeProfitStopLossGtd getTriggerTakeProfitStopLossGtd() {
    return triggerTakeProfitStopLossGtd;
  }

  public void setTriggerTakeProfitStopLossGtd(CoinbaseBrokerageProxyCommonTriggerTakeProfitStopLossGtd triggerTakeProfitStopLossGtd) {
    this.triggerTakeProfitStopLossGtd = triggerTakeProfitStopLossGtd;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseBrokerageProxyCommonOrderConfiguration coinbaseBrokerageProxyCommonOrderConfiguration = (CoinbaseBrokerageProxyCommonOrderConfiguration) o;
    return Objects.equals(this.marketMarketIoc, coinbaseBrokerageProxyCommonOrderConfiguration.marketMarketIoc) &&
        Objects.equals(this.sorLimitIoc, coinbaseBrokerageProxyCommonOrderConfiguration.sorLimitIoc) &&
        Objects.equals(this.sorLimitFok, coinbaseBrokerageProxyCommonOrderConfiguration.sorLimitFok) &&
        Objects.equals(this.limitLimitGtc, coinbaseBrokerageProxyCommonOrderConfiguration.limitLimitGtc) &&
        Objects.equals(this.limitLimitGtd, coinbaseBrokerageProxyCommonOrderConfiguration.limitLimitGtd) &&
        Objects.equals(this.twapLimitGtd, coinbaseBrokerageProxyCommonOrderConfiguration.twapLimitGtd) &&
        Objects.equals(this.vwapLimitGtd, coinbaseBrokerageProxyCommonOrderConfiguration.vwapLimitGtd) &&
        Objects.equals(this.stopLimitStopLimitGtc, coinbaseBrokerageProxyCommonOrderConfiguration.stopLimitStopLimitGtc) &&
        Objects.equals(this.stopLimitStopLimitGtd, coinbaseBrokerageProxyCommonOrderConfiguration.stopLimitStopLimitGtd) &&
        Objects.equals(this.blockTradeLimitLimitFok, coinbaseBrokerageProxyCommonOrderConfiguration.blockTradeLimitLimitFok) &&
        Objects.equals(this.liquidationMarketGtc, coinbaseBrokerageProxyCommonOrderConfiguration.liquidationMarketGtc) &&
        Objects.equals(this.liquidationMarketGtd, coinbaseBrokerageProxyCommonOrderConfiguration.liquidationMarketGtd) &&
        Objects.equals(this.triggerStopLimitGtc, coinbaseBrokerageProxyCommonOrderConfiguration.triggerStopLimitGtc) &&
        Objects.equals(this.triggerStopLimitGtd, coinbaseBrokerageProxyCommonOrderConfiguration.triggerStopLimitGtd) &&
        Objects.equals(this.triggerTakeProfitStopLossGtc, coinbaseBrokerageProxyCommonOrderConfiguration.triggerTakeProfitStopLossGtc) &&
        Objects.equals(this.triggerTakeProfitStopLossGtd, coinbaseBrokerageProxyCommonOrderConfiguration.triggerTakeProfitStopLossGtd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(marketMarketIoc, sorLimitIoc, sorLimitFok, limitLimitGtc, limitLimitGtd, twapLimitGtd, vwapLimitGtd, stopLimitStopLimitGtc, stopLimitStopLimitGtd, blockTradeLimitLimitFok, liquidationMarketGtc, liquidationMarketGtd, triggerStopLimitGtc, triggerStopLimitGtd, triggerTakeProfitStopLossGtc, triggerTakeProfitStopLossGtd);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseBrokerageProxyCommonOrderConfiguration {\n");
    
    sb.append("    marketMarketIoc: ").append(toIndentedString(marketMarketIoc)).append("\n");
    sb.append("    sorLimitIoc: ").append(toIndentedString(sorLimitIoc)).append("\n");
    sb.append("    sorLimitFok: ").append(toIndentedString(sorLimitFok)).append("\n");
    sb.append("    limitLimitGtc: ").append(toIndentedString(limitLimitGtc)).append("\n");
    sb.append("    limitLimitGtd: ").append(toIndentedString(limitLimitGtd)).append("\n");
    sb.append("    twapLimitGtd: ").append(toIndentedString(twapLimitGtd)).append("\n");
    sb.append("    vwapLimitGtd: ").append(toIndentedString(vwapLimitGtd)).append("\n");
    sb.append("    stopLimitStopLimitGtc: ").append(toIndentedString(stopLimitStopLimitGtc)).append("\n");
    sb.append("    stopLimitStopLimitGtd: ").append(toIndentedString(stopLimitStopLimitGtd)).append("\n");
    sb.append("    blockTradeLimitLimitFok: ").append(toIndentedString(blockTradeLimitLimitFok)).append("\n");
    sb.append("    liquidationMarketGtc: ").append(toIndentedString(liquidationMarketGtc)).append("\n");
    sb.append("    liquidationMarketGtd: ").append(toIndentedString(liquidationMarketGtd)).append("\n");
    sb.append("    triggerStopLimitGtc: ").append(toIndentedString(triggerStopLimitGtc)).append("\n");
    sb.append("    triggerStopLimitGtd: ").append(toIndentedString(triggerStopLimitGtd)).append("\n");
    sb.append("    triggerTakeProfitStopLossGtc: ").append(toIndentedString(triggerTakeProfitStopLossGtc)).append("\n");
    sb.append("    triggerTakeProfitStopLossGtd: ").append(toIndentedString(triggerTakeProfitStopLossGtd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

