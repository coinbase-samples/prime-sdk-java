/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseEngPrimeApiApiWeb3RiskScore;
import io.swagger.client.model.CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadata;
import io.swagger.client.model.EngPrimePolicyApiEvaluationResult;
import io.swagger.client.model.ScannerScanResponse;
import java.io.IOException;

/**
 * CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails {
  @SerializedName("raw_unsigned_tx")
  private String rawUnsignedTx = null;

  @SerializedName("network_name")
  private String networkName = null;

  @SerializedName("transaction_hash")
  private String transactionHash = null;

  @SerializedName("metadata")
  private CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadata metadata = null;

  @SerializedName("source_address")
  private String sourceAddress = null;

  @SerializedName("dapp_name")
  private String dappName = null;

  @SerializedName("dapp_url")
  private String dappUrl = null;

  @SerializedName("destination_address")
  private String destinationAddress = null;

  @SerializedName("risk_score")
  private CoinbaseEngPrimeApiApiWeb3RiskScore riskScore = null;

  @SerializedName("operation_name")
  private String operationName = null;

  @SerializedName("chain_id")
  private String chainId = null;

  @SerializedName("nonce")
  private String nonce = null;

  @SerializedName("replaced_transaction_id")
  private String replacedTransactionId = null;

  @SerializedName("idempotency_key")
  private String idempotencyKey = null;

  @SerializedName("tx_scanner_result")
  private ScannerScanResponse txScannerResult = null;

  @SerializedName("source_wallet_id")
  private String sourceWalletId = null;

  @SerializedName("ready_for_signing")
  private Boolean readyForSigning = null;

  @SerializedName("signing_initiated_timestamp")
  private String signingInitiatedTimestamp = null;

  @SerializedName("evaluation_result")
  private EngPrimePolicyApiEvaluationResult evaluationResult = null;

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails rawUnsignedTx(String rawUnsignedTx) {
    this.rawUnsignedTx = rawUnsignedTx;
    return this;
  }

   /**
   * Get rawUnsignedTx
   * @return rawUnsignedTx
  **/
  @ApiModelProperty(required = true, value = "")
  public String getRawUnsignedTx() {
    return rawUnsignedTx;
  }

  public void setRawUnsignedTx(String rawUnsignedTx) {
    this.rawUnsignedTx = rawUnsignedTx;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails networkName(String networkName) {
    this.networkName = networkName;
    return this;
  }

   /**
   * Get networkName
   * @return networkName
  **/
  @ApiModelProperty(required = true, value = "")
  public String getNetworkName() {
    return networkName;
  }

  public void setNetworkName(String networkName) {
    this.networkName = networkName;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails transactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
    return this;
  }

   /**
   * Get transactionHash
   * @return transactionHash
  **/
  @ApiModelProperty(value = "")
  public String getTransactionHash() {
    return transactionHash;
  }

  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails metadata(CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadata metadata) {
    this.metadata = metadata;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails sourceAddress(String sourceAddress) {
    this.sourceAddress = sourceAddress;
    return this;
  }

   /**
   * Get sourceAddress
   * @return sourceAddress
  **/
  @ApiModelProperty(value = "")
  public String getSourceAddress() {
    return sourceAddress;
  }

  public void setSourceAddress(String sourceAddress) {
    this.sourceAddress = sourceAddress;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails dappName(String dappName) {
    this.dappName = dappName;
    return this;
  }

   /**
   * Get dappName
   * @return dappName
  **/
  @ApiModelProperty(value = "")
  public String getDappName() {
    return dappName;
  }

  public void setDappName(String dappName) {
    this.dappName = dappName;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails dappUrl(String dappUrl) {
    this.dappUrl = dappUrl;
    return this;
  }

   /**
   * Get dappUrl
   * @return dappUrl
  **/
  @ApiModelProperty(value = "")
  public String getDappUrl() {
    return dappUrl;
  }

  public void setDappUrl(String dappUrl) {
    this.dappUrl = dappUrl;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails destinationAddress(String destinationAddress) {
    this.destinationAddress = destinationAddress;
    return this;
  }

   /**
   * Get destinationAddress
   * @return destinationAddress
  **/
  @ApiModelProperty(value = "")
  public String getDestinationAddress() {
    return destinationAddress;
  }

  public void setDestinationAddress(String destinationAddress) {
    this.destinationAddress = destinationAddress;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails riskScore(CoinbaseEngPrimeApiApiWeb3RiskScore riskScore) {
    this.riskScore = riskScore;
    return this;
  }

   /**
   * Get riskScore
   * @return riskScore
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiWeb3RiskScore getRiskScore() {
    return riskScore;
  }

  public void setRiskScore(CoinbaseEngPrimeApiApiWeb3RiskScore riskScore) {
    this.riskScore = riskScore;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails operationName(String operationName) {
    this.operationName = operationName;
    return this;
  }

   /**
   * Get operationName
   * @return operationName
  **/
  @ApiModelProperty(value = "")
  public String getOperationName() {
    return operationName;
  }

  public void setOperationName(String operationName) {
    this.operationName = operationName;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails chainId(String chainId) {
    this.chainId = chainId;
    return this;
  }

   /**
   * Get chainId
   * @return chainId
  **/
  @ApiModelProperty(value = "")
  public String getChainId() {
    return chainId;
  }

  public void setChainId(String chainId) {
    this.chainId = chainId;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

   /**
   * Get nonce
   * @return nonce
  **/
  @ApiModelProperty(value = "")
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails replacedTransactionId(String replacedTransactionId) {
    this.replacedTransactionId = replacedTransactionId;
    return this;
  }

   /**
   * Id of transaction being replaced (speedup or cancel). This is also the activity id for the transaction.
   * @return replacedTransactionId
  **/
  @ApiModelProperty(value = "Id of transaction being replaced (speedup or cancel). This is also the activity id for the transaction.")
  public String getReplacedTransactionId() {
    return replacedTransactionId;
  }

  public void setReplacedTransactionId(String replacedTransactionId) {
    this.replacedTransactionId = replacedTransactionId;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails idempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
    return this;
  }

   /**
   * Get idempotencyKey
   * @return idempotencyKey
  **/
  @ApiModelProperty(value = "")
  public String getIdempotencyKey() {
    return idempotencyKey;
  }

  public void setIdempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails txScannerResult(ScannerScanResponse txScannerResult) {
    this.txScannerResult = txScannerResult;
    return this;
  }

   /**
   * Get txScannerResult
   * @return txScannerResult
  **/
  @ApiModelProperty(value = "")
  public ScannerScanResponse getTxScannerResult() {
    return txScannerResult;
  }

  public void setTxScannerResult(ScannerScanResponse txScannerResult) {
    this.txScannerResult = txScannerResult;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails sourceWalletId(String sourceWalletId) {
    this.sourceWalletId = sourceWalletId;
    return this;
  }

   /**
   * Get sourceWalletId
   * @return sourceWalletId
  **/
  @ApiModelProperty(value = "")
  public String getSourceWalletId() {
    return sourceWalletId;
  }

  public void setSourceWalletId(String sourceWalletId) {
    this.sourceWalletId = sourceWalletId;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails readyForSigning(Boolean readyForSigning) {
    this.readyForSigning = readyForSigning;
    return this;
  }

   /**
   * Get readyForSigning
   * @return readyForSigning
  **/
  @ApiModelProperty(value = "")
  public Boolean isReadyForSigning() {
    return readyForSigning;
  }

  public void setReadyForSigning(Boolean readyForSigning) {
    this.readyForSigning = readyForSigning;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails signingInitiatedTimestamp(String signingInitiatedTimestamp) {
    this.signingInitiatedTimestamp = signingInitiatedTimestamp;
    return this;
  }

   /**
   * Get signingInitiatedTimestamp
   * @return signingInitiatedTimestamp
  **/
  @ApiModelProperty(value = "")
  public String getSigningInitiatedTimestamp() {
    return signingInitiatedTimestamp;
  }

  public void setSigningInitiatedTimestamp(String signingInitiatedTimestamp) {
    this.signingInitiatedTimestamp = signingInitiatedTimestamp;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails evaluationResult(EngPrimePolicyApiEvaluationResult evaluationResult) {
    this.evaluationResult = evaluationResult;
    return this;
  }

   /**
   * Get evaluationResult
   * @return evaluationResult
  **/
  @ApiModelProperty(value = "")
  public EngPrimePolicyApiEvaluationResult getEvaluationResult() {
    return evaluationResult;
  }

  public void setEvaluationResult(EngPrimePolicyApiEvaluationResult evaluationResult) {
    this.evaluationResult = evaluationResult;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails coinbaseEngPrimeApiApiWeb3TransactionActivityDetails = (CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails) o;
    return Objects.equals(this.rawUnsignedTx, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.rawUnsignedTx) &&
        Objects.equals(this.networkName, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.networkName) &&
        Objects.equals(this.transactionHash, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.transactionHash) &&
        Objects.equals(this.metadata, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.metadata) &&
        Objects.equals(this.sourceAddress, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.sourceAddress) &&
        Objects.equals(this.dappName, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.dappName) &&
        Objects.equals(this.dappUrl, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.dappUrl) &&
        Objects.equals(this.destinationAddress, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.destinationAddress) &&
        Objects.equals(this.riskScore, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.riskScore) &&
        Objects.equals(this.operationName, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.operationName) &&
        Objects.equals(this.chainId, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.chainId) &&
        Objects.equals(this.nonce, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.nonce) &&
        Objects.equals(this.replacedTransactionId, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.replacedTransactionId) &&
        Objects.equals(this.idempotencyKey, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.idempotencyKey) &&
        Objects.equals(this.txScannerResult, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.txScannerResult) &&
        Objects.equals(this.sourceWalletId, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.sourceWalletId) &&
        Objects.equals(this.readyForSigning, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.readyForSigning) &&
        Objects.equals(this.signingInitiatedTimestamp, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.signingInitiatedTimestamp) &&
        Objects.equals(this.evaluationResult, coinbaseEngPrimeApiApiWeb3TransactionActivityDetails.evaluationResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rawUnsignedTx, networkName, transactionHash, metadata, sourceAddress, dappName, dappUrl, destinationAddress, riskScore, operationName, chainId, nonce, replacedTransactionId, idempotencyKey, txScannerResult, sourceWalletId, readyForSigning, signingInitiatedTimestamp, evaluationResult);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseEngPrimeApiApiWeb3TransactionActivityDetails {\n");
    
    sb.append("    rawUnsignedTx: ").append(toIndentedString(rawUnsignedTx)).append("\n");
    sb.append("    networkName: ").append(toIndentedString(networkName)).append("\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    sourceAddress: ").append(toIndentedString(sourceAddress)).append("\n");
    sb.append("    dappName: ").append(toIndentedString(dappName)).append("\n");
    sb.append("    dappUrl: ").append(toIndentedString(dappUrl)).append("\n");
    sb.append("    destinationAddress: ").append(toIndentedString(destinationAddress)).append("\n");
    sb.append("    riskScore: ").append(toIndentedString(riskScore)).append("\n");
    sb.append("    operationName: ").append(toIndentedString(operationName)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    replacedTransactionId: ").append(toIndentedString(replacedTransactionId)).append("\n");
    sb.append("    idempotencyKey: ").append(toIndentedString(idempotencyKey)).append("\n");
    sb.append("    txScannerResult: ").append(toIndentedString(txScannerResult)).append("\n");
    sb.append("    sourceWalletId: ").append(toIndentedString(sourceWalletId)).append("\n");
    sb.append("    readyForSigning: ").append(toIndentedString(readyForSigning)).append("\n");
    sb.append("    signingInitiatedTimestamp: ").append(toIndentedString(signingInitiatedTimestamp)).append("\n");
    sb.append("    evaluationResult: ").append(toIndentedString(evaluationResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

