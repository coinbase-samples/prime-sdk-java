/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseTwsCryptoDestination;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * NFT Withdrawal Action.
 */
@ApiModel(description = "NFT Withdrawal Action.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseTwsNftWithdrawalAction {
  @SerializedName("asset")
  private String asset = null;

  @SerializedName("token_ids")
  private List<String> tokenIds = null;

  @SerializedName("destination")
  private CoinbaseTwsCryptoDestination destination = null;

  public CoinbaseTwsNftWithdrawalAction asset(String asset) {
    this.asset = asset;
    return this;
  }

   /**
   * The symbol of the currency to transfer with
   * @return asset
  **/
  @ApiModelProperty(value = "The symbol of the currency to transfer with")
  public String getAsset() {
    return asset;
  }

  public void setAsset(String asset) {
    this.asset = asset;
  }

  public CoinbaseTwsNftWithdrawalAction tokenIds(List<String> tokenIds) {
    this.tokenIds = tokenIds;
    return this;
  }

  public CoinbaseTwsNftWithdrawalAction addTokenIdsItem(String tokenIdsItem) {
    if (this.tokenIds == null) {
      this.tokenIds = new ArrayList<String>();
    }
    this.tokenIds.add(tokenIdsItem);
    return this;
  }

   /**
   * Unique IDs of NFTs within a collection. Repeated field to support ERC-1155.
   * @return tokenIds
  **/
  @ApiModelProperty(value = "Unique IDs of NFTs within a collection. Repeated field to support ERC-1155.")
  public List<String> getTokenIds() {
    return tokenIds;
  }

  public void setTokenIds(List<String> tokenIds) {
    this.tokenIds = tokenIds;
  }

  public CoinbaseTwsNftWithdrawalAction destination(CoinbaseTwsCryptoDestination destination) {
    this.destination = destination;
    return this;
  }

   /**
   * Crypto transaction destination
   * @return destination
  **/
  @ApiModelProperty(value = "Crypto transaction destination")
  public CoinbaseTwsCryptoDestination getDestination() {
    return destination;
  }

  public void setDestination(CoinbaseTwsCryptoDestination destination) {
    this.destination = destination;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseTwsNftWithdrawalAction coinbaseTwsNftWithdrawalAction = (CoinbaseTwsNftWithdrawalAction) o;
    return Objects.equals(this.asset, coinbaseTwsNftWithdrawalAction.asset) &&
        Objects.equals(this.tokenIds, coinbaseTwsNftWithdrawalAction.tokenIds) &&
        Objects.equals(this.destination, coinbaseTwsNftWithdrawalAction.destination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asset, tokenIds, destination);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseTwsNftWithdrawalAction {\n");
    
    sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
    sb.append("    tokenIds: ").append(toIndentedString(tokenIds)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

