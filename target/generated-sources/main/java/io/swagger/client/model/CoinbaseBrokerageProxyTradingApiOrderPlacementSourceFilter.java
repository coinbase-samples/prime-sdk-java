/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoreOrderPlacementSource;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CoinbaseBrokerageProxyTradingApiOrderPlacementSourceFilter
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseBrokerageProxyTradingApiOrderPlacementSourceFilter {
  @SerializedName("applyNotFilter")
  private Boolean applyNotFilter = null;

  @SerializedName("order_placement_sources")
  private List<CoreOrderPlacementSource> orderPlacementSources = null;

  public CoinbaseBrokerageProxyTradingApiOrderPlacementSourceFilter applyNotFilter(Boolean applyNotFilter) {
    this.applyNotFilter = applyNotFilter;
    return this;
  }

   /**
   * Get applyNotFilter
   * @return applyNotFilter
  **/
  @ApiModelProperty(value = "")
  public Boolean isApplyNotFilter() {
    return applyNotFilter;
  }

  public void setApplyNotFilter(Boolean applyNotFilter) {
    this.applyNotFilter = applyNotFilter;
  }

  public CoinbaseBrokerageProxyTradingApiOrderPlacementSourceFilter orderPlacementSources(List<CoreOrderPlacementSource> orderPlacementSources) {
    this.orderPlacementSources = orderPlacementSources;
    return this;
  }

  public CoinbaseBrokerageProxyTradingApiOrderPlacementSourceFilter addOrderPlacementSourcesItem(CoreOrderPlacementSource orderPlacementSourcesItem) {
    if (this.orderPlacementSources == null) {
      this.orderPlacementSources = new ArrayList<CoreOrderPlacementSource>();
    }
    this.orderPlacementSources.add(orderPlacementSourcesItem);
    return this;
  }

   /**
   * Get orderPlacementSources
   * @return orderPlacementSources
  **/
  @ApiModelProperty(value = "")
  public List<CoreOrderPlacementSource> getOrderPlacementSources() {
    return orderPlacementSources;
  }

  public void setOrderPlacementSources(List<CoreOrderPlacementSource> orderPlacementSources) {
    this.orderPlacementSources = orderPlacementSources;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseBrokerageProxyTradingApiOrderPlacementSourceFilter coinbaseBrokerageProxyTradingApiOrderPlacementSourceFilter = (CoinbaseBrokerageProxyTradingApiOrderPlacementSourceFilter) o;
    return Objects.equals(this.applyNotFilter, coinbaseBrokerageProxyTradingApiOrderPlacementSourceFilter.applyNotFilter) &&
        Objects.equals(this.orderPlacementSources, coinbaseBrokerageProxyTradingApiOrderPlacementSourceFilter.orderPlacementSources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyNotFilter, orderPlacementSources);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseBrokerageProxyTradingApiOrderPlacementSourceFilter {\n");
    
    sb.append("    applyNotFilter: ").append(toIndentedString(applyNotFilter)).append("\n");
    sb.append("    orderPlacementSources: ").append(toIndentedString(orderPlacementSources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

