/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiL2Level;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * CoinbaseBrokerageProxyTradingApiDepth
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseBrokerageProxyTradingApiDepth {
  @SerializedName("date")
  private OffsetDateTime date = null;

  @SerializedName("last")
  private String last = null;

  @SerializedName("bid_l2")
  private List<CoinbaseBrokerageProxyTradingApiL2Level> bidL2 = new ArrayList<CoinbaseBrokerageProxyTradingApiL2Level>();

  @SerializedName("ask_l2")
  private List<CoinbaseBrokerageProxyTradingApiL2Level> askL2 = new ArrayList<CoinbaseBrokerageProxyTradingApiL2Level>();

  @SerializedName("mid_market")
  private String midMarket = null;

  @SerializedName("spread_bps")
  private String spreadBps = null;

  @SerializedName("spread_absolute")
  private String spreadAbsolute = null;

  public CoinbaseBrokerageProxyTradingApiDepth date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @ApiModelProperty(required = true, value = "")
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }

  public CoinbaseBrokerageProxyTradingApiDepth last(String last) {
    this.last = last;
    return this;
  }

   /**
   * The last (current) price - if not present, the average of the lowest bid and the highest ask (i.e., (lowest bid + highest ask) / 2)
   * @return last
  **/
  @ApiModelProperty(required = true, value = "The last (current) price - if not present, the average of the lowest bid and the highest ask (i.e., (lowest bid + highest ask) / 2)")
  public String getLast() {
    return last;
  }

  public void setLast(String last) {
    this.last = last;
  }

  public CoinbaseBrokerageProxyTradingApiDepth bidL2(List<CoinbaseBrokerageProxyTradingApiL2Level> bidL2) {
    this.bidL2 = bidL2;
    return this;
  }

  public CoinbaseBrokerageProxyTradingApiDepth addBidL2Item(CoinbaseBrokerageProxyTradingApiL2Level bidL2Item) {
    this.bidL2.add(bidL2Item);
    return this;
  }

   /**
   * Array of bid [price, size] pairs, sorted in price desc order
   * @return bidL2
  **/
  @ApiModelProperty(required = true, value = "Array of bid [price, size] pairs, sorted in price desc order")
  public List<CoinbaseBrokerageProxyTradingApiL2Level> getBidL2() {
    return bidL2;
  }

  public void setBidL2(List<CoinbaseBrokerageProxyTradingApiL2Level> bidL2) {
    this.bidL2 = bidL2;
  }

  public CoinbaseBrokerageProxyTradingApiDepth askL2(List<CoinbaseBrokerageProxyTradingApiL2Level> askL2) {
    this.askL2 = askL2;
    return this;
  }

  public CoinbaseBrokerageProxyTradingApiDepth addAskL2Item(CoinbaseBrokerageProxyTradingApiL2Level askL2Item) {
    this.askL2.add(askL2Item);
    return this;
  }

   /**
   * Array of ask [price, size] pairs, sorted in price asc order
   * @return askL2
  **/
  @ApiModelProperty(required = true, value = "Array of ask [price, size] pairs, sorted in price asc order")
  public List<CoinbaseBrokerageProxyTradingApiL2Level> getAskL2() {
    return askL2;
  }

  public void setAskL2(List<CoinbaseBrokerageProxyTradingApiL2Level> askL2) {
    this.askL2 = askL2;
  }

  public CoinbaseBrokerageProxyTradingApiDepth midMarket(String midMarket) {
    this.midMarket = midMarket;
    return this;
  }

   /**
   * Calculated as (lowest ask price + highest bid price) / 2
   * @return midMarket
  **/
  @ApiModelProperty(required = true, value = "Calculated as (lowest ask price + highest bid price) / 2")
  public String getMidMarket() {
    return midMarket;
  }

  public void setMidMarket(String midMarket) {
    this.midMarket = midMarket;
  }

  public CoinbaseBrokerageProxyTradingApiDepth spreadBps(String spreadBps) {
    this.spreadBps = spreadBps;
    return this;
  }

   /**
   * Calculated in bps as ((lowest ask price - highest bid price) / lowest ask price) * 10000
   * @return spreadBps
  **/
  @ApiModelProperty(required = true, value = "Calculated in bps as ((lowest ask price - highest bid price) / lowest ask price) * 10000")
  public String getSpreadBps() {
    return spreadBps;
  }

  public void setSpreadBps(String spreadBps) {
    this.spreadBps = spreadBps;
  }

  public CoinbaseBrokerageProxyTradingApiDepth spreadAbsolute(String spreadAbsolute) {
    this.spreadAbsolute = spreadAbsolute;
    return this;
  }

   /**
   * Difference between best ask and best bid prices. Calculated as lowest ask price - highest bid price
   * @return spreadAbsolute
  **/
  @ApiModelProperty(required = true, value = "Difference between best ask and best bid prices. Calculated as lowest ask price - highest bid price")
  public String getSpreadAbsolute() {
    return spreadAbsolute;
  }

  public void setSpreadAbsolute(String spreadAbsolute) {
    this.spreadAbsolute = spreadAbsolute;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseBrokerageProxyTradingApiDepth coinbaseBrokerageProxyTradingApiDepth = (CoinbaseBrokerageProxyTradingApiDepth) o;
    return Objects.equals(this.date, coinbaseBrokerageProxyTradingApiDepth.date) &&
        Objects.equals(this.last, coinbaseBrokerageProxyTradingApiDepth.last) &&
        Objects.equals(this.bidL2, coinbaseBrokerageProxyTradingApiDepth.bidL2) &&
        Objects.equals(this.askL2, coinbaseBrokerageProxyTradingApiDepth.askL2) &&
        Objects.equals(this.midMarket, coinbaseBrokerageProxyTradingApiDepth.midMarket) &&
        Objects.equals(this.spreadBps, coinbaseBrokerageProxyTradingApiDepth.spreadBps) &&
        Objects.equals(this.spreadAbsolute, coinbaseBrokerageProxyTradingApiDepth.spreadAbsolute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, last, bidL2, askL2, midMarket, spreadBps, spreadAbsolute);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseBrokerageProxyTradingApiDepth {\n");
    
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("    bidL2: ").append(toIndentedString(bidL2)).append("\n");
    sb.append("    askL2: ").append(toIndentedString(askL2)).append("\n");
    sb.append("    midMarket: ").append(toIndentedString(midMarket)).append("\n");
    sb.append("    spreadBps: ").append(toIndentedString(spreadBps)).append("\n");
    sb.append("    spreadAbsolute: ").append(toIndentedString(spreadAbsolute)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

