/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbasePaymentsCommonMoney;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsLedgerAccount;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsLedgerNamedAccount;
import java.io.IOException;

/**
 * CoinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement {
  @SerializedName("amount")
  private CoinbasePaymentsCommonMoney amount = null;

  @SerializedName("source_ledger_account")
  private CoinbasePaymentsCommonPaymentMethodsLedgerAccount sourceLedgerAccount = null;

  @SerializedName("source_ledger_named_account")
  private CoinbasePaymentsCommonPaymentMethodsLedgerNamedAccount sourceLedgerNamedAccount = null;

  @SerializedName("target_ledger_account")
  private CoinbasePaymentsCommonPaymentMethodsLedgerAccount targetLedgerAccount = null;

  @SerializedName("target_ledger_named_account")
  private CoinbasePaymentsCommonPaymentMethodsLedgerNamedAccount targetLedgerNamedAccount = null;

  @SerializedName("hold_id_to_replace")
  private String holdIdToReplace = null;

  @SerializedName("new_hold_id")
  private String newHoldId = null;

  @SerializedName("new_hold_amount")
  private CoinbasePaymentsCommonMoney newHoldAmount = null;

  @SerializedName("existing_hold_id")
  private String existingHoldId = null;

  public CoinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement amount(CoinbasePaymentsCommonMoney amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonMoney getAmount() {
    return amount;
  }

  public void setAmount(CoinbasePaymentsCommonMoney amount) {
    this.amount = amount;
  }

  public CoinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement sourceLedgerAccount(CoinbasePaymentsCommonPaymentMethodsLedgerAccount sourceLedgerAccount) {
    this.sourceLedgerAccount = sourceLedgerAccount;
    return this;
  }

   /**
   * Get sourceLedgerAccount
   * @return sourceLedgerAccount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsLedgerAccount getSourceLedgerAccount() {
    return sourceLedgerAccount;
  }

  public void setSourceLedgerAccount(CoinbasePaymentsCommonPaymentMethodsLedgerAccount sourceLedgerAccount) {
    this.sourceLedgerAccount = sourceLedgerAccount;
  }

  public CoinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement sourceLedgerNamedAccount(CoinbasePaymentsCommonPaymentMethodsLedgerNamedAccount sourceLedgerNamedAccount) {
    this.sourceLedgerNamedAccount = sourceLedgerNamedAccount;
    return this;
  }

   /**
   * Get sourceLedgerNamedAccount
   * @return sourceLedgerNamedAccount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsLedgerNamedAccount getSourceLedgerNamedAccount() {
    return sourceLedgerNamedAccount;
  }

  public void setSourceLedgerNamedAccount(CoinbasePaymentsCommonPaymentMethodsLedgerNamedAccount sourceLedgerNamedAccount) {
    this.sourceLedgerNamedAccount = sourceLedgerNamedAccount;
  }

  public CoinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement targetLedgerAccount(CoinbasePaymentsCommonPaymentMethodsLedgerAccount targetLedgerAccount) {
    this.targetLedgerAccount = targetLedgerAccount;
    return this;
  }

   /**
   * Get targetLedgerAccount
   * @return targetLedgerAccount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsLedgerAccount getTargetLedgerAccount() {
    return targetLedgerAccount;
  }

  public void setTargetLedgerAccount(CoinbasePaymentsCommonPaymentMethodsLedgerAccount targetLedgerAccount) {
    this.targetLedgerAccount = targetLedgerAccount;
  }

  public CoinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement targetLedgerNamedAccount(CoinbasePaymentsCommonPaymentMethodsLedgerNamedAccount targetLedgerNamedAccount) {
    this.targetLedgerNamedAccount = targetLedgerNamedAccount;
    return this;
  }

   /**
   * Get targetLedgerNamedAccount
   * @return targetLedgerNamedAccount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsLedgerNamedAccount getTargetLedgerNamedAccount() {
    return targetLedgerNamedAccount;
  }

  public void setTargetLedgerNamedAccount(CoinbasePaymentsCommonPaymentMethodsLedgerNamedAccount targetLedgerNamedAccount) {
    this.targetLedgerNamedAccount = targetLedgerNamedAccount;
  }

  public CoinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement holdIdToReplace(String holdIdToReplace) {
    this.holdIdToReplace = holdIdToReplace;
    return this;
  }

   /**
   * Get holdIdToReplace
   * @return holdIdToReplace
  **/
  @ApiModelProperty(value = "")
  public String getHoldIdToReplace() {
    return holdIdToReplace;
  }

  public void setHoldIdToReplace(String holdIdToReplace) {
    this.holdIdToReplace = holdIdToReplace;
  }

  public CoinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement newHoldId(String newHoldId) {
    this.newHoldId = newHoldId;
    return this;
  }

   /**
   * Get newHoldId
   * @return newHoldId
  **/
  @ApiModelProperty(value = "")
  public String getNewHoldId() {
    return newHoldId;
  }

  public void setNewHoldId(String newHoldId) {
    this.newHoldId = newHoldId;
  }

  public CoinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement newHoldAmount(CoinbasePaymentsCommonMoney newHoldAmount) {
    this.newHoldAmount = newHoldAmount;
    return this;
  }

   /**
   * Get newHoldAmount
   * @return newHoldAmount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonMoney getNewHoldAmount() {
    return newHoldAmount;
  }

  public void setNewHoldAmount(CoinbasePaymentsCommonMoney newHoldAmount) {
    this.newHoldAmount = newHoldAmount;
  }

  public CoinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement existingHoldId(String existingHoldId) {
    this.existingHoldId = existingHoldId;
    return this;
  }

   /**
   * Get existingHoldId
   * @return existingHoldId
  **/
  @ApiModelProperty(value = "")
  public String getExistingHoldId() {
    return existingHoldId;
  }

  public void setExistingHoldId(String existingHoldId) {
    this.existingHoldId = existingHoldId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement coinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement = (CoinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement) o;
    return Objects.equals(this.amount, coinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement.amount) &&
        Objects.equals(this.sourceLedgerAccount, coinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement.sourceLedgerAccount) &&
        Objects.equals(this.sourceLedgerNamedAccount, coinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement.sourceLedgerNamedAccount) &&
        Objects.equals(this.targetLedgerAccount, coinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement.targetLedgerAccount) &&
        Objects.equals(this.targetLedgerNamedAccount, coinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement.targetLedgerNamedAccount) &&
        Objects.equals(this.holdIdToReplace, coinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement.holdIdToReplace) &&
        Objects.equals(this.newHoldId, coinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement.newHoldId) &&
        Objects.equals(this.newHoldAmount, coinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement.newHoldAmount) &&
        Objects.equals(this.existingHoldId, coinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement.existingHoldId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, sourceLedgerAccount, sourceLedgerNamedAccount, targetLedgerAccount, targetLedgerNamedAccount, holdIdToReplace, newHoldId, newHoldAmount, existingHoldId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbasePaymentsCommonPaymentMethodsDerivativeSettlementAccountSettlement {\n");
    
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    sourceLedgerAccount: ").append(toIndentedString(sourceLedgerAccount)).append("\n");
    sb.append("    sourceLedgerNamedAccount: ").append(toIndentedString(sourceLedgerNamedAccount)).append("\n");
    sb.append("    targetLedgerAccount: ").append(toIndentedString(targetLedgerAccount)).append("\n");
    sb.append("    targetLedgerNamedAccount: ").append(toIndentedString(targetLedgerNamedAccount)).append("\n");
    sb.append("    holdIdToReplace: ").append(toIndentedString(holdIdToReplace)).append("\n");
    sb.append("    newHoldId: ").append(toIndentedString(newHoldId)).append("\n");
    sb.append("    newHoldAmount: ").append(toIndentedString(newHoldAmount)).append("\n");
    sb.append("    existingHoldId: ").append(toIndentedString(existingHoldId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

