/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallDataArgument;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallData {
  @SerializedName("function_name")
  private String functionName = null;

  @SerializedName("arguments")
  private List<CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallDataArgument> arguments = null;

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallData functionName(String functionName) {
    this.functionName = functionName;
    return this;
  }

   /**
   * Get functionName
   * @return functionName
  **/
  @ApiModelProperty(value = "")
  public String getFunctionName() {
    return functionName;
  }

  public void setFunctionName(String functionName) {
    this.functionName = functionName;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallData arguments(List<CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallDataArgument> arguments) {
    this.arguments = arguments;
    return this;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallData addArgumentsItem(CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallDataArgument argumentsItem) {
    if (this.arguments == null) {
      this.arguments = new ArrayList<CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallDataArgument>();
    }
    this.arguments.add(argumentsItem);
    return this;
  }

   /**
   * Get arguments
   * @return arguments
  **/
  @ApiModelProperty(value = "")
  public List<CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallDataArgument> getArguments() {
    return arguments;
  }

  public void setArguments(List<CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallDataArgument> arguments) {
    this.arguments = arguments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallData coinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallData = (CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallData) o;
    return Objects.equals(this.functionName, coinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallData.functionName) &&
        Objects.equals(this.arguments, coinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallData.arguments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(functionName, arguments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataContractCallData {\n");
    
    sb.append("    functionName: ").append(toIndentedString(functionName)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

