/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseCustodyApiDisplayUser;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CoinbaseCustodyApiTransactionAuditValue
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseCustodyApiTransactionAuditValue {
  @SerializedName("currency_symbol")
  private String currencySymbol = null;

  @SerializedName("humanized_tx_type")
  private String humanizedTxType = null;

  @SerializedName("retried")
  private Boolean retried = null;

  @SerializedName("num_all_approvers")
  private Integer numAllApprovers = null;

  @SerializedName("all_user_ids")
  private List<String> allUserIds = new ArrayList<String>();

  @SerializedName("approved_user_ids")
  private List<String> approvedUserIds = new ArrayList<String>();

  @SerializedName("rejected_user_ids")
  private List<String> rejectedUserIds = new ArrayList<String>();

  @SerializedName("num_approvals_required")
  private Integer numApprovalsRequired = null;

  @SerializedName("wallet_name")
  private String walletName = null;

  @SerializedName("required_approvers_for_amount")
  private List<CoinbaseCustodyApiDisplayUser> requiredApproversForAmount = null;

  public CoinbaseCustodyApiTransactionAuditValue currencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
    return this;
  }

   /**
   * Get currencySymbol
   * @return currencySymbol
  **/
  @ApiModelProperty(required = true, value = "")
  public String getCurrencySymbol() {
    return currencySymbol;
  }

  public void setCurrencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
  }

  public CoinbaseCustodyApiTransactionAuditValue humanizedTxType(String humanizedTxType) {
    this.humanizedTxType = humanizedTxType;
    return this;
  }

   /**
   * Get humanizedTxType
   * @return humanizedTxType
  **/
  @ApiModelProperty(required = true, value = "")
  public String getHumanizedTxType() {
    return humanizedTxType;
  }

  public void setHumanizedTxType(String humanizedTxType) {
    this.humanizedTxType = humanizedTxType;
  }

  public CoinbaseCustodyApiTransactionAuditValue retried(Boolean retried) {
    this.retried = retried;
    return this;
  }

   /**
   * Get retried
   * @return retried
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isRetried() {
    return retried;
  }

  public void setRetried(Boolean retried) {
    this.retried = retried;
  }

  public CoinbaseCustodyApiTransactionAuditValue numAllApprovers(Integer numAllApprovers) {
    this.numAllApprovers = numAllApprovers;
    return this;
  }

   /**
   * Get numAllApprovers
   * @return numAllApprovers
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getNumAllApprovers() {
    return numAllApprovers;
  }

  public void setNumAllApprovers(Integer numAllApprovers) {
    this.numAllApprovers = numAllApprovers;
  }

  public CoinbaseCustodyApiTransactionAuditValue allUserIds(List<String> allUserIds) {
    this.allUserIds = allUserIds;
    return this;
  }

  public CoinbaseCustodyApiTransactionAuditValue addAllUserIdsItem(String allUserIdsItem) {
    this.allUserIds.add(allUserIdsItem);
    return this;
  }

   /**
   * Get allUserIds
   * @return allUserIds
  **/
  @ApiModelProperty(required = true, value = "")
  public List<String> getAllUserIds() {
    return allUserIds;
  }

  public void setAllUserIds(List<String> allUserIds) {
    this.allUserIds = allUserIds;
  }

  public CoinbaseCustodyApiTransactionAuditValue approvedUserIds(List<String> approvedUserIds) {
    this.approvedUserIds = approvedUserIds;
    return this;
  }

  public CoinbaseCustodyApiTransactionAuditValue addApprovedUserIdsItem(String approvedUserIdsItem) {
    this.approvedUserIds.add(approvedUserIdsItem);
    return this;
  }

   /**
   * Get approvedUserIds
   * @return approvedUserIds
  **/
  @ApiModelProperty(required = true, value = "")
  public List<String> getApprovedUserIds() {
    return approvedUserIds;
  }

  public void setApprovedUserIds(List<String> approvedUserIds) {
    this.approvedUserIds = approvedUserIds;
  }

  public CoinbaseCustodyApiTransactionAuditValue rejectedUserIds(List<String> rejectedUserIds) {
    this.rejectedUserIds = rejectedUserIds;
    return this;
  }

  public CoinbaseCustodyApiTransactionAuditValue addRejectedUserIdsItem(String rejectedUserIdsItem) {
    this.rejectedUserIds.add(rejectedUserIdsItem);
    return this;
  }

   /**
   * Get rejectedUserIds
   * @return rejectedUserIds
  **/
  @ApiModelProperty(required = true, value = "")
  public List<String> getRejectedUserIds() {
    return rejectedUserIds;
  }

  public void setRejectedUserIds(List<String> rejectedUserIds) {
    this.rejectedUserIds = rejectedUserIds;
  }

  public CoinbaseCustodyApiTransactionAuditValue numApprovalsRequired(Integer numApprovalsRequired) {
    this.numApprovalsRequired = numApprovalsRequired;
    return this;
  }

   /**
   * Get numApprovalsRequired
   * @return numApprovalsRequired
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getNumApprovalsRequired() {
    return numApprovalsRequired;
  }

  public void setNumApprovalsRequired(Integer numApprovalsRequired) {
    this.numApprovalsRequired = numApprovalsRequired;
  }

  public CoinbaseCustodyApiTransactionAuditValue walletName(String walletName) {
    this.walletName = walletName;
    return this;
  }

   /**
   * Get walletName
   * @return walletName
  **/
  @ApiModelProperty(value = "")
  public String getWalletName() {
    return walletName;
  }

  public void setWalletName(String walletName) {
    this.walletName = walletName;
  }

  public CoinbaseCustodyApiTransactionAuditValue requiredApproversForAmount(List<CoinbaseCustodyApiDisplayUser> requiredApproversForAmount) {
    this.requiredApproversForAmount = requiredApproversForAmount;
    return this;
  }

  public CoinbaseCustodyApiTransactionAuditValue addRequiredApproversForAmountItem(CoinbaseCustodyApiDisplayUser requiredApproversForAmountItem) {
    if (this.requiredApproversForAmount == null) {
      this.requiredApproversForAmount = new ArrayList<CoinbaseCustodyApiDisplayUser>();
    }
    this.requiredApproversForAmount.add(requiredApproversForAmountItem);
    return this;
  }

   /**
   * Get requiredApproversForAmount
   * @return requiredApproversForAmount
  **/
  @ApiModelProperty(value = "")
  public List<CoinbaseCustodyApiDisplayUser> getRequiredApproversForAmount() {
    return requiredApproversForAmount;
  }

  public void setRequiredApproversForAmount(List<CoinbaseCustodyApiDisplayUser> requiredApproversForAmount) {
    this.requiredApproversForAmount = requiredApproversForAmount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseCustodyApiTransactionAuditValue coinbaseCustodyApiTransactionAuditValue = (CoinbaseCustodyApiTransactionAuditValue) o;
    return Objects.equals(this.currencySymbol, coinbaseCustodyApiTransactionAuditValue.currencySymbol) &&
        Objects.equals(this.humanizedTxType, coinbaseCustodyApiTransactionAuditValue.humanizedTxType) &&
        Objects.equals(this.retried, coinbaseCustodyApiTransactionAuditValue.retried) &&
        Objects.equals(this.numAllApprovers, coinbaseCustodyApiTransactionAuditValue.numAllApprovers) &&
        Objects.equals(this.allUserIds, coinbaseCustodyApiTransactionAuditValue.allUserIds) &&
        Objects.equals(this.approvedUserIds, coinbaseCustodyApiTransactionAuditValue.approvedUserIds) &&
        Objects.equals(this.rejectedUserIds, coinbaseCustodyApiTransactionAuditValue.rejectedUserIds) &&
        Objects.equals(this.numApprovalsRequired, coinbaseCustodyApiTransactionAuditValue.numApprovalsRequired) &&
        Objects.equals(this.walletName, coinbaseCustodyApiTransactionAuditValue.walletName) &&
        Objects.equals(this.requiredApproversForAmount, coinbaseCustodyApiTransactionAuditValue.requiredApproversForAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencySymbol, humanizedTxType, retried, numAllApprovers, allUserIds, approvedUserIds, rejectedUserIds, numApprovalsRequired, walletName, requiredApproversForAmount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseCustodyApiTransactionAuditValue {\n");
    
    sb.append("    currencySymbol: ").append(toIndentedString(currencySymbol)).append("\n");
    sb.append("    humanizedTxType: ").append(toIndentedString(humanizedTxType)).append("\n");
    sb.append("    retried: ").append(toIndentedString(retried)).append("\n");
    sb.append("    numAllApprovers: ").append(toIndentedString(numAllApprovers)).append("\n");
    sb.append("    allUserIds: ").append(toIndentedString(allUserIds)).append("\n");
    sb.append("    approvedUserIds: ").append(toIndentedString(approvedUserIds)).append("\n");
    sb.append("    rejectedUserIds: ").append(toIndentedString(rejectedUserIds)).append("\n");
    sb.append("    numApprovalsRequired: ").append(toIndentedString(numApprovalsRequired)).append("\n");
    sb.append("    walletName: ").append(toIndentedString(walletName)).append("\n");
    sb.append("    requiredApproversForAmount: ").append(toIndentedString(requiredApproversForAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

