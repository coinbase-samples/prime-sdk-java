/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CoinbaseTwsDerivativeSettlementActionSettlementMovement
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseTwsDerivativeSettlementActionSettlementMovement {
  @SerializedName("amount")
  private String amount = null;

  @SerializedName("existing_hold_id")
  private String existingHoldId = null;

  @SerializedName("new_hold_amount")
  private String newHoldAmount = null;

  @SerializedName("new_hold_id")
  private String newHoldId = null;

  @SerializedName("auto_sweep")
  private Boolean autoSweep = null;

  public CoinbaseTwsDerivativeSettlementActionSettlementMovement amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * transfer amount in whole unit, i.e. 1.0 BTC
   * @return amount
  **/
  @ApiModelProperty(value = "transfer amount in whole unit, i.e. 1.0 BTC")
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }

  public CoinbaseTwsDerivativeSettlementActionSettlementMovement existingHoldId(String existingHoldId) {
    this.existingHoldId = existingHoldId;
    return this;
  }

   /**
   * Release a existing_hold_id if fund movement debit a user ledger account
   * @return existingHoldId
  **/
  @ApiModelProperty(value = "Release a existing_hold_id if fund movement debit a user ledger account")
  public String getExistingHoldId() {
    return existingHoldId;
  }

  public void setExistingHoldId(String existingHoldId) {
    this.existingHoldId = existingHoldId;
  }

  public CoinbaseTwsDerivativeSettlementActionSettlementMovement newHoldAmount(String newHoldAmount) {
    this.newHoldAmount = newHoldAmount;
    return this;
  }

   /**
   * transfer amount in whole unit, i.e. 1.0 BTC
   * @return newHoldAmount
  **/
  @ApiModelProperty(value = "transfer amount in whole unit, i.e. 1.0 BTC")
  public String getNewHoldAmount() {
    return newHoldAmount;
  }

  public void setNewHoldAmount(String newHoldAmount) {
    this.newHoldAmount = newHoldAmount;
  }

  public CoinbaseTwsDerivativeSettlementActionSettlementMovement newHoldId(String newHoldId) {
    this.newHoldId = newHoldId;
    return this;
  }

   /**
   * transfer amount in whole unit, i.e. 1.0 BTC
   * @return newHoldId
  **/
  @ApiModelProperty(value = "transfer amount in whole unit, i.e. 1.0 BTC")
  public String getNewHoldId() {
    return newHoldId;
  }

  public void setNewHoldId(String newHoldId) {
    this.newHoldId = newHoldId;
  }

  public CoinbaseTwsDerivativeSettlementActionSettlementMovement autoSweep(Boolean autoSweep) {
    this.autoSweep = autoSweep;
    return this;
  }

   /**
   * Flag to record if we should auto sweep the funds from ION XTP to SPOT USD
   * @return autoSweep
  **/
  @ApiModelProperty(value = "Flag to record if we should auto sweep the funds from ION XTP to SPOT USD")
  public Boolean isAutoSweep() {
    return autoSweep;
  }

  public void setAutoSweep(Boolean autoSweep) {
    this.autoSweep = autoSweep;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseTwsDerivativeSettlementActionSettlementMovement coinbaseTwsDerivativeSettlementActionSettlementMovement = (CoinbaseTwsDerivativeSettlementActionSettlementMovement) o;
    return Objects.equals(this.amount, coinbaseTwsDerivativeSettlementActionSettlementMovement.amount) &&
        Objects.equals(this.existingHoldId, coinbaseTwsDerivativeSettlementActionSettlementMovement.existingHoldId) &&
        Objects.equals(this.newHoldAmount, coinbaseTwsDerivativeSettlementActionSettlementMovement.newHoldAmount) &&
        Objects.equals(this.newHoldId, coinbaseTwsDerivativeSettlementActionSettlementMovement.newHoldId) &&
        Objects.equals(this.autoSweep, coinbaseTwsDerivativeSettlementActionSettlementMovement.autoSweep);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, existingHoldId, newHoldAmount, newHoldId, autoSweep);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseTwsDerivativeSettlementActionSettlementMovement {\n");
    
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    existingHoldId: ").append(toIndentedString(existingHoldId)).append("\n");
    sb.append("    newHoldAmount: ").append(toIndentedString(newHoldAmount)).append("\n");
    sb.append("    newHoldId: ").append(toIndentedString(newHoldId)).append("\n");
    sb.append("    autoSweep: ").append(toIndentedString(autoSweep)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

