/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseCustodyApiTransactionType;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsPaymentMethod;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * CoinbaseEngPrimeApiApiCreateTransactionRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseEngPrimeApiApiCreateTransactionRequest {
  @SerializedName("idem")
  private String idem = null;

  @SerializedName("transaction_type")
  private CoinbaseCustodyApiTransactionType transactionType = null;

  @SerializedName("currency_symbol")
  private String currencySymbol = null;

  @SerializedName("source")
  private CoinbasePaymentsCommonPaymentMethodsPaymentMethod source = null;

  @SerializedName("target")
  private CoinbasePaymentsCommonPaymentMethodsPaymentMethod target = null;

  @SerializedName("amount")
  private String amount = null;

  @SerializedName("portfolio_id")
  private String portfolioId = null;

  @SerializedName("options")
  private Map<String, String> options = null;

  @SerializedName("token_ids")
  private List<String> tokenIds = null;

  public CoinbaseEngPrimeApiApiCreateTransactionRequest idem(String idem) {
    this.idem = idem;
    return this;
  }

   /**
   * An idempotent key for the client to pass in
   * @return idem
  **/
  @ApiModelProperty(value = "An idempotent key for the client to pass in")
  public String getIdem() {
    return idem;
  }

  public void setIdem(String idem) {
    this.idem = idem;
  }

  public CoinbaseEngPrimeApiApiCreateTransactionRequest transactionType(CoinbaseCustodyApiTransactionType transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * The type of transaction you want to initiate
   * @return transactionType
  **/
  @ApiModelProperty(value = "The type of transaction you want to initiate")
  public CoinbaseCustodyApiTransactionType getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(CoinbaseCustodyApiTransactionType transactionType) {
    this.transactionType = transactionType;
  }

  public CoinbaseEngPrimeApiApiCreateTransactionRequest currencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
    return this;
  }

   /**
   * The symbol of the currency you want to transfer
   * @return currencySymbol
  **/
  @ApiModelProperty(value = "The symbol of the currency you want to transfer")
  public String getCurrencySymbol() {
    return currencySymbol;
  }

  public void setCurrencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
  }

  public CoinbaseEngPrimeApiApiCreateTransactionRequest source(CoinbasePaymentsCommonPaymentMethodsPaymentMethod source) {
    this.source = source;
    return this;
  }

   /**
   * Where the funds are coming from
   * @return source
  **/
  @ApiModelProperty(value = "Where the funds are coming from")
  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod getSource() {
    return source;
  }

  public void setSource(CoinbasePaymentsCommonPaymentMethodsPaymentMethod source) {
    this.source = source;
  }

  public CoinbaseEngPrimeApiApiCreateTransactionRequest target(CoinbasePaymentsCommonPaymentMethodsPaymentMethod target) {
    this.target = target;
    return this;
  }

   /**
   * Where the funds are going to 
   * @return target
  **/
  @ApiModelProperty(value = "Where the funds are going to ")
  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod getTarget() {
    return target;
  }

  public void setTarget(CoinbasePaymentsCommonPaymentMethodsPaymentMethod target) {
    this.target = target;
  }

  public CoinbaseEngPrimeApiApiCreateTransactionRequest amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * How much you want to move
   * @return amount
  **/
  @ApiModelProperty(value = "How much you want to move")
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }

  public CoinbaseEngPrimeApiApiCreateTransactionRequest portfolioId(String portfolioId) {
    this.portfolioId = portfolioId;
    return this;
  }

   /**
   * The portfolio you want to transact with
   * @return portfolioId
  **/
  @ApiModelProperty(value = "The portfolio you want to transact with")
  public String getPortfolioId() {
    return portfolioId;
  }

  public void setPortfolioId(String portfolioId) {
    this.portfolioId = portfolioId;
  }

  public CoinbaseEngPrimeApiApiCreateTransactionRequest options(Map<String, String> options) {
    this.options = options;
    return this;
  }

  public CoinbaseEngPrimeApiApiCreateTransactionRequest putOptionsItem(String key, String optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<String, String>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

   /**
   * Txn options
   * @return options
  **/
  @ApiModelProperty(value = "Txn options")
  public Map<String, String> getOptions() {
    return options;
  }

  public void setOptions(Map<String, String> options) {
    this.options = options;
  }

  public CoinbaseEngPrimeApiApiCreateTransactionRequest tokenIds(List<String> tokenIds) {
    this.tokenIds = tokenIds;
    return this;
  }

  public CoinbaseEngPrimeApiApiCreateTransactionRequest addTokenIdsItem(String tokenIdsItem) {
    if (this.tokenIds == null) {
      this.tokenIds = new ArrayList<String>();
    }
    this.tokenIds.add(tokenIdsItem);
    return this;
  }

   /**
   * Get tokenIds
   * @return tokenIds
  **/
  @ApiModelProperty(value = "")
  public List<String> getTokenIds() {
    return tokenIds;
  }

  public void setTokenIds(List<String> tokenIds) {
    this.tokenIds = tokenIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseEngPrimeApiApiCreateTransactionRequest coinbaseEngPrimeApiApiCreateTransactionRequest = (CoinbaseEngPrimeApiApiCreateTransactionRequest) o;
    return Objects.equals(this.idem, coinbaseEngPrimeApiApiCreateTransactionRequest.idem) &&
        Objects.equals(this.transactionType, coinbaseEngPrimeApiApiCreateTransactionRequest.transactionType) &&
        Objects.equals(this.currencySymbol, coinbaseEngPrimeApiApiCreateTransactionRequest.currencySymbol) &&
        Objects.equals(this.source, coinbaseEngPrimeApiApiCreateTransactionRequest.source) &&
        Objects.equals(this.target, coinbaseEngPrimeApiApiCreateTransactionRequest.target) &&
        Objects.equals(this.amount, coinbaseEngPrimeApiApiCreateTransactionRequest.amount) &&
        Objects.equals(this.portfolioId, coinbaseEngPrimeApiApiCreateTransactionRequest.portfolioId) &&
        Objects.equals(this.options, coinbaseEngPrimeApiApiCreateTransactionRequest.options) &&
        Objects.equals(this.tokenIds, coinbaseEngPrimeApiApiCreateTransactionRequest.tokenIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idem, transactionType, currencySymbol, source, target, amount, portfolioId, options, tokenIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseEngPrimeApiApiCreateTransactionRequest {\n");
    
    sb.append("    idem: ").append(toIndentedString(idem)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    currencySymbol: ").append(toIndentedString(currencySymbol)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    portfolioId: ").append(toIndentedString(portfolioId)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    tokenIds: ").append(toIndentedString(tokenIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

