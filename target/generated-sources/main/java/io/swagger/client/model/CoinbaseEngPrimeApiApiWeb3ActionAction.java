/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseEngPrimeApiApiArchiveSecurityKey;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUploadSecurityKey;
import io.swagger.client.model.CoinbaseEngPrimeApiApiWeb3Backup;
import io.swagger.client.model.CoinbaseEngPrimeApiApiWeb3KeyExport;
import io.swagger.client.model.CoinbaseEngPrimeApiApiWeb3Onboarding;
import io.swagger.client.model.CoinbaseEngPrimeApiApiWeb3Recovery;
import io.swagger.client.model.CoinbaseEngPrimeApiApiWeb3SignerAddition;
import java.io.IOException;

/**
 * CoinbaseEngPrimeApiApiWeb3ActionAction
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseEngPrimeApiApiWeb3ActionAction {
  @SerializedName("web3_backup")
  private CoinbaseEngPrimeApiApiWeb3Backup web3Backup = null;

  @SerializedName("web3_recovery")
  private CoinbaseEngPrimeApiApiWeb3Recovery web3Recovery = null;

  @SerializedName("web3_onboarding")
  private CoinbaseEngPrimeApiApiWeb3Onboarding web3Onboarding = null;

  @SerializedName("web3_signer_addition")
  private CoinbaseEngPrimeApiApiWeb3SignerAddition web3SignerAddition = null;

  @SerializedName("upload_security_key")
  private CoinbaseEngPrimeApiApiUploadSecurityKey uploadSecurityKey = null;

  @SerializedName("web3_key_export")
  private CoinbaseEngPrimeApiApiWeb3KeyExport web3KeyExport = null;

  @SerializedName("archive_security_key")
  private CoinbaseEngPrimeApiApiArchiveSecurityKey archiveSecurityKey = null;

  public CoinbaseEngPrimeApiApiWeb3ActionAction web3Backup(CoinbaseEngPrimeApiApiWeb3Backup web3Backup) {
    this.web3Backup = web3Backup;
    return this;
  }

   /**
   * Get web3Backup
   * @return web3Backup
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiWeb3Backup getWeb3Backup() {
    return web3Backup;
  }

  public void setWeb3Backup(CoinbaseEngPrimeApiApiWeb3Backup web3Backup) {
    this.web3Backup = web3Backup;
  }

  public CoinbaseEngPrimeApiApiWeb3ActionAction web3Recovery(CoinbaseEngPrimeApiApiWeb3Recovery web3Recovery) {
    this.web3Recovery = web3Recovery;
    return this;
  }

   /**
   * Get web3Recovery
   * @return web3Recovery
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiWeb3Recovery getWeb3Recovery() {
    return web3Recovery;
  }

  public void setWeb3Recovery(CoinbaseEngPrimeApiApiWeb3Recovery web3Recovery) {
    this.web3Recovery = web3Recovery;
  }

  public CoinbaseEngPrimeApiApiWeb3ActionAction web3Onboarding(CoinbaseEngPrimeApiApiWeb3Onboarding web3Onboarding) {
    this.web3Onboarding = web3Onboarding;
    return this;
  }

   /**
   * Get web3Onboarding
   * @return web3Onboarding
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiWeb3Onboarding getWeb3Onboarding() {
    return web3Onboarding;
  }

  public void setWeb3Onboarding(CoinbaseEngPrimeApiApiWeb3Onboarding web3Onboarding) {
    this.web3Onboarding = web3Onboarding;
  }

  public CoinbaseEngPrimeApiApiWeb3ActionAction web3SignerAddition(CoinbaseEngPrimeApiApiWeb3SignerAddition web3SignerAddition) {
    this.web3SignerAddition = web3SignerAddition;
    return this;
  }

   /**
   * Get web3SignerAddition
   * @return web3SignerAddition
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiWeb3SignerAddition getWeb3SignerAddition() {
    return web3SignerAddition;
  }

  public void setWeb3SignerAddition(CoinbaseEngPrimeApiApiWeb3SignerAddition web3SignerAddition) {
    this.web3SignerAddition = web3SignerAddition;
  }

  public CoinbaseEngPrimeApiApiWeb3ActionAction uploadSecurityKey(CoinbaseEngPrimeApiApiUploadSecurityKey uploadSecurityKey) {
    this.uploadSecurityKey = uploadSecurityKey;
    return this;
  }

   /**
   * Get uploadSecurityKey
   * @return uploadSecurityKey
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiUploadSecurityKey getUploadSecurityKey() {
    return uploadSecurityKey;
  }

  public void setUploadSecurityKey(CoinbaseEngPrimeApiApiUploadSecurityKey uploadSecurityKey) {
    this.uploadSecurityKey = uploadSecurityKey;
  }

  public CoinbaseEngPrimeApiApiWeb3ActionAction web3KeyExport(CoinbaseEngPrimeApiApiWeb3KeyExport web3KeyExport) {
    this.web3KeyExport = web3KeyExport;
    return this;
  }

   /**
   * Get web3KeyExport
   * @return web3KeyExport
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiWeb3KeyExport getWeb3KeyExport() {
    return web3KeyExport;
  }

  public void setWeb3KeyExport(CoinbaseEngPrimeApiApiWeb3KeyExport web3KeyExport) {
    this.web3KeyExport = web3KeyExport;
  }

  public CoinbaseEngPrimeApiApiWeb3ActionAction archiveSecurityKey(CoinbaseEngPrimeApiApiArchiveSecurityKey archiveSecurityKey) {
    this.archiveSecurityKey = archiveSecurityKey;
    return this;
  }

   /**
   * Get archiveSecurityKey
   * @return archiveSecurityKey
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiArchiveSecurityKey getArchiveSecurityKey() {
    return archiveSecurityKey;
  }

  public void setArchiveSecurityKey(CoinbaseEngPrimeApiApiArchiveSecurityKey archiveSecurityKey) {
    this.archiveSecurityKey = archiveSecurityKey;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseEngPrimeApiApiWeb3ActionAction coinbaseEngPrimeApiApiWeb3ActionAction = (CoinbaseEngPrimeApiApiWeb3ActionAction) o;
    return Objects.equals(this.web3Backup, coinbaseEngPrimeApiApiWeb3ActionAction.web3Backup) &&
        Objects.equals(this.web3Recovery, coinbaseEngPrimeApiApiWeb3ActionAction.web3Recovery) &&
        Objects.equals(this.web3Onboarding, coinbaseEngPrimeApiApiWeb3ActionAction.web3Onboarding) &&
        Objects.equals(this.web3SignerAddition, coinbaseEngPrimeApiApiWeb3ActionAction.web3SignerAddition) &&
        Objects.equals(this.uploadSecurityKey, coinbaseEngPrimeApiApiWeb3ActionAction.uploadSecurityKey) &&
        Objects.equals(this.web3KeyExport, coinbaseEngPrimeApiApiWeb3ActionAction.web3KeyExport) &&
        Objects.equals(this.archiveSecurityKey, coinbaseEngPrimeApiApiWeb3ActionAction.archiveSecurityKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(web3Backup, web3Recovery, web3Onboarding, web3SignerAddition, uploadSecurityKey, web3KeyExport, archiveSecurityKey);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseEngPrimeApiApiWeb3ActionAction {\n");
    
    sb.append("    web3Backup: ").append(toIndentedString(web3Backup)).append("\n");
    sb.append("    web3Recovery: ").append(toIndentedString(web3Recovery)).append("\n");
    sb.append("    web3Onboarding: ").append(toIndentedString(web3Onboarding)).append("\n");
    sb.append("    web3SignerAddition: ").append(toIndentedString(web3SignerAddition)).append("\n");
    sb.append("    uploadSecurityKey: ").append(toIndentedString(uploadSecurityKey)).append("\n");
    sb.append("    web3KeyExport: ").append(toIndentedString(web3KeyExport)).append("\n");
    sb.append("    archiveSecurityKey: ").append(toIndentedString(archiveSecurityKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

