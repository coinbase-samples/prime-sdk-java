/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsAllocation;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsApplePay;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsBancomatPay;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsBankAccount;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsBlockchainAddress;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsBlockchainTransaction;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsCTN;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsCard;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsCbit;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsCheckoutPaymentLink;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsCoinbaseAccount;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsCustodialPool;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsDAppWalletAccount;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsDAppWalletBlockchainAddress;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsDefaultAccount;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsDenebIMPS;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsDenebUPI;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsDerivativeSettlement;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsDirectDeposit;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsEmailAddress;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsExternalPaymentMethod;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsFedwire;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsGooglePay;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsHotWallet;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsIdeal;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsIdentityContractCall;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsInterac;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsIntraBank;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsLedgerAccount;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsLedgerNamedAccount;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsLiquidityPool;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsMagicSpendBlockchainAddress;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsNovaAccount;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsPaymentMethodType;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsPaypal;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsPhoneNumber;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsPixEbanx;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsProAccount;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsProInternalAccount;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsRemitly;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsRtp;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsSepa;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsSepaV2;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsSgFast;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsSgPayNow;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsSignet;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsSofort;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsSwift;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsTransferPointer;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsUk;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsUser;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsVendorPayment;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsVenue;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsZaakpayMobikwik;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsZengin;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsZenginV2;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsZepto;
import java.io.IOException;

/**
 * CoinbasePaymentsCommonPaymentMethodsPaymentMethod
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbasePaymentsCommonPaymentMethodsPaymentMethod {
  @SerializedName("type")
  private CoinbasePaymentsCommonPaymentMethodsPaymentMethodType type = null;

  @SerializedName("network")
  private String network = null;

  @SerializedName("payment_method_id")
  private String paymentMethodId = null;

  @SerializedName("blockchain_address")
  private CoinbasePaymentsCommonPaymentMethodsBlockchainAddress blockchainAddress = null;

  @SerializedName("coinbase_account")
  private CoinbasePaymentsCommonPaymentMethodsCoinbaseAccount coinbaseAccount = null;

  @SerializedName("blockchain_transaction")
  private CoinbasePaymentsCommonPaymentMethodsBlockchainTransaction blockchainTransaction = null;

  @SerializedName("fedwire")
  private CoinbasePaymentsCommonPaymentMethodsFedwire fedwire = null;

  @SerializedName("swift")
  private CoinbasePaymentsCommonPaymentMethodsSwift swift = null;

  @SerializedName("card")
  private CoinbasePaymentsCommonPaymentMethodsCard card = null;

  @SerializedName("zengin")
  private CoinbasePaymentsCommonPaymentMethodsZengin zengin = null;

  @SerializedName("uk")
  private CoinbasePaymentsCommonPaymentMethodsUk uk = null;

  @SerializedName("sepa")
  private CoinbasePaymentsCommonPaymentMethodsSepa sepa = null;

  @SerializedName("paypal")
  private CoinbasePaymentsCommonPaymentMethodsPaypal paypal = null;

  @SerializedName("ledger_account")
  private CoinbasePaymentsCommonPaymentMethodsLedgerAccount ledgerAccount = null;

  @SerializedName("external_payment_method")
  private CoinbasePaymentsCommonPaymentMethodsExternalPaymentMethod externalPaymentMethod = null;

  @SerializedName("pro_account")
  private CoinbasePaymentsCommonPaymentMethodsProAccount proAccount = null;

  @SerializedName("rtp")
  private CoinbasePaymentsCommonPaymentMethodsRtp rtp = null;

  @SerializedName("venue")
  private CoinbasePaymentsCommonPaymentMethodsVenue venue = null;

  @SerializedName("ledger_named_account")
  private CoinbasePaymentsCommonPaymentMethodsLedgerNamedAccount ledgerNamedAccount = null;

  @SerializedName("custodial_pool")
  private CoinbasePaymentsCommonPaymentMethodsCustodialPool custodialPool = null;

  @SerializedName("apple_pay")
  private CoinbasePaymentsCommonPaymentMethodsApplePay applePay = null;

  @SerializedName("default_account")
  private CoinbasePaymentsCommonPaymentMethodsDefaultAccount defaultAccount = null;

  @SerializedName("remitly")
  private CoinbasePaymentsCommonPaymentMethodsRemitly remitly = null;

  @SerializedName("pro_internal_account")
  private CoinbasePaymentsCommonPaymentMethodsProInternalAccount proInternalAccount = null;

  @SerializedName("dapp_wallet_account")
  private CoinbasePaymentsCommonPaymentMethodsDAppWalletAccount dappWalletAccount = null;

  @SerializedName("google_pay")
  private CoinbasePaymentsCommonPaymentMethodsGooglePay googlePay = null;

  @SerializedName("dapp_wallet_blockchain_address")
  private CoinbasePaymentsCommonPaymentMethodsDAppWalletBlockchainAddress dappWalletBlockchainAddress = null;

  @SerializedName("zaakpay_mobikwik")
  private CoinbasePaymentsCommonPaymentMethodsZaakpayMobikwik zaakpayMobikwik = null;

  @SerializedName("deneb_upi")
  private CoinbasePaymentsCommonPaymentMethodsDenebUPI denebUpi = null;

  @SerializedName("bank_account")
  private CoinbasePaymentsCommonPaymentMethodsBankAccount bankAccount = null;

  @SerializedName("identity_contract_call")
  private CoinbasePaymentsCommonPaymentMethodsIdentityContractCall identityContractCall = null;

  @SerializedName("deneb_imps")
  private CoinbasePaymentsCommonPaymentMethodsDenebIMPS denebImps = null;

  @SerializedName("allocation")
  private CoinbasePaymentsCommonPaymentMethodsAllocation allocation = null;

  @SerializedName("liquidity_pool")
  private CoinbasePaymentsCommonPaymentMethodsLiquidityPool liquidityPool = null;

  @SerializedName("zengin_v2")
  private CoinbasePaymentsCommonPaymentMethodsZenginV2 zenginV2 = null;

  @SerializedName("direct_deposit")
  private CoinbasePaymentsCommonPaymentMethodsDirectDeposit directDeposit = null;

  @SerializedName("sepa_v2")
  private CoinbasePaymentsCommonPaymentMethodsSepaV2 sepaV2 = null;

  @SerializedName("zepto")
  private CoinbasePaymentsCommonPaymentMethodsZepto zepto = null;

  @SerializedName("pix_ebanx")
  private CoinbasePaymentsCommonPaymentMethodsPixEbanx pixEbanx = null;

  @SerializedName("signet")
  private CoinbasePaymentsCommonPaymentMethodsSignet signet = null;

  @SerializedName("derivative_settlement")
  private CoinbasePaymentsCommonPaymentMethodsDerivativeSettlement derivativeSettlement = null;

  @SerializedName("user")
  private CoinbasePaymentsCommonPaymentMethodsUser user = null;

  @SerializedName("sg_fast")
  private CoinbasePaymentsCommonPaymentMethodsSgFast sgFast = null;

  @SerializedName("interac")
  private CoinbasePaymentsCommonPaymentMethodsInterac interac = null;

  @SerializedName("intra_bank")
  private CoinbasePaymentsCommonPaymentMethodsIntraBank intraBank = null;

  @SerializedName("cbit")
  private CoinbasePaymentsCommonPaymentMethodsCbit cbit = null;

  @SerializedName("ideal")
  private CoinbasePaymentsCommonPaymentMethodsIdeal ideal = null;

  @SerializedName("sofort")
  private CoinbasePaymentsCommonPaymentMethodsSofort sofort = null;

  @SerializedName("sg_paynow")
  private CoinbasePaymentsCommonPaymentMethodsSgPayNow sgPaynow = null;

  @SerializedName("checkout_payment_link")
  private CoinbasePaymentsCommonPaymentMethodsCheckoutPaymentLink checkoutPaymentLink = null;

  @SerializedName("email_address")
  private CoinbasePaymentsCommonPaymentMethodsEmailAddress emailAddress = null;

  @SerializedName("phone_number")
  private CoinbasePaymentsCommonPaymentMethodsPhoneNumber phoneNumber = null;

  @SerializedName("vendor_payment")
  private CoinbasePaymentsCommonPaymentMethodsVendorPayment vendorPayment = null;

  @SerializedName("ctn")
  private CoinbasePaymentsCommonPaymentMethodsCTN ctn = null;

  @SerializedName("bancomat_pay")
  private CoinbasePaymentsCommonPaymentMethodsBancomatPay bancomatPay = null;

  @SerializedName("hot_wallet")
  private CoinbasePaymentsCommonPaymentMethodsHotWallet hotWallet = null;

  @SerializedName("nova_account")
  private CoinbasePaymentsCommonPaymentMethodsNovaAccount novaAccount = null;

  @SerializedName("magic_spend_blockchain_address")
  private CoinbasePaymentsCommonPaymentMethodsMagicSpendBlockchainAddress magicSpendBlockchainAddress = null;

  @SerializedName("transfer_pointer")
  private CoinbasePaymentsCommonPaymentMethodsTransferPointer transferPointer = null;

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod type(CoinbasePaymentsCommonPaymentMethodsPaymentMethodType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsPaymentMethodType getType() {
    return type;
  }

  public void setType(CoinbasePaymentsCommonPaymentMethodsPaymentMethodType type) {
    this.type = type;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod network(String network) {
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @ApiModelProperty(value = "")
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod paymentMethodId(String paymentMethodId) {
    this.paymentMethodId = paymentMethodId;
    return this;
  }

   /**
   * Get paymentMethodId
   * @return paymentMethodId
  **/
  @ApiModelProperty(value = "")
  public String getPaymentMethodId() {
    return paymentMethodId;
  }

  public void setPaymentMethodId(String paymentMethodId) {
    this.paymentMethodId = paymentMethodId;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod blockchainAddress(CoinbasePaymentsCommonPaymentMethodsBlockchainAddress blockchainAddress) {
    this.blockchainAddress = blockchainAddress;
    return this;
  }

   /**
   * Get blockchainAddress
   * @return blockchainAddress
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsBlockchainAddress getBlockchainAddress() {
    return blockchainAddress;
  }

  public void setBlockchainAddress(CoinbasePaymentsCommonPaymentMethodsBlockchainAddress blockchainAddress) {
    this.blockchainAddress = blockchainAddress;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod coinbaseAccount(CoinbasePaymentsCommonPaymentMethodsCoinbaseAccount coinbaseAccount) {
    this.coinbaseAccount = coinbaseAccount;
    return this;
  }

   /**
   * Get coinbaseAccount
   * @return coinbaseAccount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsCoinbaseAccount getCoinbaseAccount() {
    return coinbaseAccount;
  }

  public void setCoinbaseAccount(CoinbasePaymentsCommonPaymentMethodsCoinbaseAccount coinbaseAccount) {
    this.coinbaseAccount = coinbaseAccount;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod blockchainTransaction(CoinbasePaymentsCommonPaymentMethodsBlockchainTransaction blockchainTransaction) {
    this.blockchainTransaction = blockchainTransaction;
    return this;
  }

   /**
   * Get blockchainTransaction
   * @return blockchainTransaction
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsBlockchainTransaction getBlockchainTransaction() {
    return blockchainTransaction;
  }

  public void setBlockchainTransaction(CoinbasePaymentsCommonPaymentMethodsBlockchainTransaction blockchainTransaction) {
    this.blockchainTransaction = blockchainTransaction;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod fedwire(CoinbasePaymentsCommonPaymentMethodsFedwire fedwire) {
    this.fedwire = fedwire;
    return this;
  }

   /**
   * Get fedwire
   * @return fedwire
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsFedwire getFedwire() {
    return fedwire;
  }

  public void setFedwire(CoinbasePaymentsCommonPaymentMethodsFedwire fedwire) {
    this.fedwire = fedwire;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod swift(CoinbasePaymentsCommonPaymentMethodsSwift swift) {
    this.swift = swift;
    return this;
  }

   /**
   * Get swift
   * @return swift
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsSwift getSwift() {
    return swift;
  }

  public void setSwift(CoinbasePaymentsCommonPaymentMethodsSwift swift) {
    this.swift = swift;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod card(CoinbasePaymentsCommonPaymentMethodsCard card) {
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsCard getCard() {
    return card;
  }

  public void setCard(CoinbasePaymentsCommonPaymentMethodsCard card) {
    this.card = card;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod zengin(CoinbasePaymentsCommonPaymentMethodsZengin zengin) {
    this.zengin = zengin;
    return this;
  }

   /**
   * Get zengin
   * @return zengin
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsZengin getZengin() {
    return zengin;
  }

  public void setZengin(CoinbasePaymentsCommonPaymentMethodsZengin zengin) {
    this.zengin = zengin;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod uk(CoinbasePaymentsCommonPaymentMethodsUk uk) {
    this.uk = uk;
    return this;
  }

   /**
   * Get uk
   * @return uk
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsUk getUk() {
    return uk;
  }

  public void setUk(CoinbasePaymentsCommonPaymentMethodsUk uk) {
    this.uk = uk;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod sepa(CoinbasePaymentsCommonPaymentMethodsSepa sepa) {
    this.sepa = sepa;
    return this;
  }

   /**
   * Get sepa
   * @return sepa
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsSepa getSepa() {
    return sepa;
  }

  public void setSepa(CoinbasePaymentsCommonPaymentMethodsSepa sepa) {
    this.sepa = sepa;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod paypal(CoinbasePaymentsCommonPaymentMethodsPaypal paypal) {
    this.paypal = paypal;
    return this;
  }

   /**
   * Get paypal
   * @return paypal
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsPaypal getPaypal() {
    return paypal;
  }

  public void setPaypal(CoinbasePaymentsCommonPaymentMethodsPaypal paypal) {
    this.paypal = paypal;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod ledgerAccount(CoinbasePaymentsCommonPaymentMethodsLedgerAccount ledgerAccount) {
    this.ledgerAccount = ledgerAccount;
    return this;
  }

   /**
   * Get ledgerAccount
   * @return ledgerAccount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsLedgerAccount getLedgerAccount() {
    return ledgerAccount;
  }

  public void setLedgerAccount(CoinbasePaymentsCommonPaymentMethodsLedgerAccount ledgerAccount) {
    this.ledgerAccount = ledgerAccount;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod externalPaymentMethod(CoinbasePaymentsCommonPaymentMethodsExternalPaymentMethod externalPaymentMethod) {
    this.externalPaymentMethod = externalPaymentMethod;
    return this;
  }

   /**
   * Get externalPaymentMethod
   * @return externalPaymentMethod
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsExternalPaymentMethod getExternalPaymentMethod() {
    return externalPaymentMethod;
  }

  public void setExternalPaymentMethod(CoinbasePaymentsCommonPaymentMethodsExternalPaymentMethod externalPaymentMethod) {
    this.externalPaymentMethod = externalPaymentMethod;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod proAccount(CoinbasePaymentsCommonPaymentMethodsProAccount proAccount) {
    this.proAccount = proAccount;
    return this;
  }

   /**
   * Get proAccount
   * @return proAccount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsProAccount getProAccount() {
    return proAccount;
  }

  public void setProAccount(CoinbasePaymentsCommonPaymentMethodsProAccount proAccount) {
    this.proAccount = proAccount;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod rtp(CoinbasePaymentsCommonPaymentMethodsRtp rtp) {
    this.rtp = rtp;
    return this;
  }

   /**
   * Get rtp
   * @return rtp
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsRtp getRtp() {
    return rtp;
  }

  public void setRtp(CoinbasePaymentsCommonPaymentMethodsRtp rtp) {
    this.rtp = rtp;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod venue(CoinbasePaymentsCommonPaymentMethodsVenue venue) {
    this.venue = venue;
    return this;
  }

   /**
   * Get venue
   * @return venue
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsVenue getVenue() {
    return venue;
  }

  public void setVenue(CoinbasePaymentsCommonPaymentMethodsVenue venue) {
    this.venue = venue;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod ledgerNamedAccount(CoinbasePaymentsCommonPaymentMethodsLedgerNamedAccount ledgerNamedAccount) {
    this.ledgerNamedAccount = ledgerNamedAccount;
    return this;
  }

   /**
   * Get ledgerNamedAccount
   * @return ledgerNamedAccount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsLedgerNamedAccount getLedgerNamedAccount() {
    return ledgerNamedAccount;
  }

  public void setLedgerNamedAccount(CoinbasePaymentsCommonPaymentMethodsLedgerNamedAccount ledgerNamedAccount) {
    this.ledgerNamedAccount = ledgerNamedAccount;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod custodialPool(CoinbasePaymentsCommonPaymentMethodsCustodialPool custodialPool) {
    this.custodialPool = custodialPool;
    return this;
  }

   /**
   * Get custodialPool
   * @return custodialPool
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsCustodialPool getCustodialPool() {
    return custodialPool;
  }

  public void setCustodialPool(CoinbasePaymentsCommonPaymentMethodsCustodialPool custodialPool) {
    this.custodialPool = custodialPool;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod applePay(CoinbasePaymentsCommonPaymentMethodsApplePay applePay) {
    this.applePay = applePay;
    return this;
  }

   /**
   * Get applePay
   * @return applePay
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsApplePay getApplePay() {
    return applePay;
  }

  public void setApplePay(CoinbasePaymentsCommonPaymentMethodsApplePay applePay) {
    this.applePay = applePay;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod defaultAccount(CoinbasePaymentsCommonPaymentMethodsDefaultAccount defaultAccount) {
    this.defaultAccount = defaultAccount;
    return this;
  }

   /**
   * Get defaultAccount
   * @return defaultAccount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsDefaultAccount getDefaultAccount() {
    return defaultAccount;
  }

  public void setDefaultAccount(CoinbasePaymentsCommonPaymentMethodsDefaultAccount defaultAccount) {
    this.defaultAccount = defaultAccount;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod remitly(CoinbasePaymentsCommonPaymentMethodsRemitly remitly) {
    this.remitly = remitly;
    return this;
  }

   /**
   * Get remitly
   * @return remitly
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsRemitly getRemitly() {
    return remitly;
  }

  public void setRemitly(CoinbasePaymentsCommonPaymentMethodsRemitly remitly) {
    this.remitly = remitly;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod proInternalAccount(CoinbasePaymentsCommonPaymentMethodsProInternalAccount proInternalAccount) {
    this.proInternalAccount = proInternalAccount;
    return this;
  }

   /**
   * Get proInternalAccount
   * @return proInternalAccount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsProInternalAccount getProInternalAccount() {
    return proInternalAccount;
  }

  public void setProInternalAccount(CoinbasePaymentsCommonPaymentMethodsProInternalAccount proInternalAccount) {
    this.proInternalAccount = proInternalAccount;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod dappWalletAccount(CoinbasePaymentsCommonPaymentMethodsDAppWalletAccount dappWalletAccount) {
    this.dappWalletAccount = dappWalletAccount;
    return this;
  }

   /**
   * Get dappWalletAccount
   * @return dappWalletAccount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsDAppWalletAccount getDappWalletAccount() {
    return dappWalletAccount;
  }

  public void setDappWalletAccount(CoinbasePaymentsCommonPaymentMethodsDAppWalletAccount dappWalletAccount) {
    this.dappWalletAccount = dappWalletAccount;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod googlePay(CoinbasePaymentsCommonPaymentMethodsGooglePay googlePay) {
    this.googlePay = googlePay;
    return this;
  }

   /**
   * Get googlePay
   * @return googlePay
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsGooglePay getGooglePay() {
    return googlePay;
  }

  public void setGooglePay(CoinbasePaymentsCommonPaymentMethodsGooglePay googlePay) {
    this.googlePay = googlePay;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod dappWalletBlockchainAddress(CoinbasePaymentsCommonPaymentMethodsDAppWalletBlockchainAddress dappWalletBlockchainAddress) {
    this.dappWalletBlockchainAddress = dappWalletBlockchainAddress;
    return this;
  }

   /**
   * Get dappWalletBlockchainAddress
   * @return dappWalletBlockchainAddress
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsDAppWalletBlockchainAddress getDappWalletBlockchainAddress() {
    return dappWalletBlockchainAddress;
  }

  public void setDappWalletBlockchainAddress(CoinbasePaymentsCommonPaymentMethodsDAppWalletBlockchainAddress dappWalletBlockchainAddress) {
    this.dappWalletBlockchainAddress = dappWalletBlockchainAddress;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod zaakpayMobikwik(CoinbasePaymentsCommonPaymentMethodsZaakpayMobikwik zaakpayMobikwik) {
    this.zaakpayMobikwik = zaakpayMobikwik;
    return this;
  }

   /**
   * Get zaakpayMobikwik
   * @return zaakpayMobikwik
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsZaakpayMobikwik getZaakpayMobikwik() {
    return zaakpayMobikwik;
  }

  public void setZaakpayMobikwik(CoinbasePaymentsCommonPaymentMethodsZaakpayMobikwik zaakpayMobikwik) {
    this.zaakpayMobikwik = zaakpayMobikwik;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod denebUpi(CoinbasePaymentsCommonPaymentMethodsDenebUPI denebUpi) {
    this.denebUpi = denebUpi;
    return this;
  }

   /**
   * Get denebUpi
   * @return denebUpi
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsDenebUPI getDenebUpi() {
    return denebUpi;
  }

  public void setDenebUpi(CoinbasePaymentsCommonPaymentMethodsDenebUPI denebUpi) {
    this.denebUpi = denebUpi;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod bankAccount(CoinbasePaymentsCommonPaymentMethodsBankAccount bankAccount) {
    this.bankAccount = bankAccount;
    return this;
  }

   /**
   * Get bankAccount
   * @return bankAccount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsBankAccount getBankAccount() {
    return bankAccount;
  }

  public void setBankAccount(CoinbasePaymentsCommonPaymentMethodsBankAccount bankAccount) {
    this.bankAccount = bankAccount;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod identityContractCall(CoinbasePaymentsCommonPaymentMethodsIdentityContractCall identityContractCall) {
    this.identityContractCall = identityContractCall;
    return this;
  }

   /**
   * Get identityContractCall
   * @return identityContractCall
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsIdentityContractCall getIdentityContractCall() {
    return identityContractCall;
  }

  public void setIdentityContractCall(CoinbasePaymentsCommonPaymentMethodsIdentityContractCall identityContractCall) {
    this.identityContractCall = identityContractCall;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod denebImps(CoinbasePaymentsCommonPaymentMethodsDenebIMPS denebImps) {
    this.denebImps = denebImps;
    return this;
  }

   /**
   * Get denebImps
   * @return denebImps
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsDenebIMPS getDenebImps() {
    return denebImps;
  }

  public void setDenebImps(CoinbasePaymentsCommonPaymentMethodsDenebIMPS denebImps) {
    this.denebImps = denebImps;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod allocation(CoinbasePaymentsCommonPaymentMethodsAllocation allocation) {
    this.allocation = allocation;
    return this;
  }

   /**
   * Get allocation
   * @return allocation
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsAllocation getAllocation() {
    return allocation;
  }

  public void setAllocation(CoinbasePaymentsCommonPaymentMethodsAllocation allocation) {
    this.allocation = allocation;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod liquidityPool(CoinbasePaymentsCommonPaymentMethodsLiquidityPool liquidityPool) {
    this.liquidityPool = liquidityPool;
    return this;
  }

   /**
   * Get liquidityPool
   * @return liquidityPool
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsLiquidityPool getLiquidityPool() {
    return liquidityPool;
  }

  public void setLiquidityPool(CoinbasePaymentsCommonPaymentMethodsLiquidityPool liquidityPool) {
    this.liquidityPool = liquidityPool;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod zenginV2(CoinbasePaymentsCommonPaymentMethodsZenginV2 zenginV2) {
    this.zenginV2 = zenginV2;
    return this;
  }

   /**
   * Get zenginV2
   * @return zenginV2
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsZenginV2 getZenginV2() {
    return zenginV2;
  }

  public void setZenginV2(CoinbasePaymentsCommonPaymentMethodsZenginV2 zenginV2) {
    this.zenginV2 = zenginV2;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod directDeposit(CoinbasePaymentsCommonPaymentMethodsDirectDeposit directDeposit) {
    this.directDeposit = directDeposit;
    return this;
  }

   /**
   * Get directDeposit
   * @return directDeposit
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsDirectDeposit getDirectDeposit() {
    return directDeposit;
  }

  public void setDirectDeposit(CoinbasePaymentsCommonPaymentMethodsDirectDeposit directDeposit) {
    this.directDeposit = directDeposit;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod sepaV2(CoinbasePaymentsCommonPaymentMethodsSepaV2 sepaV2) {
    this.sepaV2 = sepaV2;
    return this;
  }

   /**
   * Get sepaV2
   * @return sepaV2
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsSepaV2 getSepaV2() {
    return sepaV2;
  }

  public void setSepaV2(CoinbasePaymentsCommonPaymentMethodsSepaV2 sepaV2) {
    this.sepaV2 = sepaV2;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod zepto(CoinbasePaymentsCommonPaymentMethodsZepto zepto) {
    this.zepto = zepto;
    return this;
  }

   /**
   * Get zepto
   * @return zepto
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsZepto getZepto() {
    return zepto;
  }

  public void setZepto(CoinbasePaymentsCommonPaymentMethodsZepto zepto) {
    this.zepto = zepto;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod pixEbanx(CoinbasePaymentsCommonPaymentMethodsPixEbanx pixEbanx) {
    this.pixEbanx = pixEbanx;
    return this;
  }

   /**
   * Get pixEbanx
   * @return pixEbanx
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsPixEbanx getPixEbanx() {
    return pixEbanx;
  }

  public void setPixEbanx(CoinbasePaymentsCommonPaymentMethodsPixEbanx pixEbanx) {
    this.pixEbanx = pixEbanx;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod signet(CoinbasePaymentsCommonPaymentMethodsSignet signet) {
    this.signet = signet;
    return this;
  }

   /**
   * Get signet
   * @return signet
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsSignet getSignet() {
    return signet;
  }

  public void setSignet(CoinbasePaymentsCommonPaymentMethodsSignet signet) {
    this.signet = signet;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod derivativeSettlement(CoinbasePaymentsCommonPaymentMethodsDerivativeSettlement derivativeSettlement) {
    this.derivativeSettlement = derivativeSettlement;
    return this;
  }

   /**
   * Get derivativeSettlement
   * @return derivativeSettlement
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsDerivativeSettlement getDerivativeSettlement() {
    return derivativeSettlement;
  }

  public void setDerivativeSettlement(CoinbasePaymentsCommonPaymentMethodsDerivativeSettlement derivativeSettlement) {
    this.derivativeSettlement = derivativeSettlement;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod user(CoinbasePaymentsCommonPaymentMethodsUser user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsUser getUser() {
    return user;
  }

  public void setUser(CoinbasePaymentsCommonPaymentMethodsUser user) {
    this.user = user;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod sgFast(CoinbasePaymentsCommonPaymentMethodsSgFast sgFast) {
    this.sgFast = sgFast;
    return this;
  }

   /**
   * Get sgFast
   * @return sgFast
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsSgFast getSgFast() {
    return sgFast;
  }

  public void setSgFast(CoinbasePaymentsCommonPaymentMethodsSgFast sgFast) {
    this.sgFast = sgFast;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod interac(CoinbasePaymentsCommonPaymentMethodsInterac interac) {
    this.interac = interac;
    return this;
  }

   /**
   * Get interac
   * @return interac
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsInterac getInterac() {
    return interac;
  }

  public void setInterac(CoinbasePaymentsCommonPaymentMethodsInterac interac) {
    this.interac = interac;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod intraBank(CoinbasePaymentsCommonPaymentMethodsIntraBank intraBank) {
    this.intraBank = intraBank;
    return this;
  }

   /**
   * Get intraBank
   * @return intraBank
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsIntraBank getIntraBank() {
    return intraBank;
  }

  public void setIntraBank(CoinbasePaymentsCommonPaymentMethodsIntraBank intraBank) {
    this.intraBank = intraBank;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod cbit(CoinbasePaymentsCommonPaymentMethodsCbit cbit) {
    this.cbit = cbit;
    return this;
  }

   /**
   * Get cbit
   * @return cbit
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsCbit getCbit() {
    return cbit;
  }

  public void setCbit(CoinbasePaymentsCommonPaymentMethodsCbit cbit) {
    this.cbit = cbit;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod ideal(CoinbasePaymentsCommonPaymentMethodsIdeal ideal) {
    this.ideal = ideal;
    return this;
  }

   /**
   * Get ideal
   * @return ideal
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsIdeal getIdeal() {
    return ideal;
  }

  public void setIdeal(CoinbasePaymentsCommonPaymentMethodsIdeal ideal) {
    this.ideal = ideal;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod sofort(CoinbasePaymentsCommonPaymentMethodsSofort sofort) {
    this.sofort = sofort;
    return this;
  }

   /**
   * Get sofort
   * @return sofort
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsSofort getSofort() {
    return sofort;
  }

  public void setSofort(CoinbasePaymentsCommonPaymentMethodsSofort sofort) {
    this.sofort = sofort;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod sgPaynow(CoinbasePaymentsCommonPaymentMethodsSgPayNow sgPaynow) {
    this.sgPaynow = sgPaynow;
    return this;
  }

   /**
   * Get sgPaynow
   * @return sgPaynow
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsSgPayNow getSgPaynow() {
    return sgPaynow;
  }

  public void setSgPaynow(CoinbasePaymentsCommonPaymentMethodsSgPayNow sgPaynow) {
    this.sgPaynow = sgPaynow;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod checkoutPaymentLink(CoinbasePaymentsCommonPaymentMethodsCheckoutPaymentLink checkoutPaymentLink) {
    this.checkoutPaymentLink = checkoutPaymentLink;
    return this;
  }

   /**
   * Get checkoutPaymentLink
   * @return checkoutPaymentLink
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsCheckoutPaymentLink getCheckoutPaymentLink() {
    return checkoutPaymentLink;
  }

  public void setCheckoutPaymentLink(CoinbasePaymentsCommonPaymentMethodsCheckoutPaymentLink checkoutPaymentLink) {
    this.checkoutPaymentLink = checkoutPaymentLink;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod emailAddress(CoinbasePaymentsCommonPaymentMethodsEmailAddress emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * Get emailAddress
   * @return emailAddress
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsEmailAddress getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(CoinbasePaymentsCommonPaymentMethodsEmailAddress emailAddress) {
    this.emailAddress = emailAddress;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod phoneNumber(CoinbasePaymentsCommonPaymentMethodsPhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Get phoneNumber
   * @return phoneNumber
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsPhoneNumber getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(CoinbasePaymentsCommonPaymentMethodsPhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod vendorPayment(CoinbasePaymentsCommonPaymentMethodsVendorPayment vendorPayment) {
    this.vendorPayment = vendorPayment;
    return this;
  }

   /**
   * Get vendorPayment
   * @return vendorPayment
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsVendorPayment getVendorPayment() {
    return vendorPayment;
  }

  public void setVendorPayment(CoinbasePaymentsCommonPaymentMethodsVendorPayment vendorPayment) {
    this.vendorPayment = vendorPayment;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod ctn(CoinbasePaymentsCommonPaymentMethodsCTN ctn) {
    this.ctn = ctn;
    return this;
  }

   /**
   * Get ctn
   * @return ctn
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsCTN getCtn() {
    return ctn;
  }

  public void setCtn(CoinbasePaymentsCommonPaymentMethodsCTN ctn) {
    this.ctn = ctn;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod bancomatPay(CoinbasePaymentsCommonPaymentMethodsBancomatPay bancomatPay) {
    this.bancomatPay = bancomatPay;
    return this;
  }

   /**
   * Get bancomatPay
   * @return bancomatPay
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsBancomatPay getBancomatPay() {
    return bancomatPay;
  }

  public void setBancomatPay(CoinbasePaymentsCommonPaymentMethodsBancomatPay bancomatPay) {
    this.bancomatPay = bancomatPay;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod hotWallet(CoinbasePaymentsCommonPaymentMethodsHotWallet hotWallet) {
    this.hotWallet = hotWallet;
    return this;
  }

   /**
   * Get hotWallet
   * @return hotWallet
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsHotWallet getHotWallet() {
    return hotWallet;
  }

  public void setHotWallet(CoinbasePaymentsCommonPaymentMethodsHotWallet hotWallet) {
    this.hotWallet = hotWallet;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod novaAccount(CoinbasePaymentsCommonPaymentMethodsNovaAccount novaAccount) {
    this.novaAccount = novaAccount;
    return this;
  }

   /**
   * Get novaAccount
   * @return novaAccount
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsNovaAccount getNovaAccount() {
    return novaAccount;
  }

  public void setNovaAccount(CoinbasePaymentsCommonPaymentMethodsNovaAccount novaAccount) {
    this.novaAccount = novaAccount;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod magicSpendBlockchainAddress(CoinbasePaymentsCommonPaymentMethodsMagicSpendBlockchainAddress magicSpendBlockchainAddress) {
    this.magicSpendBlockchainAddress = magicSpendBlockchainAddress;
    return this;
  }

   /**
   * Get magicSpendBlockchainAddress
   * @return magicSpendBlockchainAddress
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsMagicSpendBlockchainAddress getMagicSpendBlockchainAddress() {
    return magicSpendBlockchainAddress;
  }

  public void setMagicSpendBlockchainAddress(CoinbasePaymentsCommonPaymentMethodsMagicSpendBlockchainAddress magicSpendBlockchainAddress) {
    this.magicSpendBlockchainAddress = magicSpendBlockchainAddress;
  }

  public CoinbasePaymentsCommonPaymentMethodsPaymentMethod transferPointer(CoinbasePaymentsCommonPaymentMethodsTransferPointer transferPointer) {
    this.transferPointer = transferPointer;
    return this;
  }

   /**
   * Get transferPointer
   * @return transferPointer
  **/
  @ApiModelProperty(value = "")
  public CoinbasePaymentsCommonPaymentMethodsTransferPointer getTransferPointer() {
    return transferPointer;
  }

  public void setTransferPointer(CoinbasePaymentsCommonPaymentMethodsTransferPointer transferPointer) {
    this.transferPointer = transferPointer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbasePaymentsCommonPaymentMethodsPaymentMethod coinbasePaymentsCommonPaymentMethodsPaymentMethod = (CoinbasePaymentsCommonPaymentMethodsPaymentMethod) o;
    return Objects.equals(this.type, coinbasePaymentsCommonPaymentMethodsPaymentMethod.type) &&
        Objects.equals(this.network, coinbasePaymentsCommonPaymentMethodsPaymentMethod.network) &&
        Objects.equals(this.paymentMethodId, coinbasePaymentsCommonPaymentMethodsPaymentMethod.paymentMethodId) &&
        Objects.equals(this.blockchainAddress, coinbasePaymentsCommonPaymentMethodsPaymentMethod.blockchainAddress) &&
        Objects.equals(this.coinbaseAccount, coinbasePaymentsCommonPaymentMethodsPaymentMethod.coinbaseAccount) &&
        Objects.equals(this.blockchainTransaction, coinbasePaymentsCommonPaymentMethodsPaymentMethod.blockchainTransaction) &&
        Objects.equals(this.fedwire, coinbasePaymentsCommonPaymentMethodsPaymentMethod.fedwire) &&
        Objects.equals(this.swift, coinbasePaymentsCommonPaymentMethodsPaymentMethod.swift) &&
        Objects.equals(this.card, coinbasePaymentsCommonPaymentMethodsPaymentMethod.card) &&
        Objects.equals(this.zengin, coinbasePaymentsCommonPaymentMethodsPaymentMethod.zengin) &&
        Objects.equals(this.uk, coinbasePaymentsCommonPaymentMethodsPaymentMethod.uk) &&
        Objects.equals(this.sepa, coinbasePaymentsCommonPaymentMethodsPaymentMethod.sepa) &&
        Objects.equals(this.paypal, coinbasePaymentsCommonPaymentMethodsPaymentMethod.paypal) &&
        Objects.equals(this.ledgerAccount, coinbasePaymentsCommonPaymentMethodsPaymentMethod.ledgerAccount) &&
        Objects.equals(this.externalPaymentMethod, coinbasePaymentsCommonPaymentMethodsPaymentMethod.externalPaymentMethod) &&
        Objects.equals(this.proAccount, coinbasePaymentsCommonPaymentMethodsPaymentMethod.proAccount) &&
        Objects.equals(this.rtp, coinbasePaymentsCommonPaymentMethodsPaymentMethod.rtp) &&
        Objects.equals(this.venue, coinbasePaymentsCommonPaymentMethodsPaymentMethod.venue) &&
        Objects.equals(this.ledgerNamedAccount, coinbasePaymentsCommonPaymentMethodsPaymentMethod.ledgerNamedAccount) &&
        Objects.equals(this.custodialPool, coinbasePaymentsCommonPaymentMethodsPaymentMethod.custodialPool) &&
        Objects.equals(this.applePay, coinbasePaymentsCommonPaymentMethodsPaymentMethod.applePay) &&
        Objects.equals(this.defaultAccount, coinbasePaymentsCommonPaymentMethodsPaymentMethod.defaultAccount) &&
        Objects.equals(this.remitly, coinbasePaymentsCommonPaymentMethodsPaymentMethod.remitly) &&
        Objects.equals(this.proInternalAccount, coinbasePaymentsCommonPaymentMethodsPaymentMethod.proInternalAccount) &&
        Objects.equals(this.dappWalletAccount, coinbasePaymentsCommonPaymentMethodsPaymentMethod.dappWalletAccount) &&
        Objects.equals(this.googlePay, coinbasePaymentsCommonPaymentMethodsPaymentMethod.googlePay) &&
        Objects.equals(this.dappWalletBlockchainAddress, coinbasePaymentsCommonPaymentMethodsPaymentMethod.dappWalletBlockchainAddress) &&
        Objects.equals(this.zaakpayMobikwik, coinbasePaymentsCommonPaymentMethodsPaymentMethod.zaakpayMobikwik) &&
        Objects.equals(this.denebUpi, coinbasePaymentsCommonPaymentMethodsPaymentMethod.denebUpi) &&
        Objects.equals(this.bankAccount, coinbasePaymentsCommonPaymentMethodsPaymentMethod.bankAccount) &&
        Objects.equals(this.identityContractCall, coinbasePaymentsCommonPaymentMethodsPaymentMethod.identityContractCall) &&
        Objects.equals(this.denebImps, coinbasePaymentsCommonPaymentMethodsPaymentMethod.denebImps) &&
        Objects.equals(this.allocation, coinbasePaymentsCommonPaymentMethodsPaymentMethod.allocation) &&
        Objects.equals(this.liquidityPool, coinbasePaymentsCommonPaymentMethodsPaymentMethod.liquidityPool) &&
        Objects.equals(this.zenginV2, coinbasePaymentsCommonPaymentMethodsPaymentMethod.zenginV2) &&
        Objects.equals(this.directDeposit, coinbasePaymentsCommonPaymentMethodsPaymentMethod.directDeposit) &&
        Objects.equals(this.sepaV2, coinbasePaymentsCommonPaymentMethodsPaymentMethod.sepaV2) &&
        Objects.equals(this.zepto, coinbasePaymentsCommonPaymentMethodsPaymentMethod.zepto) &&
        Objects.equals(this.pixEbanx, coinbasePaymentsCommonPaymentMethodsPaymentMethod.pixEbanx) &&
        Objects.equals(this.signet, coinbasePaymentsCommonPaymentMethodsPaymentMethod.signet) &&
        Objects.equals(this.derivativeSettlement, coinbasePaymentsCommonPaymentMethodsPaymentMethod.derivativeSettlement) &&
        Objects.equals(this.user, coinbasePaymentsCommonPaymentMethodsPaymentMethod.user) &&
        Objects.equals(this.sgFast, coinbasePaymentsCommonPaymentMethodsPaymentMethod.sgFast) &&
        Objects.equals(this.interac, coinbasePaymentsCommonPaymentMethodsPaymentMethod.interac) &&
        Objects.equals(this.intraBank, coinbasePaymentsCommonPaymentMethodsPaymentMethod.intraBank) &&
        Objects.equals(this.cbit, coinbasePaymentsCommonPaymentMethodsPaymentMethod.cbit) &&
        Objects.equals(this.ideal, coinbasePaymentsCommonPaymentMethodsPaymentMethod.ideal) &&
        Objects.equals(this.sofort, coinbasePaymentsCommonPaymentMethodsPaymentMethod.sofort) &&
        Objects.equals(this.sgPaynow, coinbasePaymentsCommonPaymentMethodsPaymentMethod.sgPaynow) &&
        Objects.equals(this.checkoutPaymentLink, coinbasePaymentsCommonPaymentMethodsPaymentMethod.checkoutPaymentLink) &&
        Objects.equals(this.emailAddress, coinbasePaymentsCommonPaymentMethodsPaymentMethod.emailAddress) &&
        Objects.equals(this.phoneNumber, coinbasePaymentsCommonPaymentMethodsPaymentMethod.phoneNumber) &&
        Objects.equals(this.vendorPayment, coinbasePaymentsCommonPaymentMethodsPaymentMethod.vendorPayment) &&
        Objects.equals(this.ctn, coinbasePaymentsCommonPaymentMethodsPaymentMethod.ctn) &&
        Objects.equals(this.bancomatPay, coinbasePaymentsCommonPaymentMethodsPaymentMethod.bancomatPay) &&
        Objects.equals(this.hotWallet, coinbasePaymentsCommonPaymentMethodsPaymentMethod.hotWallet) &&
        Objects.equals(this.novaAccount, coinbasePaymentsCommonPaymentMethodsPaymentMethod.novaAccount) &&
        Objects.equals(this.magicSpendBlockchainAddress, coinbasePaymentsCommonPaymentMethodsPaymentMethod.magicSpendBlockchainAddress) &&
        Objects.equals(this.transferPointer, coinbasePaymentsCommonPaymentMethodsPaymentMethod.transferPointer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, network, paymentMethodId, blockchainAddress, coinbaseAccount, blockchainTransaction, fedwire, swift, card, zengin, uk, sepa, paypal, ledgerAccount, externalPaymentMethod, proAccount, rtp, venue, ledgerNamedAccount, custodialPool, applePay, defaultAccount, remitly, proInternalAccount, dappWalletAccount, googlePay, dappWalletBlockchainAddress, zaakpayMobikwik, denebUpi, bankAccount, identityContractCall, denebImps, allocation, liquidityPool, zenginV2, directDeposit, sepaV2, zepto, pixEbanx, signet, derivativeSettlement, user, sgFast, interac, intraBank, cbit, ideal, sofort, sgPaynow, checkoutPaymentLink, emailAddress, phoneNumber, vendorPayment, ctn, bancomatPay, hotWallet, novaAccount, magicSpendBlockchainAddress, transferPointer);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbasePaymentsCommonPaymentMethodsPaymentMethod {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    paymentMethodId: ").append(toIndentedString(paymentMethodId)).append("\n");
    sb.append("    blockchainAddress: ").append(toIndentedString(blockchainAddress)).append("\n");
    sb.append("    coinbaseAccount: ").append(toIndentedString(coinbaseAccount)).append("\n");
    sb.append("    blockchainTransaction: ").append(toIndentedString(blockchainTransaction)).append("\n");
    sb.append("    fedwire: ").append(toIndentedString(fedwire)).append("\n");
    sb.append("    swift: ").append(toIndentedString(swift)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    zengin: ").append(toIndentedString(zengin)).append("\n");
    sb.append("    uk: ").append(toIndentedString(uk)).append("\n");
    sb.append("    sepa: ").append(toIndentedString(sepa)).append("\n");
    sb.append("    paypal: ").append(toIndentedString(paypal)).append("\n");
    sb.append("    ledgerAccount: ").append(toIndentedString(ledgerAccount)).append("\n");
    sb.append("    externalPaymentMethod: ").append(toIndentedString(externalPaymentMethod)).append("\n");
    sb.append("    proAccount: ").append(toIndentedString(proAccount)).append("\n");
    sb.append("    rtp: ").append(toIndentedString(rtp)).append("\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("    ledgerNamedAccount: ").append(toIndentedString(ledgerNamedAccount)).append("\n");
    sb.append("    custodialPool: ").append(toIndentedString(custodialPool)).append("\n");
    sb.append("    applePay: ").append(toIndentedString(applePay)).append("\n");
    sb.append("    defaultAccount: ").append(toIndentedString(defaultAccount)).append("\n");
    sb.append("    remitly: ").append(toIndentedString(remitly)).append("\n");
    sb.append("    proInternalAccount: ").append(toIndentedString(proInternalAccount)).append("\n");
    sb.append("    dappWalletAccount: ").append(toIndentedString(dappWalletAccount)).append("\n");
    sb.append("    googlePay: ").append(toIndentedString(googlePay)).append("\n");
    sb.append("    dappWalletBlockchainAddress: ").append(toIndentedString(dappWalletBlockchainAddress)).append("\n");
    sb.append("    zaakpayMobikwik: ").append(toIndentedString(zaakpayMobikwik)).append("\n");
    sb.append("    denebUpi: ").append(toIndentedString(denebUpi)).append("\n");
    sb.append("    bankAccount: ").append(toIndentedString(bankAccount)).append("\n");
    sb.append("    identityContractCall: ").append(toIndentedString(identityContractCall)).append("\n");
    sb.append("    denebImps: ").append(toIndentedString(denebImps)).append("\n");
    sb.append("    allocation: ").append(toIndentedString(allocation)).append("\n");
    sb.append("    liquidityPool: ").append(toIndentedString(liquidityPool)).append("\n");
    sb.append("    zenginV2: ").append(toIndentedString(zenginV2)).append("\n");
    sb.append("    directDeposit: ").append(toIndentedString(directDeposit)).append("\n");
    sb.append("    sepaV2: ").append(toIndentedString(sepaV2)).append("\n");
    sb.append("    zepto: ").append(toIndentedString(zepto)).append("\n");
    sb.append("    pixEbanx: ").append(toIndentedString(pixEbanx)).append("\n");
    sb.append("    signet: ").append(toIndentedString(signet)).append("\n");
    sb.append("    derivativeSettlement: ").append(toIndentedString(derivativeSettlement)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    sgFast: ").append(toIndentedString(sgFast)).append("\n");
    sb.append("    interac: ").append(toIndentedString(interac)).append("\n");
    sb.append("    intraBank: ").append(toIndentedString(intraBank)).append("\n");
    sb.append("    cbit: ").append(toIndentedString(cbit)).append("\n");
    sb.append("    ideal: ").append(toIndentedString(ideal)).append("\n");
    sb.append("    sofort: ").append(toIndentedString(sofort)).append("\n");
    sb.append("    sgPaynow: ").append(toIndentedString(sgPaynow)).append("\n");
    sb.append("    checkoutPaymentLink: ").append(toIndentedString(checkoutPaymentLink)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    vendorPayment: ").append(toIndentedString(vendorPayment)).append("\n");
    sb.append("    ctn: ").append(toIndentedString(ctn)).append("\n");
    sb.append("    bancomatPay: ").append(toIndentedString(bancomatPay)).append("\n");
    sb.append("    hotWallet: ").append(toIndentedString(hotWallet)).append("\n");
    sb.append("    novaAccount: ").append(toIndentedString(novaAccount)).append("\n");
    sb.append("    magicSpendBlockchainAddress: ").append(toIndentedString(magicSpendBlockchainAddress)).append("\n");
    sb.append("    transferPointer: ").append(toIndentedString(transferPointer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

