/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseCustodyApiTransferMetadata;
import java.io.IOException;

/**
 * CoinbaseCustodyApiTransferSummary
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseCustodyApiTransferSummary {
  @SerializedName("transfer_summary")
  private String transferSummary = null;

  @SerializedName("source_location")
  private CoinbaseCustodyApiTransferMetadata sourceLocation = null;

  @SerializedName("target_location")
  private CoinbaseCustodyApiTransferMetadata targetLocation = null;

  public CoinbaseCustodyApiTransferSummary transferSummary(String transferSummary) {
    this.transferSummary = transferSummary;
    return this;
  }

   /**
   * Get transferSummary
   * @return transferSummary
  **/
  @ApiModelProperty(value = "")
  public String getTransferSummary() {
    return transferSummary;
  }

  public void setTransferSummary(String transferSummary) {
    this.transferSummary = transferSummary;
  }

  public CoinbaseCustodyApiTransferSummary sourceLocation(CoinbaseCustodyApiTransferMetadata sourceLocation) {
    this.sourceLocation = sourceLocation;
    return this;
  }

   /**
   * Get sourceLocation
   * @return sourceLocation
  **/
  @ApiModelProperty(value = "")
  public CoinbaseCustodyApiTransferMetadata getSourceLocation() {
    return sourceLocation;
  }

  public void setSourceLocation(CoinbaseCustodyApiTransferMetadata sourceLocation) {
    this.sourceLocation = sourceLocation;
  }

  public CoinbaseCustodyApiTransferSummary targetLocation(CoinbaseCustodyApiTransferMetadata targetLocation) {
    this.targetLocation = targetLocation;
    return this;
  }

   /**
   * Get targetLocation
   * @return targetLocation
  **/
  @ApiModelProperty(value = "")
  public CoinbaseCustodyApiTransferMetadata getTargetLocation() {
    return targetLocation;
  }

  public void setTargetLocation(CoinbaseCustodyApiTransferMetadata targetLocation) {
    this.targetLocation = targetLocation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseCustodyApiTransferSummary coinbaseCustodyApiTransferSummary = (CoinbaseCustodyApiTransferSummary) o;
    return Objects.equals(this.transferSummary, coinbaseCustodyApiTransferSummary.transferSummary) &&
        Objects.equals(this.sourceLocation, coinbaseCustodyApiTransferSummary.sourceLocation) &&
        Objects.equals(this.targetLocation, coinbaseCustodyApiTransferSummary.targetLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transferSummary, sourceLocation, targetLocation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseCustodyApiTransferSummary {\n");
    
    sb.append("    transferSummary: ").append(toIndentedString(transferSummary)).append("\n");
    sb.append("    sourceLocation: ").append(toIndentedString(sourceLocation)).append("\n");
    sb.append("    targetLocation: ").append(toIndentedString(targetLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

