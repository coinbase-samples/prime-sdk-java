/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteBackupSignal;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteDeviceRecoverySignal;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteKeyExportSignal;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteSignerAdditionSignal;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalGenerateKeysSignal;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalPasscodeConfirmedSignal;
import java.io.IOException;

/**
 * CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal {
  @SerializedName("passcode_confirmed")
  private CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalPasscodeConfirmedSignal passcodeConfirmed = null;

  @SerializedName("execute_backup")
  private CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteBackupSignal executeBackup = null;

  @SerializedName("execute_device_recovery")
  private CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteDeviceRecoverySignal executeDeviceRecovery = null;

  @SerializedName("generate_keys_signal")
  private CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalGenerateKeysSignal generateKeysSignal = null;

  @SerializedName("execute_signer_addition")
  private CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteSignerAdditionSignal executeSignerAddition = null;

  @SerializedName("execute_key_export")
  private CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteKeyExportSignal executeKeyExport = null;

  public CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal passcodeConfirmed(CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalPasscodeConfirmedSignal passcodeConfirmed) {
    this.passcodeConfirmed = passcodeConfirmed;
    return this;
  }

   /**
   * Get passcodeConfirmed
   * @return passcodeConfirmed
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalPasscodeConfirmedSignal getPasscodeConfirmed() {
    return passcodeConfirmed;
  }

  public void setPasscodeConfirmed(CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalPasscodeConfirmedSignal passcodeConfirmed) {
    this.passcodeConfirmed = passcodeConfirmed;
  }

  public CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal executeBackup(CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteBackupSignal executeBackup) {
    this.executeBackup = executeBackup;
    return this;
  }

   /**
   * Get executeBackup
   * @return executeBackup
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteBackupSignal getExecuteBackup() {
    return executeBackup;
  }

  public void setExecuteBackup(CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteBackupSignal executeBackup) {
    this.executeBackup = executeBackup;
  }

  public CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal executeDeviceRecovery(CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteDeviceRecoverySignal executeDeviceRecovery) {
    this.executeDeviceRecovery = executeDeviceRecovery;
    return this;
  }

   /**
   * Get executeDeviceRecovery
   * @return executeDeviceRecovery
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteDeviceRecoverySignal getExecuteDeviceRecovery() {
    return executeDeviceRecovery;
  }

  public void setExecuteDeviceRecovery(CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteDeviceRecoverySignal executeDeviceRecovery) {
    this.executeDeviceRecovery = executeDeviceRecovery;
  }

  public CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal generateKeysSignal(CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalGenerateKeysSignal generateKeysSignal) {
    this.generateKeysSignal = generateKeysSignal;
    return this;
  }

   /**
   * Get generateKeysSignal
   * @return generateKeysSignal
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalGenerateKeysSignal getGenerateKeysSignal() {
    return generateKeysSignal;
  }

  public void setGenerateKeysSignal(CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalGenerateKeysSignal generateKeysSignal) {
    this.generateKeysSignal = generateKeysSignal;
  }

  public CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal executeSignerAddition(CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteSignerAdditionSignal executeSignerAddition) {
    this.executeSignerAddition = executeSignerAddition;
    return this;
  }

   /**
   * Get executeSignerAddition
   * @return executeSignerAddition
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteSignerAdditionSignal getExecuteSignerAddition() {
    return executeSignerAddition;
  }

  public void setExecuteSignerAddition(CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteSignerAdditionSignal executeSignerAddition) {
    this.executeSignerAddition = executeSignerAddition;
  }

  public CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal executeKeyExport(CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteKeyExportSignal executeKeyExport) {
    this.executeKeyExport = executeKeyExport;
    return this;
  }

   /**
   * Get executeKeyExport
   * @return executeKeyExport
  **/
  @ApiModelProperty(value = "")
  public CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteKeyExportSignal getExecuteKeyExport() {
    return executeKeyExport;
  }

  public void setExecuteKeyExport(CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignalExecuteKeyExportSignal executeKeyExport) {
    this.executeKeyExport = executeKeyExport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal coinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal = (CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal) o;
    return Objects.equals(this.passcodeConfirmed, coinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal.passcodeConfirmed) &&
        Objects.equals(this.executeBackup, coinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal.executeBackup) &&
        Objects.equals(this.executeDeviceRecovery, coinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal.executeDeviceRecovery) &&
        Objects.equals(this.generateKeysSignal, coinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal.generateKeysSignal) &&
        Objects.equals(this.executeSignerAddition, coinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal.executeSignerAddition) &&
        Objects.equals(this.executeKeyExport, coinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal.executeKeyExport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(passcodeConfirmed, executeBackup, executeDeviceRecovery, generateKeysSignal, executeSignerAddition, executeKeyExport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseEngPrimeApiApiSignalWeb3ActionRequestSignal {\n");
    
    sb.append("    passcodeConfirmed: ").append(toIndentedString(passcodeConfirmed)).append("\n");
    sb.append("    executeBackup: ").append(toIndentedString(executeBackup)).append("\n");
    sb.append("    executeDeviceRecovery: ").append(toIndentedString(executeDeviceRecovery)).append("\n");
    sb.append("    generateKeysSignal: ").append(toIndentedString(generateKeysSignal)).append("\n");
    sb.append("    executeSignerAddition: ").append(toIndentedString(executeSignerAddition)).append("\n");
    sb.append("    executeKeyExport: ").append(toIndentedString(executeKeyExport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

