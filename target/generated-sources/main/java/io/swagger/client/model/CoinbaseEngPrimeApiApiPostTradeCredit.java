/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSettlementDue;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSettlementStatus;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * CoinbaseEngPrimeApiApiPostTradeCredit
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseEngPrimeApiApiPostTradeCredit {
  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("limit")
  private String limit = null;

  @SerializedName("settlements_due_next")
  private List<CoinbaseEngPrimeApiApiSettlementDue> settlementsDueNext = null;

  @SerializedName("total_notional_settlement_due_next")
  private String totalNotionalSettlementDueNext = null;

  @SerializedName("settlement_due_date")
  private OffsetDateTime settlementDueDate = null;

  @SerializedName("grace_period_due_date")
  private OffsetDateTime gracePeriodDueDate = null;

  @SerializedName("settlement_due_date_next")
  private OffsetDateTime settlementDueDateNext = null;

  @SerializedName("settlement_status")
  private CoinbaseEngPrimeApiApiSettlementStatus settlementStatus = null;

  @SerializedName("time_remaining")
  private Integer timeRemaining = null;

  @SerializedName("settlements_due")
  private List<CoinbaseEngPrimeApiApiSettlementDue> settlementsDue = null;

  @SerializedName("settlement_past_due")
  private String settlementPastDue = null;

  @SerializedName("settlement_current_due")
  private String settlementCurrentDue = null;

  @SerializedName("settlement_upcoming_due")
  private String settlementUpcomingDue = null;

  public CoinbaseEngPrimeApiApiPostTradeCredit enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * A boolean indicating whether or not credit is enabled for this portfolio
   * @return enabled
  **/
  @ApiModelProperty(value = "A boolean indicating whether or not credit is enabled for this portfolio")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public CoinbaseEngPrimeApiApiPostTradeCredit limit(String limit) {
    this.limit = limit;
    return this;
  }

   /**
   * The global credit limit for the portfolio
   * @return limit
  **/
  @ApiModelProperty(value = "The global credit limit for the portfolio")
  public String getLimit() {
    return limit;
  }

  public void setLimit(String limit) {
    this.limit = limit;
  }

  public CoinbaseEngPrimeApiApiPostTradeCredit settlementsDueNext(List<CoinbaseEngPrimeApiApiSettlementDue> settlementsDueNext) {
    this.settlementsDueNext = settlementsDueNext;
    return this;
  }

  public CoinbaseEngPrimeApiApiPostTradeCredit addSettlementsDueNextItem(CoinbaseEngPrimeApiApiSettlementDue settlementsDueNextItem) {
    if (this.settlementsDueNext == null) {
      this.settlementsDueNext = new ArrayList<CoinbaseEngPrimeApiApiSettlementDue>();
    }
    this.settlementsDueNext.add(settlementsDueNextItem);
    return this;
  }

   /**
   * How much credit that is currently in use that must be repaid for next due date (will be depreciated after the new field be tested)
   * @return settlementsDueNext
  **/
  @ApiModelProperty(value = "How much credit that is currently in use that must be repaid for next due date (will be depreciated after the new field be tested)")
  public List<CoinbaseEngPrimeApiApiSettlementDue> getSettlementsDueNext() {
    return settlementsDueNext;
  }

  public void setSettlementsDueNext(List<CoinbaseEngPrimeApiApiSettlementDue> settlementsDueNext) {
    this.settlementsDueNext = settlementsDueNext;
  }

  public CoinbaseEngPrimeApiApiPostTradeCredit totalNotionalSettlementDueNext(String totalNotionalSettlementDueNext) {
    this.totalNotionalSettlementDueNext = totalNotionalSettlementDueNext;
    return this;
  }

   /**
   * How much credit that is currently in usd that must be repaid for next due date
   * @return totalNotionalSettlementDueNext
  **/
  @ApiModelProperty(value = "How much credit that is currently in usd that must be repaid for next due date")
  public String getTotalNotionalSettlementDueNext() {
    return totalNotionalSettlementDueNext;
  }

  public void setTotalNotionalSettlementDueNext(String totalNotionalSettlementDueNext) {
    this.totalNotionalSettlementDueNext = totalNotionalSettlementDueNext;
  }

  public CoinbaseEngPrimeApiApiPostTradeCredit settlementDueDate(OffsetDateTime settlementDueDate) {
    this.settlementDueDate = settlementDueDate;
    return this;
  }

   /**
   * Timestamp of when the earliest active settlement is due
   * @return settlementDueDate
  **/
  @ApiModelProperty(value = "Timestamp of when the earliest active settlement is due")
  public OffsetDateTime getSettlementDueDate() {
    return settlementDueDate;
  }

  public void setSettlementDueDate(OffsetDateTime settlementDueDate) {
    this.settlementDueDate = settlementDueDate;
  }

  public CoinbaseEngPrimeApiApiPostTradeCredit gracePeriodDueDate(OffsetDateTime gracePeriodDueDate) {
    this.gracePeriodDueDate = gracePeriodDueDate;
    return this;
  }

   /**
   * Timestamp of when the grace period ends. Typically 1 hour after the settlement due date
   * @return gracePeriodDueDate
  **/
  @ApiModelProperty(value = "Timestamp of when the grace period ends. Typically 1 hour after the settlement due date")
  public OffsetDateTime getGracePeriodDueDate() {
    return gracePeriodDueDate;
  }

  public void setGracePeriodDueDate(OffsetDateTime gracePeriodDueDate) {
    this.gracePeriodDueDate = gracePeriodDueDate;
  }

  public CoinbaseEngPrimeApiApiPostTradeCredit settlementDueDateNext(OffsetDateTime settlementDueDateNext) {
    this.settlementDueDateNext = settlementDueDateNext;
    return this;
  }

   /**
   * Timestamp of when the settlement is due next
   * @return settlementDueDateNext
  **/
  @ApiModelProperty(value = "Timestamp of when the settlement is due next")
  public OffsetDateTime getSettlementDueDateNext() {
    return settlementDueDateNext;
  }

  public void setSettlementDueDateNext(OffsetDateTime settlementDueDateNext) {
    this.settlementDueDateNext = settlementDueDateNext;
  }

  public CoinbaseEngPrimeApiApiPostTradeCredit settlementStatus(CoinbaseEngPrimeApiApiSettlementStatus settlementStatus) {
    this.settlementStatus = settlementStatus;
    return this;
  }

   /**
   * Status of earliest non zero settlement
   * @return settlementStatus
  **/
  @ApiModelProperty(value = "Status of earliest non zero settlement")
  public CoinbaseEngPrimeApiApiSettlementStatus getSettlementStatus() {
    return settlementStatus;
  }

  public void setSettlementStatus(CoinbaseEngPrimeApiApiSettlementStatus settlementStatus) {
    this.settlementStatus = settlementStatus;
  }

  public CoinbaseEngPrimeApiApiPostTradeCredit timeRemaining(Integer timeRemaining) {
    this.timeRemaining = timeRemaining;
    return this;
  }

   /**
   * Time remaining until closest settlement or grace period due date
   * @return timeRemaining
  **/
  @ApiModelProperty(value = "Time remaining until closest settlement or grace period due date")
  public Integer getTimeRemaining() {
    return timeRemaining;
  }

  public void setTimeRemaining(Integer timeRemaining) {
    this.timeRemaining = timeRemaining;
  }

  public CoinbaseEngPrimeApiApiPostTradeCredit settlementsDue(List<CoinbaseEngPrimeApiApiSettlementDue> settlementsDue) {
    this.settlementsDue = settlementsDue;
    return this;
  }

  public CoinbaseEngPrimeApiApiPostTradeCredit addSettlementsDueItem(CoinbaseEngPrimeApiApiSettlementDue settlementsDueItem) {
    if (this.settlementsDue == null) {
      this.settlementsDue = new ArrayList<CoinbaseEngPrimeApiApiSettlementDue>();
    }
    this.settlementsDue.add(settlementsDueItem);
    return this;
  }

   /**
   * How much credit that is currently in use that must be repaid for next due date
   * @return settlementsDue
  **/
  @ApiModelProperty(value = "How much credit that is currently in use that must be repaid for next due date")
  public List<CoinbaseEngPrimeApiApiSettlementDue> getSettlementsDue() {
    return settlementsDue;
  }

  public void setSettlementsDue(List<CoinbaseEngPrimeApiApiSettlementDue> settlementsDue) {
    this.settlementsDue = settlementsDue;
  }

  public CoinbaseEngPrimeApiApiPostTradeCredit settlementPastDue(String settlementPastDue) {
    this.settlementPastDue = settlementPastDue;
    return this;
  }

   /**
   * How much credit that is currently in use that must be repaid for past due date
   * @return settlementPastDue
  **/
  @ApiModelProperty(value = "How much credit that is currently in use that must be repaid for past due date")
  public String getSettlementPastDue() {
    return settlementPastDue;
  }

  public void setSettlementPastDue(String settlementPastDue) {
    this.settlementPastDue = settlementPastDue;
  }

  public CoinbaseEngPrimeApiApiPostTradeCredit settlementCurrentDue(String settlementCurrentDue) {
    this.settlementCurrentDue = settlementCurrentDue;
    return this;
  }

   /**
   * How much credit that is currently in use that must be repaid for current due date
   * @return settlementCurrentDue
  **/
  @ApiModelProperty(value = "How much credit that is currently in use that must be repaid for current due date")
  public String getSettlementCurrentDue() {
    return settlementCurrentDue;
  }

  public void setSettlementCurrentDue(String settlementCurrentDue) {
    this.settlementCurrentDue = settlementCurrentDue;
  }

  public CoinbaseEngPrimeApiApiPostTradeCredit settlementUpcomingDue(String settlementUpcomingDue) {
    this.settlementUpcomingDue = settlementUpcomingDue;
    return this;
  }

   /**
   * How much credit that is currently in use that must be repaid for upcoming due date
   * @return settlementUpcomingDue
  **/
  @ApiModelProperty(value = "How much credit that is currently in use that must be repaid for upcoming due date")
  public String getSettlementUpcomingDue() {
    return settlementUpcomingDue;
  }

  public void setSettlementUpcomingDue(String settlementUpcomingDue) {
    this.settlementUpcomingDue = settlementUpcomingDue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseEngPrimeApiApiPostTradeCredit coinbaseEngPrimeApiApiPostTradeCredit = (CoinbaseEngPrimeApiApiPostTradeCredit) o;
    return Objects.equals(this.enabled, coinbaseEngPrimeApiApiPostTradeCredit.enabled) &&
        Objects.equals(this.limit, coinbaseEngPrimeApiApiPostTradeCredit.limit) &&
        Objects.equals(this.settlementsDueNext, coinbaseEngPrimeApiApiPostTradeCredit.settlementsDueNext) &&
        Objects.equals(this.totalNotionalSettlementDueNext, coinbaseEngPrimeApiApiPostTradeCredit.totalNotionalSettlementDueNext) &&
        Objects.equals(this.settlementDueDate, coinbaseEngPrimeApiApiPostTradeCredit.settlementDueDate) &&
        Objects.equals(this.gracePeriodDueDate, coinbaseEngPrimeApiApiPostTradeCredit.gracePeriodDueDate) &&
        Objects.equals(this.settlementDueDateNext, coinbaseEngPrimeApiApiPostTradeCredit.settlementDueDateNext) &&
        Objects.equals(this.settlementStatus, coinbaseEngPrimeApiApiPostTradeCredit.settlementStatus) &&
        Objects.equals(this.timeRemaining, coinbaseEngPrimeApiApiPostTradeCredit.timeRemaining) &&
        Objects.equals(this.settlementsDue, coinbaseEngPrimeApiApiPostTradeCredit.settlementsDue) &&
        Objects.equals(this.settlementPastDue, coinbaseEngPrimeApiApiPostTradeCredit.settlementPastDue) &&
        Objects.equals(this.settlementCurrentDue, coinbaseEngPrimeApiApiPostTradeCredit.settlementCurrentDue) &&
        Objects.equals(this.settlementUpcomingDue, coinbaseEngPrimeApiApiPostTradeCredit.settlementUpcomingDue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, limit, settlementsDueNext, totalNotionalSettlementDueNext, settlementDueDate, gracePeriodDueDate, settlementDueDateNext, settlementStatus, timeRemaining, settlementsDue, settlementPastDue, settlementCurrentDue, settlementUpcomingDue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseEngPrimeApiApiPostTradeCredit {\n");
    
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    settlementsDueNext: ").append(toIndentedString(settlementsDueNext)).append("\n");
    sb.append("    totalNotionalSettlementDueNext: ").append(toIndentedString(totalNotionalSettlementDueNext)).append("\n");
    sb.append("    settlementDueDate: ").append(toIndentedString(settlementDueDate)).append("\n");
    sb.append("    gracePeriodDueDate: ").append(toIndentedString(gracePeriodDueDate)).append("\n");
    sb.append("    settlementDueDateNext: ").append(toIndentedString(settlementDueDateNext)).append("\n");
    sb.append("    settlementStatus: ").append(toIndentedString(settlementStatus)).append("\n");
    sb.append("    timeRemaining: ").append(toIndentedString(timeRemaining)).append("\n");
    sb.append("    settlementsDue: ").append(toIndentedString(settlementsDue)).append("\n");
    sb.append("    settlementPastDue: ").append(toIndentedString(settlementPastDue)).append("\n");
    sb.append("    settlementCurrentDue: ").append(toIndentedString(settlementCurrentDue)).append("\n");
    sb.append("    settlementUpcomingDue: ").append(toIndentedString(settlementUpcomingDue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

