/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbasePaymentsCommonPaymentMethodsAllocationLeg;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CoinbasePaymentsCommonPaymentMethodsAllocation
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbasePaymentsCommonPaymentMethodsAllocation {
  @SerializedName("id")
  private String id = null;

  @SerializedName("legs")
  private List<CoinbasePaymentsCommonPaymentMethodsAllocationLeg> legs = null;

  @SerializedName("is_netted")
  private Boolean isNetted = null;

  public CoinbasePaymentsCommonPaymentMethodsAllocation id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public CoinbasePaymentsCommonPaymentMethodsAllocation legs(List<CoinbasePaymentsCommonPaymentMethodsAllocationLeg> legs) {
    this.legs = legs;
    return this;
  }

  public CoinbasePaymentsCommonPaymentMethodsAllocation addLegsItem(CoinbasePaymentsCommonPaymentMethodsAllocationLeg legsItem) {
    if (this.legs == null) {
      this.legs = new ArrayList<CoinbasePaymentsCommonPaymentMethodsAllocationLeg>();
    }
    this.legs.add(legsItem);
    return this;
  }

   /**
   * Get legs
   * @return legs
  **/
  @ApiModelProperty(value = "")
  public List<CoinbasePaymentsCommonPaymentMethodsAllocationLeg> getLegs() {
    return legs;
  }

  public void setLegs(List<CoinbasePaymentsCommonPaymentMethodsAllocationLeg> legs) {
    this.legs = legs;
  }

  public CoinbasePaymentsCommonPaymentMethodsAllocation isNetted(Boolean isNetted) {
    this.isNetted = isNetted;
    return this;
  }

   /**
   * Get isNetted
   * @return isNetted
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsNetted() {
    return isNetted;
  }

  public void setIsNetted(Boolean isNetted) {
    this.isNetted = isNetted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbasePaymentsCommonPaymentMethodsAllocation coinbasePaymentsCommonPaymentMethodsAllocation = (CoinbasePaymentsCommonPaymentMethodsAllocation) o;
    return Objects.equals(this.id, coinbasePaymentsCommonPaymentMethodsAllocation.id) &&
        Objects.equals(this.legs, coinbasePaymentsCommonPaymentMethodsAllocation.legs) &&
        Objects.equals(this.isNetted, coinbasePaymentsCommonPaymentMethodsAllocation.isNetted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, legs, isNetted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbasePaymentsCommonPaymentMethodsAllocation {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    legs: ").append(toIndentedString(legs)).append("\n");
    sb.append("    isNetted: ").append(toIndentedString(isNetted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

