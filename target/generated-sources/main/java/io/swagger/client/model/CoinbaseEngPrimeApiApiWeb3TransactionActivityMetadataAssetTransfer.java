/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataAssetTransfer
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataAssetTransfer {
  @SerializedName("asset_symbol")
  private String assetSymbol = null;

  @SerializedName("asset_quantity")
  private String assetQuantity = null;

  @SerializedName("usd_value")
  private String usdValue = null;

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataAssetTransfer assetSymbol(String assetSymbol) {
    this.assetSymbol = assetSymbol;
    return this;
  }

   /**
   * Get assetSymbol
   * @return assetSymbol
  **/
  @ApiModelProperty(value = "")
  public String getAssetSymbol() {
    return assetSymbol;
  }

  public void setAssetSymbol(String assetSymbol) {
    this.assetSymbol = assetSymbol;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataAssetTransfer assetQuantity(String assetQuantity) {
    this.assetQuantity = assetQuantity;
    return this;
  }

   /**
   * Get assetQuantity
   * @return assetQuantity
  **/
  @ApiModelProperty(value = "")
  public String getAssetQuantity() {
    return assetQuantity;
  }

  public void setAssetQuantity(String assetQuantity) {
    this.assetQuantity = assetQuantity;
  }

  public CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataAssetTransfer usdValue(String usdValue) {
    this.usdValue = usdValue;
    return this;
  }

   /**
   * Get usdValue
   * @return usdValue
  **/
  @ApiModelProperty(value = "")
  public String getUsdValue() {
    return usdValue;
  }

  public void setUsdValue(String usdValue) {
    this.usdValue = usdValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataAssetTransfer coinbaseEngPrimeApiApiWeb3TransactionActivityMetadataAssetTransfer = (CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataAssetTransfer) o;
    return Objects.equals(this.assetSymbol, coinbaseEngPrimeApiApiWeb3TransactionActivityMetadataAssetTransfer.assetSymbol) &&
        Objects.equals(this.assetQuantity, coinbaseEngPrimeApiApiWeb3TransactionActivityMetadataAssetTransfer.assetQuantity) &&
        Objects.equals(this.usdValue, coinbaseEngPrimeApiApiWeb3TransactionActivityMetadataAssetTransfer.usdValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetSymbol, assetQuantity, usdValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseEngPrimeApiApiWeb3TransactionActivityMetadataAssetTransfer {\n");
    
    sb.append("    assetSymbol: ").append(toIndentedString(assetSymbol)).append("\n");
    sb.append("    assetQuantity: ").append(toIndentedString(assetQuantity)).append("\n");
    sb.append("    usdValue: ").append(toIndentedString(usdValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

