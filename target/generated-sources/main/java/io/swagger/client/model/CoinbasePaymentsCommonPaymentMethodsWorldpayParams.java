/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CoinbasePaymentsCommonPaymentMethodsWorldpayParams
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbasePaymentsCommonPaymentMethodsWorldpayParams {
  @SerializedName("token_value")
  private String tokenValue = null;

  @SerializedName("uses_merchant_token")
  private Boolean usesMerchantToken = null;

  @SerializedName("accept_header")
  private String acceptHeader = null;

  @SerializedName("user_agent_header")
  private String userAgentHeader = null;

  @SerializedName("shopper_ip")
  private String shopperIp = null;

  @SerializedName("shopper_session_id")
  private String shopperSessionId = null;

  public CoinbasePaymentsCommonPaymentMethodsWorldpayParams tokenValue(String tokenValue) {
    this.tokenValue = tokenValue;
    return this;
  }

   /**
   * Get tokenValue
   * @return tokenValue
  **/
  @ApiModelProperty(value = "")
  public String getTokenValue() {
    return tokenValue;
  }

  public void setTokenValue(String tokenValue) {
    this.tokenValue = tokenValue;
  }

  public CoinbasePaymentsCommonPaymentMethodsWorldpayParams usesMerchantToken(Boolean usesMerchantToken) {
    this.usesMerchantToken = usesMerchantToken;
    return this;
  }

   /**
   * Get usesMerchantToken
   * @return usesMerchantToken
  **/
  @ApiModelProperty(value = "")
  public Boolean isUsesMerchantToken() {
    return usesMerchantToken;
  }

  public void setUsesMerchantToken(Boolean usesMerchantToken) {
    this.usesMerchantToken = usesMerchantToken;
  }

  public CoinbasePaymentsCommonPaymentMethodsWorldpayParams acceptHeader(String acceptHeader) {
    this.acceptHeader = acceptHeader;
    return this;
  }

   /**
   * Get acceptHeader
   * @return acceptHeader
  **/
  @ApiModelProperty(value = "")
  public String getAcceptHeader() {
    return acceptHeader;
  }

  public void setAcceptHeader(String acceptHeader) {
    this.acceptHeader = acceptHeader;
  }

  public CoinbasePaymentsCommonPaymentMethodsWorldpayParams userAgentHeader(String userAgentHeader) {
    this.userAgentHeader = userAgentHeader;
    return this;
  }

   /**
   * Get userAgentHeader
   * @return userAgentHeader
  **/
  @ApiModelProperty(value = "")
  public String getUserAgentHeader() {
    return userAgentHeader;
  }

  public void setUserAgentHeader(String userAgentHeader) {
    this.userAgentHeader = userAgentHeader;
  }

  public CoinbasePaymentsCommonPaymentMethodsWorldpayParams shopperIp(String shopperIp) {
    this.shopperIp = shopperIp;
    return this;
  }

   /**
   * Get shopperIp
   * @return shopperIp
  **/
  @ApiModelProperty(value = "")
  public String getShopperIp() {
    return shopperIp;
  }

  public void setShopperIp(String shopperIp) {
    this.shopperIp = shopperIp;
  }

  public CoinbasePaymentsCommonPaymentMethodsWorldpayParams shopperSessionId(String shopperSessionId) {
    this.shopperSessionId = shopperSessionId;
    return this;
  }

   /**
   * Get shopperSessionId
   * @return shopperSessionId
  **/
  @ApiModelProperty(value = "")
  public String getShopperSessionId() {
    return shopperSessionId;
  }

  public void setShopperSessionId(String shopperSessionId) {
    this.shopperSessionId = shopperSessionId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbasePaymentsCommonPaymentMethodsWorldpayParams coinbasePaymentsCommonPaymentMethodsWorldpayParams = (CoinbasePaymentsCommonPaymentMethodsWorldpayParams) o;
    return Objects.equals(this.tokenValue, coinbasePaymentsCommonPaymentMethodsWorldpayParams.tokenValue) &&
        Objects.equals(this.usesMerchantToken, coinbasePaymentsCommonPaymentMethodsWorldpayParams.usesMerchantToken) &&
        Objects.equals(this.acceptHeader, coinbasePaymentsCommonPaymentMethodsWorldpayParams.acceptHeader) &&
        Objects.equals(this.userAgentHeader, coinbasePaymentsCommonPaymentMethodsWorldpayParams.userAgentHeader) &&
        Objects.equals(this.shopperIp, coinbasePaymentsCommonPaymentMethodsWorldpayParams.shopperIp) &&
        Objects.equals(this.shopperSessionId, coinbasePaymentsCommonPaymentMethodsWorldpayParams.shopperSessionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenValue, usesMerchantToken, acceptHeader, userAgentHeader, shopperIp, shopperSessionId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbasePaymentsCommonPaymentMethodsWorldpayParams {\n");
    
    sb.append("    tokenValue: ").append(toIndentedString(tokenValue)).append("\n");
    sb.append("    usesMerchantToken: ").append(toIndentedString(usesMerchantToken)).append("\n");
    sb.append("    acceptHeader: ").append(toIndentedString(acceptHeader)).append("\n");
    sb.append("    userAgentHeader: ").append(toIndentedString(userAgentHeader)).append("\n");
    sb.append("    shopperIp: ").append(toIndentedString(shopperIp)).append("\n");
    sb.append("    shopperSessionId: ").append(toIndentedString(shopperSessionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

