/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CoinbaseCustodyApiPropertiesEnabled
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseCustodyApiPropertiesEnabled {
  @SerializedName("auto_sweep_approval")
  private Boolean autoSweepApproval = null;

  @SerializedName("deposit")
  private Boolean deposit = null;

  @SerializedName("withdrawal")
  private Boolean withdrawal = null;

  @SerializedName("prevent_wallet_creation")
  private Boolean preventWalletCreation = null;

  @SerializedName("governance")
  private Boolean governance = null;

  @SerializedName("staking")
  private Boolean staking = null;

  @SerializedName("unstaking")
  private Boolean unstaking = null;

  @SerializedName("partial_stake")
  private Boolean partialStake = null;

  @SerializedName("vesting")
  private Boolean vesting = null;

  @SerializedName("voting")
  private Boolean voting = null;

  @SerializedName("restaking")
  private Boolean restaking = null;

  @SerializedName("change_validator")
  private Boolean changeValidator = null;

  @SerializedName("cold_storage")
  private Boolean coldStorage = null;

  @SerializedName("trading_deposit")
  private Boolean tradingDeposit = null;

  @SerializedName("trading_withdrawal")
  private Boolean tradingWithdrawal = null;

  @SerializedName("trading_conversion")
  private Boolean tradingConversion = null;

  @SerializedName("qc_deposit")
  private Boolean qcDeposit = null;

  @SerializedName("qc_withdrawal")
  private Boolean qcWithdrawal = null;

  @SerializedName("claim_rewards")
  private Boolean claimRewards = null;

  public CoinbaseCustodyApiPropertiesEnabled autoSweepApproval(Boolean autoSweepApproval) {
    this.autoSweepApproval = autoSweepApproval;
    return this;
  }

   /**
   * Get autoSweepApproval
   * @return autoSweepApproval
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isAutoSweepApproval() {
    return autoSweepApproval;
  }

  public void setAutoSweepApproval(Boolean autoSweepApproval) {
    this.autoSweepApproval = autoSweepApproval;
  }

  public CoinbaseCustodyApiPropertiesEnabled deposit(Boolean deposit) {
    this.deposit = deposit;
    return this;
  }

   /**
   * Get deposit
   * @return deposit
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isDeposit() {
    return deposit;
  }

  public void setDeposit(Boolean deposit) {
    this.deposit = deposit;
  }

  public CoinbaseCustodyApiPropertiesEnabled withdrawal(Boolean withdrawal) {
    this.withdrawal = withdrawal;
    return this;
  }

   /**
   * Get withdrawal
   * @return withdrawal
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isWithdrawal() {
    return withdrawal;
  }

  public void setWithdrawal(Boolean withdrawal) {
    this.withdrawal = withdrawal;
  }

  public CoinbaseCustodyApiPropertiesEnabled preventWalletCreation(Boolean preventWalletCreation) {
    this.preventWalletCreation = preventWalletCreation;
    return this;
  }

   /**
   * Get preventWalletCreation
   * @return preventWalletCreation
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isPreventWalletCreation() {
    return preventWalletCreation;
  }

  public void setPreventWalletCreation(Boolean preventWalletCreation) {
    this.preventWalletCreation = preventWalletCreation;
  }

  public CoinbaseCustodyApiPropertiesEnabled governance(Boolean governance) {
    this.governance = governance;
    return this;
  }

   /**
   * Get governance
   * @return governance
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isGovernance() {
    return governance;
  }

  public void setGovernance(Boolean governance) {
    this.governance = governance;
  }

  public CoinbaseCustodyApiPropertiesEnabled staking(Boolean staking) {
    this.staking = staking;
    return this;
  }

   /**
   * Get staking
   * @return staking
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isStaking() {
    return staking;
  }

  public void setStaking(Boolean staking) {
    this.staking = staking;
  }

  public CoinbaseCustodyApiPropertiesEnabled unstaking(Boolean unstaking) {
    this.unstaking = unstaking;
    return this;
  }

   /**
   * Get unstaking
   * @return unstaking
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isUnstaking() {
    return unstaking;
  }

  public void setUnstaking(Boolean unstaking) {
    this.unstaking = unstaking;
  }

  public CoinbaseCustodyApiPropertiesEnabled partialStake(Boolean partialStake) {
    this.partialStake = partialStake;
    return this;
  }

   /**
   * Get partialStake
   * @return partialStake
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isPartialStake() {
    return partialStake;
  }

  public void setPartialStake(Boolean partialStake) {
    this.partialStake = partialStake;
  }

  public CoinbaseCustodyApiPropertiesEnabled vesting(Boolean vesting) {
    this.vesting = vesting;
    return this;
  }

   /**
   * Get vesting
   * @return vesting
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isVesting() {
    return vesting;
  }

  public void setVesting(Boolean vesting) {
    this.vesting = vesting;
  }

  public CoinbaseCustodyApiPropertiesEnabled voting(Boolean voting) {
    this.voting = voting;
    return this;
  }

   /**
   * Get voting
   * @return voting
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isVoting() {
    return voting;
  }

  public void setVoting(Boolean voting) {
    this.voting = voting;
  }

  public CoinbaseCustodyApiPropertiesEnabled restaking(Boolean restaking) {
    this.restaking = restaking;
    return this;
  }

   /**
   * Get restaking
   * @return restaking
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isRestaking() {
    return restaking;
  }

  public void setRestaking(Boolean restaking) {
    this.restaking = restaking;
  }

  public CoinbaseCustodyApiPropertiesEnabled changeValidator(Boolean changeValidator) {
    this.changeValidator = changeValidator;
    return this;
  }

   /**
   * Get changeValidator
   * @return changeValidator
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isChangeValidator() {
    return changeValidator;
  }

  public void setChangeValidator(Boolean changeValidator) {
    this.changeValidator = changeValidator;
  }

  public CoinbaseCustodyApiPropertiesEnabled coldStorage(Boolean coldStorage) {
    this.coldStorage = coldStorage;
    return this;
  }

   /**
   * Get coldStorage
   * @return coldStorage
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isColdStorage() {
    return coldStorage;
  }

  public void setColdStorage(Boolean coldStorage) {
    this.coldStorage = coldStorage;
  }

  public CoinbaseCustodyApiPropertiesEnabled tradingDeposit(Boolean tradingDeposit) {
    this.tradingDeposit = tradingDeposit;
    return this;
  }

   /**
   * Get tradingDeposit
   * @return tradingDeposit
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isTradingDeposit() {
    return tradingDeposit;
  }

  public void setTradingDeposit(Boolean tradingDeposit) {
    this.tradingDeposit = tradingDeposit;
  }

  public CoinbaseCustodyApiPropertiesEnabled tradingWithdrawal(Boolean tradingWithdrawal) {
    this.tradingWithdrawal = tradingWithdrawal;
    return this;
  }

   /**
   * Get tradingWithdrawal
   * @return tradingWithdrawal
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isTradingWithdrawal() {
    return tradingWithdrawal;
  }

  public void setTradingWithdrawal(Boolean tradingWithdrawal) {
    this.tradingWithdrawal = tradingWithdrawal;
  }

  public CoinbaseCustodyApiPropertiesEnabled tradingConversion(Boolean tradingConversion) {
    this.tradingConversion = tradingConversion;
    return this;
  }

   /**
   * Get tradingConversion
   * @return tradingConversion
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isTradingConversion() {
    return tradingConversion;
  }

  public void setTradingConversion(Boolean tradingConversion) {
    this.tradingConversion = tradingConversion;
  }

  public CoinbaseCustodyApiPropertiesEnabled qcDeposit(Boolean qcDeposit) {
    this.qcDeposit = qcDeposit;
    return this;
  }

   /**
   * Get qcDeposit
   * @return qcDeposit
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isQcDeposit() {
    return qcDeposit;
  }

  public void setQcDeposit(Boolean qcDeposit) {
    this.qcDeposit = qcDeposit;
  }

  public CoinbaseCustodyApiPropertiesEnabled qcWithdrawal(Boolean qcWithdrawal) {
    this.qcWithdrawal = qcWithdrawal;
    return this;
  }

   /**
   * Get qcWithdrawal
   * @return qcWithdrawal
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isQcWithdrawal() {
    return qcWithdrawal;
  }

  public void setQcWithdrawal(Boolean qcWithdrawal) {
    this.qcWithdrawal = qcWithdrawal;
  }

  public CoinbaseCustodyApiPropertiesEnabled claimRewards(Boolean claimRewards) {
    this.claimRewards = claimRewards;
    return this;
  }

   /**
   * Get claimRewards
   * @return claimRewards
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isClaimRewards() {
    return claimRewards;
  }

  public void setClaimRewards(Boolean claimRewards) {
    this.claimRewards = claimRewards;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseCustodyApiPropertiesEnabled coinbaseCustodyApiPropertiesEnabled = (CoinbaseCustodyApiPropertiesEnabled) o;
    return Objects.equals(this.autoSweepApproval, coinbaseCustodyApiPropertiesEnabled.autoSweepApproval) &&
        Objects.equals(this.deposit, coinbaseCustodyApiPropertiesEnabled.deposit) &&
        Objects.equals(this.withdrawal, coinbaseCustodyApiPropertiesEnabled.withdrawal) &&
        Objects.equals(this.preventWalletCreation, coinbaseCustodyApiPropertiesEnabled.preventWalletCreation) &&
        Objects.equals(this.governance, coinbaseCustodyApiPropertiesEnabled.governance) &&
        Objects.equals(this.staking, coinbaseCustodyApiPropertiesEnabled.staking) &&
        Objects.equals(this.unstaking, coinbaseCustodyApiPropertiesEnabled.unstaking) &&
        Objects.equals(this.partialStake, coinbaseCustodyApiPropertiesEnabled.partialStake) &&
        Objects.equals(this.vesting, coinbaseCustodyApiPropertiesEnabled.vesting) &&
        Objects.equals(this.voting, coinbaseCustodyApiPropertiesEnabled.voting) &&
        Objects.equals(this.restaking, coinbaseCustodyApiPropertiesEnabled.restaking) &&
        Objects.equals(this.changeValidator, coinbaseCustodyApiPropertiesEnabled.changeValidator) &&
        Objects.equals(this.coldStorage, coinbaseCustodyApiPropertiesEnabled.coldStorage) &&
        Objects.equals(this.tradingDeposit, coinbaseCustodyApiPropertiesEnabled.tradingDeposit) &&
        Objects.equals(this.tradingWithdrawal, coinbaseCustodyApiPropertiesEnabled.tradingWithdrawal) &&
        Objects.equals(this.tradingConversion, coinbaseCustodyApiPropertiesEnabled.tradingConversion) &&
        Objects.equals(this.qcDeposit, coinbaseCustodyApiPropertiesEnabled.qcDeposit) &&
        Objects.equals(this.qcWithdrawal, coinbaseCustodyApiPropertiesEnabled.qcWithdrawal) &&
        Objects.equals(this.claimRewards, coinbaseCustodyApiPropertiesEnabled.claimRewards);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoSweepApproval, deposit, withdrawal, preventWalletCreation, governance, staking, unstaking, partialStake, vesting, voting, restaking, changeValidator, coldStorage, tradingDeposit, tradingWithdrawal, tradingConversion, qcDeposit, qcWithdrawal, claimRewards);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseCustodyApiPropertiesEnabled {\n");
    
    sb.append("    autoSweepApproval: ").append(toIndentedString(autoSweepApproval)).append("\n");
    sb.append("    deposit: ").append(toIndentedString(deposit)).append("\n");
    sb.append("    withdrawal: ").append(toIndentedString(withdrawal)).append("\n");
    sb.append("    preventWalletCreation: ").append(toIndentedString(preventWalletCreation)).append("\n");
    sb.append("    governance: ").append(toIndentedString(governance)).append("\n");
    sb.append("    staking: ").append(toIndentedString(staking)).append("\n");
    sb.append("    unstaking: ").append(toIndentedString(unstaking)).append("\n");
    sb.append("    partialStake: ").append(toIndentedString(partialStake)).append("\n");
    sb.append("    vesting: ").append(toIndentedString(vesting)).append("\n");
    sb.append("    voting: ").append(toIndentedString(voting)).append("\n");
    sb.append("    restaking: ").append(toIndentedString(restaking)).append("\n");
    sb.append("    changeValidator: ").append(toIndentedString(changeValidator)).append("\n");
    sb.append("    coldStorage: ").append(toIndentedString(coldStorage)).append("\n");
    sb.append("    tradingDeposit: ").append(toIndentedString(tradingDeposit)).append("\n");
    sb.append("    tradingWithdrawal: ").append(toIndentedString(tradingWithdrawal)).append("\n");
    sb.append("    tradingConversion: ").append(toIndentedString(tradingConversion)).append("\n");
    sb.append("    qcDeposit: ").append(toIndentedString(qcDeposit)).append("\n");
    sb.append("    qcWithdrawal: ").append(toIndentedString(qcWithdrawal)).append("\n");
    sb.append("    claimRewards: ").append(toIndentedString(claimRewards)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

