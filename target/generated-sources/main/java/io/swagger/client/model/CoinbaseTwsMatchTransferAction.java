/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseTwsMatchTransferActionMatchTransferDetail;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CoinbaseTwsMatchTransferAction
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseTwsMatchTransferAction {
  @SerializedName("transfer_details")
  private List<CoinbaseTwsMatchTransferActionMatchTransferDetail> transferDetails = null;

  @SerializedName("trade_date")
  private String tradeDate = null;

  @SerializedName("reference_id")
  private String referenceId = null;

  @SerializedName("settle_at_date_time")
  private String settleAtDateTime = null;

  @SerializedName("use_match_transfer_v2")
  private Boolean useMatchTransferV2 = null;

  public CoinbaseTwsMatchTransferAction transferDetails(List<CoinbaseTwsMatchTransferActionMatchTransferDetail> transferDetails) {
    this.transferDetails = transferDetails;
    return this;
  }

  public CoinbaseTwsMatchTransferAction addTransferDetailsItem(CoinbaseTwsMatchTransferActionMatchTransferDetail transferDetailsItem) {
    if (this.transferDetails == null) {
      this.transferDetails = new ArrayList<CoinbaseTwsMatchTransferActionMatchTransferDetail>();
    }
    this.transferDetails.add(transferDetailsItem);
    return this;
  }

   /**
   * The list of transfers to take place
   * @return transferDetails
  **/
  @ApiModelProperty(value = "The list of transfers to take place")
  public List<CoinbaseTwsMatchTransferActionMatchTransferDetail> getTransferDetails() {
    return transferDetails;
  }

  public void setTransferDetails(List<CoinbaseTwsMatchTransferActionMatchTransferDetail> transferDetails) {
    this.transferDetails = transferDetails;
  }

  public CoinbaseTwsMatchTransferAction tradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
    return this;
  }

   /**
   * The date at which the trade took place
   * @return tradeDate
  **/
  @ApiModelProperty(value = "The date at which the trade took place")
  public String getTradeDate() {
    return tradeDate;
  }

  public void setTradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
  }

  public CoinbaseTwsMatchTransferAction referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

   /**
   * The reference ID of the trade that took place
   * @return referenceId
  **/
  @ApiModelProperty(value = "The reference ID of the trade that took place")
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }

  public CoinbaseTwsMatchTransferAction settleAtDateTime(String settleAtDateTime) {
    this.settleAtDateTime = settleAtDateTime;
    return this;
  }

   /**
   * The date and time at which the transfer should take place
   * @return settleAtDateTime
  **/
  @ApiModelProperty(value = "The date and time at which the transfer should take place")
  public String getSettleAtDateTime() {
    return settleAtDateTime;
  }

  public void setSettleAtDateTime(String settleAtDateTime) {
    this.settleAtDateTime = settleAtDateTime;
  }

  public CoinbaseTwsMatchTransferAction useMatchTransferV2(Boolean useMatchTransferV2) {
    this.useMatchTransferV2 = useMatchTransferV2;
    return this;
  }

   /**
   * Flag to use the new AdvancedTransfer model or not
   * @return useMatchTransferV2
  **/
  @ApiModelProperty(value = "Flag to use the new AdvancedTransfer model or not")
  public Boolean isUseMatchTransferV2() {
    return useMatchTransferV2;
  }

  public void setUseMatchTransferV2(Boolean useMatchTransferV2) {
    this.useMatchTransferV2 = useMatchTransferV2;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseTwsMatchTransferAction coinbaseTwsMatchTransferAction = (CoinbaseTwsMatchTransferAction) o;
    return Objects.equals(this.transferDetails, coinbaseTwsMatchTransferAction.transferDetails) &&
        Objects.equals(this.tradeDate, coinbaseTwsMatchTransferAction.tradeDate) &&
        Objects.equals(this.referenceId, coinbaseTwsMatchTransferAction.referenceId) &&
        Objects.equals(this.settleAtDateTime, coinbaseTwsMatchTransferAction.settleAtDateTime) &&
        Objects.equals(this.useMatchTransferV2, coinbaseTwsMatchTransferAction.useMatchTransferV2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transferDetails, tradeDate, referenceId, settleAtDateTime, useMatchTransferV2);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseTwsMatchTransferAction {\n");
    
    sb.append("    transferDetails: ").append(toIndentedString(transferDetails)).append("\n");
    sb.append("    tradeDate: ").append(toIndentedString(tradeDate)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    settleAtDateTime: ").append(toIndentedString(settleAtDateTime)).append("\n");
    sb.append("    useMatchTransferV2: ").append(toIndentedString(useMatchTransferV2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

