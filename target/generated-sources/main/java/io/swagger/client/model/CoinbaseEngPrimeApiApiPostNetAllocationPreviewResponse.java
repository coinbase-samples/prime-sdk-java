/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseEngPrimeApiApiAllocationAmount;
import io.swagger.client.model.CoinbaseEngPrimeApiApiAllocationPreviewLeg;
import io.swagger.client.model.CoinbaseEngPrimeApiApiOrderSide;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPreviewAllocationFailureReason;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse {
  @SerializedName("source_portfolio_id")
  private String sourcePortfolioId = null;

  @SerializedName("buy_order_ids")
  private List<String> buyOrderIds = null;

  @SerializedName("base_order_buy_total")
  private String baseOrderBuyTotal = null;

  @SerializedName("quote_order_buy_total")
  private String quoteOrderBuyTotal = null;

  @SerializedName("order_avg_buy_price")
  private String orderAvgBuyPrice = null;

  @SerializedName("total_buy_commission")
  private String totalBuyCommission = null;

  @SerializedName("sell_order_ids")
  private List<String> sellOrderIds = null;

  @SerializedName("base_order_sell_total")
  private String baseOrderSellTotal = null;

  @SerializedName("quote_order_sell_total")
  private String quoteOrderSellTotal = null;

  @SerializedName("order_avg_sell_price")
  private String orderAvgSellPrice = null;

  @SerializedName("total_sell_commission")
  private String totalSellCommission = null;

  @SerializedName("base_order_net_total")
  private String baseOrderNetTotal = null;

  @SerializedName("base_side")
  private CoinbaseEngPrimeApiApiOrderSide baseSide = null;

  @SerializedName("quote_order_net_total")
  private String quoteOrderNetTotal = null;

  @SerializedName("quote_side")
  private CoinbaseEngPrimeApiApiOrderSide quoteSide = null;

  @SerializedName("total_net_commission")
  private String totalNetCommission = null;

  @SerializedName("net_remainder")
  private CoinbaseEngPrimeApiApiAllocationAmount netRemainder = null;

  @SerializedName("net_allocation_legs")
  private List<CoinbaseEngPrimeApiApiAllocationPreviewLeg> netAllocationLegs = new ArrayList<CoinbaseEngPrimeApiApiAllocationPreviewLeg>();

  @SerializedName("buy_remainder")
  private CoinbaseEngPrimeApiApiAllocationAmount buyRemainder = null;

  @SerializedName("buy_allocation_legs")
  private List<CoinbaseEngPrimeApiApiAllocationPreviewLeg> buyAllocationLegs = new ArrayList<CoinbaseEngPrimeApiApiAllocationPreviewLeg>();

  @SerializedName("sell_remainder")
  private CoinbaseEngPrimeApiApiAllocationAmount sellRemainder = null;

  @SerializedName("sell_allocation_legs")
  private List<CoinbaseEngPrimeApiApiAllocationPreviewLeg> sellAllocationLegs = new ArrayList<CoinbaseEngPrimeApiApiAllocationPreviewLeg>();

  @SerializedName("errors")
  private List<CoinbaseEngPrimeApiApiPreviewAllocationFailureReason> errors = null;

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse sourcePortfolioId(String sourcePortfolioId) {
    this.sourcePortfolioId = sourcePortfolioId;
    return this;
  }

   /**
   * The source portfolio id for the net allocation preview
   * @return sourcePortfolioId
  **/
  @ApiModelProperty(required = true, value = "The source portfolio id for the net allocation preview")
  public String getSourcePortfolioId() {
    return sourcePortfolioId;
  }

  public void setSourcePortfolioId(String sourcePortfolioId) {
    this.sourcePortfolioId = sourcePortfolioId;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse buyOrderIds(List<String> buyOrderIds) {
    this.buyOrderIds = buyOrderIds;
    return this;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse addBuyOrderIdsItem(String buyOrderIdsItem) {
    if (this.buyOrderIds == null) {
      this.buyOrderIds = new ArrayList<String>();
    }
    this.buyOrderIds.add(buyOrderIdsItem);
    return this;
  }

   /**
   * The buy order ids for the net allocation preview
   * @return buyOrderIds
  **/
  @ApiModelProperty(value = "The buy order ids for the net allocation preview")
  public List<String> getBuyOrderIds() {
    return buyOrderIds;
  }

  public void setBuyOrderIds(List<String> buyOrderIds) {
    this.buyOrderIds = buyOrderIds;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse baseOrderBuyTotal(String baseOrderBuyTotal) {
    this.baseOrderBuyTotal = baseOrderBuyTotal;
    return this;
  }

   /**
   * The base order total the buy orders selected
   * @return baseOrderBuyTotal
  **/
  @ApiModelProperty(required = true, value = "The base order total the buy orders selected")
  public String getBaseOrderBuyTotal() {
    return baseOrderBuyTotal;
  }

  public void setBaseOrderBuyTotal(String baseOrderBuyTotal) {
    this.baseOrderBuyTotal = baseOrderBuyTotal;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse quoteOrderBuyTotal(String quoteOrderBuyTotal) {
    this.quoteOrderBuyTotal = quoteOrderBuyTotal;
    return this;
  }

   /**
   * The quote order total the buy orders selected
   * @return quoteOrderBuyTotal
  **/
  @ApiModelProperty(required = true, value = "The quote order total the buy orders selected")
  public String getQuoteOrderBuyTotal() {
    return quoteOrderBuyTotal;
  }

  public void setQuoteOrderBuyTotal(String quoteOrderBuyTotal) {
    this.quoteOrderBuyTotal = quoteOrderBuyTotal;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse orderAvgBuyPrice(String orderAvgBuyPrice) {
    this.orderAvgBuyPrice = orderAvgBuyPrice;
    return this;
  }

   /**
   * The average price for the buy orders selected
   * @return orderAvgBuyPrice
  **/
  @ApiModelProperty(required = true, value = "The average price for the buy orders selected")
  public String getOrderAvgBuyPrice() {
    return orderAvgBuyPrice;
  }

  public void setOrderAvgBuyPrice(String orderAvgBuyPrice) {
    this.orderAvgBuyPrice = orderAvgBuyPrice;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse totalBuyCommission(String totalBuyCommission) {
    this.totalBuyCommission = totalBuyCommission;
    return this;
  }

   /**
   * The total commission for the buy orders selected
   * @return totalBuyCommission
  **/
  @ApiModelProperty(required = true, value = "The total commission for the buy orders selected")
  public String getTotalBuyCommission() {
    return totalBuyCommission;
  }

  public void setTotalBuyCommission(String totalBuyCommission) {
    this.totalBuyCommission = totalBuyCommission;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse sellOrderIds(List<String> sellOrderIds) {
    this.sellOrderIds = sellOrderIds;
    return this;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse addSellOrderIdsItem(String sellOrderIdsItem) {
    if (this.sellOrderIds == null) {
      this.sellOrderIds = new ArrayList<String>();
    }
    this.sellOrderIds.add(sellOrderIdsItem);
    return this;
  }

   /**
   * The sell order ids for the net allocation preview
   * @return sellOrderIds
  **/
  @ApiModelProperty(value = "The sell order ids for the net allocation preview")
  public List<String> getSellOrderIds() {
    return sellOrderIds;
  }

  public void setSellOrderIds(List<String> sellOrderIds) {
    this.sellOrderIds = sellOrderIds;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse baseOrderSellTotal(String baseOrderSellTotal) {
    this.baseOrderSellTotal = baseOrderSellTotal;
    return this;
  }

   /**
   * The base order total the sell orders selected
   * @return baseOrderSellTotal
  **/
  @ApiModelProperty(required = true, value = "The base order total the sell orders selected")
  public String getBaseOrderSellTotal() {
    return baseOrderSellTotal;
  }

  public void setBaseOrderSellTotal(String baseOrderSellTotal) {
    this.baseOrderSellTotal = baseOrderSellTotal;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse quoteOrderSellTotal(String quoteOrderSellTotal) {
    this.quoteOrderSellTotal = quoteOrderSellTotal;
    return this;
  }

   /**
   * The quote order total the sell orders selected
   * @return quoteOrderSellTotal
  **/
  @ApiModelProperty(required = true, value = "The quote order total the sell orders selected")
  public String getQuoteOrderSellTotal() {
    return quoteOrderSellTotal;
  }

  public void setQuoteOrderSellTotal(String quoteOrderSellTotal) {
    this.quoteOrderSellTotal = quoteOrderSellTotal;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse orderAvgSellPrice(String orderAvgSellPrice) {
    this.orderAvgSellPrice = orderAvgSellPrice;
    return this;
  }

   /**
   * The average price for the sell orders selected
   * @return orderAvgSellPrice
  **/
  @ApiModelProperty(required = true, value = "The average price for the sell orders selected")
  public String getOrderAvgSellPrice() {
    return orderAvgSellPrice;
  }

  public void setOrderAvgSellPrice(String orderAvgSellPrice) {
    this.orderAvgSellPrice = orderAvgSellPrice;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse totalSellCommission(String totalSellCommission) {
    this.totalSellCommission = totalSellCommission;
    return this;
  }

   /**
   * The total commission for the sell orders selected
   * @return totalSellCommission
  **/
  @ApiModelProperty(required = true, value = "The total commission for the sell orders selected")
  public String getTotalSellCommission() {
    return totalSellCommission;
  }

  public void setTotalSellCommission(String totalSellCommission) {
    this.totalSellCommission = totalSellCommission;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse baseOrderNetTotal(String baseOrderNetTotal) {
    this.baseOrderNetTotal = baseOrderNetTotal;
    return this;
  }

   /**
   * The base order net total for the allocation preview
   * @return baseOrderNetTotal
  **/
  @ApiModelProperty(required = true, value = "The base order net total for the allocation preview")
  public String getBaseOrderNetTotal() {
    return baseOrderNetTotal;
  }

  public void setBaseOrderNetTotal(String baseOrderNetTotal) {
    this.baseOrderNetTotal = baseOrderNetTotal;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse baseSide(CoinbaseEngPrimeApiApiOrderSide baseSide) {
    this.baseSide = baseSide;
    return this;
  }

   /**
   * The side of base order net total for the allocation preview
   * @return baseSide
  **/
  @ApiModelProperty(value = "The side of base order net total for the allocation preview")
  public CoinbaseEngPrimeApiApiOrderSide getBaseSide() {
    return baseSide;
  }

  public void setBaseSide(CoinbaseEngPrimeApiApiOrderSide baseSide) {
    this.baseSide = baseSide;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse quoteOrderNetTotal(String quoteOrderNetTotal) {
    this.quoteOrderNetTotal = quoteOrderNetTotal;
    return this;
  }

   /**
   * The quote order net total for the allocation preview
   * @return quoteOrderNetTotal
  **/
  @ApiModelProperty(required = true, value = "The quote order net total for the allocation preview")
  public String getQuoteOrderNetTotal() {
    return quoteOrderNetTotal;
  }

  public void setQuoteOrderNetTotal(String quoteOrderNetTotal) {
    this.quoteOrderNetTotal = quoteOrderNetTotal;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse quoteSide(CoinbaseEngPrimeApiApiOrderSide quoteSide) {
    this.quoteSide = quoteSide;
    return this;
  }

   /**
   * The side of quote order net total for the allocation preview
   * @return quoteSide
  **/
  @ApiModelProperty(value = "The side of quote order net total for the allocation preview")
  public CoinbaseEngPrimeApiApiOrderSide getQuoteSide() {
    return quoteSide;
  }

  public void setQuoteSide(CoinbaseEngPrimeApiApiOrderSide quoteSide) {
    this.quoteSide = quoteSide;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse totalNetCommission(String totalNetCommission) {
    this.totalNetCommission = totalNetCommission;
    return this;
  }

   /**
   * The total net commission for the allocation preview
   * @return totalNetCommission
  **/
  @ApiModelProperty(required = true, value = "The total net commission for the allocation preview")
  public String getTotalNetCommission() {
    return totalNetCommission;
  }

  public void setTotalNetCommission(String totalNetCommission) {
    this.totalNetCommission = totalNetCommission;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse netRemainder(CoinbaseEngPrimeApiApiAllocationAmount netRemainder) {
    this.netRemainder = netRemainder;
    return this;
  }

   /**
   * The remainder net amount values for the net allocations
   * @return netRemainder
  **/
  @ApiModelProperty(required = true, value = "The remainder net amount values for the net allocations")
  public CoinbaseEngPrimeApiApiAllocationAmount getNetRemainder() {
    return netRemainder;
  }

  public void setNetRemainder(CoinbaseEngPrimeApiApiAllocationAmount netRemainder) {
    this.netRemainder = netRemainder;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse netAllocationLegs(List<CoinbaseEngPrimeApiApiAllocationPreviewLeg> netAllocationLegs) {
    this.netAllocationLegs = netAllocationLegs;
    return this;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse addNetAllocationLegsItem(CoinbaseEngPrimeApiApiAllocationPreviewLeg netAllocationLegsItem) {
    this.netAllocationLegs.add(netAllocationLegsItem);
    return this;
  }

   /**
   * The net amount fields for the net allocation preview
   * @return netAllocationLegs
  **/
  @ApiModelProperty(required = true, value = "The net amount fields for the net allocation preview")
  public List<CoinbaseEngPrimeApiApiAllocationPreviewLeg> getNetAllocationLegs() {
    return netAllocationLegs;
  }

  public void setNetAllocationLegs(List<CoinbaseEngPrimeApiApiAllocationPreviewLeg> netAllocationLegs) {
    this.netAllocationLegs = netAllocationLegs;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse buyRemainder(CoinbaseEngPrimeApiApiAllocationAmount buyRemainder) {
    this.buyRemainder = buyRemainder;
    return this;
  }

   /**
   * The remainder buy amount values for the net allocations
   * @return buyRemainder
  **/
  @ApiModelProperty(required = true, value = "The remainder buy amount values for the net allocations")
  public CoinbaseEngPrimeApiApiAllocationAmount getBuyRemainder() {
    return buyRemainder;
  }

  public void setBuyRemainder(CoinbaseEngPrimeApiApiAllocationAmount buyRemainder) {
    this.buyRemainder = buyRemainder;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse buyAllocationLegs(List<CoinbaseEngPrimeApiApiAllocationPreviewLeg> buyAllocationLegs) {
    this.buyAllocationLegs = buyAllocationLegs;
    return this;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse addBuyAllocationLegsItem(CoinbaseEngPrimeApiApiAllocationPreviewLeg buyAllocationLegsItem) {
    this.buyAllocationLegs.add(buyAllocationLegsItem);
    return this;
  }

   /**
   * The buy amount fields for the net allocation preview
   * @return buyAllocationLegs
  **/
  @ApiModelProperty(required = true, value = "The buy amount fields for the net allocation preview")
  public List<CoinbaseEngPrimeApiApiAllocationPreviewLeg> getBuyAllocationLegs() {
    return buyAllocationLegs;
  }

  public void setBuyAllocationLegs(List<CoinbaseEngPrimeApiApiAllocationPreviewLeg> buyAllocationLegs) {
    this.buyAllocationLegs = buyAllocationLegs;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse sellRemainder(CoinbaseEngPrimeApiApiAllocationAmount sellRemainder) {
    this.sellRemainder = sellRemainder;
    return this;
  }

   /**
   * The remainder sell amount values for the net allocations
   * @return sellRemainder
  **/
  @ApiModelProperty(required = true, value = "The remainder sell amount values for the net allocations")
  public CoinbaseEngPrimeApiApiAllocationAmount getSellRemainder() {
    return sellRemainder;
  }

  public void setSellRemainder(CoinbaseEngPrimeApiApiAllocationAmount sellRemainder) {
    this.sellRemainder = sellRemainder;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse sellAllocationLegs(List<CoinbaseEngPrimeApiApiAllocationPreviewLeg> sellAllocationLegs) {
    this.sellAllocationLegs = sellAllocationLegs;
    return this;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse addSellAllocationLegsItem(CoinbaseEngPrimeApiApiAllocationPreviewLeg sellAllocationLegsItem) {
    this.sellAllocationLegs.add(sellAllocationLegsItem);
    return this;
  }

   /**
   * The sell amount fields for the net allocation preview
   * @return sellAllocationLegs
  **/
  @ApiModelProperty(required = true, value = "The sell amount fields for the net allocation preview")
  public List<CoinbaseEngPrimeApiApiAllocationPreviewLeg> getSellAllocationLegs() {
    return sellAllocationLegs;
  }

  public void setSellAllocationLegs(List<CoinbaseEngPrimeApiApiAllocationPreviewLeg> sellAllocationLegs) {
    this.sellAllocationLegs = sellAllocationLegs;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse errors(List<CoinbaseEngPrimeApiApiPreviewAllocationFailureReason> errors) {
    this.errors = errors;
    return this;
  }

  public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse addErrorsItem(CoinbaseEngPrimeApiApiPreviewAllocationFailureReason errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<CoinbaseEngPrimeApiApiPreviewAllocationFailureReason>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * The net allocation error values on response
   * @return errors
  **/
  @ApiModelProperty(value = "The net allocation error values on response")
  public List<CoinbaseEngPrimeApiApiPreviewAllocationFailureReason> getErrors() {
    return errors;
  }

  public void setErrors(List<CoinbaseEngPrimeApiApiPreviewAllocationFailureReason> errors) {
    this.errors = errors;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse = (CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse) o;
    return Objects.equals(this.sourcePortfolioId, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.sourcePortfolioId) &&
        Objects.equals(this.buyOrderIds, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.buyOrderIds) &&
        Objects.equals(this.baseOrderBuyTotal, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.baseOrderBuyTotal) &&
        Objects.equals(this.quoteOrderBuyTotal, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.quoteOrderBuyTotal) &&
        Objects.equals(this.orderAvgBuyPrice, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.orderAvgBuyPrice) &&
        Objects.equals(this.totalBuyCommission, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.totalBuyCommission) &&
        Objects.equals(this.sellOrderIds, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.sellOrderIds) &&
        Objects.equals(this.baseOrderSellTotal, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.baseOrderSellTotal) &&
        Objects.equals(this.quoteOrderSellTotal, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.quoteOrderSellTotal) &&
        Objects.equals(this.orderAvgSellPrice, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.orderAvgSellPrice) &&
        Objects.equals(this.totalSellCommission, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.totalSellCommission) &&
        Objects.equals(this.baseOrderNetTotal, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.baseOrderNetTotal) &&
        Objects.equals(this.baseSide, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.baseSide) &&
        Objects.equals(this.quoteOrderNetTotal, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.quoteOrderNetTotal) &&
        Objects.equals(this.quoteSide, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.quoteSide) &&
        Objects.equals(this.totalNetCommission, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.totalNetCommission) &&
        Objects.equals(this.netRemainder, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.netRemainder) &&
        Objects.equals(this.netAllocationLegs, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.netAllocationLegs) &&
        Objects.equals(this.buyRemainder, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.buyRemainder) &&
        Objects.equals(this.buyAllocationLegs, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.buyAllocationLegs) &&
        Objects.equals(this.sellRemainder, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.sellRemainder) &&
        Objects.equals(this.sellAllocationLegs, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.sellAllocationLegs) &&
        Objects.equals(this.errors, coinbaseEngPrimeApiApiPostNetAllocationPreviewResponse.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourcePortfolioId, buyOrderIds, baseOrderBuyTotal, quoteOrderBuyTotal, orderAvgBuyPrice, totalBuyCommission, sellOrderIds, baseOrderSellTotal, quoteOrderSellTotal, orderAvgSellPrice, totalSellCommission, baseOrderNetTotal, baseSide, quoteOrderNetTotal, quoteSide, totalNetCommission, netRemainder, netAllocationLegs, buyRemainder, buyAllocationLegs, sellRemainder, sellAllocationLegs, errors);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse {\n");
    
    sb.append("    sourcePortfolioId: ").append(toIndentedString(sourcePortfolioId)).append("\n");
    sb.append("    buyOrderIds: ").append(toIndentedString(buyOrderIds)).append("\n");
    sb.append("    baseOrderBuyTotal: ").append(toIndentedString(baseOrderBuyTotal)).append("\n");
    sb.append("    quoteOrderBuyTotal: ").append(toIndentedString(quoteOrderBuyTotal)).append("\n");
    sb.append("    orderAvgBuyPrice: ").append(toIndentedString(orderAvgBuyPrice)).append("\n");
    sb.append("    totalBuyCommission: ").append(toIndentedString(totalBuyCommission)).append("\n");
    sb.append("    sellOrderIds: ").append(toIndentedString(sellOrderIds)).append("\n");
    sb.append("    baseOrderSellTotal: ").append(toIndentedString(baseOrderSellTotal)).append("\n");
    sb.append("    quoteOrderSellTotal: ").append(toIndentedString(quoteOrderSellTotal)).append("\n");
    sb.append("    orderAvgSellPrice: ").append(toIndentedString(orderAvgSellPrice)).append("\n");
    sb.append("    totalSellCommission: ").append(toIndentedString(totalSellCommission)).append("\n");
    sb.append("    baseOrderNetTotal: ").append(toIndentedString(baseOrderNetTotal)).append("\n");
    sb.append("    baseSide: ").append(toIndentedString(baseSide)).append("\n");
    sb.append("    quoteOrderNetTotal: ").append(toIndentedString(quoteOrderNetTotal)).append("\n");
    sb.append("    quoteSide: ").append(toIndentedString(quoteSide)).append("\n");
    sb.append("    totalNetCommission: ").append(toIndentedString(totalNetCommission)).append("\n");
    sb.append("    netRemainder: ").append(toIndentedString(netRemainder)).append("\n");
    sb.append("    netAllocationLegs: ").append(toIndentedString(netAllocationLegs)).append("\n");
    sb.append("    buyRemainder: ").append(toIndentedString(buyRemainder)).append("\n");
    sb.append("    buyAllocationLegs: ").append(toIndentedString(buyAllocationLegs)).append("\n");
    sb.append("    sellRemainder: ").append(toIndentedString(sellRemainder)).append("\n");
    sb.append("    sellAllocationLegs: ").append(toIndentedString(sellAllocationLegs)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

