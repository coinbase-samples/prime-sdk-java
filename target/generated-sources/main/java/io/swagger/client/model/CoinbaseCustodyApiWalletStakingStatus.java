/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseCustodyApiRedeemRequestStatus;
import io.swagger.client.model.CoinbaseCustodyApiStakingBalance;
import io.swagger.client.model.CoinbaseCustodyApiStakingValidator;
import io.swagger.client.model.CoinbaseCustodyApiUnbondingStatus;
import io.swagger.client.model.CoinbaseCustodyApiWalletStakingStatusState;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CoinbaseCustodyApiWalletStakingStatus
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseCustodyApiWalletStakingStatus {
  @SerializedName("staking_enabled")
  private Boolean stakingEnabled = null;

  @SerializedName("balance")
  private CoinbaseCustodyApiStakingBalance balance = null;

  @SerializedName("unbonding")
  private CoinbaseCustodyApiUnbondingStatus unbonding = null;

  @SerializedName("validators")
  private List<CoinbaseCustodyApiStakingValidator> validators = null;

  @SerializedName("currency_conversion_destination_address")
  private String currencyConversionDestinationAddress = null;

  @SerializedName("state")
  private CoinbaseCustodyApiWalletStakingStatusState state = null;

  @SerializedName("staking_address")
  private String stakingAddress = null;

  @SerializedName("staking_end_date")
  private String stakingEndDate = null;

  @SerializedName("currency_conversion_wallet_id")
  private String currencyConversionWalletId = null;

  @SerializedName("redeem_request_statuses")
  private List<CoinbaseCustodyApiRedeemRequestStatus> redeemRequestStatuses = null;

  public CoinbaseCustodyApiWalletStakingStatus stakingEnabled(Boolean stakingEnabled) {
    this.stakingEnabled = stakingEnabled;
    return this;
  }

   /**
   * Get stakingEnabled
   * @return stakingEnabled
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isStakingEnabled() {
    return stakingEnabled;
  }

  public void setStakingEnabled(Boolean stakingEnabled) {
    this.stakingEnabled = stakingEnabled;
  }

  public CoinbaseCustodyApiWalletStakingStatus balance(CoinbaseCustodyApiStakingBalance balance) {
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
  **/
  @ApiModelProperty(required = true, value = "")
  public CoinbaseCustodyApiStakingBalance getBalance() {
    return balance;
  }

  public void setBalance(CoinbaseCustodyApiStakingBalance balance) {
    this.balance = balance;
  }

  public CoinbaseCustodyApiWalletStakingStatus unbonding(CoinbaseCustodyApiUnbondingStatus unbonding) {
    this.unbonding = unbonding;
    return this;
  }

   /**
   * Get unbonding
   * @return unbonding
  **/
  @ApiModelProperty(value = "")
  public CoinbaseCustodyApiUnbondingStatus getUnbonding() {
    return unbonding;
  }

  public void setUnbonding(CoinbaseCustodyApiUnbondingStatus unbonding) {
    this.unbonding = unbonding;
  }

  public CoinbaseCustodyApiWalletStakingStatus validators(List<CoinbaseCustodyApiStakingValidator> validators) {
    this.validators = validators;
    return this;
  }

  public CoinbaseCustodyApiWalletStakingStatus addValidatorsItem(CoinbaseCustodyApiStakingValidator validatorsItem) {
    if (this.validators == null) {
      this.validators = new ArrayList<CoinbaseCustodyApiStakingValidator>();
    }
    this.validators.add(validatorsItem);
    return this;
  }

   /**
   * Get validators
   * @return validators
  **/
  @ApiModelProperty(value = "")
  public List<CoinbaseCustodyApiStakingValidator> getValidators() {
    return validators;
  }

  public void setValidators(List<CoinbaseCustodyApiStakingValidator> validators) {
    this.validators = validators;
  }

  public CoinbaseCustodyApiWalletStakingStatus currencyConversionDestinationAddress(String currencyConversionDestinationAddress) {
    this.currencyConversionDestinationAddress = currencyConversionDestinationAddress;
    return this;
  }

   /**
   * Get currencyConversionDestinationAddress
   * @return currencyConversionDestinationAddress
  **/
  @ApiModelProperty(value = "")
  public String getCurrencyConversionDestinationAddress() {
    return currencyConversionDestinationAddress;
  }

  public void setCurrencyConversionDestinationAddress(String currencyConversionDestinationAddress) {
    this.currencyConversionDestinationAddress = currencyConversionDestinationAddress;
  }

  public CoinbaseCustodyApiWalletStakingStatus state(CoinbaseCustodyApiWalletStakingStatusState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(value = "")
  public CoinbaseCustodyApiWalletStakingStatusState getState() {
    return state;
  }

  public void setState(CoinbaseCustodyApiWalletStakingStatusState state) {
    this.state = state;
  }

  public CoinbaseCustodyApiWalletStakingStatus stakingAddress(String stakingAddress) {
    this.stakingAddress = stakingAddress;
    return this;
  }

   /**
   * Get stakingAddress
   * @return stakingAddress
  **/
  @ApiModelProperty(value = "")
  public String getStakingAddress() {
    return stakingAddress;
  }

  public void setStakingAddress(String stakingAddress) {
    this.stakingAddress = stakingAddress;
  }

  public CoinbaseCustodyApiWalletStakingStatus stakingEndDate(String stakingEndDate) {
    this.stakingEndDate = stakingEndDate;
    return this;
  }

   /**
   * Get stakingEndDate
   * @return stakingEndDate
  **/
  @ApiModelProperty(value = "")
  public String getStakingEndDate() {
    return stakingEndDate;
  }

  public void setStakingEndDate(String stakingEndDate) {
    this.stakingEndDate = stakingEndDate;
  }

  public CoinbaseCustodyApiWalletStakingStatus currencyConversionWalletId(String currencyConversionWalletId) {
    this.currencyConversionWalletId = currencyConversionWalletId;
    return this;
  }

   /**
   * Get currencyConversionWalletId
   * @return currencyConversionWalletId
  **/
  @ApiModelProperty(value = "")
  public String getCurrencyConversionWalletId() {
    return currencyConversionWalletId;
  }

  public void setCurrencyConversionWalletId(String currencyConversionWalletId) {
    this.currencyConversionWalletId = currencyConversionWalletId;
  }

  public CoinbaseCustodyApiWalletStakingStatus redeemRequestStatuses(List<CoinbaseCustodyApiRedeemRequestStatus> redeemRequestStatuses) {
    this.redeemRequestStatuses = redeemRequestStatuses;
    return this;
  }

  public CoinbaseCustodyApiWalletStakingStatus addRedeemRequestStatusesItem(CoinbaseCustodyApiRedeemRequestStatus redeemRequestStatusesItem) {
    if (this.redeemRequestStatuses == null) {
      this.redeemRequestStatuses = new ArrayList<CoinbaseCustodyApiRedeemRequestStatus>();
    }
    this.redeemRequestStatuses.add(redeemRequestStatusesItem);
    return this;
  }

   /**
   * Get redeemRequestStatuses
   * @return redeemRequestStatuses
  **/
  @ApiModelProperty(value = "")
  public List<CoinbaseCustodyApiRedeemRequestStatus> getRedeemRequestStatuses() {
    return redeemRequestStatuses;
  }

  public void setRedeemRequestStatuses(List<CoinbaseCustodyApiRedeemRequestStatus> redeemRequestStatuses) {
    this.redeemRequestStatuses = redeemRequestStatuses;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseCustodyApiWalletStakingStatus coinbaseCustodyApiWalletStakingStatus = (CoinbaseCustodyApiWalletStakingStatus) o;
    return Objects.equals(this.stakingEnabled, coinbaseCustodyApiWalletStakingStatus.stakingEnabled) &&
        Objects.equals(this.balance, coinbaseCustodyApiWalletStakingStatus.balance) &&
        Objects.equals(this.unbonding, coinbaseCustodyApiWalletStakingStatus.unbonding) &&
        Objects.equals(this.validators, coinbaseCustodyApiWalletStakingStatus.validators) &&
        Objects.equals(this.currencyConversionDestinationAddress, coinbaseCustodyApiWalletStakingStatus.currencyConversionDestinationAddress) &&
        Objects.equals(this.state, coinbaseCustodyApiWalletStakingStatus.state) &&
        Objects.equals(this.stakingAddress, coinbaseCustodyApiWalletStakingStatus.stakingAddress) &&
        Objects.equals(this.stakingEndDate, coinbaseCustodyApiWalletStakingStatus.stakingEndDate) &&
        Objects.equals(this.currencyConversionWalletId, coinbaseCustodyApiWalletStakingStatus.currencyConversionWalletId) &&
        Objects.equals(this.redeemRequestStatuses, coinbaseCustodyApiWalletStakingStatus.redeemRequestStatuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stakingEnabled, balance, unbonding, validators, currencyConversionDestinationAddress, state, stakingAddress, stakingEndDate, currencyConversionWalletId, redeemRequestStatuses);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseCustodyApiWalletStakingStatus {\n");
    
    sb.append("    stakingEnabled: ").append(toIndentedString(stakingEnabled)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    unbonding: ").append(toIndentedString(unbonding)).append("\n");
    sb.append("    validators: ").append(toIndentedString(validators)).append("\n");
    sb.append("    currencyConversionDestinationAddress: ").append(toIndentedString(currencyConversionDestinationAddress)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stakingAddress: ").append(toIndentedString(stakingAddress)).append("\n");
    sb.append("    stakingEndDate: ").append(toIndentedString(stakingEndDate)).append("\n");
    sb.append("    currencyConversionWalletId: ").append(toIndentedString(currencyConversionWalletId)).append("\n");
    sb.append("    redeemRequestStatuses: ").append(toIndentedString(redeemRequestStatuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

