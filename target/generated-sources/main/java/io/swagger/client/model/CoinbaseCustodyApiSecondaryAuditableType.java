/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets coinbase.custody.api.SecondaryAuditableType
 */
@JsonAdapter(CoinbaseCustodyApiSecondaryAuditableType.Adapter.class)
public enum CoinbaseCustodyApiSecondaryAuditableType {
  
  UNKNOWN("SECONDARY_AUDITABLE_TYPE_UNKNOWN"),
  
  WITHDRAWAL("SECONDARY_AUDITABLE_TYPE_WITHDRAWAL"),
  
  SWEEP_WITHDRAWAL("SECONDARY_AUDITABLE_TYPE_SWEEP_WITHDRAWAL"),
  
  BILLING_WITHDRAWAL("SECONDARY_AUDITABLE_TYPE_BILLING_WITHDRAWAL"),
  
  DEPOSIT("SECONDARY_AUDITABLE_TYPE_DEPOSIT"),
  
  COINBASE_DEPOSIT("SECONDARY_AUDITABLE_TYPE_COINBASE_DEPOSIT"),
  
  SWEEP_DEPOSIT("SECONDARY_AUDITABLE_TYPE_SWEEP_DEPOSIT"),
  
  REWARD("SECONDARY_AUDITABLE_TYPE_REWARD"),
  
  PROXY_DEPOSIT("SECONDARY_AUDITABLE_TYPE_PROXY_DEPOSIT"),
  
  PROXY_WITHDRAWAL("SECONDARY_AUDITABLE_TYPE_PROXY_WITHDRAWAL"),
  
  KEY_REGISTRATION("SECONDARY_AUDITABLE_TYPE_KEY_REGISTRATION"),
  
  DELEGATION("SECONDARY_AUDITABLE_TYPE_DELEGATION"),
  
  UNDELEGATION_DEPRECATED("SECONDARY_AUDITABLE_TYPE_UNDELEGATION_DEPRECATED"),
  
  RESTAKE("SECONDARY_AUDITABLE_TYPE_RESTAKE"),
  
  COMPLETE_UNBONDING("SECONDARY_AUDITABLE_TYPE_COMPLETE_UNBONDING"),
  
  COINBASE_REFUND("SECONDARY_AUDITABLE_TYPE_COINBASE_REFUND"),
  
  WITHDRAW_UNBONDED("SECONDARY_AUDITABLE_TYPE_WITHDRAW_UNBONDED"),
  
  STAKE_ACCOUNT_CREATE("SECONDARY_AUDITABLE_TYPE_STAKE_ACCOUNT_CREATE"),
  
  CHANGE_VALIDATOR("SECONDARY_AUDITABLE_TYPE_CHANGE_VALIDATOR"),
  
  STAKE("SECONDARY_AUDITABLE_TYPE_STAKE"),
  
  UNSTAKE("SECONDARY_AUDITABLE_TYPE_UNSTAKE"),
  
  TRANSFER_WITHDRAWAL("SECONDARY_AUDITABLE_TYPE_TRANSFER_WITHDRAWAL"),
  
  TRANSFER_DEPOSIT("SECONDARY_AUDITABLE_TYPE_TRANSFER_DEPOSIT"),
  
  SIGNATURE("SECONDARY_AUDITABLE_TYPE_SIGNATURE"),
  
  DISABLE("SECONDARY_AUDITABLE_TYPE_DISABLE"),
  
  UPDATE("SECONDARY_AUDITABLE_TYPE_UPDATE"),
  
  CREATE_ACCESS_KEY("SECONDARY_AUDITABLE_TYPE_CREATE_ACCESS_KEY"),
  
  REVOKE_ACCESS_KEY("SECONDARY_AUDITABLE_TYPE_REVOKE_ACCESS_KEY"),
  
  ADDRESS_BOOK_ADDRESS_ADDED("SECONDARY_AUDITABLE_TYPE_ADDRESS_BOOK_ADDRESS_ADDED"),
  
  ADDRESS_BOOK_ADDRESS_DELETED("SECONDARY_AUDITABLE_TYPE_ADDRESS_BOOK_ADDRESS_DELETED"),
  
  CONSENSUS_WITHDRAWAL("SECONDARY_AUDITABLE_TYPE_CONSENSUS_WITHDRAWAL"),
  
  UPDATE_CONSENSUS_WITHDRAWAL("SECONDARY_AUDITABLE_TYPE_UPDATE_CONSENSUS_WITHDRAWAL"),
  
  MAX_WITHDRAWAL_AMOUNT("SECONDARY_AUDITABLE_TYPE_MAX_WITHDRAWAL_AMOUNT"),
  
  ADDRESS_WHITELISTING("SECONDARY_AUDITABLE_TYPE_ADDRESS_WHITELISTING"),
  
  MULTI_WALLET("SECONDARY_AUDITABLE_TYPE_MULTI_WALLET"),
  
  API_KEY_GENERATION("SECONDARY_AUDITABLE_TYPE_API_KEY_GENERATION"),
  
  CONSENSUS_ONE("SECONDARY_AUDITABLE_TYPE_CONSENSUS_ONE"),
  
  SIGN_STAKING_ADDENDUM("SECONDARY_AUDITABLE_TYPE_SIGN_STAKING_ADDENDUM"),
  
  GOVERNANCE_VOTE_CONSENSUS("SECONDARY_AUDITABLE_TYPE_GOVERNANCE_VOTE_CONSENSUS"),
  
  UPDATE_USER_ROLE("SECONDARY_AUDITABLE_TYPE_UPDATE_USER_ROLE"),
  
  REMOVE_USER("SECONDARY_AUDITABLE_TYPE_REMOVE_USER"),
  
  REMOVE_PAYMENT_METHOD("SECONDARY_AUDITABLE_TYPE_REMOVE_PAYMENT_METHOD"),
  
  REQUIRED_APPROVAL("SECONDARY_AUDITABLE_TYPE_REQUIRED_APPROVAL"),
  
  VIDEO_CONSENSUS("SECONDARY_AUDITABLE_TYPE_VIDEO_CONSENSUS");

  private String value;

  CoinbaseCustodyApiSecondaryAuditableType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CoinbaseCustodyApiSecondaryAuditableType fromValue(String text) {
    for (CoinbaseCustodyApiSecondaryAuditableType b : CoinbaseCustodyApiSecondaryAuditableType.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<CoinbaseCustodyApiSecondaryAuditableType> {
    @Override
    public void write(final JsonWriter jsonWriter, final CoinbaseCustodyApiSecondaryAuditableType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CoinbaseCustodyApiSecondaryAuditableType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CoinbaseCustodyApiSecondaryAuditableType.fromValue(String.valueOf(value));
    }
  }
}

