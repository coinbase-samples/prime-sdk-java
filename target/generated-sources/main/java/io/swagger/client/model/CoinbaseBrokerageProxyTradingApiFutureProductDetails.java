/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoreContractExpiryType;
import io.swagger.client.model.CoreRiskManagementType;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * CoinbaseBrokerageProxyTradingApiFutureProductDetails
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseBrokerageProxyTradingApiFutureProductDetails {
  @SerializedName("venue")
  private String venue = null;

  @SerializedName("contract_code")
  private String contractCode = null;

  @SerializedName("contract_expiry")
  private OffsetDateTime contractExpiry = null;

  @SerializedName("contract_size")
  private String contractSize = null;

  @SerializedName("contract_root_unit")
  private String contractRootUnit = null;

  @SerializedName("group_description")
  private String groupDescription = null;

  @SerializedName("contract_expiry_timezone")
  private String contractExpiryTimezone = null;

  @SerializedName("group_short_description")
  private String groupShortDescription = null;

  @SerializedName("risk_managed_by")
  private CoreRiskManagementType riskManagedBy = null;

  @SerializedName("contract_expiry_type")
  private CoreContractExpiryType contractExpiryType = null;

  @SerializedName("funding_interval")
  private String fundingInterval = null;

  @SerializedName("max_leverage")
  private String maxLeverage = null;

  public CoinbaseBrokerageProxyTradingApiFutureProductDetails venue(String venue) {
    this.venue = venue;
    return this;
  }

   /**
   * The venue this product trades on. Eg: cme, cde
   * @return venue
  **/
  @ApiModelProperty(value = "The venue this product trades on. Eg: cme, cde")
  public String getVenue() {
    return venue;
  }

  public void setVenue(String venue) {
    this.venue = venue;
  }

  public CoinbaseBrokerageProxyTradingApiFutureProductDetails contractCode(String contractCode) {
    this.contractCode = contractCode;
    return this;
  }

   /**
   * The group identifier for this contract. Eg: MBT, MET
   * @return contractCode
  **/
  @ApiModelProperty(value = "The group identifier for this contract. Eg: MBT, MET")
  public String getContractCode() {
    return contractCode;
  }

  public void setContractCode(String contractCode) {
    this.contractCode = contractCode;
  }

  public CoinbaseBrokerageProxyTradingApiFutureProductDetails contractExpiry(OffsetDateTime contractExpiry) {
    this.contractExpiry = contractExpiry;
    return this;
  }

   /**
   * The expiration timestamp of this product. Eg: 2022-06-16T00:00:00Z
   * @return contractExpiry
  **/
  @ApiModelProperty(value = "The expiration timestamp of this product. Eg: 2022-06-16T00:00:00Z")
  public OffsetDateTime getContractExpiry() {
    return contractExpiry;
  }

  public void setContractExpiry(OffsetDateTime contractExpiry) {
    this.contractExpiry = contractExpiry;
  }

  public CoinbaseBrokerageProxyTradingApiFutureProductDetails contractSize(String contractSize) {
    this.contractSize = contractSize;
    return this;
  }

   /**
   * The size of each contract in terms of the contract root unit. Eg: 100
   * @return contractSize
  **/
  @ApiModelProperty(value = "The size of each contract in terms of the contract root unit. Eg: 100")
  public String getContractSize() {
    return contractSize;
  }

  public void setContractSize(String contractSize) {
    this.contractSize = contractSize;
  }

  public CoinbaseBrokerageProxyTradingApiFutureProductDetails contractRootUnit(String contractRootUnit) {
    this.contractRootUnit = contractRootUnit;
    return this;
  }

   /**
   * The root unit to describe the underlying instrument. Eg: BTC, ETH
   * @return contractRootUnit
  **/
  @ApiModelProperty(value = "The root unit to describe the underlying instrument. Eg: BTC, ETH")
  public String getContractRootUnit() {
    return contractRootUnit;
  }

  public void setContractRootUnit(String contractRootUnit) {
    this.contractRootUnit = contractRootUnit;
  }

  public CoinbaseBrokerageProxyTradingApiFutureProductDetails groupDescription(String groupDescription) {
    this.groupDescription = groupDescription;
    return this;
  }

   /**
   * The descriptive name for the product group. Eg: Nano Bitcoin, Micro Ethereum, etc
   * @return groupDescription
  **/
  @ApiModelProperty(value = "The descriptive name for the product group. Eg: Nano Bitcoin, Micro Ethereum, etc")
  public String getGroupDescription() {
    return groupDescription;
  }

  public void setGroupDescription(String groupDescription) {
    this.groupDescription = groupDescription;
  }

  public CoinbaseBrokerageProxyTradingApiFutureProductDetails contractExpiryTimezone(String contractExpiryTimezone) {
    this.contractExpiryTimezone = contractExpiryTimezone;
    return this;
  }

   /**
   * The IANA time zone for the contract&#39;s expiration time. Eg: Europe/London, America/Chicago, etc
   * @return contractExpiryTimezone
  **/
  @ApiModelProperty(value = "The IANA time zone for the contract's expiration time. Eg: Europe/London, America/Chicago, etc")
  public String getContractExpiryTimezone() {
    return contractExpiryTimezone;
  }

  public void setContractExpiryTimezone(String contractExpiryTimezone) {
    this.contractExpiryTimezone = contractExpiryTimezone;
  }

  public CoinbaseBrokerageProxyTradingApiFutureProductDetails groupShortDescription(String groupShortDescription) {
    this.groupShortDescription = groupShortDescription;
    return this;
  }

   /**
   * The short version of the group description. Eg: Nano BTC, Micro ETH, etc
   * @return groupShortDescription
  **/
  @ApiModelProperty(value = "The short version of the group description. Eg: Nano BTC, Micro ETH, etc")
  public String getGroupShortDescription() {
    return groupShortDescription;
  }

  public void setGroupShortDescription(String groupShortDescription) {
    this.groupShortDescription = groupShortDescription;
  }

  public CoinbaseBrokerageProxyTradingApiFutureProductDetails riskManagedBy(CoreRiskManagementType riskManagedBy) {
    this.riskManagedBy = riskManagedBy;
    return this;
  }

   /**
   * The party responsible for risk management of the product. E.g. FCM or VENUE
   * @return riskManagedBy
  **/
  @ApiModelProperty(value = "The party responsible for risk management of the product. E.g. FCM or VENUE")
  public CoreRiskManagementType getRiskManagedBy() {
    return riskManagedBy;
  }

  public void setRiskManagedBy(CoreRiskManagementType riskManagedBy) {
    this.riskManagedBy = riskManagedBy;
  }

  public CoinbaseBrokerageProxyTradingApiFutureProductDetails contractExpiryType(CoreContractExpiryType contractExpiryType) {
    this.contractExpiryType = contractExpiryType;
    return this;
  }

   /**
   * The type of contract expiry for the product. E.g. EXPIRING or PERPETUAL
   * @return contractExpiryType
  **/
  @ApiModelProperty(value = "The type of contract expiry for the product. E.g. EXPIRING or PERPETUAL")
  public CoreContractExpiryType getContractExpiryType() {
    return contractExpiryType;
  }

  public void setContractExpiryType(CoreContractExpiryType contractExpiryType) {
    this.contractExpiryType = contractExpiryType;
  }

  public CoinbaseBrokerageProxyTradingApiFutureProductDetails fundingInterval(String fundingInterval) {
    this.fundingInterval = fundingInterval;
    return this;
  }

   /**
   * The time between funding payments for perpetual futures. E.g. 1 hour. Nil for expiring futures.
   * @return fundingInterval
  **/
  @ApiModelProperty(value = "The time between funding payments for perpetual futures. E.g. 1 hour. Nil for expiring futures.")
  public String getFundingInterval() {
    return fundingInterval;
  }

  public void setFundingInterval(String fundingInterval) {
    this.fundingInterval = fundingInterval;
  }

  public CoinbaseBrokerageProxyTradingApiFutureProductDetails maxLeverage(String maxLeverage) {
    this.maxLeverage = maxLeverage;
    return this;
  }

   /**
   * The maximum leverage allowed for the product. E.g. &#39;5&#39; for 5x leverage. empty string for expiring futures.
   * @return maxLeverage
  **/
  @ApiModelProperty(value = "The maximum leverage allowed for the product. E.g. '5' for 5x leverage. empty string for expiring futures.")
  public String getMaxLeverage() {
    return maxLeverage;
  }

  public void setMaxLeverage(String maxLeverage) {
    this.maxLeverage = maxLeverage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseBrokerageProxyTradingApiFutureProductDetails coinbaseBrokerageProxyTradingApiFutureProductDetails = (CoinbaseBrokerageProxyTradingApiFutureProductDetails) o;
    return Objects.equals(this.venue, coinbaseBrokerageProxyTradingApiFutureProductDetails.venue) &&
        Objects.equals(this.contractCode, coinbaseBrokerageProxyTradingApiFutureProductDetails.contractCode) &&
        Objects.equals(this.contractExpiry, coinbaseBrokerageProxyTradingApiFutureProductDetails.contractExpiry) &&
        Objects.equals(this.contractSize, coinbaseBrokerageProxyTradingApiFutureProductDetails.contractSize) &&
        Objects.equals(this.contractRootUnit, coinbaseBrokerageProxyTradingApiFutureProductDetails.contractRootUnit) &&
        Objects.equals(this.groupDescription, coinbaseBrokerageProxyTradingApiFutureProductDetails.groupDescription) &&
        Objects.equals(this.contractExpiryTimezone, coinbaseBrokerageProxyTradingApiFutureProductDetails.contractExpiryTimezone) &&
        Objects.equals(this.groupShortDescription, coinbaseBrokerageProxyTradingApiFutureProductDetails.groupShortDescription) &&
        Objects.equals(this.riskManagedBy, coinbaseBrokerageProxyTradingApiFutureProductDetails.riskManagedBy) &&
        Objects.equals(this.contractExpiryType, coinbaseBrokerageProxyTradingApiFutureProductDetails.contractExpiryType) &&
        Objects.equals(this.fundingInterval, coinbaseBrokerageProxyTradingApiFutureProductDetails.fundingInterval) &&
        Objects.equals(this.maxLeverage, coinbaseBrokerageProxyTradingApiFutureProductDetails.maxLeverage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(venue, contractCode, contractExpiry, contractSize, contractRootUnit, groupDescription, contractExpiryTimezone, groupShortDescription, riskManagedBy, contractExpiryType, fundingInterval, maxLeverage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseBrokerageProxyTradingApiFutureProductDetails {\n");
    
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("    contractCode: ").append(toIndentedString(contractCode)).append("\n");
    sb.append("    contractExpiry: ").append(toIndentedString(contractExpiry)).append("\n");
    sb.append("    contractSize: ").append(toIndentedString(contractSize)).append("\n");
    sb.append("    contractRootUnit: ").append(toIndentedString(contractRootUnit)).append("\n");
    sb.append("    groupDescription: ").append(toIndentedString(groupDescription)).append("\n");
    sb.append("    contractExpiryTimezone: ").append(toIndentedString(contractExpiryTimezone)).append("\n");
    sb.append("    groupShortDescription: ").append(toIndentedString(groupShortDescription)).append("\n");
    sb.append("    riskManagedBy: ").append(toIndentedString(riskManagedBy)).append("\n");
    sb.append("    contractExpiryType: ").append(toIndentedString(contractExpiryType)).append("\n");
    sb.append("    fundingInterval: ").append(toIndentedString(fundingInterval)).append("\n");
    sb.append("    maxLeverage: ").append(toIndentedString(maxLeverage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

