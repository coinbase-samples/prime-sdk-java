/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseEngPrimeApiApiAmountDue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CoinbaseEngPrimeApiApiPostTradeCreditInformation
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseEngPrimeApiApiPostTradeCreditInformation {
  @SerializedName("portfolio_id")
  private String portfolioId = null;

  @SerializedName("currency")
  private String currency = null;

  @SerializedName("limit")
  private String limit = null;

  @SerializedName("utilized")
  private String utilized = null;

  @SerializedName("available")
  private String available = null;

  @SerializedName("frozen")
  private Boolean frozen = null;

  @SerializedName("frozen_reason")
  private String frozenReason = null;

  @SerializedName("amounts_due")
  private List<CoinbaseEngPrimeApiApiAmountDue> amountsDue = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  public CoinbaseEngPrimeApiApiPostTradeCreditInformation portfolioId(String portfolioId) {
    this.portfolioId = portfolioId;
    return this;
  }

   /**
   * The unique ID of the portfolio
   * @return portfolioId
  **/
  @ApiModelProperty(value = "The unique ID of the portfolio")
  public String getPortfolioId() {
    return portfolioId;
  }

  public void setPortfolioId(String portfolioId) {
    this.portfolioId = portfolioId;
  }

  public CoinbaseEngPrimeApiApiPostTradeCreditInformation currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * The currency symbol credit is denoted in
   * @return currency
  **/
  @ApiModelProperty(value = "The currency symbol credit is denoted in")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public CoinbaseEngPrimeApiApiPostTradeCreditInformation limit(String limit) {
    this.limit = limit;
    return this;
  }

   /**
   * The maximum credit limit
   * @return limit
  **/
  @ApiModelProperty(value = "The maximum credit limit")
  public String getLimit() {
    return limit;
  }

  public void setLimit(String limit) {
    this.limit = limit;
  }

  public CoinbaseEngPrimeApiApiPostTradeCreditInformation utilized(String utilized) {
    this.utilized = utilized;
    return this;
  }

   /**
   * The amount of credit used
   * @return utilized
  **/
  @ApiModelProperty(value = "The amount of credit used")
  public String getUtilized() {
    return utilized;
  }

  public void setUtilized(String utilized) {
    this.utilized = utilized;
  }

  public CoinbaseEngPrimeApiApiPostTradeCreditInformation available(String available) {
    this.available = available;
    return this;
  }

   /**
   * The amount of credit available
   * @return available
  **/
  @ApiModelProperty(value = "The amount of credit available")
  public String getAvailable() {
    return available;
  }

  public void setAvailable(String available) {
    this.available = available;
  }

  public CoinbaseEngPrimeApiApiPostTradeCreditInformation frozen(Boolean frozen) {
    this.frozen = frozen;
    return this;
  }

   /**
   * Whether or not a portfolio is frozen due to balance outstanding or other reason
   * @return frozen
  **/
  @ApiModelProperty(value = "Whether or not a portfolio is frozen due to balance outstanding or other reason")
  public Boolean isFrozen() {
    return frozen;
  }

  public void setFrozen(Boolean frozen) {
    this.frozen = frozen;
  }

  public CoinbaseEngPrimeApiApiPostTradeCreditInformation frozenReason(String frozenReason) {
    this.frozenReason = frozenReason;
    return this;
  }

   /**
   * The reason why the portfolio is frozen
   * @return frozenReason
  **/
  @ApiModelProperty(value = "The reason why the portfolio is frozen")
  public String getFrozenReason() {
    return frozenReason;
  }

  public void setFrozenReason(String frozenReason) {
    this.frozenReason = frozenReason;
  }

  public CoinbaseEngPrimeApiApiPostTradeCreditInformation amountsDue(List<CoinbaseEngPrimeApiApiAmountDue> amountsDue) {
    this.amountsDue = amountsDue;
    return this;
  }

  public CoinbaseEngPrimeApiApiPostTradeCreditInformation addAmountsDueItem(CoinbaseEngPrimeApiApiAmountDue amountsDueItem) {
    if (this.amountsDue == null) {
      this.amountsDue = new ArrayList<CoinbaseEngPrimeApiApiAmountDue>();
    }
    this.amountsDue.add(amountsDueItem);
    return this;
  }

   /**
   * Get amountsDue
   * @return amountsDue
  **/
  @ApiModelProperty(value = "")
  public List<CoinbaseEngPrimeApiApiAmountDue> getAmountsDue() {
    return amountsDue;
  }

  public void setAmountsDue(List<CoinbaseEngPrimeApiApiAmountDue> amountsDue) {
    this.amountsDue = amountsDue;
  }

  public CoinbaseEngPrimeApiApiPostTradeCreditInformation enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether the portfolio has credit enabled
   * @return enabled
  **/
  @ApiModelProperty(value = "Whether the portfolio has credit enabled")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseEngPrimeApiApiPostTradeCreditInformation coinbaseEngPrimeApiApiPostTradeCreditInformation = (CoinbaseEngPrimeApiApiPostTradeCreditInformation) o;
    return Objects.equals(this.portfolioId, coinbaseEngPrimeApiApiPostTradeCreditInformation.portfolioId) &&
        Objects.equals(this.currency, coinbaseEngPrimeApiApiPostTradeCreditInformation.currency) &&
        Objects.equals(this.limit, coinbaseEngPrimeApiApiPostTradeCreditInformation.limit) &&
        Objects.equals(this.utilized, coinbaseEngPrimeApiApiPostTradeCreditInformation.utilized) &&
        Objects.equals(this.available, coinbaseEngPrimeApiApiPostTradeCreditInformation.available) &&
        Objects.equals(this.frozen, coinbaseEngPrimeApiApiPostTradeCreditInformation.frozen) &&
        Objects.equals(this.frozenReason, coinbaseEngPrimeApiApiPostTradeCreditInformation.frozenReason) &&
        Objects.equals(this.amountsDue, coinbaseEngPrimeApiApiPostTradeCreditInformation.amountsDue) &&
        Objects.equals(this.enabled, coinbaseEngPrimeApiApiPostTradeCreditInformation.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(portfolioId, currency, limit, utilized, available, frozen, frozenReason, amountsDue, enabled);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseEngPrimeApiApiPostTradeCreditInformation {\n");
    
    sb.append("    portfolioId: ").append(toIndentedString(portfolioId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    utilized: ").append(toIndentedString(utilized)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    frozen: ").append(toIndentedString(frozen)).append("\n");
    sb.append("    frozenReason: ").append(toIndentedString(frozenReason)).append("\n");
    sb.append("    amountsDue: ").append(toIndentedString(amountsDue)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

