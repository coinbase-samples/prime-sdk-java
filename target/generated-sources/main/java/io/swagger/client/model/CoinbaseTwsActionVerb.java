/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseTwsActionVerbType;
import io.swagger.client.model.CoinbaseTwsConversionAction;
import io.swagger.client.model.CoinbaseTwsCryptoWithdrawalAction;
import io.swagger.client.model.CoinbaseTwsDerivativeSettlementAction;
import io.swagger.client.model.CoinbaseTwsFiatWithdrawalAction;
import io.swagger.client.model.CoinbaseTwsGovernanceAction;
import io.swagger.client.model.CoinbaseTwsLedgerTransferAction;
import io.swagger.client.model.CoinbaseTwsMatchTransferAction;
import io.swagger.client.model.CoinbaseTwsNftWithdrawalAction;
import io.swagger.client.model.CoinbaseTwsStakeAction;
import io.swagger.client.model.CoinbaseTwsWeb3MessageAction;
import io.swagger.client.model.CoinbaseTwsWeb3TransactionAction;
import java.io.IOException;

/**
 * CoinbaseTwsActionVerb
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseTwsActionVerb {
  @SerializedName("type")
  private CoinbaseTwsActionVerbType type = null;

  @SerializedName("crypto_withdrawal_action")
  private CoinbaseTwsCryptoWithdrawalAction cryptoWithdrawalAction = null;

  @SerializedName("fiat_withdrawal_action")
  private CoinbaseTwsFiatWithdrawalAction fiatWithdrawalAction = null;

  @SerializedName("stake_action")
  private CoinbaseTwsStakeAction stakeAction = null;

  @SerializedName("governance_action")
  private CoinbaseTwsGovernanceAction governanceAction = null;

  @SerializedName("conversion_action")
  private CoinbaseTwsConversionAction conversionAction = null;

  @SerializedName("derivative_settlement_action")
  private CoinbaseTwsDerivativeSettlementAction derivativeSettlementAction = null;

  @SerializedName("web3_transaction_action")
  private CoinbaseTwsWeb3TransactionAction web3TransactionAction = null;

  @SerializedName("web3_message_action")
  private CoinbaseTwsWeb3MessageAction web3MessageAction = null;

  @SerializedName("nft_withdrawal_action")
  private CoinbaseTwsNftWithdrawalAction nftWithdrawalAction = null;

  @SerializedName("ledger_transfer_action")
  private CoinbaseTwsLedgerTransferAction ledgerTransferAction = null;

  @SerializedName("match_transfer_action")
  private CoinbaseTwsMatchTransferAction matchTransferAction = null;

  public CoinbaseTwsActionVerb type(CoinbaseTwsActionVerbType type) {
    this.type = type;
    return this;
  }

   /**
   * Transaction action type
   * @return type
  **/
  @ApiModelProperty(value = "Transaction action type")
  public CoinbaseTwsActionVerbType getType() {
    return type;
  }

  public void setType(CoinbaseTwsActionVerbType type) {
    this.type = type;
  }

  public CoinbaseTwsActionVerb cryptoWithdrawalAction(CoinbaseTwsCryptoWithdrawalAction cryptoWithdrawalAction) {
    this.cryptoWithdrawalAction = cryptoWithdrawalAction;
    return this;
  }

   /**
   * Crypto withdrawal action
   * @return cryptoWithdrawalAction
  **/
  @ApiModelProperty(value = "Crypto withdrawal action")
  public CoinbaseTwsCryptoWithdrawalAction getCryptoWithdrawalAction() {
    return cryptoWithdrawalAction;
  }

  public void setCryptoWithdrawalAction(CoinbaseTwsCryptoWithdrawalAction cryptoWithdrawalAction) {
    this.cryptoWithdrawalAction = cryptoWithdrawalAction;
  }

  public CoinbaseTwsActionVerb fiatWithdrawalAction(CoinbaseTwsFiatWithdrawalAction fiatWithdrawalAction) {
    this.fiatWithdrawalAction = fiatWithdrawalAction;
    return this;
  }

   /**
   * Fiat withdrawal action
   * @return fiatWithdrawalAction
  **/
  @ApiModelProperty(value = "Fiat withdrawal action")
  public CoinbaseTwsFiatWithdrawalAction getFiatWithdrawalAction() {
    return fiatWithdrawalAction;
  }

  public void setFiatWithdrawalAction(CoinbaseTwsFiatWithdrawalAction fiatWithdrawalAction) {
    this.fiatWithdrawalAction = fiatWithdrawalAction;
  }

  public CoinbaseTwsActionVerb stakeAction(CoinbaseTwsStakeAction stakeAction) {
    this.stakeAction = stakeAction;
    return this;
  }

   /**
   * Staking withdrawal action
   * @return stakeAction
  **/
  @ApiModelProperty(value = "Staking withdrawal action")
  public CoinbaseTwsStakeAction getStakeAction() {
    return stakeAction;
  }

  public void setStakeAction(CoinbaseTwsStakeAction stakeAction) {
    this.stakeAction = stakeAction;
  }

  public CoinbaseTwsActionVerb governanceAction(CoinbaseTwsGovernanceAction governanceAction) {
    this.governanceAction = governanceAction;
    return this;
  }

   /**
   * Governance withdrawal action
   * @return governanceAction
  **/
  @ApiModelProperty(value = "Governance withdrawal action")
  public CoinbaseTwsGovernanceAction getGovernanceAction() {
    return governanceAction;
  }

  public void setGovernanceAction(CoinbaseTwsGovernanceAction governanceAction) {
    this.governanceAction = governanceAction;
  }

  public CoinbaseTwsActionVerb conversionAction(CoinbaseTwsConversionAction conversionAction) {
    this.conversionAction = conversionAction;
    return this;
  }

   /**
   * Conversion action
   * @return conversionAction
  **/
  @ApiModelProperty(value = "Conversion action")
  public CoinbaseTwsConversionAction getConversionAction() {
    return conversionAction;
  }

  public void setConversionAction(CoinbaseTwsConversionAction conversionAction) {
    this.conversionAction = conversionAction;
  }

  public CoinbaseTwsActionVerb derivativeSettlementAction(CoinbaseTwsDerivativeSettlementAction derivativeSettlementAction) {
    this.derivativeSettlementAction = derivativeSettlementAction;
    return this;
  }

   /**
   * Derivative settlement action
   * @return derivativeSettlementAction
  **/
  @ApiModelProperty(value = "Derivative settlement action")
  public CoinbaseTwsDerivativeSettlementAction getDerivativeSettlementAction() {
    return derivativeSettlementAction;
  }

  public void setDerivativeSettlementAction(CoinbaseTwsDerivativeSettlementAction derivativeSettlementAction) {
    this.derivativeSettlementAction = derivativeSettlementAction;
  }

  public CoinbaseTwsActionVerb web3TransactionAction(CoinbaseTwsWeb3TransactionAction web3TransactionAction) {
    this.web3TransactionAction = web3TransactionAction;
    return this;
  }

   /**
   * Web3 transaction action
   * @return web3TransactionAction
  **/
  @ApiModelProperty(value = "Web3 transaction action")
  public CoinbaseTwsWeb3TransactionAction getWeb3TransactionAction() {
    return web3TransactionAction;
  }

  public void setWeb3TransactionAction(CoinbaseTwsWeb3TransactionAction web3TransactionAction) {
    this.web3TransactionAction = web3TransactionAction;
  }

  public CoinbaseTwsActionVerb web3MessageAction(CoinbaseTwsWeb3MessageAction web3MessageAction) {
    this.web3MessageAction = web3MessageAction;
    return this;
  }

   /**
   * Web3 message action
   * @return web3MessageAction
  **/
  @ApiModelProperty(value = "Web3 message action")
  public CoinbaseTwsWeb3MessageAction getWeb3MessageAction() {
    return web3MessageAction;
  }

  public void setWeb3MessageAction(CoinbaseTwsWeb3MessageAction web3MessageAction) {
    this.web3MessageAction = web3MessageAction;
  }

  public CoinbaseTwsActionVerb nftWithdrawalAction(CoinbaseTwsNftWithdrawalAction nftWithdrawalAction) {
    this.nftWithdrawalAction = nftWithdrawalAction;
    return this;
  }

   /**
   * NFT withdrawal action
   * @return nftWithdrawalAction
  **/
  @ApiModelProperty(value = "NFT withdrawal action")
  public CoinbaseTwsNftWithdrawalAction getNftWithdrawalAction() {
    return nftWithdrawalAction;
  }

  public void setNftWithdrawalAction(CoinbaseTwsNftWithdrawalAction nftWithdrawalAction) {
    this.nftWithdrawalAction = nftWithdrawalAction;
  }

  public CoinbaseTwsActionVerb ledgerTransferAction(CoinbaseTwsLedgerTransferAction ledgerTransferAction) {
    this.ledgerTransferAction = ledgerTransferAction;
    return this;
  }

   /**
   * Ledger transfer action
   * @return ledgerTransferAction
  **/
  @ApiModelProperty(value = "Ledger transfer action")
  public CoinbaseTwsLedgerTransferAction getLedgerTransferAction() {
    return ledgerTransferAction;
  }

  public void setLedgerTransferAction(CoinbaseTwsLedgerTransferAction ledgerTransferAction) {
    this.ledgerTransferAction = ledgerTransferAction;
  }

  public CoinbaseTwsActionVerb matchTransferAction(CoinbaseTwsMatchTransferAction matchTransferAction) {
    this.matchTransferAction = matchTransferAction;
    return this;
  }

   /**
   * Match transfer action
   * @return matchTransferAction
  **/
  @ApiModelProperty(value = "Match transfer action")
  public CoinbaseTwsMatchTransferAction getMatchTransferAction() {
    return matchTransferAction;
  }

  public void setMatchTransferAction(CoinbaseTwsMatchTransferAction matchTransferAction) {
    this.matchTransferAction = matchTransferAction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseTwsActionVerb coinbaseTwsActionVerb = (CoinbaseTwsActionVerb) o;
    return Objects.equals(this.type, coinbaseTwsActionVerb.type) &&
        Objects.equals(this.cryptoWithdrawalAction, coinbaseTwsActionVerb.cryptoWithdrawalAction) &&
        Objects.equals(this.fiatWithdrawalAction, coinbaseTwsActionVerb.fiatWithdrawalAction) &&
        Objects.equals(this.stakeAction, coinbaseTwsActionVerb.stakeAction) &&
        Objects.equals(this.governanceAction, coinbaseTwsActionVerb.governanceAction) &&
        Objects.equals(this.conversionAction, coinbaseTwsActionVerb.conversionAction) &&
        Objects.equals(this.derivativeSettlementAction, coinbaseTwsActionVerb.derivativeSettlementAction) &&
        Objects.equals(this.web3TransactionAction, coinbaseTwsActionVerb.web3TransactionAction) &&
        Objects.equals(this.web3MessageAction, coinbaseTwsActionVerb.web3MessageAction) &&
        Objects.equals(this.nftWithdrawalAction, coinbaseTwsActionVerb.nftWithdrawalAction) &&
        Objects.equals(this.ledgerTransferAction, coinbaseTwsActionVerb.ledgerTransferAction) &&
        Objects.equals(this.matchTransferAction, coinbaseTwsActionVerb.matchTransferAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, cryptoWithdrawalAction, fiatWithdrawalAction, stakeAction, governanceAction, conversionAction, derivativeSettlementAction, web3TransactionAction, web3MessageAction, nftWithdrawalAction, ledgerTransferAction, matchTransferAction);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseTwsActionVerb {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    cryptoWithdrawalAction: ").append(toIndentedString(cryptoWithdrawalAction)).append("\n");
    sb.append("    fiatWithdrawalAction: ").append(toIndentedString(fiatWithdrawalAction)).append("\n");
    sb.append("    stakeAction: ").append(toIndentedString(stakeAction)).append("\n");
    sb.append("    governanceAction: ").append(toIndentedString(governanceAction)).append("\n");
    sb.append("    conversionAction: ").append(toIndentedString(conversionAction)).append("\n");
    sb.append("    derivativeSettlementAction: ").append(toIndentedString(derivativeSettlementAction)).append("\n");
    sb.append("    web3TransactionAction: ").append(toIndentedString(web3TransactionAction)).append("\n");
    sb.append("    web3MessageAction: ").append(toIndentedString(web3MessageAction)).append("\n");
    sb.append("    nftWithdrawalAction: ").append(toIndentedString(nftWithdrawalAction)).append("\n");
    sb.append("    ledgerTransferAction: ").append(toIndentedString(ledgerTransferAction)).append("\n");
    sb.append("    matchTransferAction: ").append(toIndentedString(matchTransferAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

