/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiMarketTradeIntervalData;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiOrderTradeIntervalData;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiTradeIntervalSize;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse {
  @SerializedName("order_id")
  private String orderId = null;

  @SerializedName("product_id")
  private String productId = null;

  @SerializedName("window_start")
  private OffsetDateTime windowStart = null;

  @SerializedName("window_end")
  private OffsetDateTime windowEnd = null;

  @SerializedName("market_data")
  private List<CoinbaseBrokerageProxyTradingApiMarketTradeIntervalData> marketData = null;

  @SerializedName("order_data")
  private List<CoinbaseBrokerageProxyTradingApiOrderTradeIntervalData> orderData = null;

  @SerializedName("interval_size")
  private CoinbaseBrokerageProxyTradingApiTradeIntervalSize intervalSize = null;

  public CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * Get orderId
   * @return orderId
  **/
  @ApiModelProperty(value = "")
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }

  public CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse productId(String productId) {
    this.productId = productId;
    return this;
  }

   /**
   * Get productId
   * @return productId
  **/
  @ApiModelProperty(value = "")
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }

  public CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse windowStart(OffsetDateTime windowStart) {
    this.windowStart = windowStart;
    return this;
  }

   /**
   * Get windowStart
   * @return windowStart
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getWindowStart() {
    return windowStart;
  }

  public void setWindowStart(OffsetDateTime windowStart) {
    this.windowStart = windowStart;
  }

  public CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse windowEnd(OffsetDateTime windowEnd) {
    this.windowEnd = windowEnd;
    return this;
  }

   /**
   * Get windowEnd
   * @return windowEnd
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getWindowEnd() {
    return windowEnd;
  }

  public void setWindowEnd(OffsetDateTime windowEnd) {
    this.windowEnd = windowEnd;
  }

  public CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse marketData(List<CoinbaseBrokerageProxyTradingApiMarketTradeIntervalData> marketData) {
    this.marketData = marketData;
    return this;
  }

  public CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse addMarketDataItem(CoinbaseBrokerageProxyTradingApiMarketTradeIntervalData marketDataItem) {
    if (this.marketData == null) {
      this.marketData = new ArrayList<CoinbaseBrokerageProxyTradingApiMarketTradeIntervalData>();
    }
    this.marketData.add(marketDataItem);
    return this;
  }

   /**
   * Get marketData
   * @return marketData
  **/
  @ApiModelProperty(value = "")
  public List<CoinbaseBrokerageProxyTradingApiMarketTradeIntervalData> getMarketData() {
    return marketData;
  }

  public void setMarketData(List<CoinbaseBrokerageProxyTradingApiMarketTradeIntervalData> marketData) {
    this.marketData = marketData;
  }

  public CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse orderData(List<CoinbaseBrokerageProxyTradingApiOrderTradeIntervalData> orderData) {
    this.orderData = orderData;
    return this;
  }

  public CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse addOrderDataItem(CoinbaseBrokerageProxyTradingApiOrderTradeIntervalData orderDataItem) {
    if (this.orderData == null) {
      this.orderData = new ArrayList<CoinbaseBrokerageProxyTradingApiOrderTradeIntervalData>();
    }
    this.orderData.add(orderDataItem);
    return this;
  }

   /**
   * Get orderData
   * @return orderData
  **/
  @ApiModelProperty(value = "")
  public List<CoinbaseBrokerageProxyTradingApiOrderTradeIntervalData> getOrderData() {
    return orderData;
  }

  public void setOrderData(List<CoinbaseBrokerageProxyTradingApiOrderTradeIntervalData> orderData) {
    this.orderData = orderData;
  }

  public CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse intervalSize(CoinbaseBrokerageProxyTradingApiTradeIntervalSize intervalSize) {
    this.intervalSize = intervalSize;
    return this;
  }

   /**
   * Get intervalSize
   * @return intervalSize
  **/
  @ApiModelProperty(value = "")
  public CoinbaseBrokerageProxyTradingApiTradeIntervalSize getIntervalSize() {
    return intervalSize;
  }

  public void setIntervalSize(CoinbaseBrokerageProxyTradingApiTradeIntervalSize intervalSize) {
    this.intervalSize = intervalSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse coinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse = (CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse) o;
    return Objects.equals(this.orderId, coinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse.orderId) &&
        Objects.equals(this.productId, coinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse.productId) &&
        Objects.equals(this.windowStart, coinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse.windowStart) &&
        Objects.equals(this.windowEnd, coinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse.windowEnd) &&
        Objects.equals(this.marketData, coinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse.marketData) &&
        Objects.equals(this.orderData, coinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse.orderData) &&
        Objects.equals(this.intervalSize, coinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse.intervalSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, productId, windowStart, windowEnd, marketData, orderData, intervalSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse {\n");
    
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    windowStart: ").append(toIndentedString(windowStart)).append("\n");
    sb.append("    windowEnd: ").append(toIndentedString(windowEnd)).append("\n");
    sb.append("    marketData: ").append(toIndentedString(marketData)).append("\n");
    sb.append("    orderData: ").append(toIndentedString(orderData)).append("\n");
    sb.append("    intervalSize: ").append(toIndentedString(intervalSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

