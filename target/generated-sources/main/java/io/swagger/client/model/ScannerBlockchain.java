/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets scanner.Blockchain
 */
@JsonAdapter(ScannerBlockchain.Adapter.class)
public enum ScannerBlockchain {
  
  UNKNOWN("BLOCKCHAIN_UNKNOWN"),
  
  STELLAR("BLOCKCHAIN_STELLAR"),
  
  RIPPLE("BLOCKCHAIN_RIPPLE"),
  
  SOLANA("BLOCKCHAIN_SOLANA"),
  
  BITCOIN("BLOCKCHAIN_BITCOIN"),
  
  ETHEREUM("BLOCKCHAIN_ETHEREUM"),
  
  BITCOINCASH("BLOCKCHAIN_BITCOINCASH"),
  
  LITECOIN("BLOCKCHAIN_LITECOIN"),
  
  DOGECOIN("BLOCKCHAIN_DOGECOIN"),
  
  BSC("BLOCKCHAIN_BSC"),
  
  AVACCHAIN("BLOCKCHAIN_AVACCHAIN"),
  
  POLYGON("BLOCKCHAIN_POLYGON"),
  
  OPTIMISM("BLOCKCHAIN_OPTIMISM"),
  
  ARBITRUM("BLOCKCHAIN_ARBITRUM"),
  
  BASE("BLOCKCHAIN_BASE"),
  
  BASE_SEPOLIA("BLOCKCHAIN_BASE_SEPOLIA"),
  
  TEST("BLOCKCHAIN_TEST"),
  
  HARDHAT("BLOCKCHAIN_HARDHAT");

  private String value;

  ScannerBlockchain(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ScannerBlockchain fromValue(String text) {
    for (ScannerBlockchain b : ScannerBlockchain.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<ScannerBlockchain> {
    @Override
    public void write(final JsonWriter jsonWriter, final ScannerBlockchain enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ScannerBlockchain read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ScannerBlockchain.fromValue(String.valueOf(value));
    }
  }
}

