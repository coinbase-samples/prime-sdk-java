/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CoinbaseBrokerageProxyCommonOrder;
import java.io.IOException;

/**
 * CoinbaseBrokerageProxyTradingApiTradeReportOrder
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-22T12:46:00.828-08:00")
public class CoinbaseBrokerageProxyTradingApiTradeReportOrder {
  @SerializedName("order")
  private CoinbaseBrokerageProxyCommonOrder order = null;

  @SerializedName("arrival_best_bid_price")
  private String arrivalBestBidPrice = null;

  @SerializedName("arrival_best_ask_price")
  private String arrivalBestAskPrice = null;

  @SerializedName("interval_vwap")
  private String intervalVwap = null;

  @SerializedName("interval_unweighted_avg_price")
  private String intervalUnweightedAvgPrice = null;

  @SerializedName("interval_avg_spread")
  private String intervalAvgSpread = null;

  @SerializedName("arrival_mid_price")
  private String arrivalMidPrice = null;

  @SerializedName("percent_interval_volume")
  private String percentIntervalVolume = null;

  @SerializedName("percent_daily_volume")
  private String percentDailyVolume = null;

  @SerializedName("interval_volatility")
  private String intervalVolatility = null;

  public CoinbaseBrokerageProxyTradingApiTradeReportOrder order(CoinbaseBrokerageProxyCommonOrder order) {
    this.order = order;
    return this;
  }

   /**
   * Order details
   * @return order
  **/
  @ApiModelProperty(required = true, value = "Order details")
  public CoinbaseBrokerageProxyCommonOrder getOrder() {
    return order;
  }

  public void setOrder(CoinbaseBrokerageProxyCommonOrder order) {
    this.order = order;
  }

  public CoinbaseBrokerageProxyTradingApiTradeReportOrder arrivalBestBidPrice(String arrivalBestBidPrice) {
    this.arrivalBestBidPrice = arrivalBestBidPrice;
    return this;
  }

   /**
   * Best bid price at order arrival time
   * @return arrivalBestBidPrice
  **/
  @ApiModelProperty(required = true, value = "Best bid price at order arrival time")
  public String getArrivalBestBidPrice() {
    return arrivalBestBidPrice;
  }

  public void setArrivalBestBidPrice(String arrivalBestBidPrice) {
    this.arrivalBestBidPrice = arrivalBestBidPrice;
  }

  public CoinbaseBrokerageProxyTradingApiTradeReportOrder arrivalBestAskPrice(String arrivalBestAskPrice) {
    this.arrivalBestAskPrice = arrivalBestAskPrice;
    return this;
  }

   /**
   * Best ask price at order arrival time
   * @return arrivalBestAskPrice
  **/
  @ApiModelProperty(required = true, value = "Best ask price at order arrival time")
  public String getArrivalBestAskPrice() {
    return arrivalBestAskPrice;
  }

  public void setArrivalBestAskPrice(String arrivalBestAskPrice) {
    this.arrivalBestAskPrice = arrivalBestAskPrice;
  }

  public CoinbaseBrokerageProxyTradingApiTradeReportOrder intervalVwap(String intervalVwap) {
    this.intervalVwap = intervalVwap;
    return this;
  }

   /**
   * Volume-weighted average price across all venues for order execution window
   * @return intervalVwap
  **/
  @ApiModelProperty(required = true, value = "Volume-weighted average price across all venues for order execution window")
  public String getIntervalVwap() {
    return intervalVwap;
  }

  public void setIntervalVwap(String intervalVwap) {
    this.intervalVwap = intervalVwap;
  }

  public CoinbaseBrokerageProxyTradingApiTradeReportOrder intervalUnweightedAvgPrice(String intervalUnweightedAvgPrice) {
    this.intervalUnweightedAvgPrice = intervalUnweightedAvgPrice;
    return this;
  }

   /**
   * Average price of the asset across all venues for order execution window
   * @return intervalUnweightedAvgPrice
  **/
  @ApiModelProperty(required = true, value = "Average price of the asset across all venues for order execution window")
  public String getIntervalUnweightedAvgPrice() {
    return intervalUnweightedAvgPrice;
  }

  public void setIntervalUnweightedAvgPrice(String intervalUnweightedAvgPrice) {
    this.intervalUnweightedAvgPrice = intervalUnweightedAvgPrice;
  }

  public CoinbaseBrokerageProxyTradingApiTradeReportOrder intervalAvgSpread(String intervalAvgSpread) {
    this.intervalAvgSpread = intervalAvgSpread;
    return this;
  }

   /**
   * Average difference between best bid and best ask for order execution window
   * @return intervalAvgSpread
  **/
  @ApiModelProperty(required = true, value = "Average difference between best bid and best ask for order execution window")
  public String getIntervalAvgSpread() {
    return intervalAvgSpread;
  }

  public void setIntervalAvgSpread(String intervalAvgSpread) {
    this.intervalAvgSpread = intervalAvgSpread;
  }

  public CoinbaseBrokerageProxyTradingApiTradeReportOrder arrivalMidPrice(String arrivalMidPrice) {
    this.arrivalMidPrice = arrivalMidPrice;
    return this;
  }

   /**
   * Mid price at order arrival time
   * @return arrivalMidPrice
  **/
  @ApiModelProperty(value = "Mid price at order arrival time")
  public String getArrivalMidPrice() {
    return arrivalMidPrice;
  }

  public void setArrivalMidPrice(String arrivalMidPrice) {
    this.arrivalMidPrice = arrivalMidPrice;
  }

  public CoinbaseBrokerageProxyTradingApiTradeReportOrder percentIntervalVolume(String percentIntervalVolume) {
    this.percentIntervalVolume = percentIntervalVolume;
    return this;
  }

   /**
   * Order fill volume as a percentage of market volume for the product during the execution window
   * @return percentIntervalVolume
  **/
  @ApiModelProperty(value = "Order fill volume as a percentage of market volume for the product during the execution window")
  public String getPercentIntervalVolume() {
    return percentIntervalVolume;
  }

  public void setPercentIntervalVolume(String percentIntervalVolume) {
    this.percentIntervalVolume = percentIntervalVolume;
  }

  public CoinbaseBrokerageProxyTradingApiTradeReportOrder percentDailyVolume(String percentDailyVolume) {
    this.percentDailyVolume = percentDailyVolume;
    return this;
  }

   /**
   * Order fill volume as a percentage of 30 day average daily volume immediately before order creation
   * @return percentDailyVolume
  **/
  @ApiModelProperty(value = "Order fill volume as a percentage of 30 day average daily volume immediately before order creation")
  public String getPercentDailyVolume() {
    return percentDailyVolume;
  }

  public void setPercentDailyVolume(String percentDailyVolume) {
    this.percentDailyVolume = percentDailyVolume;
  }

  public CoinbaseBrokerageProxyTradingApiTradeReportOrder intervalVolatility(String intervalVolatility) {
    this.intervalVolatility = intervalVolatility;
    return this;
  }

   /**
   * Market volatility during order execution window
   * @return intervalVolatility
  **/
  @ApiModelProperty(value = "Market volatility during order execution window")
  public String getIntervalVolatility() {
    return intervalVolatility;
  }

  public void setIntervalVolatility(String intervalVolatility) {
    this.intervalVolatility = intervalVolatility;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoinbaseBrokerageProxyTradingApiTradeReportOrder coinbaseBrokerageProxyTradingApiTradeReportOrder = (CoinbaseBrokerageProxyTradingApiTradeReportOrder) o;
    return Objects.equals(this.order, coinbaseBrokerageProxyTradingApiTradeReportOrder.order) &&
        Objects.equals(this.arrivalBestBidPrice, coinbaseBrokerageProxyTradingApiTradeReportOrder.arrivalBestBidPrice) &&
        Objects.equals(this.arrivalBestAskPrice, coinbaseBrokerageProxyTradingApiTradeReportOrder.arrivalBestAskPrice) &&
        Objects.equals(this.intervalVwap, coinbaseBrokerageProxyTradingApiTradeReportOrder.intervalVwap) &&
        Objects.equals(this.intervalUnweightedAvgPrice, coinbaseBrokerageProxyTradingApiTradeReportOrder.intervalUnweightedAvgPrice) &&
        Objects.equals(this.intervalAvgSpread, coinbaseBrokerageProxyTradingApiTradeReportOrder.intervalAvgSpread) &&
        Objects.equals(this.arrivalMidPrice, coinbaseBrokerageProxyTradingApiTradeReportOrder.arrivalMidPrice) &&
        Objects.equals(this.percentIntervalVolume, coinbaseBrokerageProxyTradingApiTradeReportOrder.percentIntervalVolume) &&
        Objects.equals(this.percentDailyVolume, coinbaseBrokerageProxyTradingApiTradeReportOrder.percentDailyVolume) &&
        Objects.equals(this.intervalVolatility, coinbaseBrokerageProxyTradingApiTradeReportOrder.intervalVolatility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(order, arrivalBestBidPrice, arrivalBestAskPrice, intervalVwap, intervalUnweightedAvgPrice, intervalAvgSpread, arrivalMidPrice, percentIntervalVolume, percentDailyVolume, intervalVolatility);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoinbaseBrokerageProxyTradingApiTradeReportOrder {\n");
    
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    arrivalBestBidPrice: ").append(toIndentedString(arrivalBestBidPrice)).append("\n");
    sb.append("    arrivalBestAskPrice: ").append(toIndentedString(arrivalBestAskPrice)).append("\n");
    sb.append("    intervalVwap: ").append(toIndentedString(intervalVwap)).append("\n");
    sb.append("    intervalUnweightedAvgPrice: ").append(toIndentedString(intervalUnweightedAvgPrice)).append("\n");
    sb.append("    intervalAvgSpread: ").append(toIndentedString(intervalAvgSpread)).append("\n");
    sb.append("    arrivalMidPrice: ").append(toIndentedString(arrivalMidPrice)).append("\n");
    sb.append("    percentIntervalVolume: ").append(toIndentedString(percentIntervalVolume)).append("\n");
    sb.append("    percentDailyVolume: ").append(toIndentedString(percentDailyVolume)).append("\n");
    sb.append("    intervalVolatility: ").append(toIndentedString(intervalVolatility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

