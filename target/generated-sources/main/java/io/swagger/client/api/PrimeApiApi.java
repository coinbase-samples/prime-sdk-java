/*
 * Coinbase Prime REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CoinbaseBrokerageProxyCommonOrder;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiCandles;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiGetTradeReportOrderDetailsAndGraphDataResponse;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiGetTradeReportOrderFillsResponse;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiGetTradeReportVenueFillsResponse;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiProductStats;
import io.swagger.client.model.CoinbaseBrokerageProxyTradingApiTradeReportOrder;
import io.swagger.client.model.CoinbaseCustodyApiActivity;
import io.swagger.client.model.CoinbaseCustodyApiCreateVideoUploadRequest;
import io.swagger.client.model.CoinbaseCustodyApiCurrency;
import io.swagger.client.model.CoinbaseCustodyApiDismissNotificationRequest;
import io.swagger.client.model.CoinbaseCustodyApiDismissNotificationResponse;
import io.swagger.client.model.CoinbaseCustodyApiFinishVideoUploadRequest;
import io.swagger.client.model.CoinbaseCustodyApiGetBalanceResponse;
import io.swagger.client.model.CoinbaseCustodyApiGetNotificationsResponse;
import io.swagger.client.model.CoinbaseCustodyApiGetStakeTimeEstimationResponse;
import io.swagger.client.model.CoinbaseCustodyApiGetStakingActivityDetailsResponse;
import io.swagger.client.model.CoinbaseCustodyApiGetUnstakeTimeEstimationResponse;
import io.swagger.client.model.CoinbaseCustodyApiGetVideoUploadPermissionsResponse;
import io.swagger.client.model.CoinbaseCustodyApiGetVotingWeightsResponse;
import io.swagger.client.model.CoinbaseCustodyApiGovernanceTopic;
import io.swagger.client.model.CoinbaseCustodyApiInvoice;
import io.swagger.client.model.CoinbaseCustodyApiListVideoUploadsResponse;
import io.swagger.client.model.CoinbaseCustodyApiSettings;
import io.swagger.client.model.CoinbaseCustodyApiStakingValidator;
import io.swagger.client.model.CoinbaseCustodyApiVideoUpload;
import io.swagger.client.model.CoinbaseCustodyApiWalletRewardsStatus;
import io.swagger.client.model.CoinbaseCustodyApiWalletStakingStatus;
import io.swagger.client.model.CoinbaseEngPrimeApiApiAcceptInvitationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiAcceptInvitationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiActivateAPIKeyRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiActivateAPIKeyRequestV2;
import io.swagger.client.model.CoinbaseEngPrimeApiApiActivateAPIKeyResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiActivityConsensusAuditResult;
import io.swagger.client.model.CoinbaseEngPrimeApiApiAddressBookResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiBulkUserRolesUpdateRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiBulkUserRolesUpdateResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCancelTransactionRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCancelTransactionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiConfig;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateAPIKeyRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateAPIKeyRequestV2;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateAPIKeyResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateInvitationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateOrderFillsDocumentRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateOrderFillsDocumentResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateTestTransactionRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateTestTransactionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateTransactionRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateTransactionV2Request;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateWalletRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateWalletResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateWalletV2Request;
import io.swagger.client.model.CoinbaseEngPrimeApiApiCreateWeb3ActionRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiDeactivateAPIKeyRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiDeactivateAPIKeyRequestV2;
import io.swagger.client.model.CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiDeleteAddressBookEntryResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiDeletePaymentMethodRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiDeletePaymentMethodResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiDownloadActivityReportResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGenerateDALReportResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGenerateFinancingReportResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGenerateReportingCenterDocumentResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGenerateStatementResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGenerateWeb3ReportResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetAPIKeyCountResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetAPIKeyResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetActivityFiltersResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetAllocationByOrderResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetAllocationLegResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetAllocationsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetBalancesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetBillingEmailListResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetBillingPreferenceResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetConversionSummariesV2Response;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetCounterpartyResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetCurrenciesInfoResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetDepositInstructionsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetDeviceGroupResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetDocumentDownloadLinksResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetDocumentResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetDocumentSignatureStatusResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetEvaluationResultResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetExchangeRateResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetFidoRegistrationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetFinancingProductPermisionsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetGovernanceStatusResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetGovernanceTopicsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetGovernanceVotesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetIVPortfolioBalancesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetIVRestrictionsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetIntrospectResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetInvestmentVehiclePortfoliosResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetInvestmentVehicleResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetInvitationsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetInvoiceDownloadLinkResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetInvoicesRemainingBalanceResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetIvDomicileCategoryRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetIvDomicileCategoryResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetLatestTestTransactionRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetLatestTestTransactionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetOrganizationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPendingConsensusResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPortfolioActivitiesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPortfolioCommissionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPostTradeCreditResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPreferenceResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPrimeActivitiesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPrimeActivityDetailsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2Response;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetPrimeActivityFiltersResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetRateCardResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetReportingCenterDownloadLinkResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetReportingCenterFiltersResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetReverseAllocationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetSignedDocumentResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetStablecoinRewardsEarningsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetStablecoinRewardsEnrollmentResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetStatementResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetTeamMemberDetailResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetTeamMembersResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetTransferMethodsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetUserEntityLevelPermissionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetUserHierarchyResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetUserInAppNotificationsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetUserInfoResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetUserPortfoliosResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetUserPreferencesForChannelResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetUserRolesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetVehicleBillingPermissionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetWalletAssetSettingsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetWalletDefiBalancesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetWalletResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiGetWalletVestingStatusResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiInitiateTransactionSigningRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiInitiateTransactionSigningResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiInvoice;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListAPIKeysResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListActiveValidatorsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListBulkPoliciesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListDeviceGroupsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListPaymentMethodsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListPortfolioConciseUsersResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListPortfolioUsersResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListReportingCenterDataResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListSignerIdsForActivityResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListTradingWalletCryptoDepositAddressesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListUserInvitationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListWalletTokensResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListWalletsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListWalletsV2Response;
import io.swagger.client.model.CoinbaseEngPrimeApiApiListWeb3SecurityKeysResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiLlcRolloutResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiNewConsensusActivityResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiOrderPreviewResponseBody;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPortfolio;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostAddressBookEntryRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostAddressBookEntryResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostAllocationPreviewRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostAllocationPreviewResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostAllocationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostAllocationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostApprovePortfolioActivityRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostApprovePortfolioActivityResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostApproveVehicleActivityRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostApproveVehicleActivityResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostBulkActionActivitiesRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostBulkActionActivitiesResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostBulkActionSettingsRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostBulkActionSettingsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostBulkUserInvitationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostBulkUserInvitationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostCancelOrderRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostCancelOrderResponseBody;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostDelegationAccountResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostDocumentSignatureRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostDocumentSignatureResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostEntitySettingsRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostEntitySettingsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostFidoChallengeCreateResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostFidoChallengeRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostFidoChallengeResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostFidoRegistrationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostFidoRegistrationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostGovernanceStatusRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostGovernanceStatusResponseBody;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostGovernanceVoteRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostGovernanceVoteResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostNetAllocationPreviewRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostOrderPreviewRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostOrderRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostOrderResponseBody;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostPortfolioSettingsRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostPortfolioSettingsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostPreviewUserChangeRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostPreviewUserChangeResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostPushNotificationDeviceDeregistrationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostPushNotificationDeviceRegistrationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostRejectPortfolioActivityRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostRejectPortfolioActivityResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostRejectVehicleActivityRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostRejectVehicleActivityResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostReverseAllocationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUpdateBillingAddressRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUpdateBillingAddressResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUpdateBillingEmailListRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUpdateBillingEmailListResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUpdateBillingPreferenceRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUserInAppNotificationStatusesRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUserPreferencesRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPostUserUpdateRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPreviewTransactionRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiPreviewTransactionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiProducts;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSignalWeb3ActionRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSignalWeb3ActionResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSpotPrice;
import io.swagger.client.model.CoinbaseEngPrimeApiApiSystemStatusResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateWalletNameRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateWalletNameResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateWeb3DeviceRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpdateWeb3DeviceResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpsertPolicyChangeRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUpsertPolicyChangeResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiUserPreferences;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateAddressRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateAddressResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateCounterpartyRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateCounterpartyResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateWeb3AuthorizationRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateWeb3AuthorizationResponse;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyRequest;
import io.swagger.client.model.CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyResponse;
import io.swagger.client.model.CoinbaseEngPrimeFeesApiGetFeeInfoResponse;
import io.swagger.client.model.CoinbaseEngPrimeReportingApiDocument;
import io.swagger.client.model.CoinbaseEngPrimeReportingApiStatement;
import io.swagger.client.model.CoinbaseFinancingGetAllLocatesByPortfolioResponse;
import io.swagger.client.model.CoinbaseFinancingGetConversionSummariesV2Response;
import io.swagger.client.model.CoinbaseFinancingGetCurrentLocatesResponse;
import io.swagger.client.model.CoinbaseFinancingGetDalCollateralSnapshotsResponse;
import io.swagger.client.model.CoinbaseFinancingGetLocateAssetsResponse;
import io.swagger.client.model.CoinbaseFinancingPortfolioOverviewResponse;
import io.swagger.client.model.CoinbaseFinancingSubmitDALRecallRequest;
import io.swagger.client.model.CoinbaseFinancingSubmitDALRecallResponse;
import io.swagger.client.model.CoinbaseFinancingSubmitLocatesRequest;
import io.swagger.client.model.CoinbaseFinancingSubmitLocatesResponse;
import io.swagger.client.model.CoinbaseFinancingSubmitMultipleLocatesRequest;
import io.swagger.client.model.CoinbaseFinancingSubmitMultipleLocatesResponse;
import io.swagger.client.model.EngPrimeBillingApiGetAUCFeeTiersResponse;
import io.swagger.client.model.EngPrimePolicyApiListPoliciesResponse;
import io.swagger.client.model.GrpcGatewayRuntimeError;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.StreamResultOfCoinbaseBrokerageProxyTradingApiGetCandlesStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseBrokerageProxyTradingApiGetDepthStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseBrokerageProxyTradingApiGetLadderStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseBrokerageProxyTradingApiGetMarketTradesStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseBrokerageProxyTradingApiGetOrderSimulationResponse;
import io.swagger.client.model.StreamResultOfCoinbaseBrokerageProxyTradingApiGetProductStatsStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseBrokerageProxyTradingApiOrderStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivitiesStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivityStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivitiesStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2StreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetProductsStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetUserInAppNotificationsStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetVehicleCurrenciesStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiGetVehicleSpotPricesStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingProductStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiVehicleFinancingStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponse;
import io.swagger.client.model.StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponseV2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrimeApiApi {
    private ApiClient apiClient;

    public PrimeApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrimeApiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for primeAPIBulkUserRolesUpdate
     * @param userId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIBulkUserRolesUpdateCall(String userId, CoinbaseEngPrimeApiApiBulkUserRolesUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/users/{user_id}/roles/update"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIBulkUserRolesUpdateValidateBeforeCall(String userId, CoinbaseEngPrimeApiApiBulkUserRolesUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIBulkUserRolesUpdate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIBulkUserRolesUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIBulkUserRolesUpdateCall(userId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiBulkUserRolesUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiBulkUserRolesUpdateResponse primeAPIBulkUserRolesUpdate(String userId, CoinbaseEngPrimeApiApiBulkUserRolesUpdateRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiBulkUserRolesUpdateResponse> resp = primeAPIBulkUserRolesUpdateWithHttpInfo(userId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiBulkUserRolesUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiBulkUserRolesUpdateResponse> primeAPIBulkUserRolesUpdateWithHttpInfo(String userId, CoinbaseEngPrimeApiApiBulkUserRolesUpdateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIBulkUserRolesUpdateValidateBeforeCall(userId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiBulkUserRolesUpdateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIBulkUserRolesUpdateAsync(String userId, CoinbaseEngPrimeApiApiBulkUserRolesUpdateRequest body, final ApiCallback<CoinbaseEngPrimeApiApiBulkUserRolesUpdateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIBulkUserRolesUpdateValidateBeforeCall(userId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiBulkUserRolesUpdateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPICancelTransaction
     * @param portfolioId Portfolio id of the transaction (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPICancelTransactionCall(String portfolioId, CoinbaseEngPrimeApiApiCancelTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/transactions/cancel"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPICancelTransactionValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiCancelTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPICancelTransaction(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPICancelTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPICancelTransactionCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId Portfolio id of the transaction (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiCancelTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiCancelTransactionResponse primeAPICancelTransaction(String portfolioId, CoinbaseEngPrimeApiApiCancelTransactionRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiCancelTransactionResponse> resp = primeAPICancelTransactionWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId Portfolio id of the transaction (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiCancelTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiCancelTransactionResponse> primeAPICancelTransactionWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiCancelTransactionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPICancelTransactionValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiCancelTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId Portfolio id of the transaction (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPICancelTransactionAsync(String portfolioId, CoinbaseEngPrimeApiApiCancelTransactionRequest body, final ApiCallback<CoinbaseEngPrimeApiApiCancelTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPICancelTransactionValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiCancelTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPICreateOrUpdatePreference
     * @param vehicleId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateOrUpdatePreferenceCall(String vehicleId, CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/preferences"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPICreateOrUpdatePreferenceValidateBeforeCall(String vehicleId, CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPICreateOrUpdatePreference(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPICreateOrUpdatePreference(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPICreateOrUpdatePreferenceCall(vehicleId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceResponse primeAPICreateOrUpdatePreference(String vehicleId, CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceResponse> resp = primeAPICreateOrUpdatePreferenceWithHttpInfo(vehicleId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceResponse> primeAPICreateOrUpdatePreferenceWithHttpInfo(String vehicleId, CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPICreateOrUpdatePreferenceValidateBeforeCall(vehicleId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateOrUpdatePreferenceAsync(String vehicleId, CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceRequest body, final ApiCallback<CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPICreateOrUpdatePreferenceValidateBeforeCall(vehicleId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiCreateOrUpdatePreferenceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPICreateOrderFillsDocument
     * @param portfolioId  (required)
     * @param orderId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateOrderFillsDocumentCall(String portfolioId, String orderId, CoinbaseEngPrimeApiApiCreateOrderFillsDocumentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/orders/{order_id}/documents"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPICreateOrderFillsDocumentValidateBeforeCall(String portfolioId, String orderId, CoinbaseEngPrimeApiApiCreateOrderFillsDocumentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPICreateOrderFillsDocument(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling primeAPICreateOrderFillsDocument(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPICreateOrderFillsDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPICreateOrderFillsDocumentCall(portfolioId, orderId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param orderId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiCreateOrderFillsDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiCreateOrderFillsDocumentResponse primeAPICreateOrderFillsDocument(String portfolioId, String orderId, CoinbaseEngPrimeApiApiCreateOrderFillsDocumentRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiCreateOrderFillsDocumentResponse> resp = primeAPICreateOrderFillsDocumentWithHttpInfo(portfolioId, orderId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param orderId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiCreateOrderFillsDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiCreateOrderFillsDocumentResponse> primeAPICreateOrderFillsDocumentWithHttpInfo(String portfolioId, String orderId, CoinbaseEngPrimeApiApiCreateOrderFillsDocumentRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPICreateOrderFillsDocumentValidateBeforeCall(portfolioId, orderId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiCreateOrderFillsDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param orderId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateOrderFillsDocumentAsync(String portfolioId, String orderId, CoinbaseEngPrimeApiApiCreateOrderFillsDocumentRequest body, final ApiCallback<CoinbaseEngPrimeApiApiCreateOrderFillsDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPICreateOrderFillsDocumentValidateBeforeCall(portfolioId, orderId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiCreateOrderFillsDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPICreateTestTransaction
     * @param portfolioId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateTestTransactionCall(String portfolioId, CoinbaseEngPrimeApiApiCreateTestTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/test_transaction"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPICreateTestTransactionValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiCreateTestTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPICreateTestTransaction(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPICreateTestTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPICreateTestTransactionCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiCreateTestTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiCreateTestTransactionResponse primeAPICreateTestTransaction(String portfolioId, CoinbaseEngPrimeApiApiCreateTestTransactionRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiCreateTestTransactionResponse> resp = primeAPICreateTestTransactionWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiCreateTestTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiCreateTestTransactionResponse> primeAPICreateTestTransactionWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiCreateTestTransactionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPICreateTestTransactionValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiCreateTestTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateTestTransactionAsync(String portfolioId, CoinbaseEngPrimeApiApiCreateTestTransactionRequest body, final ApiCallback<CoinbaseEngPrimeApiApiCreateTestTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPICreateTestTransactionValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiCreateTestTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPICreateTransaction
     * @param portfolioId The portfolio you want to transact with (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateTransactionCall(String portfolioId, CoinbaseEngPrimeApiApiCreateTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/transactions"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPICreateTransactionValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiCreateTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPICreateTransaction(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPICreateTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPICreateTransactionCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The portfolio you want to transact with (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiNewConsensusActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiNewConsensusActivityResponse primeAPICreateTransaction(String portfolioId, CoinbaseEngPrimeApiApiCreateTransactionRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> resp = primeAPICreateTransactionWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The portfolio you want to transact with (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiNewConsensusActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> primeAPICreateTransactionWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiCreateTransactionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPICreateTransactionValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiNewConsensusActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The portfolio you want to transact with (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateTransactionAsync(String portfolioId, CoinbaseEngPrimeApiApiCreateTransactionRequest body, final ApiCallback<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPICreateTransactionValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiNewConsensusActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPICreateTransactionV2
     * @param portfolioId The portfolio to perform transaction action with (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateTransactionV2Call(String portfolioId, CoinbaseEngPrimeApiApiCreateTransactionV2Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/portfolios/{portfolio_id}/transactions"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPICreateTransactionV2ValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiCreateTransactionV2Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPICreateTransactionV2(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPICreateTransactionV2(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPICreateTransactionV2Call(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The portfolio to perform transaction action with (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiNewConsensusActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiNewConsensusActivityResponse primeAPICreateTransactionV2(String portfolioId, CoinbaseEngPrimeApiApiCreateTransactionV2Request body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> resp = primeAPICreateTransactionV2WithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The portfolio to perform transaction action with (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiNewConsensusActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> primeAPICreateTransactionV2WithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiCreateTransactionV2Request body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPICreateTransactionV2ValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiNewConsensusActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The portfolio to perform transaction action with (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateTransactionV2Async(String portfolioId, CoinbaseEngPrimeApiApiCreateTransactionV2Request body, final ApiCallback<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPICreateTransactionV2ValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiNewConsensusActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPICreateVideoUpload
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateVideoUploadCall(CoinbaseCustodyApiCreateVideoUploadRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/video_uploads/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPICreateVideoUploadValidateBeforeCall(CoinbaseCustodyApiCreateVideoUploadRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPICreateVideoUpload(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPICreateVideoUploadCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CoinbaseCustodyApiVideoUpload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiVideoUpload primeAPICreateVideoUpload(CoinbaseCustodyApiCreateVideoUploadRequest body) throws ApiException {
        ApiResponse<CoinbaseCustodyApiVideoUpload> resp = primeAPICreateVideoUploadWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseCustodyApiVideoUpload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiVideoUpload> primeAPICreateVideoUploadWithHttpInfo(CoinbaseCustodyApiCreateVideoUploadRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPICreateVideoUploadValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiVideoUpload>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateVideoUploadAsync(CoinbaseCustodyApiCreateVideoUploadRequest body, final ApiCallback<CoinbaseCustodyApiVideoUpload> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPICreateVideoUploadValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiVideoUpload>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPICreateWallet
     * @param portfolioId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateWalletCall(String portfolioId, CoinbaseEngPrimeApiApiCreateWalletRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPICreateWalletValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiCreateWalletRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPICreateWallet(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPICreateWallet(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPICreateWalletCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiCreateWalletResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiCreateWalletResponse primeAPICreateWallet(String portfolioId, CoinbaseEngPrimeApiApiCreateWalletRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiCreateWalletResponse> resp = primeAPICreateWalletWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiCreateWalletResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiCreateWalletResponse> primeAPICreateWalletWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiCreateWalletRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPICreateWalletValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiCreateWalletResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateWalletAsync(String portfolioId, CoinbaseEngPrimeApiApiCreateWalletRequest body, final ApiCallback<CoinbaseEngPrimeApiApiCreateWalletResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPICreateWalletValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiCreateWalletResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPICreateWalletV2
     * @param portfolioId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateWalletV2Call(String portfolioId, CoinbaseEngPrimeApiApiCreateWalletV2Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/portfolios/{portfolio_id}/wallets"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPICreateWalletV2ValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiCreateWalletV2Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPICreateWalletV2(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPICreateWalletV2(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPICreateWalletV2Call(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiNewConsensusActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiNewConsensusActivityResponse primeAPICreateWalletV2(String portfolioId, CoinbaseEngPrimeApiApiCreateWalletV2Request body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> resp = primeAPICreateWalletV2WithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiNewConsensusActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> primeAPICreateWalletV2WithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiCreateWalletV2Request body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPICreateWalletV2ValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiNewConsensusActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateWalletV2Async(String portfolioId, CoinbaseEngPrimeApiApiCreateWalletV2Request body, final ApiCallback<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPICreateWalletV2ValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiNewConsensusActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPICreateWeb3Action
     * @param portfolioId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateWeb3ActionCall(String portfolioId, CoinbaseEngPrimeApiApiCreateWeb3ActionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/portfolios/{portfolio_id}/web3_actions"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPICreateWeb3ActionValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiCreateWeb3ActionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPICreateWeb3Action(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPICreateWeb3Action(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPICreateWeb3ActionCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiNewConsensusActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiNewConsensusActivityResponse primeAPICreateWeb3Action(String portfolioId, CoinbaseEngPrimeApiApiCreateWeb3ActionRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> resp = primeAPICreateWeb3ActionWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiNewConsensusActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> primeAPICreateWeb3ActionWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiCreateWeb3ActionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPICreateWeb3ActionValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiNewConsensusActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPICreateWeb3ActionAsync(String portfolioId, CoinbaseEngPrimeApiApiCreateWeb3ActionRequest body, final ApiCallback<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPICreateWeb3ActionValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiNewConsensusActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIDeleteAddressBookEntry
     * @param portfolioId Portfolio id (required)
     * @param addressEntryId ID of address requested to be removed from the address book (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIDeleteAddressBookEntryCall(String portfolioId, String addressEntryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/addressbook/{address_entry_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "address_entry_id" + "\\}", apiClient.escapeString(addressEntryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIDeleteAddressBookEntryValidateBeforeCall(String portfolioId, String addressEntryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIDeleteAddressBookEntry(Async)");
        }
        
        // verify the required parameter 'addressEntryId' is set
        if (addressEntryId == null) {
            throw new ApiException("Missing the required parameter 'addressEntryId' when calling primeAPIDeleteAddressBookEntry(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIDeleteAddressBookEntryCall(portfolioId, addressEntryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId Portfolio id (required)
     * @param addressEntryId ID of address requested to be removed from the address book (required)
     * @return CoinbaseEngPrimeApiApiDeleteAddressBookEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiDeleteAddressBookEntryResponse primeAPIDeleteAddressBookEntry(String portfolioId, String addressEntryId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiDeleteAddressBookEntryResponse> resp = primeAPIDeleteAddressBookEntryWithHttpInfo(portfolioId, addressEntryId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId Portfolio id (required)
     * @param addressEntryId ID of address requested to be removed from the address book (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiDeleteAddressBookEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiDeleteAddressBookEntryResponse> primeAPIDeleteAddressBookEntryWithHttpInfo(String portfolioId, String addressEntryId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIDeleteAddressBookEntryValidateBeforeCall(portfolioId, addressEntryId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiDeleteAddressBookEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId Portfolio id (required)
     * @param addressEntryId ID of address requested to be removed from the address book (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIDeleteAddressBookEntryAsync(String portfolioId, String addressEntryId, final ApiCallback<CoinbaseEngPrimeApiApiDeleteAddressBookEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIDeleteAddressBookEntryValidateBeforeCall(portfolioId, addressEntryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiDeleteAddressBookEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIDeletePaymentMethod
     * @param vehicleId  (required)
     * @param paymentMethodId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIDeletePaymentMethodCall(String vehicleId, String paymentMethodId, CoinbaseEngPrimeApiApiDeletePaymentMethodRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/payment_methods/{payment_method_id}"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()))
            .replaceAll("\\{" + "payment_method_id" + "\\}", apiClient.escapeString(paymentMethodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIDeletePaymentMethodValidateBeforeCall(String vehicleId, String paymentMethodId, CoinbaseEngPrimeApiApiDeletePaymentMethodRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIDeletePaymentMethod(Async)");
        }
        
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling primeAPIDeletePaymentMethod(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIDeletePaymentMethod(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIDeletePaymentMethodCall(vehicleId, paymentMethodId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param paymentMethodId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiDeletePaymentMethodResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiDeletePaymentMethodResponse primeAPIDeletePaymentMethod(String vehicleId, String paymentMethodId, CoinbaseEngPrimeApiApiDeletePaymentMethodRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiDeletePaymentMethodResponse> resp = primeAPIDeletePaymentMethodWithHttpInfo(vehicleId, paymentMethodId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param paymentMethodId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiDeletePaymentMethodResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiDeletePaymentMethodResponse> primeAPIDeletePaymentMethodWithHttpInfo(String vehicleId, String paymentMethodId, CoinbaseEngPrimeApiApiDeletePaymentMethodRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIDeletePaymentMethodValidateBeforeCall(vehicleId, paymentMethodId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiDeletePaymentMethodResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param paymentMethodId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIDeletePaymentMethodAsync(String vehicleId, String paymentMethodId, CoinbaseEngPrimeApiApiDeletePaymentMethodRequest body, final ApiCallback<CoinbaseEngPrimeApiApiDeletePaymentMethodResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIDeletePaymentMethodValidateBeforeCall(vehicleId, paymentMethodId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiDeletePaymentMethodResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIDismissNotification
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIDismissNotificationCall(CoinbaseCustodyApiDismissNotificationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/notifications/dismiss";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIDismissNotificationValidateBeforeCall(CoinbaseCustodyApiDismissNotificationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIDismissNotification(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIDismissNotificationCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CoinbaseCustodyApiDismissNotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiDismissNotificationResponse primeAPIDismissNotification(CoinbaseCustodyApiDismissNotificationRequest body) throws ApiException {
        ApiResponse<CoinbaseCustodyApiDismissNotificationResponse> resp = primeAPIDismissNotificationWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseCustodyApiDismissNotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiDismissNotificationResponse> primeAPIDismissNotificationWithHttpInfo(CoinbaseCustodyApiDismissNotificationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIDismissNotificationValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiDismissNotificationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIDismissNotificationAsync(CoinbaseCustodyApiDismissNotificationRequest body, final ApiCallback<CoinbaseCustodyApiDismissNotificationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIDismissNotificationValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiDismissNotificationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIDownloadActivityReport
     * @param portfolioId  (required)
     * @param organizationId  (optional)
     * @param categories ActivityCategories to filter by. (optional)
     * @param currencies  (optional)
     * @param types ActivityTypes to filter by.   - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types  - ACTIVITY_TYPE_BLOCK_TRADE: Block trades  - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request  - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types (optional)
     * @param secondaryTypes ActivitySecondaryTypes to filter by.   - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order &amp; Allocation secondary types  - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types  - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types  - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type (optional)
     * @param statuses ActivityStatuses to filter by. (optional)
     * @param startDate Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIDownloadActivityReportCall(String portfolioId, String organizationId, List<String> categories, List<String> currencies, List<String> types, List<String> secondaryTypes, List<String> statuses, String startDate, String endDate, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/activity_report"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (organizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("organization_id", organizationId));
        if (categories != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "categories", categories));
        if (currencies != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "currencies", currencies));
        if (types != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "types", types));
        if (secondaryTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "secondary_types", secondaryTypes));
        if (statuses != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "statuses", statuses));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIDownloadActivityReportValidateBeforeCall(String portfolioId, String organizationId, List<String> categories, List<String> currencies, List<String> types, List<String> secondaryTypes, List<String> statuses, String startDate, String endDate, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIDownloadActivityReport(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIDownloadActivityReportCall(portfolioId, organizationId, categories, currencies, types, secondaryTypes, statuses, startDate, endDate, search, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param organizationId  (optional)
     * @param categories ActivityCategories to filter by. (optional)
     * @param currencies  (optional)
     * @param types ActivityTypes to filter by.   - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types  - ACTIVITY_TYPE_BLOCK_TRADE: Block trades  - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request  - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types (optional)
     * @param secondaryTypes ActivitySecondaryTypes to filter by.   - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order &amp; Allocation secondary types  - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types  - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types  - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type (optional)
     * @param statuses ActivityStatuses to filter by. (optional)
     * @param startDate Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @return CoinbaseEngPrimeApiApiDownloadActivityReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiDownloadActivityReportResponse primeAPIDownloadActivityReport(String portfolioId, String organizationId, List<String> categories, List<String> currencies, List<String> types, List<String> secondaryTypes, List<String> statuses, String startDate, String endDate, String search) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiDownloadActivityReportResponse> resp = primeAPIDownloadActivityReportWithHttpInfo(portfolioId, organizationId, categories, currencies, types, secondaryTypes, statuses, startDate, endDate, search);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param organizationId  (optional)
     * @param categories ActivityCategories to filter by. (optional)
     * @param currencies  (optional)
     * @param types ActivityTypes to filter by.   - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types  - ACTIVITY_TYPE_BLOCK_TRADE: Block trades  - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request  - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types (optional)
     * @param secondaryTypes ActivitySecondaryTypes to filter by.   - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order &amp; Allocation secondary types  - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types  - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types  - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type (optional)
     * @param statuses ActivityStatuses to filter by. (optional)
     * @param startDate Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiDownloadActivityReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiDownloadActivityReportResponse> primeAPIDownloadActivityReportWithHttpInfo(String portfolioId, String organizationId, List<String> categories, List<String> currencies, List<String> types, List<String> secondaryTypes, List<String> statuses, String startDate, String endDate, String search) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIDownloadActivityReportValidateBeforeCall(portfolioId, organizationId, categories, currencies, types, secondaryTypes, statuses, startDate, endDate, search, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiDownloadActivityReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param organizationId  (optional)
     * @param categories ActivityCategories to filter by. (optional)
     * @param currencies  (optional)
     * @param types ActivityTypes to filter by.   - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types  - ACTIVITY_TYPE_BLOCK_TRADE: Block trades  - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request  - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types (optional)
     * @param secondaryTypes ActivitySecondaryTypes to filter by.   - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order &amp; Allocation secondary types  - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types  - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types  - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type (optional)
     * @param statuses ActivityStatuses to filter by. (optional)
     * @param startDate Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIDownloadActivityReportAsync(String portfolioId, String organizationId, List<String> categories, List<String> currencies, List<String> types, List<String> secondaryTypes, List<String> statuses, String startDate, String endDate, String search, final ApiCallback<CoinbaseEngPrimeApiApiDownloadActivityReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIDownloadActivityReportValidateBeforeCall(portfolioId, organizationId, categories, currencies, types, secondaryTypes, statuses, startDate, endDate, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiDownloadActivityReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIEnrollInStablecoinRewards
     * @param vehicleId  (required)
     * @param currency  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIEnrollInStablecoinRewardsCall(String vehicleId, String currency, CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/stablecoin_rewards/{currency}/enroll"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()))
            .replaceAll("\\{" + "currency" + "\\}", apiClient.escapeString(currency.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIEnrollInStablecoinRewardsValidateBeforeCall(String vehicleId, String currency, CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIEnrollInStablecoinRewards(Async)");
        }
        
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling primeAPIEnrollInStablecoinRewards(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIEnrollInStablecoinRewards(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIEnrollInStablecoinRewardsCall(vehicleId, currency, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currency  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsResponse primeAPIEnrollInStablecoinRewards(String vehicleId, String currency, CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsResponse> resp = primeAPIEnrollInStablecoinRewardsWithHttpInfo(vehicleId, currency, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currency  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsResponse> primeAPIEnrollInStablecoinRewardsWithHttpInfo(String vehicleId, String currency, CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIEnrollInStablecoinRewardsValidateBeforeCall(vehicleId, currency, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param currency  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIEnrollInStablecoinRewardsAsync(String vehicleId, String currency, CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsRequest body, final ApiCallback<CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIEnrollInStablecoinRewardsValidateBeforeCall(vehicleId, currency, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiEnrollInStablecoinRewardsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIFetchInviteeAccessByEmail
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIFetchInviteeAccessByEmailCall(CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/users/invitee_access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIFetchInviteeAccessByEmailValidateBeforeCall(CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIFetchInviteeAccessByEmail(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIFetchInviteeAccessByEmailCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailResponse primeAPIFetchInviteeAccessByEmail(CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailResponse> resp = primeAPIFetchInviteeAccessByEmailWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailResponse> primeAPIFetchInviteeAccessByEmailWithHttpInfo(CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIFetchInviteeAccessByEmailValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIFetchInviteeAccessByEmailAsync(CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailRequest body, final ApiCallback<CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIFetchInviteeAccessByEmailValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiFetchInviteeAccessByEmailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIFinishVideoUpload
     * @param uploadId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIFinishVideoUploadCall(String uploadId, CoinbaseCustodyApiFinishVideoUploadRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/video_uploads/{upload_id}/finish"
            .replaceAll("\\{" + "upload_id" + "\\}", apiClient.escapeString(uploadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIFinishVideoUploadValidateBeforeCall(String uploadId, CoinbaseCustodyApiFinishVideoUploadRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uploadId' is set
        if (uploadId == null) {
            throw new ApiException("Missing the required parameter 'uploadId' when calling primeAPIFinishVideoUpload(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIFinishVideoUpload(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIFinishVideoUploadCall(uploadId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param uploadId  (required)
     * @param body  (required)
     * @return CoinbaseCustodyApiVideoUpload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiVideoUpload primeAPIFinishVideoUpload(String uploadId, CoinbaseCustodyApiFinishVideoUploadRequest body) throws ApiException {
        ApiResponse<CoinbaseCustodyApiVideoUpload> resp = primeAPIFinishVideoUploadWithHttpInfo(uploadId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param uploadId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseCustodyApiVideoUpload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiVideoUpload> primeAPIFinishVideoUploadWithHttpInfo(String uploadId, CoinbaseCustodyApiFinishVideoUploadRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIFinishVideoUploadValidateBeforeCall(uploadId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiVideoUpload>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uploadId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIFinishVideoUploadAsync(String uploadId, CoinbaseCustodyApiFinishVideoUploadRequest body, final ApiCallback<CoinbaseCustodyApiVideoUpload> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIFinishVideoUploadValidateBeforeCall(uploadId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiVideoUpload>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGenerateDALReport
     * @param vehicleId  (required)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGenerateDALReportCall(String vehicleId, String dateStart, String dateEnd, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/reporting_center/{vehicle_id}/generate/dal"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dateStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date_start", dateStart));
        if (dateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date_end", dateEnd));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGenerateDALReportValidateBeforeCall(String vehicleId, String dateStart, String dateEnd, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGenerateDALReport(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGenerateDALReportCall(vehicleId, dateStart, dateEnd, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @return CoinbaseEngPrimeApiApiGenerateDALReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGenerateDALReportResponse primeAPIGenerateDALReport(String vehicleId, String dateStart, String dateEnd) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGenerateDALReportResponse> resp = primeAPIGenerateDALReportWithHttpInfo(vehicleId, dateStart, dateEnd);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGenerateDALReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGenerateDALReportResponse> primeAPIGenerateDALReportWithHttpInfo(String vehicleId, String dateStart, String dateEnd) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGenerateDALReportValidateBeforeCall(vehicleId, dateStart, dateEnd, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGenerateDALReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGenerateDALReportAsync(String vehicleId, String dateStart, String dateEnd, final ApiCallback<CoinbaseEngPrimeApiApiGenerateDALReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGenerateDALReportValidateBeforeCall(vehicleId, dateStart, dateEnd, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGenerateDALReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGenerateFinancingReport
     * @param vehicleId  (required)
     * @param startUnix  (optional)
     * @param endUnix  (optional)
     * @param portfolioIds  (optional)
     * @param reportTypes  - REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_SHORT_ACCRUALS: Financing portfolio margin report types  - REPORT_TYPE_FINANCING_TRADE_FINANCE_ACCRUALS: Financing trade finance report types  - REPORT_TYPE_FINANCING_DIGITAL_AGENCY_LENDING_ACCRUALS: Financing digital agency lending report types  - REPORT_TYPE_FINANCING_BILATERAL_LENDING_ACCRUALS: Financing bilateral lending report types  - REPORT_TYPE_STAKING: Staking report type  - REPORT_TYPE_WEB3_TRANSACTIONS_CSV: Web3 report type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGenerateFinancingReportCall(String vehicleId, String startUnix, String endUnix, List<String> portfolioIds, List<String> reportTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/reporting_center/{vehicle_id}/generate/financing"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startUnix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_unix", startUnix));
        if (endUnix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_unix", endUnix));
        if (portfolioIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "portfolio_ids", portfolioIds));
        if (reportTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "report_types", reportTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGenerateFinancingReportValidateBeforeCall(String vehicleId, String startUnix, String endUnix, List<String> portfolioIds, List<String> reportTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGenerateFinancingReport(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGenerateFinancingReportCall(vehicleId, startUnix, endUnix, portfolioIds, reportTypes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param startUnix  (optional)
     * @param endUnix  (optional)
     * @param portfolioIds  (optional)
     * @param reportTypes  - REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_SHORT_ACCRUALS: Financing portfolio margin report types  - REPORT_TYPE_FINANCING_TRADE_FINANCE_ACCRUALS: Financing trade finance report types  - REPORT_TYPE_FINANCING_DIGITAL_AGENCY_LENDING_ACCRUALS: Financing digital agency lending report types  - REPORT_TYPE_FINANCING_BILATERAL_LENDING_ACCRUALS: Financing bilateral lending report types  - REPORT_TYPE_STAKING: Staking report type  - REPORT_TYPE_WEB3_TRANSACTIONS_CSV: Web3 report type (optional)
     * @return CoinbaseEngPrimeApiApiGenerateFinancingReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGenerateFinancingReportResponse primeAPIGenerateFinancingReport(String vehicleId, String startUnix, String endUnix, List<String> portfolioIds, List<String> reportTypes) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGenerateFinancingReportResponse> resp = primeAPIGenerateFinancingReportWithHttpInfo(vehicleId, startUnix, endUnix, portfolioIds, reportTypes);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param startUnix  (optional)
     * @param endUnix  (optional)
     * @param portfolioIds  (optional)
     * @param reportTypes  - REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_SHORT_ACCRUALS: Financing portfolio margin report types  - REPORT_TYPE_FINANCING_TRADE_FINANCE_ACCRUALS: Financing trade finance report types  - REPORT_TYPE_FINANCING_DIGITAL_AGENCY_LENDING_ACCRUALS: Financing digital agency lending report types  - REPORT_TYPE_FINANCING_BILATERAL_LENDING_ACCRUALS: Financing bilateral lending report types  - REPORT_TYPE_STAKING: Staking report type  - REPORT_TYPE_WEB3_TRANSACTIONS_CSV: Web3 report type (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGenerateFinancingReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGenerateFinancingReportResponse> primeAPIGenerateFinancingReportWithHttpInfo(String vehicleId, String startUnix, String endUnix, List<String> portfolioIds, List<String> reportTypes) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGenerateFinancingReportValidateBeforeCall(vehicleId, startUnix, endUnix, portfolioIds, reportTypes, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGenerateFinancingReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param startUnix  (optional)
     * @param endUnix  (optional)
     * @param portfolioIds  (optional)
     * @param reportTypes  - REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_SHORT_ACCRUALS: Financing portfolio margin report types  - REPORT_TYPE_FINANCING_TRADE_FINANCE_ACCRUALS: Financing trade finance report types  - REPORT_TYPE_FINANCING_DIGITAL_AGENCY_LENDING_ACCRUALS: Financing digital agency lending report types  - REPORT_TYPE_FINANCING_BILATERAL_LENDING_ACCRUALS: Financing bilateral lending report types  - REPORT_TYPE_STAKING: Staking report type  - REPORT_TYPE_WEB3_TRANSACTIONS_CSV: Web3 report type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGenerateFinancingReportAsync(String vehicleId, String startUnix, String endUnix, List<String> portfolioIds, List<String> reportTypes, final ApiCallback<CoinbaseEngPrimeApiApiGenerateFinancingReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGenerateFinancingReportValidateBeforeCall(vehicleId, startUnix, endUnix, portfolioIds, reportTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGenerateFinancingReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGenerateReportingCenterDocument
     * @param reportType  (optional, default to GENERATE_REPORT_TYPE_UNSPECIFIED)
     * @param stakingReportGenerationArgsPortfolioId  (optional)
     * @param stakingReportGenerationArgsStartUnix  (optional)
     * @param stakingReportGenerationArgsEndUnix  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGenerateReportingCenterDocumentCall(String reportType, String stakingReportGenerationArgsPortfolioId, String stakingReportGenerationArgsStartUnix, String stakingReportGenerationArgsEndUnix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/reporting_center/document/generate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reportType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("report_type", reportType));
        if (stakingReportGenerationArgsPortfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("staking_report_generation_args.portfolio_id", stakingReportGenerationArgsPortfolioId));
        if (stakingReportGenerationArgsStartUnix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("staking_report_generation_args.start_unix", stakingReportGenerationArgsStartUnix));
        if (stakingReportGenerationArgsEndUnix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("staking_report_generation_args.end_unix", stakingReportGenerationArgsEndUnix));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGenerateReportingCenterDocumentValidateBeforeCall(String reportType, String stakingReportGenerationArgsPortfolioId, String stakingReportGenerationArgsStartUnix, String stakingReportGenerationArgsEndUnix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = primeAPIGenerateReportingCenterDocumentCall(reportType, stakingReportGenerationArgsPortfolioId, stakingReportGenerationArgsStartUnix, stakingReportGenerationArgsEndUnix, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param reportType  (optional, default to GENERATE_REPORT_TYPE_UNSPECIFIED)
     * @param stakingReportGenerationArgsPortfolioId  (optional)
     * @param stakingReportGenerationArgsStartUnix  (optional)
     * @param stakingReportGenerationArgsEndUnix  (optional)
     * @return CoinbaseEngPrimeApiApiGenerateReportingCenterDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGenerateReportingCenterDocumentResponse primeAPIGenerateReportingCenterDocument(String reportType, String stakingReportGenerationArgsPortfolioId, String stakingReportGenerationArgsStartUnix, String stakingReportGenerationArgsEndUnix) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGenerateReportingCenterDocumentResponse> resp = primeAPIGenerateReportingCenterDocumentWithHttpInfo(reportType, stakingReportGenerationArgsPortfolioId, stakingReportGenerationArgsStartUnix, stakingReportGenerationArgsEndUnix);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param reportType  (optional, default to GENERATE_REPORT_TYPE_UNSPECIFIED)
     * @param stakingReportGenerationArgsPortfolioId  (optional)
     * @param stakingReportGenerationArgsStartUnix  (optional)
     * @param stakingReportGenerationArgsEndUnix  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGenerateReportingCenterDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGenerateReportingCenterDocumentResponse> primeAPIGenerateReportingCenterDocumentWithHttpInfo(String reportType, String stakingReportGenerationArgsPortfolioId, String stakingReportGenerationArgsStartUnix, String stakingReportGenerationArgsEndUnix) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGenerateReportingCenterDocumentValidateBeforeCall(reportType, stakingReportGenerationArgsPortfolioId, stakingReportGenerationArgsStartUnix, stakingReportGenerationArgsEndUnix, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGenerateReportingCenterDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param reportType  (optional, default to GENERATE_REPORT_TYPE_UNSPECIFIED)
     * @param stakingReportGenerationArgsPortfolioId  (optional)
     * @param stakingReportGenerationArgsStartUnix  (optional)
     * @param stakingReportGenerationArgsEndUnix  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGenerateReportingCenterDocumentAsync(String reportType, String stakingReportGenerationArgsPortfolioId, String stakingReportGenerationArgsStartUnix, String stakingReportGenerationArgsEndUnix, final ApiCallback<CoinbaseEngPrimeApiApiGenerateReportingCenterDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGenerateReportingCenterDocumentValidateBeforeCall(reportType, stakingReportGenerationArgsPortfolioId, stakingReportGenerationArgsStartUnix, stakingReportGenerationArgsEndUnix, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGenerateReportingCenterDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGenerateStatement
     * @param vehicleId  (required)
     * @param portfolioId  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param startDateRfc3339  (optional)
     * @param endDateRfc3339  (optional)
     * @param portfolioIds  (optional)
     * @param statementType  - STATEMENT_TYPE_CUSTODY_EOM: This type correspond to portfolio level statement  - STATEMENT_TYPE_PRIME_ENTITY_LEVEL: This type correspond to entity level statement (optional, default to STATEMENT_TYPE_UNKNOWN)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGenerateStatementCall(String vehicleId, String portfolioId, String startDate, String endDate, String startDateRfc3339, String endDateRfc3339, List<String> portfolioIds, String statementType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/range_statement"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (startDateRfc3339 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date_rfc3339", startDateRfc3339));
        if (endDateRfc3339 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date_rfc3339", endDateRfc3339));
        if (portfolioIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "portfolio_ids", portfolioIds));
        if (statementType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("statement_type", statementType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGenerateStatementValidateBeforeCall(String vehicleId, String portfolioId, String startDate, String endDate, String startDateRfc3339, String endDateRfc3339, List<String> portfolioIds, String statementType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGenerateStatement(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGenerateStatementCall(vehicleId, portfolioId, startDate, endDate, startDateRfc3339, endDateRfc3339, portfolioIds, statementType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param portfolioId  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param startDateRfc3339  (optional)
     * @param endDateRfc3339  (optional)
     * @param portfolioIds  (optional)
     * @param statementType  - STATEMENT_TYPE_CUSTODY_EOM: This type correspond to portfolio level statement  - STATEMENT_TYPE_PRIME_ENTITY_LEVEL: This type correspond to entity level statement (optional, default to STATEMENT_TYPE_UNKNOWN)
     * @return CoinbaseEngPrimeApiApiGenerateStatementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGenerateStatementResponse primeAPIGenerateStatement(String vehicleId, String portfolioId, String startDate, String endDate, String startDateRfc3339, String endDateRfc3339, List<String> portfolioIds, String statementType) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGenerateStatementResponse> resp = primeAPIGenerateStatementWithHttpInfo(vehicleId, portfolioId, startDate, endDate, startDateRfc3339, endDateRfc3339, portfolioIds, statementType);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param portfolioId  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param startDateRfc3339  (optional)
     * @param endDateRfc3339  (optional)
     * @param portfolioIds  (optional)
     * @param statementType  - STATEMENT_TYPE_CUSTODY_EOM: This type correspond to portfolio level statement  - STATEMENT_TYPE_PRIME_ENTITY_LEVEL: This type correspond to entity level statement (optional, default to STATEMENT_TYPE_UNKNOWN)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGenerateStatementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGenerateStatementResponse> primeAPIGenerateStatementWithHttpInfo(String vehicleId, String portfolioId, String startDate, String endDate, String startDateRfc3339, String endDateRfc3339, List<String> portfolioIds, String statementType) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGenerateStatementValidateBeforeCall(vehicleId, portfolioId, startDate, endDate, startDateRfc3339, endDateRfc3339, portfolioIds, statementType, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGenerateStatementResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param portfolioId  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param startDateRfc3339  (optional)
     * @param endDateRfc3339  (optional)
     * @param portfolioIds  (optional)
     * @param statementType  - STATEMENT_TYPE_CUSTODY_EOM: This type correspond to portfolio level statement  - STATEMENT_TYPE_PRIME_ENTITY_LEVEL: This type correspond to entity level statement (optional, default to STATEMENT_TYPE_UNKNOWN)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGenerateStatementAsync(String vehicleId, String portfolioId, String startDate, String endDate, String startDateRfc3339, String endDateRfc3339, List<String> portfolioIds, String statementType, final ApiCallback<CoinbaseEngPrimeApiApiGenerateStatementResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGenerateStatementValidateBeforeCall(vehicleId, portfolioId, startDate, endDate, startDateRfc3339, endDateRfc3339, portfolioIds, statementType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGenerateStatementResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGenerateWeb3Report
     * @param portfolioId  (required)
     * @param startUnix  (optional)
     * @param endUnix  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGenerateWeb3ReportCall(String portfolioId, String startUnix, String endUnix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/reporting_center/{portfolio_id}/generate/web3"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startUnix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_unix", startUnix));
        if (endUnix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_unix", endUnix));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGenerateWeb3ReportValidateBeforeCall(String portfolioId, String startUnix, String endUnix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGenerateWeb3Report(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGenerateWeb3ReportCall(portfolioId, startUnix, endUnix, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param startUnix  (optional)
     * @param endUnix  (optional)
     * @return CoinbaseEngPrimeApiApiGenerateWeb3ReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGenerateWeb3ReportResponse primeAPIGenerateWeb3Report(String portfolioId, String startUnix, String endUnix) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGenerateWeb3ReportResponse> resp = primeAPIGenerateWeb3ReportWithHttpInfo(portfolioId, startUnix, endUnix);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param startUnix  (optional)
     * @param endUnix  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGenerateWeb3ReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGenerateWeb3ReportResponse> primeAPIGenerateWeb3ReportWithHttpInfo(String portfolioId, String startUnix, String endUnix) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGenerateWeb3ReportValidateBeforeCall(portfolioId, startUnix, endUnix, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGenerateWeb3ReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param startUnix  (optional)
     * @param endUnix  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGenerateWeb3ReportAsync(String portfolioId, String startUnix, String endUnix, final ApiCallback<CoinbaseEngPrimeApiApiGenerateWeb3ReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGenerateWeb3ReportValidateBeforeCall(portfolioId, startUnix, endUnix, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGenerateWeb3ReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetAPIKey
     * @param portfolioId  (required)
     * @param accessKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAPIKeyCall(String portfolioId, String accessKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/api-key/{access_key}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "access_key" + "\\}", apiClient.escapeString(accessKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetAPIKeyValidateBeforeCall(String portfolioId, String accessKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetAPIKey(Async)");
        }
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling primeAPIGetAPIKey(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetAPIKeyCall(portfolioId, accessKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param accessKey  (required)
     * @return CoinbaseEngPrimeApiApiGetAPIKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetAPIKeyResponse primeAPIGetAPIKey(String portfolioId, String accessKey) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetAPIKeyResponse> resp = primeAPIGetAPIKeyWithHttpInfo(portfolioId, accessKey);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param accessKey  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetAPIKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetAPIKeyResponse> primeAPIGetAPIKeyWithHttpInfo(String portfolioId, String accessKey) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetAPIKeyValidateBeforeCall(portfolioId, accessKey, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetAPIKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param accessKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAPIKeyAsync(String portfolioId, String accessKey, final ApiCallback<CoinbaseEngPrimeApiApiGetAPIKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetAPIKeyValidateBeforeCall(portfolioId, accessKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetAPIKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetAPIKeyCount
     * @param portfolioId  (required)
     * @param createdByUserId  (optional)
     * @param states  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAPIKeyCountCall(String portfolioId, String createdByUserId, List<String> states, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/api-key-count"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (createdByUserId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created_by_user_id", createdByUserId));
        if (states != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "states", states));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetAPIKeyCountValidateBeforeCall(String portfolioId, String createdByUserId, List<String> states, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetAPIKeyCount(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetAPIKeyCountCall(portfolioId, createdByUserId, states, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param createdByUserId  (optional)
     * @param states  (optional)
     * @return CoinbaseEngPrimeApiApiGetAPIKeyCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetAPIKeyCountResponse primeAPIGetAPIKeyCount(String portfolioId, String createdByUserId, List<String> states) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetAPIKeyCountResponse> resp = primeAPIGetAPIKeyCountWithHttpInfo(portfolioId, createdByUserId, states);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param createdByUserId  (optional)
     * @param states  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetAPIKeyCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetAPIKeyCountResponse> primeAPIGetAPIKeyCountWithHttpInfo(String portfolioId, String createdByUserId, List<String> states) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetAPIKeyCountValidateBeforeCall(portfolioId, createdByUserId, states, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetAPIKeyCountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param createdByUserId  (optional)
     * @param states  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAPIKeyCountAsync(String portfolioId, String createdByUserId, List<String> states, final ApiCallback<CoinbaseEngPrimeApiApiGetAPIKeyCountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetAPIKeyCountValidateBeforeCall(portfolioId, createdByUserId, states, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetAPIKeyCountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetAPIKeyCountV2
     * @param groupId  (required)
     * @param createdByUserId  (optional)
     * @param states  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAPIKeyCountV2Call(String groupId, String createdByUserId, List<String> states, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/groups/{group_id}/api-key-count"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (createdByUserId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created_by_user_id", createdByUserId));
        if (states != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "states", states));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetAPIKeyCountV2ValidateBeforeCall(String groupId, String createdByUserId, List<String> states, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling primeAPIGetAPIKeyCountV2(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetAPIKeyCountV2Call(groupId, createdByUserId, states, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param createdByUserId  (optional)
     * @param states  (optional)
     * @return CoinbaseEngPrimeApiApiGetAPIKeyCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetAPIKeyCountResponse primeAPIGetAPIKeyCountV2(String groupId, String createdByUserId, List<String> states) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetAPIKeyCountResponse> resp = primeAPIGetAPIKeyCountV2WithHttpInfo(groupId, createdByUserId, states);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param createdByUserId  (optional)
     * @param states  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetAPIKeyCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetAPIKeyCountResponse> primeAPIGetAPIKeyCountV2WithHttpInfo(String groupId, String createdByUserId, List<String> states) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetAPIKeyCountV2ValidateBeforeCall(groupId, createdByUserId, states, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetAPIKeyCountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groupId  (required)
     * @param createdByUserId  (optional)
     * @param states  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAPIKeyCountV2Async(String groupId, String createdByUserId, List<String> states, final ApiCallback<CoinbaseEngPrimeApiApiGetAPIKeyCountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetAPIKeyCountV2ValidateBeforeCall(groupId, createdByUserId, states, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetAPIKeyCountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetAPIKeyV2
     * @param groupId  (required)
     * @param accessKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAPIKeyV2Call(String groupId, String accessKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/groups/{group_id}/api-key/{access_key}"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "access_key" + "\\}", apiClient.escapeString(accessKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetAPIKeyV2ValidateBeforeCall(String groupId, String accessKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling primeAPIGetAPIKeyV2(Async)");
        }
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling primeAPIGetAPIKeyV2(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetAPIKeyV2Call(groupId, accessKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param accessKey  (required)
     * @return CoinbaseEngPrimeApiApiGetAPIKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetAPIKeyResponse primeAPIGetAPIKeyV2(String groupId, String accessKey) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetAPIKeyResponse> resp = primeAPIGetAPIKeyV2WithHttpInfo(groupId, accessKey);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param accessKey  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetAPIKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetAPIKeyResponse> primeAPIGetAPIKeyV2WithHttpInfo(String groupId, String accessKey) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetAPIKeyV2ValidateBeforeCall(groupId, accessKey, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetAPIKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groupId  (required)
     * @param accessKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAPIKeyV2Async(String groupId, String accessKey, final ApiCallback<CoinbaseEngPrimeApiApiGetAPIKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetAPIKeyV2ValidateBeforeCall(groupId, accessKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetAPIKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetAPIKeys
     * @param portfolioId  (required)
     * @param searchText  (optional)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param states  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAPIKeysCall(String portfolioId, String searchText, String cursor, Integer limit, List<String> states, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/api-key"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchText != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search_text", searchText));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (states != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "states", states));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetAPIKeysValidateBeforeCall(String portfolioId, String searchText, String cursor, Integer limit, List<String> states, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetAPIKeys(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetAPIKeysCall(portfolioId, searchText, cursor, limit, states, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param searchText  (optional)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param states  (optional)
     * @return CoinbaseEngPrimeApiApiListAPIKeysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListAPIKeysResponse primeAPIGetAPIKeys(String portfolioId, String searchText, String cursor, Integer limit, List<String> states) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListAPIKeysResponse> resp = primeAPIGetAPIKeysWithHttpInfo(portfolioId, searchText, cursor, limit, states);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param searchText  (optional)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param states  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListAPIKeysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListAPIKeysResponse> primeAPIGetAPIKeysWithHttpInfo(String portfolioId, String searchText, String cursor, Integer limit, List<String> states) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetAPIKeysValidateBeforeCall(portfolioId, searchText, cursor, limit, states, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListAPIKeysResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param searchText  (optional)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param states  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAPIKeysAsync(String portfolioId, String searchText, String cursor, Integer limit, List<String> states, final ApiCallback<CoinbaseEngPrimeApiApiListAPIKeysResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetAPIKeysValidateBeforeCall(portfolioId, searchText, cursor, limit, states, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListAPIKeysResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetAPIKeysV2
     * @param groupId  (required)
     * @param searchText  (optional)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param states  (optional)
     * @param type  (optional, default to PORTFOLIO)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAPIKeysV2Call(String groupId, String searchText, String cursor, Integer limit, List<String> states, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/groups/{group_id}/api-key"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchText != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search_text", searchText));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (states != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "states", states));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetAPIKeysV2ValidateBeforeCall(String groupId, String searchText, String cursor, Integer limit, List<String> states, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling primeAPIGetAPIKeysV2(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetAPIKeysV2Call(groupId, searchText, cursor, limit, states, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param searchText  (optional)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param states  (optional)
     * @param type  (optional, default to PORTFOLIO)
     * @return CoinbaseEngPrimeApiApiListAPIKeysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListAPIKeysResponse primeAPIGetAPIKeysV2(String groupId, String searchText, String cursor, Integer limit, List<String> states, String type) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListAPIKeysResponse> resp = primeAPIGetAPIKeysV2WithHttpInfo(groupId, searchText, cursor, limit, states, type);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param searchText  (optional)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param states  (optional)
     * @param type  (optional, default to PORTFOLIO)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListAPIKeysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListAPIKeysResponse> primeAPIGetAPIKeysV2WithHttpInfo(String groupId, String searchText, String cursor, Integer limit, List<String> states, String type) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetAPIKeysV2ValidateBeforeCall(groupId, searchText, cursor, limit, states, type, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListAPIKeysResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groupId  (required)
     * @param searchText  (optional)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param states  (optional)
     * @param type  (optional, default to PORTFOLIO)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAPIKeysV2Async(String groupId, String searchText, String cursor, Integer limit, List<String> states, String type, final ApiCallback<CoinbaseEngPrimeApiApiListAPIKeysResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetAPIKeysV2ValidateBeforeCall(groupId, searchText, cursor, limit, states, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListAPIKeysResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetAUCFeeTiers
     * @param portfolioId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAUCFeeTiersCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/auc_tiers"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetAUCFeeTiersValidateBeforeCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetAUCFeeTiers(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetAUCFeeTiersCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @return EngPrimeBillingApiGetAUCFeeTiersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EngPrimeBillingApiGetAUCFeeTiersResponse primeAPIGetAUCFeeTiers(String portfolioId) throws ApiException {
        ApiResponse<EngPrimeBillingApiGetAUCFeeTiersResponse> resp = primeAPIGetAUCFeeTiersWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @return ApiResponse&lt;EngPrimeBillingApiGetAUCFeeTiersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EngPrimeBillingApiGetAUCFeeTiersResponse> primeAPIGetAUCFeeTiersWithHttpInfo(String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetAUCFeeTiersValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<EngPrimeBillingApiGetAUCFeeTiersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAUCFeeTiersAsync(String portfolioId, final ApiCallback<EngPrimeBillingApiGetAUCFeeTiersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetAUCFeeTiersValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EngPrimeBillingApiGetAUCFeeTiersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetActivityFilters
     * @param portfolioId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetActivityFiltersCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/activity_filters"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetActivityFiltersValidateBeforeCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetActivityFilters(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetActivityFiltersCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @return CoinbaseEngPrimeApiApiGetActivityFiltersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetActivityFiltersResponse primeAPIGetActivityFilters(String portfolioId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetActivityFiltersResponse> resp = primeAPIGetActivityFiltersWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetActivityFiltersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetActivityFiltersResponse> primeAPIGetActivityFiltersWithHttpInfo(String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetActivityFiltersValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetActivityFiltersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetActivityFiltersAsync(String portfolioId, final ApiCallback<CoinbaseEngPrimeApiApiGetActivityFiltersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetActivityFiltersValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetActivityFiltersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetAddressBook
     * @param portfolioId Portfolio id (required)
     * @param currencySymbol Cryptocurrency symbol, if nothing is passed all addresses will be returned (optional)
     * @param search Query string that matches the address name (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of addresses to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param type Type of address book entry (optional, default to ADDRESS_BOOK_TYPE_UNSPECIFIED)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAddressBookCall(String portfolioId, String currencySymbol, String search, String cursor, Integer limit, String sortDirection, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/addressbook"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencySymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_symbol", currencySymbol));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetAddressBookValidateBeforeCall(String portfolioId, String currencySymbol, String search, String cursor, Integer limit, String sortDirection, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetAddressBook(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetAddressBookCall(portfolioId, currencySymbol, search, cursor, limit, sortDirection, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId Portfolio id (required)
     * @param currencySymbol Cryptocurrency symbol, if nothing is passed all addresses will be returned (optional)
     * @param search Query string that matches the address name (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of addresses to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param type Type of address book entry (optional, default to ADDRESS_BOOK_TYPE_UNSPECIFIED)
     * @return CoinbaseEngPrimeApiApiAddressBookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiAddressBookResponse primeAPIGetAddressBook(String portfolioId, String currencySymbol, String search, String cursor, Integer limit, String sortDirection, String type) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiAddressBookResponse> resp = primeAPIGetAddressBookWithHttpInfo(portfolioId, currencySymbol, search, cursor, limit, sortDirection, type);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId Portfolio id (required)
     * @param currencySymbol Cryptocurrency symbol, if nothing is passed all addresses will be returned (optional)
     * @param search Query string that matches the address name (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of addresses to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param type Type of address book entry (optional, default to ADDRESS_BOOK_TYPE_UNSPECIFIED)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiAddressBookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiAddressBookResponse> primeAPIGetAddressBookWithHttpInfo(String portfolioId, String currencySymbol, String search, String cursor, Integer limit, String sortDirection, String type) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetAddressBookValidateBeforeCall(portfolioId, currencySymbol, search, cursor, limit, sortDirection, type, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiAddressBookResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId Portfolio id (required)
     * @param currencySymbol Cryptocurrency symbol, if nothing is passed all addresses will be returned (optional)
     * @param search Query string that matches the address name (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of addresses to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param type Type of address book entry (optional, default to ADDRESS_BOOK_TYPE_UNSPECIFIED)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAddressBookAsync(String portfolioId, String currencySymbol, String search, String cursor, Integer limit, String sortDirection, String type, final ApiCallback<CoinbaseEngPrimeApiApiAddressBookResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetAddressBookValidateBeforeCall(portfolioId, currencySymbol, search, cursor, limit, sortDirection, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiAddressBookResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetAllLocateByPortfolio
     * @param entityId  (required)
     * @param portfolioId  (required)
     * @param search  (optional)
     * @param sortKey  (optional)
     * @param filtersStatuses  (optional)
     * @param filtersStartConversionDate  (optional)
     * @param filtersEndConversionDate  (optional)
     * @param paginationLimit  (optional)
     * @param paginationCursor  (optional)
     * @param paginationDirection  (optional, default to DESC)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAllLocateByPortfolioCall(String entityId, String portfolioId, String search, String sortKey, List<String> filtersStatuses, String filtersStartConversionDate, String filtersEndConversionDate, Long paginationLimit, String paginationCursor, String paginationDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{entity_id}/portfolios/{portfolio_id}/pm/locates"
            .replaceAll("\\{" + "entity_id" + "\\}", apiClient.escapeString(entityId.toString()))
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (sortKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_key", sortKey));
        if (filtersStatuses != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "filters.statuses", filtersStatuses));
        if (filtersStartConversionDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filters.start_conversion_date", filtersStartConversionDate));
        if (filtersEndConversionDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filters.end_conversion_date", filtersEndConversionDate));
        if (paginationLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagination.limit", paginationLimit));
        if (paginationCursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagination.cursor", paginationCursor));
        if (paginationDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagination.direction", paginationDirection));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetAllLocateByPortfolioValidateBeforeCall(String entityId, String portfolioId, String search, String sortKey, List<String> filtersStatuses, String filtersStartConversionDate, String filtersEndConversionDate, Long paginationLimit, String paginationCursor, String paginationDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling primeAPIGetAllLocateByPortfolio(Async)");
        }
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetAllLocateByPortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetAllLocateByPortfolioCall(entityId, portfolioId, search, sortKey, filtersStatuses, filtersStartConversionDate, filtersEndConversionDate, paginationLimit, paginationCursor, paginationDirection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param portfolioId  (required)
     * @param search  (optional)
     * @param sortKey  (optional)
     * @param filtersStatuses  (optional)
     * @param filtersStartConversionDate  (optional)
     * @param filtersEndConversionDate  (optional)
     * @param paginationLimit  (optional)
     * @param paginationCursor  (optional)
     * @param paginationDirection  (optional, default to DESC)
     * @return CoinbaseFinancingGetAllLocatesByPortfolioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseFinancingGetAllLocatesByPortfolioResponse primeAPIGetAllLocateByPortfolio(String entityId, String portfolioId, String search, String sortKey, List<String> filtersStatuses, String filtersStartConversionDate, String filtersEndConversionDate, Long paginationLimit, String paginationCursor, String paginationDirection) throws ApiException {
        ApiResponse<CoinbaseFinancingGetAllLocatesByPortfolioResponse> resp = primeAPIGetAllLocateByPortfolioWithHttpInfo(entityId, portfolioId, search, sortKey, filtersStatuses, filtersStartConversionDate, filtersEndConversionDate, paginationLimit, paginationCursor, paginationDirection);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param portfolioId  (required)
     * @param search  (optional)
     * @param sortKey  (optional)
     * @param filtersStatuses  (optional)
     * @param filtersStartConversionDate  (optional)
     * @param filtersEndConversionDate  (optional)
     * @param paginationLimit  (optional)
     * @param paginationCursor  (optional)
     * @param paginationDirection  (optional, default to DESC)
     * @return ApiResponse&lt;CoinbaseFinancingGetAllLocatesByPortfolioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseFinancingGetAllLocatesByPortfolioResponse> primeAPIGetAllLocateByPortfolioWithHttpInfo(String entityId, String portfolioId, String search, String sortKey, List<String> filtersStatuses, String filtersStartConversionDate, String filtersEndConversionDate, Long paginationLimit, String paginationCursor, String paginationDirection) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetAllLocateByPortfolioValidateBeforeCall(entityId, portfolioId, search, sortKey, filtersStatuses, filtersStartConversionDate, filtersEndConversionDate, paginationLimit, paginationCursor, paginationDirection, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingGetAllLocatesByPortfolioResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId  (required)
     * @param portfolioId  (required)
     * @param search  (optional)
     * @param sortKey  (optional)
     * @param filtersStatuses  (optional)
     * @param filtersStartConversionDate  (optional)
     * @param filtersEndConversionDate  (optional)
     * @param paginationLimit  (optional)
     * @param paginationCursor  (optional)
     * @param paginationDirection  (optional, default to DESC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAllLocateByPortfolioAsync(String entityId, String portfolioId, String search, String sortKey, List<String> filtersStatuses, String filtersStartConversionDate, String filtersEndConversionDate, Long paginationLimit, String paginationCursor, String paginationDirection, final ApiCallback<CoinbaseFinancingGetAllLocatesByPortfolioResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetAllLocateByPortfolioValidateBeforeCall(entityId, portfolioId, search, sortKey, filtersStatuses, filtersStartConversionDate, filtersEndConversionDate, paginationLimit, paginationCursor, paginationDirection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingGetAllLocatesByPortfolioResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetAllocationByOrder
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param orderId The ID of the order to get allocation for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAllocationByOrderCall(String portfolioId, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/allocation/order/{order_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetAllocationByOrderValidateBeforeCall(String portfolioId, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetAllocationByOrder(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling primeAPIGetAllocationByOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetAllocationByOrderCall(portfolioId, orderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param orderId The ID of the order to get allocation for (required)
     * @return CoinbaseEngPrimeApiApiGetAllocationByOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetAllocationByOrderResponse primeAPIGetAllocationByOrder(String portfolioId, String orderId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetAllocationByOrderResponse> resp = primeAPIGetAllocationByOrderWithHttpInfo(portfolioId, orderId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param orderId The ID of the order to get allocation for (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetAllocationByOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetAllocationByOrderResponse> primeAPIGetAllocationByOrderWithHttpInfo(String portfolioId, String orderId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetAllocationByOrderValidateBeforeCall(portfolioId, orderId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetAllocationByOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param orderId The ID of the order to get allocation for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAllocationByOrderAsync(String portfolioId, String orderId, final ApiCallback<CoinbaseEngPrimeApiApiGetAllocationByOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetAllocationByOrderValidateBeforeCall(portfolioId, orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetAllocationByOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetAllocationLeg
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param allocationLegId The ID of the allocation to get allocation for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAllocationLegCall(String portfolioId, String allocationLegId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/allocation/{allocation_leg_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "allocation_leg_id" + "\\}", apiClient.escapeString(allocationLegId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetAllocationLegValidateBeforeCall(String portfolioId, String allocationLegId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetAllocationLeg(Async)");
        }
        
        // verify the required parameter 'allocationLegId' is set
        if (allocationLegId == null) {
            throw new ApiException("Missing the required parameter 'allocationLegId' when calling primeAPIGetAllocationLeg(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetAllocationLegCall(portfolioId, allocationLegId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param allocationLegId The ID of the allocation to get allocation for (required)
     * @return CoinbaseEngPrimeApiApiGetAllocationLegResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetAllocationLegResponse primeAPIGetAllocationLeg(String portfolioId, String allocationLegId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetAllocationLegResponse> resp = primeAPIGetAllocationLegWithHttpInfo(portfolioId, allocationLegId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param allocationLegId The ID of the allocation to get allocation for (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetAllocationLegResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetAllocationLegResponse> primeAPIGetAllocationLegWithHttpInfo(String portfolioId, String allocationLegId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetAllocationLegValidateBeforeCall(portfolioId, allocationLegId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetAllocationLegResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param allocationLegId The ID of the allocation to get allocation for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAllocationLegAsync(String portfolioId, String allocationLegId, final ApiCallback<CoinbaseEngPrimeApiApiGetAllocationLegResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetAllocationLegValidateBeforeCall(portfolioId, allocationLegId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetAllocationLegResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetAllocations
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param allocationIds An array of allocation ids to get allocations for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAllocationsCall(String portfolioId, List<String> allocationIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/allocations"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (allocationIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "allocation_ids", allocationIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetAllocationsValidateBeforeCall(String portfolioId, List<String> allocationIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetAllocations(Async)");
        }
        
        // verify the required parameter 'allocationIds' is set
        if (allocationIds == null) {
            throw new ApiException("Missing the required parameter 'allocationIds' when calling primeAPIGetAllocations(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetAllocationsCall(portfolioId, allocationIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param allocationIds An array of allocation ids to get allocations for (required)
     * @return CoinbaseEngPrimeApiApiGetAllocationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetAllocationsResponse primeAPIGetAllocations(String portfolioId, List<String> allocationIds) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetAllocationsResponse> resp = primeAPIGetAllocationsWithHttpInfo(portfolioId, allocationIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param allocationIds An array of allocation ids to get allocations for (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetAllocationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetAllocationsResponse> primeAPIGetAllocationsWithHttpInfo(String portfolioId, List<String> allocationIds) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetAllocationsValidateBeforeCall(portfolioId, allocationIds, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetAllocationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param allocationIds An array of allocation ids to get allocations for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetAllocationsAsync(String portfolioId, List<String> allocationIds, final ApiCallback<CoinbaseEngPrimeApiApiGetAllocationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetAllocationsValidateBeforeCall(portfolioId, allocationIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetAllocationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetBalances
     * @param balanceOwnerReferenceId  (optional)
     * @param balanceOwnerPrimeWallet  (optional, default to PRIME_WALLET_BALANCE_TYPE_UNSPECIFIED)
     * @param visibility  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetBalancesCall(String balanceOwnerReferenceId, String balanceOwnerPrimeWallet, List<String> visibility, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/balances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (balanceOwnerReferenceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("balance_owner.reference_id", balanceOwnerReferenceId));
        if (balanceOwnerPrimeWallet != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("balance_owner.prime_wallet", balanceOwnerPrimeWallet));
        if (visibility != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "visibility", visibility));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetBalancesValidateBeforeCall(String balanceOwnerReferenceId, String balanceOwnerPrimeWallet, List<String> visibility, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = primeAPIGetBalancesCall(balanceOwnerReferenceId, balanceOwnerPrimeWallet, visibility, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param balanceOwnerReferenceId  (optional)
     * @param balanceOwnerPrimeWallet  (optional, default to PRIME_WALLET_BALANCE_TYPE_UNSPECIFIED)
     * @param visibility  (optional)
     * @return CoinbaseEngPrimeApiApiGetBalancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetBalancesResponse primeAPIGetBalances(String balanceOwnerReferenceId, String balanceOwnerPrimeWallet, List<String> visibility) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetBalancesResponse> resp = primeAPIGetBalancesWithHttpInfo(balanceOwnerReferenceId, balanceOwnerPrimeWallet, visibility);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param balanceOwnerReferenceId  (optional)
     * @param balanceOwnerPrimeWallet  (optional, default to PRIME_WALLET_BALANCE_TYPE_UNSPECIFIED)
     * @param visibility  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetBalancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetBalancesResponse> primeAPIGetBalancesWithHttpInfo(String balanceOwnerReferenceId, String balanceOwnerPrimeWallet, List<String> visibility) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetBalancesValidateBeforeCall(balanceOwnerReferenceId, balanceOwnerPrimeWallet, visibility, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetBalancesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param balanceOwnerReferenceId  (optional)
     * @param balanceOwnerPrimeWallet  (optional, default to PRIME_WALLET_BALANCE_TYPE_UNSPECIFIED)
     * @param visibility  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetBalancesAsync(String balanceOwnerReferenceId, String balanceOwnerPrimeWallet, List<String> visibility, final ApiCallback<CoinbaseEngPrimeApiApiGetBalancesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetBalancesValidateBeforeCall(balanceOwnerReferenceId, balanceOwnerPrimeWallet, visibility, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetBalancesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetBillingEmailList
     * @param vehicleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetBillingEmailListCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/email_list"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetBillingEmailListValidateBeforeCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetBillingEmailList(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetBillingEmailListCall(vehicleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return CoinbaseEngPrimeApiApiGetBillingEmailListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetBillingEmailListResponse primeAPIGetBillingEmailList(String vehicleId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetBillingEmailListResponse> resp = primeAPIGetBillingEmailListWithHttpInfo(vehicleId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetBillingEmailListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetBillingEmailListResponse> primeAPIGetBillingEmailListWithHttpInfo(String vehicleId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetBillingEmailListValidateBeforeCall(vehicleId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetBillingEmailListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetBillingEmailListAsync(String vehicleId, final ApiCallback<CoinbaseEngPrimeApiApiGetBillingEmailListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetBillingEmailListValidateBeforeCall(vehicleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetBillingEmailListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetBillingPreference
     * @param vehicleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetBillingPreferenceCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/billing_preference"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetBillingPreferenceValidateBeforeCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetBillingPreference(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetBillingPreferenceCall(vehicleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return CoinbaseEngPrimeApiApiGetBillingPreferenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetBillingPreferenceResponse primeAPIGetBillingPreference(String vehicleId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetBillingPreferenceResponse> resp = primeAPIGetBillingPreferenceWithHttpInfo(vehicleId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetBillingPreferenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetBillingPreferenceResponse> primeAPIGetBillingPreferenceWithHttpInfo(String vehicleId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetBillingPreferenceValidateBeforeCall(vehicleId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetBillingPreferenceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetBillingPreferenceAsync(String vehicleId, final ApiCallback<CoinbaseEngPrimeApiApiGetBillingPreferenceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetBillingPreferenceValidateBeforeCall(vehicleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetBillingPreferenceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetCandles
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param start Timestamp for starting range of aggregations (e.g 1596640920) (required)
     * @param end Timestamp for ending range of aggregations (e.g 1596650920) (required)
     * @param granularity The candle interval (e.g. 1m, 5m, 15m) (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param userId optional field used for feature flags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetCandlesCall(String productId, String start, String end, String granularity, String geolocationLocality, String geolocationCountry, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/products/{product_id}/candles"
            .replaceAll("\\{" + "product_id" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (granularity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("granularity", granularity));
        if (geolocationLocality != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geolocation.locality", geolocationLocality));
        if (geolocationCountry != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geolocation.country", geolocationCountry));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetCandlesValidateBeforeCall(String productId, String start, String end, String granularity, String geolocationLocality, String geolocationCountry, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling primeAPIGetCandles(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling primeAPIGetCandles(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling primeAPIGetCandles(Async)");
        }
        
        // verify the required parameter 'granularity' is set
        if (granularity == null) {
            throw new ApiException("Missing the required parameter 'granularity' when calling primeAPIGetCandles(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetCandlesCall(productId, start, end, granularity, geolocationLocality, geolocationCountry, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param start Timestamp for starting range of aggregations (e.g 1596640920) (required)
     * @param end Timestamp for ending range of aggregations (e.g 1596650920) (required)
     * @param granularity The candle interval (e.g. 1m, 5m, 15m) (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param userId optional field used for feature flags (optional)
     * @return CoinbaseBrokerageProxyTradingApiCandles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseBrokerageProxyTradingApiCandles primeAPIGetCandles(String productId, String start, String end, String granularity, String geolocationLocality, String geolocationCountry, String userId) throws ApiException {
        ApiResponse<CoinbaseBrokerageProxyTradingApiCandles> resp = primeAPIGetCandlesWithHttpInfo(productId, start, end, granularity, geolocationLocality, geolocationCountry, userId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param start Timestamp for starting range of aggregations (e.g 1596640920) (required)
     * @param end Timestamp for ending range of aggregations (e.g 1596650920) (required)
     * @param granularity The candle interval (e.g. 1m, 5m, 15m) (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param userId optional field used for feature flags (optional)
     * @return ApiResponse&lt;CoinbaseBrokerageProxyTradingApiCandles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseBrokerageProxyTradingApiCandles> primeAPIGetCandlesWithHttpInfo(String productId, String start, String end, String granularity, String geolocationLocality, String geolocationCountry, String userId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetCandlesValidateBeforeCall(productId, start, end, granularity, geolocationLocality, geolocationCountry, userId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyTradingApiCandles>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param start Timestamp for starting range of aggregations (e.g 1596640920) (required)
     * @param end Timestamp for ending range of aggregations (e.g 1596650920) (required)
     * @param granularity The candle interval (e.g. 1m, 5m, 15m) (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param userId optional field used for feature flags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetCandlesAsync(String productId, String start, String end, String granularity, String geolocationLocality, String geolocationCountry, String userId, final ApiCallback<CoinbaseBrokerageProxyTradingApiCandles> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetCandlesValidateBeforeCall(productId, start, end, granularity, geolocationLocality, geolocationCountry, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyTradingApiCandles>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetCandlesStream
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param granularity The candle interval (e.g. 1m, 5m, 15m) (required)
     * @param limit Number of candles to return in the initial snapshot. Maximum of 300 (required)
     * @param updateInterval Time between each patch, limited to 1 second for now due to implementation details. (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param userId optional field used for feature flags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetCandlesStreamCall(String productId, String granularity, Integer limit, String updateInterval, String geolocationLocality, String geolocationCountry, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/products/{product_id}/candles"
            .replaceAll("\\{" + "product_id" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (granularity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("granularity", granularity));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (updateInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("update_interval", updateInterval));
        if (geolocationLocality != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geolocation.locality", geolocationLocality));
        if (geolocationCountry != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geolocation.country", geolocationCountry));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetCandlesStreamValidateBeforeCall(String productId, String granularity, Integer limit, String updateInterval, String geolocationLocality, String geolocationCountry, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling primeAPIGetCandlesStream(Async)");
        }
        
        // verify the required parameter 'granularity' is set
        if (granularity == null) {
            throw new ApiException("Missing the required parameter 'granularity' when calling primeAPIGetCandlesStream(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling primeAPIGetCandlesStream(Async)");
        }
        
        // verify the required parameter 'updateInterval' is set
        if (updateInterval == null) {
            throw new ApiException("Missing the required parameter 'updateInterval' when calling primeAPIGetCandlesStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetCandlesStreamCall(productId, granularity, limit, updateInterval, geolocationLocality, geolocationCountry, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param granularity The candle interval (e.g. 1m, 5m, 15m) (required)
     * @param limit Number of candles to return in the initial snapshot. Maximum of 300 (required)
     * @param updateInterval Time between each patch, limited to 1 second for now due to implementation details. (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param userId optional field used for feature flags (optional)
     * @return StreamResultOfCoinbaseBrokerageProxyTradingApiGetCandlesStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseBrokerageProxyTradingApiGetCandlesStreamResponse primeAPIGetCandlesStream(String productId, String granularity, Integer limit, String updateInterval, String geolocationLocality, String geolocationCountry, String userId) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseBrokerageProxyTradingApiGetCandlesStreamResponse> resp = primeAPIGetCandlesStreamWithHttpInfo(productId, granularity, limit, updateInterval, geolocationLocality, geolocationCountry, userId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param granularity The candle interval (e.g. 1m, 5m, 15m) (required)
     * @param limit Number of candles to return in the initial snapshot. Maximum of 300 (required)
     * @param updateInterval Time between each patch, limited to 1 second for now due to implementation details. (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param userId optional field used for feature flags (optional)
     * @return ApiResponse&lt;StreamResultOfCoinbaseBrokerageProxyTradingApiGetCandlesStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseBrokerageProxyTradingApiGetCandlesStreamResponse> primeAPIGetCandlesStreamWithHttpInfo(String productId, String granularity, Integer limit, String updateInterval, String geolocationLocality, String geolocationCountry, String userId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetCandlesStreamValidateBeforeCall(productId, granularity, limit, updateInterval, geolocationLocality, geolocationCountry, userId, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseBrokerageProxyTradingApiGetCandlesStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param granularity The candle interval (e.g. 1m, 5m, 15m) (required)
     * @param limit Number of candles to return in the initial snapshot. Maximum of 300 (required)
     * @param updateInterval Time between each patch, limited to 1 second for now due to implementation details. (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param userId optional field used for feature flags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetCandlesStreamAsync(String productId, String granularity, Integer limit, String updateInterval, String geolocationLocality, String geolocationCountry, String userId, final ApiCallback<StreamResultOfCoinbaseBrokerageProxyTradingApiGetCandlesStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetCandlesStreamValidateBeforeCall(productId, granularity, limit, updateInterval, geolocationLocality, geolocationCountry, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseBrokerageProxyTradingApiGetCandlesStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetConfig
     * @param name Get the config with a specific name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetConfigCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/configs/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetConfigValidateBeforeCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling primeAPIGetConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetConfigCall(name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param name Get the config with a specific name (required)
     * @return CoinbaseEngPrimeApiApiConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiConfig primeAPIGetConfig(String name) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiConfig> resp = primeAPIGetConfigWithHttpInfo(name);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name Get the config with a specific name (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiConfig> primeAPIGetConfigWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetConfigValidateBeforeCall(name, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name Get the config with a specific name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetConfigAsync(String name, final ApiCallback<CoinbaseEngPrimeApiApiConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetConfigValidateBeforeCall(name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetConversionSummaries
     * @param vehicleId  (required)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetConversionSummariesCall(String vehicleId, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/margin_reports"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetConversionSummariesValidateBeforeCall(String vehicleId, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetConversionSummaries(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetConversionSummariesCall(vehicleId, startDate, endDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @return CoinbaseFinancingGetConversionSummariesV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseFinancingGetConversionSummariesV2Response primeAPIGetConversionSummaries(String vehicleId, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<CoinbaseFinancingGetConversionSummariesV2Response> resp = primeAPIGetConversionSummariesWithHttpInfo(vehicleId, startDate, endDate);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @return ApiResponse&lt;CoinbaseFinancingGetConversionSummariesV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseFinancingGetConversionSummariesV2Response> primeAPIGetConversionSummariesWithHttpInfo(String vehicleId, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetConversionSummariesValidateBeforeCall(vehicleId, startDate, endDate, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingGetConversionSummariesV2Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetConversionSummariesAsync(String vehicleId, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<CoinbaseFinancingGetConversionSummariesV2Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetConversionSummariesValidateBeforeCall(vehicleId, startDate, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingGetConversionSummariesV2Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetConversionSummariesV2
     * @param vehicleId  (required)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetConversionSummariesV2Call(String vehicleId, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/vehicles/{vehicle_id}/conversion_summaries"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetConversionSummariesV2ValidateBeforeCall(String vehicleId, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetConversionSummariesV2(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetConversionSummariesV2Call(vehicleId, startDate, endDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @return CoinbaseEngPrimeApiApiGetConversionSummariesV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetConversionSummariesV2Response primeAPIGetConversionSummariesV2(String vehicleId, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetConversionSummariesV2Response> resp = primeAPIGetConversionSummariesV2WithHttpInfo(vehicleId, startDate, endDate);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetConversionSummariesV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetConversionSummariesV2Response> primeAPIGetConversionSummariesV2WithHttpInfo(String vehicleId, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetConversionSummariesV2ValidateBeforeCall(vehicleId, startDate, endDate, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetConversionSummariesV2Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetConversionSummariesV2Async(String vehicleId, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<CoinbaseEngPrimeApiApiGetConversionSummariesV2Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetConversionSummariesV2ValidateBeforeCall(vehicleId, startDate, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetConversionSummariesV2Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetCounterparty
     * @param portfolioId portfolio id (required)
     * @param qcCounterparty is the request for the qc counterparty (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetCounterpartyCall(String portfolioId, Boolean qcCounterparty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/counterparties"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (qcCounterparty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("qc_counterparty", qcCounterparty));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetCounterpartyValidateBeforeCall(String portfolioId, Boolean qcCounterparty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetCounterparty(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetCounterpartyCall(portfolioId, qcCounterparty, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId portfolio id (required)
     * @param qcCounterparty is the request for the qc counterparty (optional)
     * @return CoinbaseEngPrimeApiApiGetCounterpartyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetCounterpartyResponse primeAPIGetCounterparty(String portfolioId, Boolean qcCounterparty) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetCounterpartyResponse> resp = primeAPIGetCounterpartyWithHttpInfo(portfolioId, qcCounterparty);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId portfolio id (required)
     * @param qcCounterparty is the request for the qc counterparty (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetCounterpartyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetCounterpartyResponse> primeAPIGetCounterpartyWithHttpInfo(String portfolioId, Boolean qcCounterparty) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetCounterpartyValidateBeforeCall(portfolioId, qcCounterparty, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetCounterpartyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId portfolio id (required)
     * @param qcCounterparty is the request for the qc counterparty (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetCounterpartyAsync(String portfolioId, Boolean qcCounterparty, final ApiCallback<CoinbaseEngPrimeApiApiGetCounterpartyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetCounterpartyValidateBeforeCall(portfolioId, qcCounterparty, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetCounterpartyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetCurrenciesInfo
     * @param queryLevel  (optional, default to CURRENCY_INFO_QUERY_LEVEL_UNSPECIFIED)
     * @param queryIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetCurrenciesInfoCall(String queryLevel, List<String> queryIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (queryLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query_level", queryLevel));
        if (queryIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "query_ids", queryIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetCurrenciesInfoValidateBeforeCall(String queryLevel, List<String> queryIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = primeAPIGetCurrenciesInfoCall(queryLevel, queryIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param queryLevel  (optional, default to CURRENCY_INFO_QUERY_LEVEL_UNSPECIFIED)
     * @param queryIds  (optional)
     * @return CoinbaseEngPrimeApiApiGetCurrenciesInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetCurrenciesInfoResponse primeAPIGetCurrenciesInfo(String queryLevel, List<String> queryIds) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetCurrenciesInfoResponse> resp = primeAPIGetCurrenciesInfoWithHttpInfo(queryLevel, queryIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param queryLevel  (optional, default to CURRENCY_INFO_QUERY_LEVEL_UNSPECIFIED)
     * @param queryIds  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetCurrenciesInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetCurrenciesInfoResponse> primeAPIGetCurrenciesInfoWithHttpInfo(String queryLevel, List<String> queryIds) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetCurrenciesInfoValidateBeforeCall(queryLevel, queryIds, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetCurrenciesInfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param queryLevel  (optional, default to CURRENCY_INFO_QUERY_LEVEL_UNSPECIFIED)
     * @param queryIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetCurrenciesInfoAsync(String queryLevel, List<String> queryIds, final ApiCallback<CoinbaseEngPrimeApiApiGetCurrenciesInfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetCurrenciesInfoValidateBeforeCall(queryLevel, queryIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetCurrenciesInfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetCurrentLocates
     * @param entityId  (required)
     * @param portfolioId  (optional)
     * @param locateIds  (optional)
     * @param conversionDate  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetCurrentLocatesCall(String entityId, String portfolioId, List<String> locateIds, String conversionDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{entity_id}/pm/locates"
            .replaceAll("\\{" + "entity_id" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));
        if (locateIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "locate_ids", locateIds));
        if (conversionDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("conversion_date", conversionDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetCurrentLocatesValidateBeforeCall(String entityId, String portfolioId, List<String> locateIds, String conversionDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling primeAPIGetCurrentLocates(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetCurrentLocatesCall(entityId, portfolioId, locateIds, conversionDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param portfolioId  (optional)
     * @param locateIds  (optional)
     * @param conversionDate  (optional)
     * @return CoinbaseFinancingGetCurrentLocatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseFinancingGetCurrentLocatesResponse primeAPIGetCurrentLocates(String entityId, String portfolioId, List<String> locateIds, String conversionDate) throws ApiException {
        ApiResponse<CoinbaseFinancingGetCurrentLocatesResponse> resp = primeAPIGetCurrentLocatesWithHttpInfo(entityId, portfolioId, locateIds, conversionDate);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param portfolioId  (optional)
     * @param locateIds  (optional)
     * @param conversionDate  (optional)
     * @return ApiResponse&lt;CoinbaseFinancingGetCurrentLocatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseFinancingGetCurrentLocatesResponse> primeAPIGetCurrentLocatesWithHttpInfo(String entityId, String portfolioId, List<String> locateIds, String conversionDate) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetCurrentLocatesValidateBeforeCall(entityId, portfolioId, locateIds, conversionDate, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingGetCurrentLocatesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId  (required)
     * @param portfolioId  (optional)
     * @param locateIds  (optional)
     * @param conversionDate  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetCurrentLocatesAsync(String entityId, String portfolioId, List<String> locateIds, String conversionDate, final ApiCallback<CoinbaseFinancingGetCurrentLocatesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetCurrentLocatesValidateBeforeCall(entityId, portfolioId, locateIds, conversionDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingGetCurrentLocatesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetDalCollateralSnapshots
     * @param entityId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetDalCollateralSnapshotsCall(String entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{entity_id}/dal_collateral_snapshots"
            .replaceAll("\\{" + "entity_id" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetDalCollateralSnapshotsValidateBeforeCall(String entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling primeAPIGetDalCollateralSnapshots(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetDalCollateralSnapshotsCall(entityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @return CoinbaseFinancingGetDalCollateralSnapshotsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseFinancingGetDalCollateralSnapshotsResponse primeAPIGetDalCollateralSnapshots(String entityId) throws ApiException {
        ApiResponse<CoinbaseFinancingGetDalCollateralSnapshotsResponse> resp = primeAPIGetDalCollateralSnapshotsWithHttpInfo(entityId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @return ApiResponse&lt;CoinbaseFinancingGetDalCollateralSnapshotsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseFinancingGetDalCollateralSnapshotsResponse> primeAPIGetDalCollateralSnapshotsWithHttpInfo(String entityId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetDalCollateralSnapshotsValidateBeforeCall(entityId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingGetDalCollateralSnapshotsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetDalCollateralSnapshotsAsync(String entityId, final ApiCallback<CoinbaseFinancingGetDalCollateralSnapshotsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetDalCollateralSnapshotsValidateBeforeCall(entityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingGetDalCollateralSnapshotsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetDepositInstructions
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param transferMethodType  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetDepositInstructionsCall(String portfolioId, String walletId, String transferMethodType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/deposit_instructions"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (transferMethodType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transfer_method_type", transferMethodType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetDepositInstructionsValidateBeforeCall(String portfolioId, String walletId, String transferMethodType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetDepositInstructions(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIGetDepositInstructions(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetDepositInstructionsCall(portfolioId, walletId, transferMethodType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param transferMethodType  (optional)
     * @return CoinbaseEngPrimeApiApiGetDepositInstructionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetDepositInstructionsResponse primeAPIGetDepositInstructions(String portfolioId, String walletId, String transferMethodType) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetDepositInstructionsResponse> resp = primeAPIGetDepositInstructionsWithHttpInfo(portfolioId, walletId, transferMethodType);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param transferMethodType  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetDepositInstructionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetDepositInstructionsResponse> primeAPIGetDepositInstructionsWithHttpInfo(String portfolioId, String walletId, String transferMethodType) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetDepositInstructionsValidateBeforeCall(portfolioId, walletId, transferMethodType, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetDepositInstructionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param transferMethodType  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetDepositInstructionsAsync(String portfolioId, String walletId, String transferMethodType, final ApiCallback<CoinbaseEngPrimeApiApiGetDepositInstructionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetDepositInstructionsValidateBeforeCall(portfolioId, walletId, transferMethodType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetDepositInstructionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetDepthStream
     * @param productId  (required)
     * @param updateInterval  (optional, default to TWO_HUNDRED_FIFTY_MS_DEPTH)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetDepthStreamCall(String productId, String updateInterval, String geolocationLocality, String geolocationCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/products/{product_id}/depth"
            .replaceAll("\\{" + "product_id" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("update_interval", updateInterval));
        if (geolocationLocality != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geolocation.locality", geolocationLocality));
        if (geolocationCountry != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geolocation.country", geolocationCountry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetDepthStreamValidateBeforeCall(String productId, String updateInterval, String geolocationLocality, String geolocationCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling primeAPIGetDepthStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetDepthStreamCall(productId, updateInterval, geolocationLocality, geolocationCountry, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param productId  (required)
     * @param updateInterval  (optional, default to TWO_HUNDRED_FIFTY_MS_DEPTH)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @return StreamResultOfCoinbaseBrokerageProxyTradingApiGetDepthStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseBrokerageProxyTradingApiGetDepthStreamResponse primeAPIGetDepthStream(String productId, String updateInterval, String geolocationLocality, String geolocationCountry) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseBrokerageProxyTradingApiGetDepthStreamResponse> resp = primeAPIGetDepthStreamWithHttpInfo(productId, updateInterval, geolocationLocality, geolocationCountry);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param productId  (required)
     * @param updateInterval  (optional, default to TWO_HUNDRED_FIFTY_MS_DEPTH)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @return ApiResponse&lt;StreamResultOfCoinbaseBrokerageProxyTradingApiGetDepthStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseBrokerageProxyTradingApiGetDepthStreamResponse> primeAPIGetDepthStreamWithHttpInfo(String productId, String updateInterval, String geolocationLocality, String geolocationCountry) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetDepthStreamValidateBeforeCall(productId, updateInterval, geolocationLocality, geolocationCountry, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseBrokerageProxyTradingApiGetDepthStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId  (required)
     * @param updateInterval  (optional, default to TWO_HUNDRED_FIFTY_MS_DEPTH)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetDepthStreamAsync(String productId, String updateInterval, String geolocationLocality, String geolocationCountry, final ApiCallback<StreamResultOfCoinbaseBrokerageProxyTradingApiGetDepthStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetDepthStreamValidateBeforeCall(productId, updateInterval, geolocationLocality, geolocationCountry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseBrokerageProxyTradingApiGetDepthStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetDeviceGroup
     * @param portfolioId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetDeviceGroupCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/device_group"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetDeviceGroupValidateBeforeCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetDeviceGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetDeviceGroupCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @return CoinbaseEngPrimeApiApiGetDeviceGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetDeviceGroupResponse primeAPIGetDeviceGroup(String portfolioId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetDeviceGroupResponse> resp = primeAPIGetDeviceGroupWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetDeviceGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetDeviceGroupResponse> primeAPIGetDeviceGroupWithHttpInfo(String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetDeviceGroupValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetDeviceGroupResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetDeviceGroupAsync(String portfolioId, final ApiCallback<CoinbaseEngPrimeApiApiGetDeviceGroupResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetDeviceGroupValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetDeviceGroupResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetDocument
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetDocumentCall(String vehicleId, String documentKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/documents/{document_key}"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()))
            .replaceAll("\\{" + "document_key" + "\\}", apiClient.escapeString(documentKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetDocumentValidateBeforeCall(String vehicleId, String documentKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetDocument(Async)");
        }
        
        // verify the required parameter 'documentKey' is set
        if (documentKey == null) {
            throw new ApiException("Missing the required parameter 'documentKey' when calling primeAPIGetDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetDocumentCall(vehicleId, documentKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @return CoinbaseEngPrimeApiApiGetDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetDocumentResponse primeAPIGetDocument(String vehicleId, String documentKey) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetDocumentResponse> resp = primeAPIGetDocumentWithHttpInfo(vehicleId, documentKey);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetDocumentResponse> primeAPIGetDocumentWithHttpInfo(String vehicleId, String documentKey) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetDocumentValidateBeforeCall(vehicleId, documentKey, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetDocumentAsync(String vehicleId, String documentKey, final ApiCallback<CoinbaseEngPrimeApiApiGetDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetDocumentValidateBeforeCall(vehicleId, documentKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetDocumentDownloadLinks
     * @param documentId  (required)
     * @param portfolioId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetDocumentDownloadLinksCall(String documentId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/reporting_center/document/{document_id}/download"
            .replaceAll("\\{" + "document_id" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetDocumentDownloadLinksValidateBeforeCall(String documentId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling primeAPIGetDocumentDownloadLinks(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetDocumentDownloadLinksCall(documentId, portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param documentId  (required)
     * @param portfolioId  (optional)
     * @return CoinbaseEngPrimeApiApiGetDocumentDownloadLinksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetDocumentDownloadLinksResponse primeAPIGetDocumentDownloadLinks(String documentId, String portfolioId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetDocumentDownloadLinksResponse> resp = primeAPIGetDocumentDownloadLinksWithHttpInfo(documentId, portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param documentId  (required)
     * @param portfolioId  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetDocumentDownloadLinksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetDocumentDownloadLinksResponse> primeAPIGetDocumentDownloadLinksWithHttpInfo(String documentId, String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetDocumentDownloadLinksValidateBeforeCall(documentId, portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetDocumentDownloadLinksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param documentId  (required)
     * @param portfolioId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetDocumentDownloadLinksAsync(String documentId, String portfolioId, final ApiCallback<CoinbaseEngPrimeApiApiGetDocumentDownloadLinksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetDocumentDownloadLinksValidateBeforeCall(documentId, portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetDocumentDownloadLinksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetDocumentSignatureStatus
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetDocumentSignatureStatusCall(String vehicleId, String documentKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/documents/{document_key}/status"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()))
            .replaceAll("\\{" + "document_key" + "\\}", apiClient.escapeString(documentKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetDocumentSignatureStatusValidateBeforeCall(String vehicleId, String documentKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetDocumentSignatureStatus(Async)");
        }
        
        // verify the required parameter 'documentKey' is set
        if (documentKey == null) {
            throw new ApiException("Missing the required parameter 'documentKey' when calling primeAPIGetDocumentSignatureStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetDocumentSignatureStatusCall(vehicleId, documentKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @return CoinbaseEngPrimeApiApiGetDocumentSignatureStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetDocumentSignatureStatusResponse primeAPIGetDocumentSignatureStatus(String vehicleId, String documentKey) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetDocumentSignatureStatusResponse> resp = primeAPIGetDocumentSignatureStatusWithHttpInfo(vehicleId, documentKey);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetDocumentSignatureStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetDocumentSignatureStatusResponse> primeAPIGetDocumentSignatureStatusWithHttpInfo(String vehicleId, String documentKey) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetDocumentSignatureStatusValidateBeforeCall(vehicleId, documentKey, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetDocumentSignatureStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetDocumentSignatureStatusAsync(String vehicleId, String documentKey, final ApiCallback<CoinbaseEngPrimeApiApiGetDocumentSignatureStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetDocumentSignatureStatusValidateBeforeCall(vehicleId, documentKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetDocumentSignatureStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetEntitySettings
     * @param entityId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetEntitySettingsCall(String entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/entities/{entity_id}/settings"
            .replaceAll("\\{" + "entity_id" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetEntitySettingsValidateBeforeCall(String entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling primeAPIGetEntitySettings(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetEntitySettingsCall(entityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @return List&lt;CoinbaseCustodyApiSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CoinbaseCustodyApiSettings> primeAPIGetEntitySettings(String entityId) throws ApiException {
        ApiResponse<List<CoinbaseCustodyApiSettings>> resp = primeAPIGetEntitySettingsWithHttpInfo(entityId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @return ApiResponse&lt;List&lt;CoinbaseCustodyApiSettings&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CoinbaseCustodyApiSettings>> primeAPIGetEntitySettingsWithHttpInfo(String entityId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetEntitySettingsValidateBeforeCall(entityId, null, null);
        Type localVarReturnType = new TypeToken<List<CoinbaseCustodyApiSettings>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetEntitySettingsAsync(String entityId, final ApiCallback<List<CoinbaseCustodyApiSettings>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetEntitySettingsValidateBeforeCall(entityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CoinbaseCustodyApiSettings>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetEvaluationResult
     * @param portfolioId Portfolio ID (required)
     * @param activityId Activity ID (optional)
     * @param transactionId Transaction ID (optional)
     * @param hierarchyHierarchyType  (optional, default to HIERARCHY_TYPE_UNKNOWN)
     * @param hierarchyHierarchyId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetEvaluationResultCall(String portfolioId, String activityId, String transactionId, String hierarchyHierarchyType, String hierarchyHierarchyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/policies/evaluation"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("activity_id", activityId));
        if (transactionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transaction_id", transactionId));
        if (hierarchyHierarchyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hierarchy.hierarchy_type", hierarchyHierarchyType));
        if (hierarchyHierarchyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hierarchy.hierarchy_id", hierarchyHierarchyId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetEvaluationResultValidateBeforeCall(String portfolioId, String activityId, String transactionId, String hierarchyHierarchyType, String hierarchyHierarchyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetEvaluationResult(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetEvaluationResultCall(portfolioId, activityId, transactionId, hierarchyHierarchyType, hierarchyHierarchyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId Portfolio ID (required)
     * @param activityId Activity ID (optional)
     * @param transactionId Transaction ID (optional)
     * @param hierarchyHierarchyType  (optional, default to HIERARCHY_TYPE_UNKNOWN)
     * @param hierarchyHierarchyId  (optional)
     * @return CoinbaseEngPrimeApiApiGetEvaluationResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetEvaluationResultResponse primeAPIGetEvaluationResult(String portfolioId, String activityId, String transactionId, String hierarchyHierarchyType, String hierarchyHierarchyId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetEvaluationResultResponse> resp = primeAPIGetEvaluationResultWithHttpInfo(portfolioId, activityId, transactionId, hierarchyHierarchyType, hierarchyHierarchyId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId Portfolio ID (required)
     * @param activityId Activity ID (optional)
     * @param transactionId Transaction ID (optional)
     * @param hierarchyHierarchyType  (optional, default to HIERARCHY_TYPE_UNKNOWN)
     * @param hierarchyHierarchyId  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetEvaluationResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetEvaluationResultResponse> primeAPIGetEvaluationResultWithHttpInfo(String portfolioId, String activityId, String transactionId, String hierarchyHierarchyType, String hierarchyHierarchyId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetEvaluationResultValidateBeforeCall(portfolioId, activityId, transactionId, hierarchyHierarchyType, hierarchyHierarchyId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetEvaluationResultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId Portfolio ID (required)
     * @param activityId Activity ID (optional)
     * @param transactionId Transaction ID (optional)
     * @param hierarchyHierarchyType  (optional, default to HIERARCHY_TYPE_UNKNOWN)
     * @param hierarchyHierarchyId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetEvaluationResultAsync(String portfolioId, String activityId, String transactionId, String hierarchyHierarchyType, String hierarchyHierarchyId, final ApiCallback<CoinbaseEngPrimeApiApiGetEvaluationResultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetEvaluationResultValidateBeforeCall(portfolioId, activityId, transactionId, hierarchyHierarchyType, hierarchyHierarchyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetEvaluationResultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetExchangeRate
     * @param portfolioId  (required)
     * @param sourceCurrencySymbol  (required)
     * @param destinationCurrencySymbol  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetExchangeRateCall(String portfolioId, String sourceCurrencySymbol, String destinationCurrencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/source_currency/{source_currency_symbol}/destination_currency/{destination_currency_symbol}/exchange_rate"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "source_currency_symbol" + "\\}", apiClient.escapeString(sourceCurrencySymbol.toString()))
            .replaceAll("\\{" + "destination_currency_symbol" + "\\}", apiClient.escapeString(destinationCurrencySymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetExchangeRateValidateBeforeCall(String portfolioId, String sourceCurrencySymbol, String destinationCurrencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetExchangeRate(Async)");
        }
        
        // verify the required parameter 'sourceCurrencySymbol' is set
        if (sourceCurrencySymbol == null) {
            throw new ApiException("Missing the required parameter 'sourceCurrencySymbol' when calling primeAPIGetExchangeRate(Async)");
        }
        
        // verify the required parameter 'destinationCurrencySymbol' is set
        if (destinationCurrencySymbol == null) {
            throw new ApiException("Missing the required parameter 'destinationCurrencySymbol' when calling primeAPIGetExchangeRate(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetExchangeRateCall(portfolioId, sourceCurrencySymbol, destinationCurrencySymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param sourceCurrencySymbol  (required)
     * @param destinationCurrencySymbol  (required)
     * @return CoinbaseEngPrimeApiApiGetExchangeRateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetExchangeRateResponse primeAPIGetExchangeRate(String portfolioId, String sourceCurrencySymbol, String destinationCurrencySymbol) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetExchangeRateResponse> resp = primeAPIGetExchangeRateWithHttpInfo(portfolioId, sourceCurrencySymbol, destinationCurrencySymbol);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param sourceCurrencySymbol  (required)
     * @param destinationCurrencySymbol  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetExchangeRateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetExchangeRateResponse> primeAPIGetExchangeRateWithHttpInfo(String portfolioId, String sourceCurrencySymbol, String destinationCurrencySymbol) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetExchangeRateValidateBeforeCall(portfolioId, sourceCurrencySymbol, destinationCurrencySymbol, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetExchangeRateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param sourceCurrencySymbol  (required)
     * @param destinationCurrencySymbol  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetExchangeRateAsync(String portfolioId, String sourceCurrencySymbol, String destinationCurrencySymbol, final ApiCallback<CoinbaseEngPrimeApiApiGetExchangeRateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetExchangeRateValidateBeforeCall(portfolioId, sourceCurrencySymbol, destinationCurrencySymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetExchangeRateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetFidoRegistration
     * @param userId User UUID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetFidoRegistrationCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user_id}/fido/register"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetFidoRegistrationValidateBeforeCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIGetFidoRegistration(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetFidoRegistrationCall(userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId User UUID. (required)
     * @return CoinbaseEngPrimeApiApiGetFidoRegistrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetFidoRegistrationResponse primeAPIGetFidoRegistration(String userId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetFidoRegistrationResponse> resp = primeAPIGetFidoRegistrationWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId User UUID. (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetFidoRegistrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetFidoRegistrationResponse> primeAPIGetFidoRegistrationWithHttpInfo(String userId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetFidoRegistrationValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetFidoRegistrationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId User UUID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetFidoRegistrationAsync(String userId, final ApiCallback<CoinbaseEngPrimeApiApiGetFidoRegistrationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetFidoRegistrationValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetFidoRegistrationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetFinancingProductPermisions
     * @param vehicleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetFinancingProductPermisionsCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/financing_product_permissions"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetFinancingProductPermisionsValidateBeforeCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetFinancingProductPermisions(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetFinancingProductPermisionsCall(vehicleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return CoinbaseEngPrimeApiApiGetFinancingProductPermisionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetFinancingProductPermisionsResponse primeAPIGetFinancingProductPermisions(String vehicleId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetFinancingProductPermisionsResponse> resp = primeAPIGetFinancingProductPermisionsWithHttpInfo(vehicleId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetFinancingProductPermisionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetFinancingProductPermisionsResponse> primeAPIGetFinancingProductPermisionsWithHttpInfo(String vehicleId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetFinancingProductPermisionsValidateBeforeCall(vehicleId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetFinancingProductPermisionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetFinancingProductPermisionsAsync(String vehicleId, final ApiCallback<CoinbaseEngPrimeApiApiGetFinancingProductPermisionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetFinancingProductPermisionsValidateBeforeCall(vehicleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetFinancingProductPermisionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetGovernanceStatus
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetGovernanceStatusCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/governance/status"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetGovernanceStatusValidateBeforeCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetGovernanceStatus(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIGetGovernanceStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetGovernanceStatusCall(portfolioId, walletId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return CoinbaseEngPrimeApiApiGetGovernanceStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetGovernanceStatusResponse primeAPIGetGovernanceStatus(String portfolioId, String walletId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetGovernanceStatusResponse> resp = primeAPIGetGovernanceStatusWithHttpInfo(portfolioId, walletId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetGovernanceStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetGovernanceStatusResponse> primeAPIGetGovernanceStatusWithHttpInfo(String portfolioId, String walletId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetGovernanceStatusValidateBeforeCall(portfolioId, walletId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetGovernanceStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetGovernanceStatusAsync(String portfolioId, String walletId, final ApiCallback<CoinbaseEngPrimeApiApiGetGovernanceStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetGovernanceStatusValidateBeforeCall(portfolioId, walletId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetGovernanceStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetGovernanceTopic
     * @param vehicleId  (required)
     * @param currencySymbol  (required)
     * @param topicId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetGovernanceTopicCall(String vehicleId, String currencySymbol, String topicId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/{currency_symbol}/topics/{topic_id}"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()))
            .replaceAll("\\{" + "currency_symbol" + "\\}", apiClient.escapeString(currencySymbol.toString()))
            .replaceAll("\\{" + "topic_id" + "\\}", apiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetGovernanceTopicValidateBeforeCall(String vehicleId, String currencySymbol, String topicId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetGovernanceTopic(Async)");
        }
        
        // verify the required parameter 'currencySymbol' is set
        if (currencySymbol == null) {
            throw new ApiException("Missing the required parameter 'currencySymbol' when calling primeAPIGetGovernanceTopic(Async)");
        }
        
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling primeAPIGetGovernanceTopic(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetGovernanceTopicCall(vehicleId, currencySymbol, topicId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (required)
     * @param topicId  (required)
     * @return CoinbaseCustodyApiGovernanceTopic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiGovernanceTopic primeAPIGetGovernanceTopic(String vehicleId, String currencySymbol, String topicId) throws ApiException {
        ApiResponse<CoinbaseCustodyApiGovernanceTopic> resp = primeAPIGetGovernanceTopicWithHttpInfo(vehicleId, currencySymbol, topicId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (required)
     * @param topicId  (required)
     * @return ApiResponse&lt;CoinbaseCustodyApiGovernanceTopic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiGovernanceTopic> primeAPIGetGovernanceTopicWithHttpInfo(String vehicleId, String currencySymbol, String topicId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetGovernanceTopicValidateBeforeCall(vehicleId, currencySymbol, topicId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGovernanceTopic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (required)
     * @param topicId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetGovernanceTopicAsync(String vehicleId, String currencySymbol, String topicId, final ApiCallback<CoinbaseCustodyApiGovernanceTopic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetGovernanceTopicValidateBeforeCall(vehicleId, currencySymbol, topicId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGovernanceTopic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetGovernanceTopics
     * @param vehicleId  (required)
     * @param currencySymbol  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param sortDirection  (optional, default to DESC)
     * @param search  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetGovernanceTopicsCall(String vehicleId, String currencySymbol, String cursor, Integer limit, String sortDirection, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/{currency_symbol}/topics"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()))
            .replaceAll("\\{" + "currency_symbol" + "\\}", apiClient.escapeString(currencySymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetGovernanceTopicsValidateBeforeCall(String vehicleId, String currencySymbol, String cursor, Integer limit, String sortDirection, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetGovernanceTopics(Async)");
        }
        
        // verify the required parameter 'currencySymbol' is set
        if (currencySymbol == null) {
            throw new ApiException("Missing the required parameter 'currencySymbol' when calling primeAPIGetGovernanceTopics(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetGovernanceTopicsCall(vehicleId, currencySymbol, cursor, limit, sortDirection, search, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param sortDirection  (optional, default to DESC)
     * @param search  (optional)
     * @return CoinbaseEngPrimeApiApiGetGovernanceTopicsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetGovernanceTopicsResponse primeAPIGetGovernanceTopics(String vehicleId, String currencySymbol, String cursor, Integer limit, String sortDirection, String search) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetGovernanceTopicsResponse> resp = primeAPIGetGovernanceTopicsWithHttpInfo(vehicleId, currencySymbol, cursor, limit, sortDirection, search);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param sortDirection  (optional, default to DESC)
     * @param search  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetGovernanceTopicsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetGovernanceTopicsResponse> primeAPIGetGovernanceTopicsWithHttpInfo(String vehicleId, String currencySymbol, String cursor, Integer limit, String sortDirection, String search) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetGovernanceTopicsValidateBeforeCall(vehicleId, currencySymbol, cursor, limit, sortDirection, search, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetGovernanceTopicsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param sortDirection  (optional, default to DESC)
     * @param search  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetGovernanceTopicsAsync(String vehicleId, String currencySymbol, String cursor, Integer limit, String sortDirection, String search, final ApiCallback<CoinbaseEngPrimeApiApiGetGovernanceTopicsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetGovernanceTopicsValidateBeforeCall(vehicleId, currencySymbol, cursor, limit, sortDirection, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetGovernanceTopicsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetGovernanceVotes
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param sortDirection  (optional, default to DESC)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetGovernanceVotesCall(String portfolioId, String walletId, String cursor, Integer limit, String sortDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/governance/votes"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetGovernanceVotesValidateBeforeCall(String portfolioId, String walletId, String cursor, Integer limit, String sortDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetGovernanceVotes(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIGetGovernanceVotes(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetGovernanceVotesCall(portfolioId, walletId, cursor, limit, sortDirection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param sortDirection  (optional, default to DESC)
     * @return CoinbaseEngPrimeApiApiGetGovernanceVotesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetGovernanceVotesResponse primeAPIGetGovernanceVotes(String portfolioId, String walletId, String cursor, Integer limit, String sortDirection) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetGovernanceVotesResponse> resp = primeAPIGetGovernanceVotesWithHttpInfo(portfolioId, walletId, cursor, limit, sortDirection);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param sortDirection  (optional, default to DESC)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetGovernanceVotesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetGovernanceVotesResponse> primeAPIGetGovernanceVotesWithHttpInfo(String portfolioId, String walletId, String cursor, Integer limit, String sortDirection) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetGovernanceVotesValidateBeforeCall(portfolioId, walletId, cursor, limit, sortDirection, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetGovernanceVotesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param sortDirection  (optional, default to DESC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetGovernanceVotesAsync(String portfolioId, String walletId, String cursor, Integer limit, String sortDirection, final ApiCallback<CoinbaseEngPrimeApiApiGetGovernanceVotesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetGovernanceVotesValidateBeforeCall(portfolioId, walletId, cursor, limit, sortDirection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetGovernanceVotesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetGovernanceVotingWeights
     * @param walletId  (required)
     * @param topicIds  (optional)
     * @param portfolioId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetGovernanceVotingWeightsCall(String walletId, List<String> topicIds, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/wallets/{wallet_id}/voting_weights"
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (topicIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "topic_ids", topicIds));
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetGovernanceVotingWeightsValidateBeforeCall(String walletId, List<String> topicIds, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIGetGovernanceVotingWeights(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetGovernanceVotingWeightsCall(walletId, topicIds, portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param walletId  (required)
     * @param topicIds  (optional)
     * @param portfolioId  (optional)
     * @return CoinbaseCustodyApiGetVotingWeightsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiGetVotingWeightsResponse primeAPIGetGovernanceVotingWeights(String walletId, List<String> topicIds, String portfolioId) throws ApiException {
        ApiResponse<CoinbaseCustodyApiGetVotingWeightsResponse> resp = primeAPIGetGovernanceVotingWeightsWithHttpInfo(walletId, topicIds, portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param walletId  (required)
     * @param topicIds  (optional)
     * @param portfolioId  (optional)
     * @return ApiResponse&lt;CoinbaseCustodyApiGetVotingWeightsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiGetVotingWeightsResponse> primeAPIGetGovernanceVotingWeightsWithHttpInfo(String walletId, List<String> topicIds, String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetGovernanceVotingWeightsValidateBeforeCall(walletId, topicIds, portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetVotingWeightsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param walletId  (required)
     * @param topicIds  (optional)
     * @param portfolioId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetGovernanceVotingWeightsAsync(String walletId, List<String> topicIds, String portfolioId, final ApiCallback<CoinbaseCustodyApiGetVotingWeightsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetGovernanceVotingWeightsValidateBeforeCall(walletId, topicIds, portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetVotingWeightsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetIVPortfolioBalances
     * @param vehicleId  (required)
     * @param currencySymbol  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetIVPortfolioBalancesCall(String vehicleId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/portfolios/balances"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencySymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_symbol", currencySymbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetIVPortfolioBalancesValidateBeforeCall(String vehicleId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetIVPortfolioBalances(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetIVPortfolioBalancesCall(vehicleId, currencySymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (optional)
     * @return CoinbaseEngPrimeApiApiGetIVPortfolioBalancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetIVPortfolioBalancesResponse primeAPIGetIVPortfolioBalances(String vehicleId, String currencySymbol) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetIVPortfolioBalancesResponse> resp = primeAPIGetIVPortfolioBalancesWithHttpInfo(vehicleId, currencySymbol);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetIVPortfolioBalancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetIVPortfolioBalancesResponse> primeAPIGetIVPortfolioBalancesWithHttpInfo(String vehicleId, String currencySymbol) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetIVPortfolioBalancesValidateBeforeCall(vehicleId, currencySymbol, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetIVPortfolioBalancesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetIVPortfolioBalancesAsync(String vehicleId, String currencySymbol, final ApiCallback<CoinbaseEngPrimeApiApiGetIVPortfolioBalancesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetIVPortfolioBalancesValidateBeforeCall(vehicleId, currencySymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetIVPortfolioBalancesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetIVRestrictions
     * @param vehicleId  (required)
     * @param currencySymbol  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetIVRestrictionsCall(String vehicleId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/restrictions"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencySymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_symbol", currencySymbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetIVRestrictionsValidateBeforeCall(String vehicleId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetIVRestrictions(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetIVRestrictionsCall(vehicleId, currencySymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (optional)
     * @return CoinbaseEngPrimeApiApiGetIVRestrictionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetIVRestrictionsResponse primeAPIGetIVRestrictions(String vehicleId, String currencySymbol) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetIVRestrictionsResponse> resp = primeAPIGetIVRestrictionsWithHttpInfo(vehicleId, currencySymbol);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetIVRestrictionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetIVRestrictionsResponse> primeAPIGetIVRestrictionsWithHttpInfo(String vehicleId, String currencySymbol) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetIVRestrictionsValidateBeforeCall(vehicleId, currencySymbol, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetIVRestrictionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetIVRestrictionsAsync(String vehicleId, String currencySymbol, final ApiCallback<CoinbaseEngPrimeApiApiGetIVRestrictionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetIVRestrictionsValidateBeforeCall(vehicleId, currencySymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetIVRestrictionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetIntrospect
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetIntrospectCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/sessions/introspect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetIntrospectValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = primeAPIGetIntrospectCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @return CoinbaseEngPrimeApiApiGetIntrospectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetIntrospectResponse primeAPIGetIntrospect() throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetIntrospectResponse> resp = primeAPIGetIntrospectWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetIntrospectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetIntrospectResponse> primeAPIGetIntrospectWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetIntrospectValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetIntrospectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetIntrospectAsync(final ApiCallback<CoinbaseEngPrimeApiApiGetIntrospectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetIntrospectValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetIntrospectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetInvestmentVehicle
     * @param portfolioId Filter results by a specific profile_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetInvestmentVehicleCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/investmentVehicle"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetInvestmentVehicleValidateBeforeCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetInvestmentVehicle(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetInvestmentVehicleCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId Filter results by a specific profile_id (required)
     * @return CoinbaseEngPrimeApiApiGetInvestmentVehicleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetInvestmentVehicleResponse primeAPIGetInvestmentVehicle(String portfolioId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetInvestmentVehicleResponse> resp = primeAPIGetInvestmentVehicleWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId Filter results by a specific profile_id (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetInvestmentVehicleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetInvestmentVehicleResponse> primeAPIGetInvestmentVehicleWithHttpInfo(String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetInvestmentVehicleValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetInvestmentVehicleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId Filter results by a specific profile_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetInvestmentVehicleAsync(String portfolioId, final ApiCallback<CoinbaseEngPrimeApiApiGetInvestmentVehicleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetInvestmentVehicleValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetInvestmentVehicleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetInvestmentVehiclePortfolios
     * @param userId  (required)
     * @param portfolioId  (optional)
     * @param vehicleId  (optional)
     * @param includeRoles  (optional)
     * @param paginationLimit  (optional)
     * @param paginationOffset  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetInvestmentVehiclePortfoliosCall(String userId, String portfolioId, String vehicleId, Boolean includeRoles, Integer paginationLimit, Integer paginationOffset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user_id}/investment_vehicle_portfolios"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));
        if (vehicleId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vehicle_id", vehicleId));
        if (includeRoles != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_roles", includeRoles));
        if (paginationLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagination.limit", paginationLimit));
        if (paginationOffset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagination.offset", paginationOffset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetInvestmentVehiclePortfoliosValidateBeforeCall(String userId, String portfolioId, String vehicleId, Boolean includeRoles, Integer paginationLimit, Integer paginationOffset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIGetInvestmentVehiclePortfolios(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetInvestmentVehiclePortfoliosCall(userId, portfolioId, vehicleId, includeRoles, paginationLimit, paginationOffset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param portfolioId  (optional)
     * @param vehicleId  (optional)
     * @param includeRoles  (optional)
     * @param paginationLimit  (optional)
     * @param paginationOffset  (optional)
     * @return CoinbaseEngPrimeApiApiGetInvestmentVehiclePortfoliosResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetInvestmentVehiclePortfoliosResponse primeAPIGetInvestmentVehiclePortfolios(String userId, String portfolioId, String vehicleId, Boolean includeRoles, Integer paginationLimit, Integer paginationOffset) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetInvestmentVehiclePortfoliosResponse> resp = primeAPIGetInvestmentVehiclePortfoliosWithHttpInfo(userId, portfolioId, vehicleId, includeRoles, paginationLimit, paginationOffset);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param portfolioId  (optional)
     * @param vehicleId  (optional)
     * @param includeRoles  (optional)
     * @param paginationLimit  (optional)
     * @param paginationOffset  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetInvestmentVehiclePortfoliosResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetInvestmentVehiclePortfoliosResponse> primeAPIGetInvestmentVehiclePortfoliosWithHttpInfo(String userId, String portfolioId, String vehicleId, Boolean includeRoles, Integer paginationLimit, Integer paginationOffset) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetInvestmentVehiclePortfoliosValidateBeforeCall(userId, portfolioId, vehicleId, includeRoles, paginationLimit, paginationOffset, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetInvestmentVehiclePortfoliosResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param portfolioId  (optional)
     * @param vehicleId  (optional)
     * @param includeRoles  (optional)
     * @param paginationLimit  (optional)
     * @param paginationOffset  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetInvestmentVehiclePortfoliosAsync(String userId, String portfolioId, String vehicleId, Boolean includeRoles, Integer paginationLimit, Integer paginationOffset, final ApiCallback<CoinbaseEngPrimeApiApiGetInvestmentVehiclePortfoliosResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetInvestmentVehiclePortfoliosValidateBeforeCall(userId, portfolioId, vehicleId, includeRoles, paginationLimit, paginationOffset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetInvestmentVehiclePortfoliosResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetInvoiceDownloadLink
     * @param vehicleId  (required)
     * @param uuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetInvoiceDownloadLinkCall(String vehicleId, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/invoices/{uuid}/download"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetInvoiceDownloadLinkValidateBeforeCall(String vehicleId, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetInvoiceDownloadLink(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling primeAPIGetInvoiceDownloadLink(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetInvoiceDownloadLinkCall(vehicleId, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param uuid  (required)
     * @return CoinbaseEngPrimeApiApiGetInvoiceDownloadLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetInvoiceDownloadLinkResponse primeAPIGetInvoiceDownloadLink(String vehicleId, String uuid) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetInvoiceDownloadLinkResponse> resp = primeAPIGetInvoiceDownloadLinkWithHttpInfo(vehicleId, uuid);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetInvoiceDownloadLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetInvoiceDownloadLinkResponse> primeAPIGetInvoiceDownloadLinkWithHttpInfo(String vehicleId, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetInvoiceDownloadLinkValidateBeforeCall(vehicleId, uuid, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetInvoiceDownloadLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param uuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetInvoiceDownloadLinkAsync(String vehicleId, String uuid, final ApiCallback<CoinbaseEngPrimeApiApiGetInvoiceDownloadLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetInvoiceDownloadLinkValidateBeforeCall(vehicleId, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetInvoiceDownloadLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetInvoices
     * @param vehicleId  (required)
     * @param invoiceNumber  (optional)
     * @param billingYear  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetInvoicesCall(String vehicleId, String invoiceNumber, Integer billingYear, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/invoices"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (invoiceNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("invoice_number", invoiceNumber));
        if (billingYear != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("billing_year", billingYear));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetInvoicesValidateBeforeCall(String vehicleId, String invoiceNumber, Integer billingYear, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetInvoices(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetInvoicesCall(vehicleId, invoiceNumber, billingYear, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param invoiceNumber  (optional)
     * @param billingYear  (optional)
     * @return List&lt;CoinbaseCustodyApiInvoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CoinbaseCustodyApiInvoice> primeAPIGetInvoices(String vehicleId, String invoiceNumber, Integer billingYear) throws ApiException {
        ApiResponse<List<CoinbaseCustodyApiInvoice>> resp = primeAPIGetInvoicesWithHttpInfo(vehicleId, invoiceNumber, billingYear);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param invoiceNumber  (optional)
     * @param billingYear  (optional)
     * @return ApiResponse&lt;List&lt;CoinbaseCustodyApiInvoice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CoinbaseCustodyApiInvoice>> primeAPIGetInvoicesWithHttpInfo(String vehicleId, String invoiceNumber, Integer billingYear) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetInvoicesValidateBeforeCall(vehicleId, invoiceNumber, billingYear, null, null);
        Type localVarReturnType = new TypeToken<List<CoinbaseCustodyApiInvoice>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param invoiceNumber  (optional)
     * @param billingYear  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetInvoicesAsync(String vehicleId, String invoiceNumber, Integer billingYear, final ApiCallback<List<CoinbaseCustodyApiInvoice>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetInvoicesValidateBeforeCall(vehicleId, invoiceNumber, billingYear, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CoinbaseCustodyApiInvoice>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetInvoicesRemainingBalance
     * @param vehicleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetInvoicesRemainingBalanceCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/invoices_balance"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetInvoicesRemainingBalanceValidateBeforeCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetInvoicesRemainingBalance(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetInvoicesRemainingBalanceCall(vehicleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return CoinbaseEngPrimeApiApiGetInvoicesRemainingBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetInvoicesRemainingBalanceResponse primeAPIGetInvoicesRemainingBalance(String vehicleId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetInvoicesRemainingBalanceResponse> resp = primeAPIGetInvoicesRemainingBalanceWithHttpInfo(vehicleId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetInvoicesRemainingBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetInvoicesRemainingBalanceResponse> primeAPIGetInvoicesRemainingBalanceWithHttpInfo(String vehicleId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetInvoicesRemainingBalanceValidateBeforeCall(vehicleId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetInvoicesRemainingBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetInvoicesRemainingBalanceAsync(String vehicleId, final ApiCallback<CoinbaseEngPrimeApiApiGetInvoicesRemainingBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetInvoicesRemainingBalanceValidateBeforeCall(vehicleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetInvoicesRemainingBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetIvDomicileCategory
     * @param vehicleId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetIvDomicileCategoryCall(String vehicleId, CoinbaseEngPrimeApiApiGetIvDomicileCategoryRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/domicile_category"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetIvDomicileCategoryValidateBeforeCall(String vehicleId, CoinbaseEngPrimeApiApiGetIvDomicileCategoryRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetIvDomicileCategory(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIGetIvDomicileCategory(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetIvDomicileCategoryCall(vehicleId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiGetIvDomicileCategoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetIvDomicileCategoryResponse primeAPIGetIvDomicileCategory(String vehicleId, CoinbaseEngPrimeApiApiGetIvDomicileCategoryRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetIvDomicileCategoryResponse> resp = primeAPIGetIvDomicileCategoryWithHttpInfo(vehicleId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetIvDomicileCategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetIvDomicileCategoryResponse> primeAPIGetIvDomicileCategoryWithHttpInfo(String vehicleId, CoinbaseEngPrimeApiApiGetIvDomicileCategoryRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetIvDomicileCategoryValidateBeforeCall(vehicleId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetIvDomicileCategoryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetIvDomicileCategoryAsync(String vehicleId, CoinbaseEngPrimeApiApiGetIvDomicileCategoryRequest body, final ApiCallback<CoinbaseEngPrimeApiApiGetIvDomicileCategoryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetIvDomicileCategoryValidateBeforeCall(vehicleId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetIvDomicileCategoryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetLadderStream
     * @param productId Product id for the requested ladder (required)
     * @param updateInterval Time between each patch for the ladder (required)
     * @param aggregation Aggregation amount for the requested ladder (required)
     * @param feeAdjust True if the requested ladder is fee adjust (required)
     * @param orderAmount (Deprecated) Order amount for the requested ladder (optional)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetLadderStreamCall(String productId, String updateInterval, String aggregation, Boolean feeAdjust, String orderAmount, String geolocationLocality, String geolocationCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/products/{product_id}/ladder"
            .replaceAll("\\{" + "product_id" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("update_interval", updateInterval));
        if (aggregation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggregation", aggregation));
        if (orderAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_amount", orderAmount));
        if (feeAdjust != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fee_adjust", feeAdjust));
        if (geolocationLocality != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geolocation.locality", geolocationLocality));
        if (geolocationCountry != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geolocation.country", geolocationCountry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetLadderStreamValidateBeforeCall(String productId, String updateInterval, String aggregation, Boolean feeAdjust, String orderAmount, String geolocationLocality, String geolocationCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling primeAPIGetLadderStream(Async)");
        }
        
        // verify the required parameter 'updateInterval' is set
        if (updateInterval == null) {
            throw new ApiException("Missing the required parameter 'updateInterval' when calling primeAPIGetLadderStream(Async)");
        }
        
        // verify the required parameter 'aggregation' is set
        if (aggregation == null) {
            throw new ApiException("Missing the required parameter 'aggregation' when calling primeAPIGetLadderStream(Async)");
        }
        
        // verify the required parameter 'feeAdjust' is set
        if (feeAdjust == null) {
            throw new ApiException("Missing the required parameter 'feeAdjust' when calling primeAPIGetLadderStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetLadderStreamCall(productId, updateInterval, aggregation, feeAdjust, orderAmount, geolocationLocality, geolocationCountry, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param productId Product id for the requested ladder (required)
     * @param updateInterval Time between each patch for the ladder (required)
     * @param aggregation Aggregation amount for the requested ladder (required)
     * @param feeAdjust True if the requested ladder is fee adjust (required)
     * @param orderAmount (Deprecated) Order amount for the requested ladder (optional)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @return StreamResultOfCoinbaseBrokerageProxyTradingApiGetLadderStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseBrokerageProxyTradingApiGetLadderStreamResponse primeAPIGetLadderStream(String productId, String updateInterval, String aggregation, Boolean feeAdjust, String orderAmount, String geolocationLocality, String geolocationCountry) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseBrokerageProxyTradingApiGetLadderStreamResponse> resp = primeAPIGetLadderStreamWithHttpInfo(productId, updateInterval, aggregation, feeAdjust, orderAmount, geolocationLocality, geolocationCountry);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param productId Product id for the requested ladder (required)
     * @param updateInterval Time between each patch for the ladder (required)
     * @param aggregation Aggregation amount for the requested ladder (required)
     * @param feeAdjust True if the requested ladder is fee adjust (required)
     * @param orderAmount (Deprecated) Order amount for the requested ladder (optional)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @return ApiResponse&lt;StreamResultOfCoinbaseBrokerageProxyTradingApiGetLadderStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseBrokerageProxyTradingApiGetLadderStreamResponse> primeAPIGetLadderStreamWithHttpInfo(String productId, String updateInterval, String aggregation, Boolean feeAdjust, String orderAmount, String geolocationLocality, String geolocationCountry) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetLadderStreamValidateBeforeCall(productId, updateInterval, aggregation, feeAdjust, orderAmount, geolocationLocality, geolocationCountry, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseBrokerageProxyTradingApiGetLadderStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId Product id for the requested ladder (required)
     * @param updateInterval Time between each patch for the ladder (required)
     * @param aggregation Aggregation amount for the requested ladder (required)
     * @param feeAdjust True if the requested ladder is fee adjust (required)
     * @param orderAmount (Deprecated) Order amount for the requested ladder (optional)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetLadderStreamAsync(String productId, String updateInterval, String aggregation, Boolean feeAdjust, String orderAmount, String geolocationLocality, String geolocationCountry, final ApiCallback<StreamResultOfCoinbaseBrokerageProxyTradingApiGetLadderStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetLadderStreamValidateBeforeCall(productId, updateInterval, aggregation, feeAdjust, orderAmount, geolocationLocality, geolocationCountry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseBrokerageProxyTradingApiGetLadderStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetLatestTestTransaction
     * @param portfolioId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetLatestTestTransactionCall(String portfolioId, CoinbaseEngPrimeApiApiGetLatestTestTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/test_transaction/status"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetLatestTestTransactionValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiGetLatestTestTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetLatestTestTransaction(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIGetLatestTestTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetLatestTestTransactionCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiGetLatestTestTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetLatestTestTransactionResponse primeAPIGetLatestTestTransaction(String portfolioId, CoinbaseEngPrimeApiApiGetLatestTestTransactionRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetLatestTestTransactionResponse> resp = primeAPIGetLatestTestTransactionWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetLatestTestTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetLatestTestTransactionResponse> primeAPIGetLatestTestTransactionWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiGetLatestTestTransactionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetLatestTestTransactionValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetLatestTestTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetLatestTestTransactionAsync(String portfolioId, CoinbaseEngPrimeApiApiGetLatestTestTransactionRequest body, final ApiCallback<CoinbaseEngPrimeApiApiGetLatestTestTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetLatestTestTransactionValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetLatestTestTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetLlCRollout
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetLlCRolloutCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/get_llc_rollout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetLlCRolloutValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = primeAPIGetLlCRolloutCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @return CoinbaseEngPrimeApiApiLlcRolloutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiLlcRolloutResponse primeAPIGetLlCRollout() throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiLlcRolloutResponse> resp = primeAPIGetLlCRolloutWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiLlcRolloutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiLlcRolloutResponse> primeAPIGetLlCRolloutWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetLlCRolloutValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiLlcRolloutResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetLlCRolloutAsync(final ApiCallback<CoinbaseEngPrimeApiApiLlcRolloutResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetLlCRolloutValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiLlcRolloutResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetLocateAssets
     * @param entityId  (required)
     * @param date  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetLocateAssetsCall(String entityId, OffsetDateTime date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{entity_id}/pm/locates/assets"
            .replaceAll("\\{" + "entity_id" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetLocateAssetsValidateBeforeCall(String entityId, OffsetDateTime date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling primeAPIGetLocateAssets(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetLocateAssetsCall(entityId, date, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param date  (optional)
     * @return CoinbaseFinancingGetLocateAssetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseFinancingGetLocateAssetsResponse primeAPIGetLocateAssets(String entityId, OffsetDateTime date) throws ApiException {
        ApiResponse<CoinbaseFinancingGetLocateAssetsResponse> resp = primeAPIGetLocateAssetsWithHttpInfo(entityId, date);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param date  (optional)
     * @return ApiResponse&lt;CoinbaseFinancingGetLocateAssetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseFinancingGetLocateAssetsResponse> primeAPIGetLocateAssetsWithHttpInfo(String entityId, OffsetDateTime date) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetLocateAssetsValidateBeforeCall(entityId, date, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingGetLocateAssetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId  (required)
     * @param date  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetLocateAssetsAsync(String entityId, OffsetDateTime date, final ApiCallback<CoinbaseFinancingGetLocateAssetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetLocateAssetsValidateBeforeCall(entityId, date, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingGetLocateAssetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetMarketTradesStream
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param limit Number of trades to return. (required)
     * @param updateInterval Time between each patch for the market trades (required)
     * @param venueFilters List of Venue filters to apply on trades (optional)
     * @param sideFilter Side filters to apply on trades (optional, default to ALL_ORDERS)
     * @param orderByField The field the data can be ordered by (e.g. price) (optional, default to PRICE)
     * @param sortDirection The direction the data will be ordered by (e.g. ASC | DSC) (optional, default to ASC)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetMarketTradesStreamCall(String productId, Integer limit, String updateInterval, List<String> venueFilters, String sideFilter, String orderByField, String sortDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/products/{product_id}/trades"
            .replaceAll("\\{" + "product_id" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (venueFilters != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "venue_filters", venueFilters));
        if (sideFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("side_filter", sideFilter));
        if (updateInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("update_interval", updateInterval));
        if (orderByField != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by_field", orderByField));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetMarketTradesStreamValidateBeforeCall(String productId, Integer limit, String updateInterval, List<String> venueFilters, String sideFilter, String orderByField, String sortDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling primeAPIGetMarketTradesStream(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling primeAPIGetMarketTradesStream(Async)");
        }
        
        // verify the required parameter 'updateInterval' is set
        if (updateInterval == null) {
            throw new ApiException("Missing the required parameter 'updateInterval' when calling primeAPIGetMarketTradesStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetMarketTradesStreamCall(productId, limit, updateInterval, venueFilters, sideFilter, orderByField, sortDirection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param limit Number of trades to return. (required)
     * @param updateInterval Time between each patch for the market trades (required)
     * @param venueFilters List of Venue filters to apply on trades (optional)
     * @param sideFilter Side filters to apply on trades (optional, default to ALL_ORDERS)
     * @param orderByField The field the data can be ordered by (e.g. price) (optional, default to PRICE)
     * @param sortDirection The direction the data will be ordered by (e.g. ASC | DSC) (optional, default to ASC)
     * @return StreamResultOfCoinbaseBrokerageProxyTradingApiGetMarketTradesStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseBrokerageProxyTradingApiGetMarketTradesStreamResponse primeAPIGetMarketTradesStream(String productId, Integer limit, String updateInterval, List<String> venueFilters, String sideFilter, String orderByField, String sortDirection) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseBrokerageProxyTradingApiGetMarketTradesStreamResponse> resp = primeAPIGetMarketTradesStreamWithHttpInfo(productId, limit, updateInterval, venueFilters, sideFilter, orderByField, sortDirection);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param limit Number of trades to return. (required)
     * @param updateInterval Time between each patch for the market trades (required)
     * @param venueFilters List of Venue filters to apply on trades (optional)
     * @param sideFilter Side filters to apply on trades (optional, default to ALL_ORDERS)
     * @param orderByField The field the data can be ordered by (e.g. price) (optional, default to PRICE)
     * @param sortDirection The direction the data will be ordered by (e.g. ASC | DSC) (optional, default to ASC)
     * @return ApiResponse&lt;StreamResultOfCoinbaseBrokerageProxyTradingApiGetMarketTradesStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseBrokerageProxyTradingApiGetMarketTradesStreamResponse> primeAPIGetMarketTradesStreamWithHttpInfo(String productId, Integer limit, String updateInterval, List<String> venueFilters, String sideFilter, String orderByField, String sortDirection) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetMarketTradesStreamValidateBeforeCall(productId, limit, updateInterval, venueFilters, sideFilter, orderByField, sortDirection, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseBrokerageProxyTradingApiGetMarketTradesStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param limit Number of trades to return. (required)
     * @param updateInterval Time between each patch for the market trades (required)
     * @param venueFilters List of Venue filters to apply on trades (optional)
     * @param sideFilter Side filters to apply on trades (optional, default to ALL_ORDERS)
     * @param orderByField The field the data can be ordered by (e.g. price) (optional, default to PRICE)
     * @param sortDirection The direction the data will be ordered by (e.g. ASC | DSC) (optional, default to ASC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetMarketTradesStreamAsync(String productId, Integer limit, String updateInterval, List<String> venueFilters, String sideFilter, String orderByField, String sortDirection, final ApiCallback<StreamResultOfCoinbaseBrokerageProxyTradingApiGetMarketTradesStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetMarketTradesStreamValidateBeforeCall(productId, limit, updateInterval, venueFilters, sideFilter, orderByField, sortDirection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseBrokerageProxyTradingApiGetMarketTradesStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetNotificationPreferencesForChannel
     * @param userId  (required)
     * @param channel  (optional, default to CHANNEL_UNSPECIFIED)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetNotificationPreferencesForChannelCall(String userId, String channel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/notification_preferences/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (channel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("channel", channel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetNotificationPreferencesForChannelValidateBeforeCall(String userId, String channel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIGetNotificationPreferencesForChannel(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetNotificationPreferencesForChannelCall(userId, channel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param channel  (optional, default to CHANNEL_UNSPECIFIED)
     * @return CoinbaseEngPrimeApiApiGetUserPreferencesForChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetUserPreferencesForChannelResponse primeAPIGetNotificationPreferencesForChannel(String userId, String channel) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetUserPreferencesForChannelResponse> resp = primeAPIGetNotificationPreferencesForChannelWithHttpInfo(userId, channel);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param channel  (optional, default to CHANNEL_UNSPECIFIED)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetUserPreferencesForChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetUserPreferencesForChannelResponse> primeAPIGetNotificationPreferencesForChannelWithHttpInfo(String userId, String channel) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetNotificationPreferencesForChannelValidateBeforeCall(userId, channel, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetUserPreferencesForChannelResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param channel  (optional, default to CHANNEL_UNSPECIFIED)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetNotificationPreferencesForChannelAsync(String userId, String channel, final ApiCallback<CoinbaseEngPrimeApiApiGetUserPreferencesForChannelResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetNotificationPreferencesForChannelValidateBeforeCall(userId, channel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetUserPreferencesForChannelResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetNotifications
     * @param organizationId  (optional)
     * @param type  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetNotificationsCall(String organizationId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (organizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("organization_id", organizationId));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetNotificationsValidateBeforeCall(String organizationId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = primeAPIGetNotificationsCall(organizationId, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param organizationId  (optional)
     * @param type  (optional)
     * @return CoinbaseCustodyApiGetNotificationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiGetNotificationsResponse primeAPIGetNotifications(String organizationId, String type) throws ApiException {
        ApiResponse<CoinbaseCustodyApiGetNotificationsResponse> resp = primeAPIGetNotificationsWithHttpInfo(organizationId, type);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param organizationId  (optional)
     * @param type  (optional)
     * @return ApiResponse&lt;CoinbaseCustodyApiGetNotificationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiGetNotificationsResponse> primeAPIGetNotificationsWithHttpInfo(String organizationId, String type) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetNotificationsValidateBeforeCall(organizationId, type, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetNotificationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param organizationId  (optional)
     * @param type  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetNotificationsAsync(String organizationId, String type, final ApiCallback<CoinbaseCustodyApiGetNotificationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetNotificationsValidateBeforeCall(organizationId, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetNotificationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetOrder
     * @param orderId  (required)
     * @param portfolioId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetOrderCall(String orderId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orders/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetOrderValidateBeforeCall(String orderId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling primeAPIGetOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetOrderCall(orderId, portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param orderId  (required)
     * @param portfolioId  (optional)
     * @return CoinbaseBrokerageProxyCommonOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseBrokerageProxyCommonOrder primeAPIGetOrder(String orderId, String portfolioId) throws ApiException {
        ApiResponse<CoinbaseBrokerageProxyCommonOrder> resp = primeAPIGetOrderWithHttpInfo(orderId, portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param orderId  (required)
     * @param portfolioId  (optional)
     * @return ApiResponse&lt;CoinbaseBrokerageProxyCommonOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseBrokerageProxyCommonOrder> primeAPIGetOrderWithHttpInfo(String orderId, String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetOrderValidateBeforeCall(orderId, portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyCommonOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orderId  (required)
     * @param portfolioId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetOrderAsync(String orderId, String portfolioId, final ApiCallback<CoinbaseBrokerageProxyCommonOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetOrderValidateBeforeCall(orderId, portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyCommonOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetOrderSimulationStream
     * @param productId Product id for the requested ladder (required)
     * @param updateInterval Time between each patch for the order simulation (required)
     * @param orderAmount Order amount for the requested ladder (required)
     * @param feeAdjust True if the requested ladder is fee adjust (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetOrderSimulationStreamCall(String productId, String updateInterval, String orderAmount, Boolean feeAdjust, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/products/{product_id}/order_simulation"
            .replaceAll("\\{" + "product_id" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("update_interval", updateInterval));
        if (orderAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_amount", orderAmount));
        if (feeAdjust != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fee_adjust", feeAdjust));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetOrderSimulationStreamValidateBeforeCall(String productId, String updateInterval, String orderAmount, Boolean feeAdjust, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling primeAPIGetOrderSimulationStream(Async)");
        }
        
        // verify the required parameter 'updateInterval' is set
        if (updateInterval == null) {
            throw new ApiException("Missing the required parameter 'updateInterval' when calling primeAPIGetOrderSimulationStream(Async)");
        }
        
        // verify the required parameter 'orderAmount' is set
        if (orderAmount == null) {
            throw new ApiException("Missing the required parameter 'orderAmount' when calling primeAPIGetOrderSimulationStream(Async)");
        }
        
        // verify the required parameter 'feeAdjust' is set
        if (feeAdjust == null) {
            throw new ApiException("Missing the required parameter 'feeAdjust' when calling primeAPIGetOrderSimulationStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetOrderSimulationStreamCall(productId, updateInterval, orderAmount, feeAdjust, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param productId Product id for the requested ladder (required)
     * @param updateInterval Time between each patch for the order simulation (required)
     * @param orderAmount Order amount for the requested ladder (required)
     * @param feeAdjust True if the requested ladder is fee adjust (required)
     * @return StreamResultOfCoinbaseBrokerageProxyTradingApiGetOrderSimulationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseBrokerageProxyTradingApiGetOrderSimulationResponse primeAPIGetOrderSimulationStream(String productId, String updateInterval, String orderAmount, Boolean feeAdjust) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseBrokerageProxyTradingApiGetOrderSimulationResponse> resp = primeAPIGetOrderSimulationStreamWithHttpInfo(productId, updateInterval, orderAmount, feeAdjust);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param productId Product id for the requested ladder (required)
     * @param updateInterval Time between each patch for the order simulation (required)
     * @param orderAmount Order amount for the requested ladder (required)
     * @param feeAdjust True if the requested ladder is fee adjust (required)
     * @return ApiResponse&lt;StreamResultOfCoinbaseBrokerageProxyTradingApiGetOrderSimulationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseBrokerageProxyTradingApiGetOrderSimulationResponse> primeAPIGetOrderSimulationStreamWithHttpInfo(String productId, String updateInterval, String orderAmount, Boolean feeAdjust) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetOrderSimulationStreamValidateBeforeCall(productId, updateInterval, orderAmount, feeAdjust, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseBrokerageProxyTradingApiGetOrderSimulationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId Product id for the requested ladder (required)
     * @param updateInterval Time between each patch for the order simulation (required)
     * @param orderAmount Order amount for the requested ladder (required)
     * @param feeAdjust True if the requested ladder is fee adjust (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetOrderSimulationStreamAsync(String productId, String updateInterval, String orderAmount, Boolean feeAdjust, final ApiCallback<StreamResultOfCoinbaseBrokerageProxyTradingApiGetOrderSimulationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetOrderSimulationStreamValidateBeforeCall(productId, updateInterval, orderAmount, feeAdjust, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseBrokerageProxyTradingApiGetOrderSimulationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetOrdersStream
     * @param updateInterval Time between each patch for the current orders stream (required)
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (optional)
     * @param status The status of the order, i.e. &#39;filled&#39;, &#39;open&#39; (optional, default to UNKNOWN_ORDER_EXECUTION_STATUS)
     * @param userId The uuid of the user who created the order (optional)
     * @param portfolioId Optionally specify a portfolio id. Only orders from this portfolio will be returned in the stream. (optional)
     * @param productType Optionally specify a product type to filter by, i.e. &#39;FUTURE&#39;, &#39;SPOT&#39; (optional, default to UNKNOWN_PRODUCT_TYPE)
     * @param orderPlacementSources Optionally specify N order placement source to filter by, i.e. &#39;RETAIL_WEB_CLIENT&#39;, &#39;RETAIL_SIMPLE&#39; (optional)
     * @param riskManagementType Optionally specify a risk management type to filter by, i.e. &#39;MANAGED_BY_FCM&#39;, &#39;MANAGED_BY_VENUE&#39; (optional, default to UNKNOWN_RISK_MANAGEMENT_TYPE)
     * @param contractExpiryType Optionally specify a contract expiry type to filter by, i.e. &#39;EXPIRING&#39;, &#39;PERPETUAL&#39; (optional, default to UNKNOWN_CONTRACT_EXPIRY_TYPE)
     * @param orderPlacementFilterApplyNotFilter  (optional)
     * @param orderPlacementFilterOrderPlacementSources  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetOrdersStreamCall(String updateInterval, String productId, String status, String userId, String portfolioId, String productType, List<String> orderPlacementSources, String riskManagementType, String contractExpiryType, Boolean orderPlacementFilterApplyNotFilter, List<String> orderPlacementFilterOrderPlacementSources, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("product_id", productId));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));
        if (updateInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("update_interval", updateInterval));
        if (productType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("product_type", productType));
        if (orderPlacementSources != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "order_placement_sources", orderPlacementSources));
        if (riskManagementType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_management_type", riskManagementType));
        if (contractExpiryType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contract_expiry_type", contractExpiryType));
        if (orderPlacementFilterApplyNotFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderPlacementFilter.applyNotFilter", orderPlacementFilterApplyNotFilter));
        if (orderPlacementFilterOrderPlacementSources != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "orderPlacementFilter.order_placement_sources", orderPlacementFilterOrderPlacementSources));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetOrdersStreamValidateBeforeCall(String updateInterval, String productId, String status, String userId, String portfolioId, String productType, List<String> orderPlacementSources, String riskManagementType, String contractExpiryType, Boolean orderPlacementFilterApplyNotFilter, List<String> orderPlacementFilterOrderPlacementSources, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateInterval' is set
        if (updateInterval == null) {
            throw new ApiException("Missing the required parameter 'updateInterval' when calling primeAPIGetOrdersStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetOrdersStreamCall(updateInterval, productId, status, userId, portfolioId, productType, orderPlacementSources, riskManagementType, contractExpiryType, orderPlacementFilterApplyNotFilter, orderPlacementFilterOrderPlacementSources, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param updateInterval Time between each patch for the current orders stream (required)
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (optional)
     * @param status The status of the order, i.e. &#39;filled&#39;, &#39;open&#39; (optional, default to UNKNOWN_ORDER_EXECUTION_STATUS)
     * @param userId The uuid of the user who created the order (optional)
     * @param portfolioId Optionally specify a portfolio id. Only orders from this portfolio will be returned in the stream. (optional)
     * @param productType Optionally specify a product type to filter by, i.e. &#39;FUTURE&#39;, &#39;SPOT&#39; (optional, default to UNKNOWN_PRODUCT_TYPE)
     * @param orderPlacementSources Optionally specify N order placement source to filter by, i.e. &#39;RETAIL_WEB_CLIENT&#39;, &#39;RETAIL_SIMPLE&#39; (optional)
     * @param riskManagementType Optionally specify a risk management type to filter by, i.e. &#39;MANAGED_BY_FCM&#39;, &#39;MANAGED_BY_VENUE&#39; (optional, default to UNKNOWN_RISK_MANAGEMENT_TYPE)
     * @param contractExpiryType Optionally specify a contract expiry type to filter by, i.e. &#39;EXPIRING&#39;, &#39;PERPETUAL&#39; (optional, default to UNKNOWN_CONTRACT_EXPIRY_TYPE)
     * @param orderPlacementFilterApplyNotFilter  (optional)
     * @param orderPlacementFilterOrderPlacementSources  (optional)
     * @return StreamResultOfCoinbaseBrokerageProxyTradingApiOrderStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseBrokerageProxyTradingApiOrderStreamResponse primeAPIGetOrdersStream(String updateInterval, String productId, String status, String userId, String portfolioId, String productType, List<String> orderPlacementSources, String riskManagementType, String contractExpiryType, Boolean orderPlacementFilterApplyNotFilter, List<String> orderPlacementFilterOrderPlacementSources) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseBrokerageProxyTradingApiOrderStreamResponse> resp = primeAPIGetOrdersStreamWithHttpInfo(updateInterval, productId, status, userId, portfolioId, productType, orderPlacementSources, riskManagementType, contractExpiryType, orderPlacementFilterApplyNotFilter, orderPlacementFilterOrderPlacementSources);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param updateInterval Time between each patch for the current orders stream (required)
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (optional)
     * @param status The status of the order, i.e. &#39;filled&#39;, &#39;open&#39; (optional, default to UNKNOWN_ORDER_EXECUTION_STATUS)
     * @param userId The uuid of the user who created the order (optional)
     * @param portfolioId Optionally specify a portfolio id. Only orders from this portfolio will be returned in the stream. (optional)
     * @param productType Optionally specify a product type to filter by, i.e. &#39;FUTURE&#39;, &#39;SPOT&#39; (optional, default to UNKNOWN_PRODUCT_TYPE)
     * @param orderPlacementSources Optionally specify N order placement source to filter by, i.e. &#39;RETAIL_WEB_CLIENT&#39;, &#39;RETAIL_SIMPLE&#39; (optional)
     * @param riskManagementType Optionally specify a risk management type to filter by, i.e. &#39;MANAGED_BY_FCM&#39;, &#39;MANAGED_BY_VENUE&#39; (optional, default to UNKNOWN_RISK_MANAGEMENT_TYPE)
     * @param contractExpiryType Optionally specify a contract expiry type to filter by, i.e. &#39;EXPIRING&#39;, &#39;PERPETUAL&#39; (optional, default to UNKNOWN_CONTRACT_EXPIRY_TYPE)
     * @param orderPlacementFilterApplyNotFilter  (optional)
     * @param orderPlacementFilterOrderPlacementSources  (optional)
     * @return ApiResponse&lt;StreamResultOfCoinbaseBrokerageProxyTradingApiOrderStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseBrokerageProxyTradingApiOrderStreamResponse> primeAPIGetOrdersStreamWithHttpInfo(String updateInterval, String productId, String status, String userId, String portfolioId, String productType, List<String> orderPlacementSources, String riskManagementType, String contractExpiryType, Boolean orderPlacementFilterApplyNotFilter, List<String> orderPlacementFilterOrderPlacementSources) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetOrdersStreamValidateBeforeCall(updateInterval, productId, status, userId, portfolioId, productType, orderPlacementSources, riskManagementType, contractExpiryType, orderPlacementFilterApplyNotFilter, orderPlacementFilterOrderPlacementSources, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseBrokerageProxyTradingApiOrderStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateInterval Time between each patch for the current orders stream (required)
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (optional)
     * @param status The status of the order, i.e. &#39;filled&#39;, &#39;open&#39; (optional, default to UNKNOWN_ORDER_EXECUTION_STATUS)
     * @param userId The uuid of the user who created the order (optional)
     * @param portfolioId Optionally specify a portfolio id. Only orders from this portfolio will be returned in the stream. (optional)
     * @param productType Optionally specify a product type to filter by, i.e. &#39;FUTURE&#39;, &#39;SPOT&#39; (optional, default to UNKNOWN_PRODUCT_TYPE)
     * @param orderPlacementSources Optionally specify N order placement source to filter by, i.e. &#39;RETAIL_WEB_CLIENT&#39;, &#39;RETAIL_SIMPLE&#39; (optional)
     * @param riskManagementType Optionally specify a risk management type to filter by, i.e. &#39;MANAGED_BY_FCM&#39;, &#39;MANAGED_BY_VENUE&#39; (optional, default to UNKNOWN_RISK_MANAGEMENT_TYPE)
     * @param contractExpiryType Optionally specify a contract expiry type to filter by, i.e. &#39;EXPIRING&#39;, &#39;PERPETUAL&#39; (optional, default to UNKNOWN_CONTRACT_EXPIRY_TYPE)
     * @param orderPlacementFilterApplyNotFilter  (optional)
     * @param orderPlacementFilterOrderPlacementSources  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetOrdersStreamAsync(String updateInterval, String productId, String status, String userId, String portfolioId, String productType, List<String> orderPlacementSources, String riskManagementType, String contractExpiryType, Boolean orderPlacementFilterApplyNotFilter, List<String> orderPlacementFilterOrderPlacementSources, final ApiCallback<StreamResultOfCoinbaseBrokerageProxyTradingApiOrderStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetOrdersStreamValidateBeforeCall(updateInterval, productId, status, userId, portfolioId, productType, orderPlacementSources, riskManagementType, contractExpiryType, orderPlacementFilterApplyNotFilter, orderPlacementFilterOrderPlacementSources, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseBrokerageProxyTradingApiOrderStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetOrganization
     * @param vehicleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetOrganizationCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/organization"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetOrganizationValidateBeforeCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetOrganization(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetOrganizationCall(vehicleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return CoinbaseEngPrimeApiApiGetOrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetOrganizationResponse primeAPIGetOrganization(String vehicleId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetOrganizationResponse> resp = primeAPIGetOrganizationWithHttpInfo(vehicleId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetOrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetOrganizationResponse> primeAPIGetOrganizationWithHttpInfo(String vehicleId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetOrganizationValidateBeforeCall(vehicleId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetOrganizationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetOrganizationAsync(String vehicleId, final ApiCallback<CoinbaseEngPrimeApiApiGetOrganizationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetOrganizationValidateBeforeCall(vehicleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetOrganizationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPendingConsensus
     * @param userId  (required)
     * @param entityId  (required)
     * @param referenceType  (optional, default to REFERENCE_TYPE_INVITATION)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPendingConsensusCall(String userId, String entityId, String referenceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user_id}/entities/{entity_id}/pending_consensus"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "entity_id" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (referenceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference_type", referenceType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPendingConsensusValidateBeforeCall(String userId, String entityId, String referenceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIGetPendingConsensus(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling primeAPIGetPendingConsensus(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPendingConsensusCall(userId, entityId, referenceType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param entityId  (required)
     * @param referenceType  (optional, default to REFERENCE_TYPE_INVITATION)
     * @return CoinbaseEngPrimeApiApiGetPendingConsensusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetPendingConsensusResponse primeAPIGetPendingConsensus(String userId, String entityId, String referenceType) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetPendingConsensusResponse> resp = primeAPIGetPendingConsensusWithHttpInfo(userId, entityId, referenceType);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param entityId  (required)
     * @param referenceType  (optional, default to REFERENCE_TYPE_INVITATION)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetPendingConsensusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetPendingConsensusResponse> primeAPIGetPendingConsensusWithHttpInfo(String userId, String entityId, String referenceType) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPendingConsensusValidateBeforeCall(userId, entityId, referenceType, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPendingConsensusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param entityId  (required)
     * @param referenceType  (optional, default to REFERENCE_TYPE_INVITATION)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPendingConsensusAsync(String userId, String entityId, String referenceType, final ApiCallback<CoinbaseEngPrimeApiApiGetPendingConsensusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPendingConsensusValidateBeforeCall(userId, entityId, referenceType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPendingConsensusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolio
     * @param portfolioId Filter results by a specific profile_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/portfolio"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioValidateBeforeCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId Filter results by a specific profile_id (required)
     * @return CoinbaseEngPrimeApiApiPortfolio
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPortfolio primeAPIGetPortfolio(String portfolioId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPortfolio> resp = primeAPIGetPortfolioWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId Filter results by a specific profile_id (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPortfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPortfolio> primeAPIGetPortfolioWithHttpInfo(String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPortfolio>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId Filter results by a specific profile_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioAsync(String portfolioId, final ApiCallback<CoinbaseEngPrimeApiApiPortfolio> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPortfolio>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioActivities
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param states States to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param type Types to filter by.   - ACTIVITY_TYPE_WITHDRAWAL: PrimeActivityService Custody ActivityTypes that will replace the above (optional, default to ACTIVITY_TYPE_UNKNOWN)
     * @param startDate Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity id to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioActivitiesCall(String portfolioId, List<String> states, List<String> currencies, String type, String startDate, String endDate, String search, String cursor, Integer limit, String sortDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/activities"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (states != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "states", states));
        if (currencies != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "currencies", currencies));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioActivitiesValidateBeforeCall(String portfolioId, List<String> states, List<String> currencies, String type, String startDate, String endDate, String search, String cursor, Integer limit, String sortDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioActivities(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioActivitiesCall(portfolioId, states, currencies, type, startDate, endDate, search, cursor, limit, sortDirection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param states States to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param type Types to filter by.   - ACTIVITY_TYPE_WITHDRAWAL: PrimeActivityService Custody ActivityTypes that will replace the above (optional, default to ACTIVITY_TYPE_UNKNOWN)
     * @param startDate Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity id to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @return CoinbaseEngPrimeApiApiGetPortfolioActivitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetPortfolioActivitiesResponse primeAPIGetPortfolioActivities(String portfolioId, List<String> states, List<String> currencies, String type, String startDate, String endDate, String search, String cursor, Integer limit, String sortDirection) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetPortfolioActivitiesResponse> resp = primeAPIGetPortfolioActivitiesWithHttpInfo(portfolioId, states, currencies, type, startDate, endDate, search, cursor, limit, sortDirection);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param states States to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param type Types to filter by.   - ACTIVITY_TYPE_WITHDRAWAL: PrimeActivityService Custody ActivityTypes that will replace the above (optional, default to ACTIVITY_TYPE_UNKNOWN)
     * @param startDate Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity id to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetPortfolioActivitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetPortfolioActivitiesResponse> primeAPIGetPortfolioActivitiesWithHttpInfo(String portfolioId, List<String> states, List<String> currencies, String type, String startDate, String endDate, String search, String cursor, Integer limit, String sortDirection) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioActivitiesValidateBeforeCall(portfolioId, states, currencies, type, startDate, endDate, search, cursor, limit, sortDirection, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPortfolioActivitiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param states States to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param type Types to filter by.   - ACTIVITY_TYPE_WITHDRAWAL: PrimeActivityService Custody ActivityTypes that will replace the above (optional, default to ACTIVITY_TYPE_UNKNOWN)
     * @param startDate Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity id to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioActivitiesAsync(String portfolioId, List<String> states, List<String> currencies, String type, String startDate, String endDate, String search, String cursor, Integer limit, String sortDirection, final ApiCallback<CoinbaseEngPrimeApiApiGetPortfolioActivitiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioActivitiesValidateBeforeCall(portfolioId, states, currencies, type, startDate, endDate, search, cursor, limit, sortDirection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPortfolioActivitiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioActivitiesStream
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param states States to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param type Types to filter by.   - ACTIVITY_TYPE_WITHDRAWAL: PrimeActivityService Custody ActivityTypes that will replace the above (optional, default to ACTIVITY_TYPE_UNKNOWN)
     * @param startDate Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity id to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioActivitiesStreamCall(String portfolioId, List<String> states, List<String> currencies, String type, String startDate, String endDate, String search, String cursor, Integer limit, String sortDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/portfolios/{portfolio_id}/activities"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (states != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "states", states));
        if (currencies != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "currencies", currencies));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioActivitiesStreamValidateBeforeCall(String portfolioId, List<String> states, List<String> currencies, String type, String startDate, String endDate, String search, String cursor, Integer limit, String sortDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioActivitiesStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioActivitiesStreamCall(portfolioId, states, currencies, type, startDate, endDate, search, cursor, limit, sortDirection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param states States to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param type Types to filter by.   - ACTIVITY_TYPE_WITHDRAWAL: PrimeActivityService Custody ActivityTypes that will replace the above (optional, default to ACTIVITY_TYPE_UNKNOWN)
     * @param startDate Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity id to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @return StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivitiesStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivitiesStreamResponse primeAPIGetPortfolioActivitiesStream(String portfolioId, List<String> states, List<String> currencies, String type, String startDate, String endDate, String search, String cursor, Integer limit, String sortDirection) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivitiesStreamResponse> resp = primeAPIGetPortfolioActivitiesStreamWithHttpInfo(portfolioId, states, currencies, type, startDate, endDate, search, cursor, limit, sortDirection);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param states States to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param type Types to filter by.   - ACTIVITY_TYPE_WITHDRAWAL: PrimeActivityService Custody ActivityTypes that will replace the above (optional, default to ACTIVITY_TYPE_UNKNOWN)
     * @param startDate Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity id to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivitiesStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivitiesStreamResponse> primeAPIGetPortfolioActivitiesStreamWithHttpInfo(String portfolioId, List<String> states, List<String> currencies, String type, String startDate, String endDate, String search, String cursor, Integer limit, String sortDirection) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioActivitiesStreamValidateBeforeCall(portfolioId, states, currencies, type, startDate, endDate, search, cursor, limit, sortDirection, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivitiesStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param states States to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param type Types to filter by.   - ACTIVITY_TYPE_WITHDRAWAL: PrimeActivityService Custody ActivityTypes that will replace the above (optional, default to ACTIVITY_TYPE_UNKNOWN)
     * @param startDate Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity id to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioActivitiesStreamAsync(String portfolioId, List<String> states, List<String> currencies, String type, String startDate, String endDate, String search, String cursor, Integer limit, String sortDirection, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivitiesStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioActivitiesStreamValidateBeforeCall(portfolioId, states, currencies, type, startDate, endDate, search, cursor, limit, sortDirection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivitiesStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioActivity
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioActivityCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/activities/{activity_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioActivityValidateBeforeCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioActivity(Async)");
        }
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling primeAPIGetPortfolioActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioActivityCall(portfolioId, activityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return CoinbaseCustodyApiActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiActivity primeAPIGetPortfolioActivity(String portfolioId, String activityId) throws ApiException {
        ApiResponse<CoinbaseCustodyApiActivity> resp = primeAPIGetPortfolioActivityWithHttpInfo(portfolioId, activityId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return ApiResponse&lt;CoinbaseCustodyApiActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiActivity> primeAPIGetPortfolioActivityWithHttpInfo(String portfolioId, String activityId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioActivityValidateBeforeCall(portfolioId, activityId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioActivityAsync(String portfolioId, String activityId, final ApiCallback<CoinbaseCustodyApiActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioActivityValidateBeforeCall(portfolioId, activityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioActivityStream
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioActivityStreamCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/portfolios/{portfolio_id}/activities/{activity_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioActivityStreamValidateBeforeCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioActivityStream(Async)");
        }
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling primeAPIGetPortfolioActivityStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioActivityStreamCall(portfolioId, activityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivityStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivityStreamResponse primeAPIGetPortfolioActivityStream(String portfolioId, String activityId) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivityStreamResponse> resp = primeAPIGetPortfolioActivityStreamWithHttpInfo(portfolioId, activityId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivityStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivityStreamResponse> primeAPIGetPortfolioActivityStreamWithHttpInfo(String portfolioId, String activityId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioActivityStreamValidateBeforeCall(portfolioId, activityId, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivityStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioActivityStreamAsync(String portfolioId, String activityId, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivityStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioActivityStreamValidateBeforeCall(portfolioId, activityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetPortfolioActivityStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioBalances
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioBalancesCall(String portfolioId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/balances"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencySymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_symbol", currencySymbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioBalancesValidateBeforeCall(String portfolioId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioBalances(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioBalancesCall(portfolioId, currencySymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @return CoinbaseCustodyApiGetBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiGetBalanceResponse primeAPIGetPortfolioBalances(String portfolioId, String currencySymbol) throws ApiException {
        ApiResponse<CoinbaseCustodyApiGetBalanceResponse> resp = primeAPIGetPortfolioBalancesWithHttpInfo(portfolioId, currencySymbol);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @return ApiResponse&lt;CoinbaseCustodyApiGetBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiGetBalanceResponse> primeAPIGetPortfolioBalancesWithHttpInfo(String portfolioId, String currencySymbol) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioBalancesValidateBeforeCall(portfolioId, currencySymbol, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioBalancesAsync(String portfolioId, String currencySymbol, final ApiCallback<CoinbaseCustodyApiGetBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioBalancesValidateBeforeCall(portfolioId, currencySymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioBalancesStream
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioBalancesStreamCall(String portfolioId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/portfolios/{portfolio_id}/balances"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencySymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_symbol", currencySymbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioBalancesStreamValidateBeforeCall(String portfolioId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioBalancesStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioBalancesStreamCall(portfolioId, currencySymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @return StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse primeAPIGetPortfolioBalancesStream(String portfolioId, String currencySymbol) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse> resp = primeAPIGetPortfolioBalancesStreamWithHttpInfo(portfolioId, currencySymbol);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse> primeAPIGetPortfolioBalancesStreamWithHttpInfo(String portfolioId, String currencySymbol) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioBalancesStreamValidateBeforeCall(portfolioId, currencySymbol, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioBalancesStreamAsync(String portfolioId, String currencySymbol, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioBalancesStreamValidateBeforeCall(portfolioId, currencySymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioCommission
     * @param portfolioId  (required)
     * @param productId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioCommissionCall(String portfolioId, String productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/commission"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("product_id", productId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioCommissionValidateBeforeCall(String portfolioId, String productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioCommission(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioCommissionCall(portfolioId, productId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param productId  (optional)
     * @return CoinbaseEngPrimeApiApiGetPortfolioCommissionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetPortfolioCommissionResponse primeAPIGetPortfolioCommission(String portfolioId, String productId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetPortfolioCommissionResponse> resp = primeAPIGetPortfolioCommissionWithHttpInfo(portfolioId, productId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param productId  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetPortfolioCommissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetPortfolioCommissionResponse> primeAPIGetPortfolioCommissionWithHttpInfo(String portfolioId, String productId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioCommissionValidateBeforeCall(portfolioId, productId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPortfolioCommissionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param productId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioCommissionAsync(String portfolioId, String productId, final ApiCallback<CoinbaseEngPrimeApiApiGetPortfolioCommissionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioCommissionValidateBeforeCall(portfolioId, productId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPortfolioCommissionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioConciseUsers
     * @param portfolioId The portfolio ID (required)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of users to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param roles Users with these roles (or provided secondary roles) to include in response (optional)
     * @param secondaryRoles Users with these secondary roles (or provided roles) to include in response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioConciseUsersCall(String portfolioId, String cursor, Integer limit, String sortDirection, String search, List<String> roles, List<String> secondaryRoles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/users/concise"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (roles != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "roles", roles));
        if (secondaryRoles != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "secondary_roles", secondaryRoles));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioConciseUsersValidateBeforeCall(String portfolioId, String cursor, Integer limit, String sortDirection, String search, List<String> roles, List<String> secondaryRoles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioConciseUsers(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioConciseUsersCall(portfolioId, cursor, limit, sortDirection, search, roles, secondaryRoles, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The portfolio ID (required)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of users to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param roles Users with these roles (or provided secondary roles) to include in response (optional)
     * @param secondaryRoles Users with these secondary roles (or provided roles) to include in response (optional)
     * @return CoinbaseEngPrimeApiApiListPortfolioConciseUsersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListPortfolioConciseUsersResponse primeAPIGetPortfolioConciseUsers(String portfolioId, String cursor, Integer limit, String sortDirection, String search, List<String> roles, List<String> secondaryRoles) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListPortfolioConciseUsersResponse> resp = primeAPIGetPortfolioConciseUsersWithHttpInfo(portfolioId, cursor, limit, sortDirection, search, roles, secondaryRoles);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The portfolio ID (required)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of users to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param roles Users with these roles (or provided secondary roles) to include in response (optional)
     * @param secondaryRoles Users with these secondary roles (or provided roles) to include in response (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListPortfolioConciseUsersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListPortfolioConciseUsersResponse> primeAPIGetPortfolioConciseUsersWithHttpInfo(String portfolioId, String cursor, Integer limit, String sortDirection, String search, List<String> roles, List<String> secondaryRoles) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioConciseUsersValidateBeforeCall(portfolioId, cursor, limit, sortDirection, search, roles, secondaryRoles, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListPortfolioConciseUsersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The portfolio ID (required)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of users to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param roles Users with these roles (or provided secondary roles) to include in response (optional)
     * @param secondaryRoles Users with these secondary roles (or provided roles) to include in response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioConciseUsersAsync(String portfolioId, String cursor, Integer limit, String sortDirection, String search, List<String> roles, List<String> secondaryRoles, final ApiCallback<CoinbaseEngPrimeApiApiListPortfolioConciseUsersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioConciseUsersValidateBeforeCall(portfolioId, cursor, limit, sortDirection, search, roles, secondaryRoles, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListPortfolioConciseUsersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioFeeInfo
     * @param portfolioId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioFeeInfoCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/fees"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioFeeInfoValidateBeforeCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioFeeInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioFeeInfoCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @return CoinbaseEngPrimeFeesApiGetFeeInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeFeesApiGetFeeInfoResponse primeAPIGetPortfolioFeeInfo(String portfolioId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeFeesApiGetFeeInfoResponse> resp = primeAPIGetPortfolioFeeInfoWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeFeesApiGetFeeInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeFeesApiGetFeeInfoResponse> primeAPIGetPortfolioFeeInfoWithHttpInfo(String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioFeeInfoValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeFeesApiGetFeeInfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioFeeInfoAsync(String portfolioId, final ApiCallback<CoinbaseEngPrimeFeesApiGetFeeInfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioFeeInfoValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeFeesApiGetFeeInfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioFinancingProductPermissions
     * @param portfolioId  (required)
     * @param portfolioIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioFinancingProductPermissionsCall(String portfolioId, List<String> portfolioIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolio/{portfolio_id}/financing_product_permissions"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "portfolio_ids", portfolioIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioFinancingProductPermissionsValidateBeforeCall(String portfolioId, List<String> portfolioIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioFinancingProductPermissions(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioFinancingProductPermissionsCall(portfolioId, portfolioIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param portfolioIds  (optional)
     * @return CoinbaseFinancingPortfolioOverviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseFinancingPortfolioOverviewResponse primeAPIGetPortfolioFinancingProductPermissions(String portfolioId, List<String> portfolioIds) throws ApiException {
        ApiResponse<CoinbaseFinancingPortfolioOverviewResponse> resp = primeAPIGetPortfolioFinancingProductPermissionsWithHttpInfo(portfolioId, portfolioIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param portfolioIds  (optional)
     * @return ApiResponse&lt;CoinbaseFinancingPortfolioOverviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseFinancingPortfolioOverviewResponse> primeAPIGetPortfolioFinancingProductPermissionsWithHttpInfo(String portfolioId, List<String> portfolioIds) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioFinancingProductPermissionsValidateBeforeCall(portfolioId, portfolioIds, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingPortfolioOverviewResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param portfolioIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioFinancingProductPermissionsAsync(String portfolioId, List<String> portfolioIds, final ApiCallback<CoinbaseFinancingPortfolioOverviewResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioFinancingProductPermissionsValidateBeforeCall(portfolioId, portfolioIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingPortfolioOverviewResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioFinancingProductStream
     * @param portfolioId  (required)
     * @param productId  (required)
     * @param updateInterval  (optional, default to TWO_HUNDRED_FIFTY_MS_FINANCING)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioFinancingProductStreamCall(String portfolioId, String productId, String updateInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/portfolios/{portfolio_id}/products/{product_id}/financing"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "product_id" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("update_interval", updateInterval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioFinancingProductStreamValidateBeforeCall(String portfolioId, String productId, String updateInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioFinancingProductStream(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling primeAPIGetPortfolioFinancingProductStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioFinancingProductStreamCall(portfolioId, productId, updateInterval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param productId  (required)
     * @param updateInterval  (optional, default to TWO_HUNDRED_FIFTY_MS_FINANCING)
     * @return StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingProductStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingProductStreamResponse primeAPIGetPortfolioFinancingProductStream(String portfolioId, String productId, String updateInterval) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingProductStreamResponse> resp = primeAPIGetPortfolioFinancingProductStreamWithHttpInfo(portfolioId, productId, updateInterval);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param productId  (required)
     * @param updateInterval  (optional, default to TWO_HUNDRED_FIFTY_MS_FINANCING)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingProductStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingProductStreamResponse> primeAPIGetPortfolioFinancingProductStreamWithHttpInfo(String portfolioId, String productId, String updateInterval) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioFinancingProductStreamValidateBeforeCall(portfolioId, productId, updateInterval, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingProductStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param productId  (required)
     * @param updateInterval  (optional, default to TWO_HUNDRED_FIFTY_MS_FINANCING)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioFinancingProductStreamAsync(String portfolioId, String productId, String updateInterval, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingProductStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioFinancingProductStreamValidateBeforeCall(portfolioId, productId, updateInterval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingProductStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioFinancingStream
     * @param portfolioId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioFinancingStreamCall(String portfolioId, String updateInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/portfolios/{portfolio_id}/financing"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("update_interval", updateInterval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioFinancingStreamValidateBeforeCall(String portfolioId, String updateInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioFinancingStream(Async)");
        }
        
        // verify the required parameter 'updateInterval' is set
        if (updateInterval == null) {
            throw new ApiException("Missing the required parameter 'updateInterval' when calling primeAPIGetPortfolioFinancingStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioFinancingStreamCall(portfolioId, updateInterval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @return StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingStreamResponse primeAPIGetPortfolioFinancingStream(String portfolioId, String updateInterval) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingStreamResponse> resp = primeAPIGetPortfolioFinancingStreamWithHttpInfo(portfolioId, updateInterval);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingStreamResponse> primeAPIGetPortfolioFinancingStreamWithHttpInfo(String portfolioId, String updateInterval) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioFinancingStreamValidateBeforeCall(portfolioId, updateInterval, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioFinancingStreamAsync(String portfolioId, String updateInterval, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioFinancingStreamValidateBeforeCall(portfolioId, updateInterval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiPortfolioFinancingStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioInvitations
     * @param portfolioId  (required)
     * @param states  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioInvitationsCall(String portfolioId, List<String> states, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/invitations"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (states != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "states", states));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioInvitationsValidateBeforeCall(String portfolioId, List<String> states, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioInvitations(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioInvitationsCall(portfolioId, states, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param states  (optional)
     * @return CoinbaseEngPrimeApiApiGetInvitationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetInvitationsResponse primeAPIGetPortfolioInvitations(String portfolioId, List<String> states) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetInvitationsResponse> resp = primeAPIGetPortfolioInvitationsWithHttpInfo(portfolioId, states);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param states  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetInvitationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetInvitationsResponse> primeAPIGetPortfolioInvitationsWithHttpInfo(String portfolioId, List<String> states) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioInvitationsValidateBeforeCall(portfolioId, states, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetInvitationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param states  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioInvitationsAsync(String portfolioId, List<String> states, final ApiCallback<CoinbaseEngPrimeApiApiGetInvitationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioInvitationsValidateBeforeCall(portfolioId, states, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetInvitationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioSettings
     * @param portfolioId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioSettingsCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/settings"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioSettingsValidateBeforeCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioSettingsCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @return List&lt;CoinbaseCustodyApiSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CoinbaseCustodyApiSettings> primeAPIGetPortfolioSettings(String portfolioId) throws ApiException {
        ApiResponse<List<CoinbaseCustodyApiSettings>> resp = primeAPIGetPortfolioSettingsWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @return ApiResponse&lt;List&lt;CoinbaseCustodyApiSettings&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CoinbaseCustodyApiSettings>> primeAPIGetPortfolioSettingsWithHttpInfo(String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioSettingsValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<List<CoinbaseCustodyApiSettings>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioSettingsAsync(String portfolioId, final ApiCallback<List<CoinbaseCustodyApiSettings>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioSettingsValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CoinbaseCustodyApiSettings>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioUsers
     * @param portfolioId The portfolio ID (required)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of users to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param permission Permission to filter all users by (optional, default to PERMISSION_UNKNOWN)
     * @param roles Users with these roles (or provided secondary roles) to include in response (optional)
     * @param secondaryRoles Users with these secondary roles (or provided roles) to include in response (optional)
     * @param restrictEntityUsers If set to true, will not return entity users as part of the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioUsersCall(String portfolioId, String cursor, Integer limit, String sortDirection, String search, String permission, List<String> roles, List<String> secondaryRoles, Boolean restrictEntityUsers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/users"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (roles != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "roles", roles));
        if (secondaryRoles != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "secondary_roles", secondaryRoles));
        if (restrictEntityUsers != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("restrict_entity_users", restrictEntityUsers));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioUsersValidateBeforeCall(String portfolioId, String cursor, Integer limit, String sortDirection, String search, String permission, List<String> roles, List<String> secondaryRoles, Boolean restrictEntityUsers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioUsers(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioUsersCall(portfolioId, cursor, limit, sortDirection, search, permission, roles, secondaryRoles, restrictEntityUsers, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The portfolio ID (required)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of users to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param permission Permission to filter all users by (optional, default to PERMISSION_UNKNOWN)
     * @param roles Users with these roles (or provided secondary roles) to include in response (optional)
     * @param secondaryRoles Users with these secondary roles (or provided roles) to include in response (optional)
     * @param restrictEntityUsers If set to true, will not return entity users as part of the response (optional)
     * @return CoinbaseEngPrimeApiApiListPortfolioUsersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListPortfolioUsersResponse primeAPIGetPortfolioUsers(String portfolioId, String cursor, Integer limit, String sortDirection, String search, String permission, List<String> roles, List<String> secondaryRoles, Boolean restrictEntityUsers) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListPortfolioUsersResponse> resp = primeAPIGetPortfolioUsersWithHttpInfo(portfolioId, cursor, limit, sortDirection, search, permission, roles, secondaryRoles, restrictEntityUsers);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The portfolio ID (required)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of users to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param permission Permission to filter all users by (optional, default to PERMISSION_UNKNOWN)
     * @param roles Users with these roles (or provided secondary roles) to include in response (optional)
     * @param secondaryRoles Users with these secondary roles (or provided roles) to include in response (optional)
     * @param restrictEntityUsers If set to true, will not return entity users as part of the response (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListPortfolioUsersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListPortfolioUsersResponse> primeAPIGetPortfolioUsersWithHttpInfo(String portfolioId, String cursor, Integer limit, String sortDirection, String search, String permission, List<String> roles, List<String> secondaryRoles, Boolean restrictEntityUsers) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioUsersValidateBeforeCall(portfolioId, cursor, limit, sortDirection, search, permission, roles, secondaryRoles, restrictEntityUsers, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListPortfolioUsersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The portfolio ID (required)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of users to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param permission Permission to filter all users by (optional, default to PERMISSION_UNKNOWN)
     * @param roles Users with these roles (or provided secondary roles) to include in response (optional)
     * @param secondaryRoles Users with these secondary roles (or provided roles) to include in response (optional)
     * @param restrictEntityUsers If set to true, will not return entity users as part of the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioUsersAsync(String portfolioId, String cursor, Integer limit, String sortDirection, String search, String permission, List<String> roles, List<String> secondaryRoles, Boolean restrictEntityUsers, final ApiCallback<CoinbaseEngPrimeApiApiListPortfolioUsersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioUsersValidateBeforeCall(portfolioId, cursor, limit, sortDirection, search, permission, roles, secondaryRoles, restrictEntityUsers, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListPortfolioUsersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioWalletsBalances
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol The filter for symbol of the currency to get balances for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioWalletsBalancesCall(String portfolioId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/balances/{currency_symbol}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "currency_symbol" + "\\}", apiClient.escapeString(currencySymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioWalletsBalancesValidateBeforeCall(String portfolioId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioWalletsBalances(Async)");
        }
        
        // verify the required parameter 'currencySymbol' is set
        if (currencySymbol == null) {
            throw new ApiException("Missing the required parameter 'currencySymbol' when calling primeAPIGetPortfolioWalletsBalances(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioWalletsBalancesCall(portfolioId, currencySymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol The filter for symbol of the currency to get balances for (required)
     * @return CoinbaseCustodyApiGetBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiGetBalanceResponse primeAPIGetPortfolioWalletsBalances(String portfolioId, String currencySymbol) throws ApiException {
        ApiResponse<CoinbaseCustodyApiGetBalanceResponse> resp = primeAPIGetPortfolioWalletsBalancesWithHttpInfo(portfolioId, currencySymbol);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol The filter for symbol of the currency to get balances for (required)
     * @return ApiResponse&lt;CoinbaseCustodyApiGetBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiGetBalanceResponse> primeAPIGetPortfolioWalletsBalancesWithHttpInfo(String portfolioId, String currencySymbol) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioWalletsBalancesValidateBeforeCall(portfolioId, currencySymbol, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol The filter for symbol of the currency to get balances for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioWalletsBalancesAsync(String portfolioId, String currencySymbol, final ApiCallback<CoinbaseCustodyApiGetBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioWalletsBalancesValidateBeforeCall(portfolioId, currencySymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfolioWalletsBalancesStream
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol The filter for symbol of the currency to get balances for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioWalletsBalancesStreamCall(String portfolioId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/portfolios/{portfolio_id}/wallets/balances/{currency_symbol}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "currency_symbol" + "\\}", apiClient.escapeString(currencySymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfolioWalletsBalancesStreamValidateBeforeCall(String portfolioId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPortfolioWalletsBalancesStream(Async)");
        }
        
        // verify the required parameter 'currencySymbol' is set
        if (currencySymbol == null) {
            throw new ApiException("Missing the required parameter 'currencySymbol' when calling primeAPIGetPortfolioWalletsBalancesStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfolioWalletsBalancesStreamCall(portfolioId, currencySymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol The filter for symbol of the currency to get balances for (required)
     * @return StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse primeAPIGetPortfolioWalletsBalancesStream(String portfolioId, String currencySymbol) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse> resp = primeAPIGetPortfolioWalletsBalancesStreamWithHttpInfo(portfolioId, currencySymbol);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol The filter for symbol of the currency to get balances for (required)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse> primeAPIGetPortfolioWalletsBalancesStreamWithHttpInfo(String portfolioId, String currencySymbol) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfolioWalletsBalancesStreamValidateBeforeCall(portfolioId, currencySymbol, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The ID of the portfolio to get balances for (required)
     * @param currencySymbol The filter for symbol of the currency to get balances for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfolioWalletsBalancesStreamAsync(String portfolioId, String currencySymbol, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfolioWalletsBalancesStreamValidateBeforeCall(portfolioId, currencySymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPortfoliosFinancingProductPermissions
     * @param vehicleId  (required)
     * @param portfolioIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfoliosFinancingProductPermissionsCall(String vehicleId, List<String> portfolioIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/portfolio/financing_product_permissions"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "portfolio_ids", portfolioIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPortfoliosFinancingProductPermissionsValidateBeforeCall(String vehicleId, List<String> portfolioIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetPortfoliosFinancingProductPermissions(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPortfoliosFinancingProductPermissionsCall(vehicleId, portfolioIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param portfolioIds  (optional)
     * @return CoinbaseFinancingPortfolioOverviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseFinancingPortfolioOverviewResponse primeAPIGetPortfoliosFinancingProductPermissions(String vehicleId, List<String> portfolioIds) throws ApiException {
        ApiResponse<CoinbaseFinancingPortfolioOverviewResponse> resp = primeAPIGetPortfoliosFinancingProductPermissionsWithHttpInfo(vehicleId, portfolioIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param portfolioIds  (optional)
     * @return ApiResponse&lt;CoinbaseFinancingPortfolioOverviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseFinancingPortfolioOverviewResponse> primeAPIGetPortfoliosFinancingProductPermissionsWithHttpInfo(String vehicleId, List<String> portfolioIds) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPortfoliosFinancingProductPermissionsValidateBeforeCall(vehicleId, portfolioIds, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingPortfolioOverviewResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param portfolioIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPortfoliosFinancingProductPermissionsAsync(String vehicleId, List<String> portfolioIds, final ApiCallback<CoinbaseFinancingPortfolioOverviewResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPortfoliosFinancingProductPermissionsValidateBeforeCall(vehicleId, portfolioIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingPortfolioOverviewResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPostTradeCredit
     * @param portfolioId Portfolio id for the financing request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPostTradeCreditCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/credit"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPostTradeCreditValidateBeforeCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPostTradeCredit(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPostTradeCreditCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId Portfolio id for the financing request (required)
     * @return CoinbaseEngPrimeApiApiGetPostTradeCreditResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetPostTradeCreditResponse primeAPIGetPostTradeCredit(String portfolioId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetPostTradeCreditResponse> resp = primeAPIGetPostTradeCreditWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId Portfolio id for the financing request (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetPostTradeCreditResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetPostTradeCreditResponse> primeAPIGetPostTradeCreditWithHttpInfo(String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPostTradeCreditValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPostTradeCreditResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId Portfolio id for the financing request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPostTradeCreditAsync(String portfolioId, final ApiCallback<CoinbaseEngPrimeApiApiGetPostTradeCreditResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPostTradeCreditValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPostTradeCreditResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPreference
     * @param vehicleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPreferenceCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/preferences"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPreferenceValidateBeforeCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetPreference(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPreferenceCall(vehicleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return CoinbaseEngPrimeApiApiGetPreferenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetPreferenceResponse primeAPIGetPreference(String vehicleId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetPreferenceResponse> resp = primeAPIGetPreferenceWithHttpInfo(vehicleId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetPreferenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetPreferenceResponse> primeAPIGetPreferenceWithHttpInfo(String vehicleId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPreferenceValidateBeforeCall(vehicleId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPreferenceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPreferenceAsync(String vehicleId, final ApiCallback<CoinbaseEngPrimeApiApiGetPreferenceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPreferenceValidateBeforeCall(vehicleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPreferenceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPrimeActivities
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param organizationId Organization to retrieve activities for. (optional)
     * @param statuses ActivityStatuses to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param types ActivityTypes to filter by.   - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types  - ACTIVITY_TYPE_BLOCK_TRADE: Block trades  - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request  - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types (optional)
     * @param secondaryTypes ActivitySecondaryTypes to filter by.   - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order &amp; Allocation secondary types  - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types  - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types  - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type (optional)
     * @param startDate Start date to filter activities by in RFC3339 Time format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in RFC3339 Time format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity cursor to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param categories ActivityCategories to filter by. (optional)
     * @param processingInFront Whether sort processing activities in front (optional)
     * @param statusUpdatedAtStart Beginning of the \&quot;Status Update At\&quot; to filter activities by in RFC3339 Time format. (optional)
     * @param statusUpdatedAtEnd End of the \&quot;Status Update At\&quot; to filter activities by in RFC3339 Time format. (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivitiesCall(String portfolioId, String organizationId, List<String> statuses, List<String> currencies, List<String> types, List<String> secondaryTypes, String startDate, String endDate, String search, String cursor, Integer limit, List<String> categories, Boolean processingInFront, String statusUpdatedAtStart, String statusUpdatedAtEnd, String sortDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/prime_activities"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (organizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("organization_id", organizationId));
        if (statuses != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "statuses", statuses));
        if (currencies != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "currencies", currencies));
        if (types != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "types", types));
        if (secondaryTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "secondary_types", secondaryTypes));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (categories != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "categories", categories));
        if (processingInFront != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("processing_in_front", processingInFront));
        if (statusUpdatedAtStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status_updated_at_start", statusUpdatedAtStart));
        if (statusUpdatedAtEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status_updated_at_end", statusUpdatedAtEnd));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPrimeActivitiesValidateBeforeCall(String portfolioId, String organizationId, List<String> statuses, List<String> currencies, List<String> types, List<String> secondaryTypes, String startDate, String endDate, String search, String cursor, Integer limit, List<String> categories, Boolean processingInFront, String statusUpdatedAtStart, String statusUpdatedAtEnd, String sortDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPrimeActivities(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivitiesCall(portfolioId, organizationId, statuses, currencies, types, secondaryTypes, startDate, endDate, search, cursor, limit, categories, processingInFront, statusUpdatedAtStart, statusUpdatedAtEnd, sortDirection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param organizationId Organization to retrieve activities for. (optional)
     * @param statuses ActivityStatuses to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param types ActivityTypes to filter by.   - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types  - ACTIVITY_TYPE_BLOCK_TRADE: Block trades  - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request  - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types (optional)
     * @param secondaryTypes ActivitySecondaryTypes to filter by.   - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order &amp; Allocation secondary types  - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types  - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types  - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type (optional)
     * @param startDate Start date to filter activities by in RFC3339 Time format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in RFC3339 Time format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity cursor to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param categories ActivityCategories to filter by. (optional)
     * @param processingInFront Whether sort processing activities in front (optional)
     * @param statusUpdatedAtStart Beginning of the \&quot;Status Update At\&quot; to filter activities by in RFC3339 Time format. (optional)
     * @param statusUpdatedAtEnd End of the \&quot;Status Update At\&quot; to filter activities by in RFC3339 Time format. (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @return CoinbaseEngPrimeApiApiGetPrimeActivitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetPrimeActivitiesResponse primeAPIGetPrimeActivities(String portfolioId, String organizationId, List<String> statuses, List<String> currencies, List<String> types, List<String> secondaryTypes, String startDate, String endDate, String search, String cursor, Integer limit, List<String> categories, Boolean processingInFront, String statusUpdatedAtStart, String statusUpdatedAtEnd, String sortDirection) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetPrimeActivitiesResponse> resp = primeAPIGetPrimeActivitiesWithHttpInfo(portfolioId, organizationId, statuses, currencies, types, secondaryTypes, startDate, endDate, search, cursor, limit, categories, processingInFront, statusUpdatedAtStart, statusUpdatedAtEnd, sortDirection);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param organizationId Organization to retrieve activities for. (optional)
     * @param statuses ActivityStatuses to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param types ActivityTypes to filter by.   - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types  - ACTIVITY_TYPE_BLOCK_TRADE: Block trades  - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request  - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types (optional)
     * @param secondaryTypes ActivitySecondaryTypes to filter by.   - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order &amp; Allocation secondary types  - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types  - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types  - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type (optional)
     * @param startDate Start date to filter activities by in RFC3339 Time format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in RFC3339 Time format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity cursor to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param categories ActivityCategories to filter by. (optional)
     * @param processingInFront Whether sort processing activities in front (optional)
     * @param statusUpdatedAtStart Beginning of the \&quot;Status Update At\&quot; to filter activities by in RFC3339 Time format. (optional)
     * @param statusUpdatedAtEnd End of the \&quot;Status Update At\&quot; to filter activities by in RFC3339 Time format. (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetPrimeActivitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetPrimeActivitiesResponse> primeAPIGetPrimeActivitiesWithHttpInfo(String portfolioId, String organizationId, List<String> statuses, List<String> currencies, List<String> types, List<String> secondaryTypes, String startDate, String endDate, String search, String cursor, Integer limit, List<String> categories, Boolean processingInFront, String statusUpdatedAtStart, String statusUpdatedAtEnd, String sortDirection) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPrimeActivitiesValidateBeforeCall(portfolioId, organizationId, statuses, currencies, types, secondaryTypes, startDate, endDate, search, cursor, limit, categories, processingInFront, statusUpdatedAtStart, statusUpdatedAtEnd, sortDirection, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPrimeActivitiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param organizationId Organization to retrieve activities for. (optional)
     * @param statuses ActivityStatuses to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param types ActivityTypes to filter by.   - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types  - ACTIVITY_TYPE_BLOCK_TRADE: Block trades  - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request  - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types (optional)
     * @param secondaryTypes ActivitySecondaryTypes to filter by.   - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order &amp; Allocation secondary types  - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types  - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types  - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type (optional)
     * @param startDate Start date to filter activities by in RFC3339 Time format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in RFC3339 Time format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity cursor to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param categories ActivityCategories to filter by. (optional)
     * @param processingInFront Whether sort processing activities in front (optional)
     * @param statusUpdatedAtStart Beginning of the \&quot;Status Update At\&quot; to filter activities by in RFC3339 Time format. (optional)
     * @param statusUpdatedAtEnd End of the \&quot;Status Update At\&quot; to filter activities by in RFC3339 Time format. (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivitiesAsync(String portfolioId, String organizationId, List<String> statuses, List<String> currencies, List<String> types, List<String> secondaryTypes, String startDate, String endDate, String search, String cursor, Integer limit, List<String> categories, Boolean processingInFront, String statusUpdatedAtStart, String statusUpdatedAtEnd, String sortDirection, final ApiCallback<CoinbaseEngPrimeApiApiGetPrimeActivitiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivitiesValidateBeforeCall(portfolioId, organizationId, statuses, currencies, types, secondaryTypes, startDate, endDate, search, cursor, limit, categories, processingInFront, statusUpdatedAtStart, statusUpdatedAtEnd, sortDirection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPrimeActivitiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPrimeActivitiesStream
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param organizationId Organization to retrieve activities for. (optional)
     * @param statuses ActivityStatuses to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param types ActivityTypes to filter by.   - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types  - ACTIVITY_TYPE_BLOCK_TRADE: Block trades  - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request  - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types (optional)
     * @param secondaryTypes ActivitySecondaryTypes to filter by.   - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order &amp; Allocation secondary types  - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types  - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types  - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type (optional)
     * @param startDate Start date to filter activities by in RFC3339 Time format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in RFC3339 Time format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity cursor to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param categories ActivityCategories to filter by. (optional)
     * @param processingInFront Whether sort processing activities in front (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivitiesStreamCall(String portfolioId, String organizationId, List<String> statuses, List<String> currencies, List<String> types, List<String> secondaryTypes, String startDate, String endDate, String search, String cursor, Integer limit, List<String> categories, Boolean processingInFront, String sortDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/portfolios/{portfolio_id}/prime_activities"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (organizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("organization_id", organizationId));
        if (statuses != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "statuses", statuses));
        if (currencies != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "currencies", currencies));
        if (types != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "types", types));
        if (secondaryTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "secondary_types", secondaryTypes));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (categories != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "categories", categories));
        if (processingInFront != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("processing_in_front", processingInFront));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPrimeActivitiesStreamValidateBeforeCall(String portfolioId, String organizationId, List<String> statuses, List<String> currencies, List<String> types, List<String> secondaryTypes, String startDate, String endDate, String search, String cursor, Integer limit, List<String> categories, Boolean processingInFront, String sortDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPrimeActivitiesStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivitiesStreamCall(portfolioId, organizationId, statuses, currencies, types, secondaryTypes, startDate, endDate, search, cursor, limit, categories, processingInFront, sortDirection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param organizationId Organization to retrieve activities for. (optional)
     * @param statuses ActivityStatuses to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param types ActivityTypes to filter by.   - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types  - ACTIVITY_TYPE_BLOCK_TRADE: Block trades  - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request  - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types (optional)
     * @param secondaryTypes ActivitySecondaryTypes to filter by.   - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order &amp; Allocation secondary types  - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types  - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types  - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type (optional)
     * @param startDate Start date to filter activities by in RFC3339 Time format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in RFC3339 Time format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity cursor to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param categories ActivityCategories to filter by. (optional)
     * @param processingInFront Whether sort processing activities in front (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @return StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivitiesStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivitiesStreamResponse primeAPIGetPrimeActivitiesStream(String portfolioId, String organizationId, List<String> statuses, List<String> currencies, List<String> types, List<String> secondaryTypes, String startDate, String endDate, String search, String cursor, Integer limit, List<String> categories, Boolean processingInFront, String sortDirection) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivitiesStreamResponse> resp = primeAPIGetPrimeActivitiesStreamWithHttpInfo(portfolioId, organizationId, statuses, currencies, types, secondaryTypes, startDate, endDate, search, cursor, limit, categories, processingInFront, sortDirection);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param organizationId Organization to retrieve activities for. (optional)
     * @param statuses ActivityStatuses to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param types ActivityTypes to filter by.   - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types  - ACTIVITY_TYPE_BLOCK_TRADE: Block trades  - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request  - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types (optional)
     * @param secondaryTypes ActivitySecondaryTypes to filter by.   - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order &amp; Allocation secondary types  - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types  - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types  - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type (optional)
     * @param startDate Start date to filter activities by in RFC3339 Time format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in RFC3339 Time format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity cursor to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param categories ActivityCategories to filter by. (optional)
     * @param processingInFront Whether sort processing activities in front (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivitiesStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivitiesStreamResponse> primeAPIGetPrimeActivitiesStreamWithHttpInfo(String portfolioId, String organizationId, List<String> statuses, List<String> currencies, List<String> types, List<String> secondaryTypes, String startDate, String endDate, String search, String cursor, Integer limit, List<String> categories, Boolean processingInFront, String sortDirection) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPrimeActivitiesStreamValidateBeforeCall(portfolioId, organizationId, statuses, currencies, types, secondaryTypes, startDate, endDate, search, cursor, limit, categories, processingInFront, sortDirection, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivitiesStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId Portfolio to retrieve activities for. (required)
     * @param organizationId Organization to retrieve activities for. (optional)
     * @param statuses ActivityStatuses to filter by. (optional)
     * @param currencies Currencies to filter by. (optional)
     * @param types ActivityTypes to filter by.   - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types  - ACTIVITY_TYPE_BLOCK_TRADE: Block trades  - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request  - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types (optional)
     * @param secondaryTypes ActivitySecondaryTypes to filter by.   - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order &amp; Allocation secondary types  - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types  - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types  - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types  - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type (optional)
     * @param startDate Start date to filter activities by in RFC3339 Time format. Requires end_date to be specified if start_date provided.  (optional)
     * @param endDate End date to filter activities by in RFC3339 Time format. Requires start_date to be specified if end_date provided.  (optional)
     * @param search Query string to search titles and descriptions for. (optional)
     * @param cursor Activity cursor to retrieve additional results strictly after. (optional)
     * @param limit Number of activities to retrieve (optional)
     * @param categories ActivityCategories to filter by. (optional)
     * @param processingInFront Whether sort processing activities in front (optional)
     * @param sortDirection Sorting order of activities (optional, default to DESC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivitiesStreamAsync(String portfolioId, String organizationId, List<String> statuses, List<String> currencies, List<String> types, List<String> secondaryTypes, String startDate, String endDate, String search, String cursor, Integer limit, List<String> categories, Boolean processingInFront, String sortDirection, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivitiesStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivitiesStreamValidateBeforeCall(portfolioId, organizationId, statuses, currencies, types, secondaryTypes, startDate, endDate, search, cursor, limit, categories, processingInFront, sortDirection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivitiesStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPrimeActivityConsensusAudit
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivityConsensusAuditCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/activities/{activity_id}/consensus_audit"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPrimeActivityConsensusAuditValidateBeforeCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPrimeActivityConsensusAudit(Async)");
        }
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling primeAPIGetPrimeActivityConsensusAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityConsensusAuditCall(portfolioId, activityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return CoinbaseEngPrimeApiApiActivityConsensusAuditResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiActivityConsensusAuditResult primeAPIGetPrimeActivityConsensusAudit(String portfolioId, String activityId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiActivityConsensusAuditResult> resp = primeAPIGetPrimeActivityConsensusAuditWithHttpInfo(portfolioId, activityId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiActivityConsensusAuditResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiActivityConsensusAuditResult> primeAPIGetPrimeActivityConsensusAuditWithHttpInfo(String portfolioId, String activityId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityConsensusAuditValidateBeforeCall(portfolioId, activityId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiActivityConsensusAuditResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivityConsensusAuditAsync(String portfolioId, String activityId, final ApiCallback<CoinbaseEngPrimeApiApiActivityConsensusAuditResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityConsensusAuditValidateBeforeCall(portfolioId, activityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiActivityConsensusAuditResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPrimeActivityDetails
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivityDetailsCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/activities/{activity_id}/activity_details"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPrimeActivityDetailsValidateBeforeCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPrimeActivityDetails(Async)");
        }
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling primeAPIGetPrimeActivityDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityDetailsCall(portfolioId, activityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return CoinbaseEngPrimeApiApiGetPrimeActivityDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetPrimeActivityDetailsResponse primeAPIGetPrimeActivityDetails(String portfolioId, String activityId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetPrimeActivityDetailsResponse> resp = primeAPIGetPrimeActivityDetailsWithHttpInfo(portfolioId, activityId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetPrimeActivityDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetPrimeActivityDetailsResponse> primeAPIGetPrimeActivityDetailsWithHttpInfo(String portfolioId, String activityId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityDetailsValidateBeforeCall(portfolioId, activityId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPrimeActivityDetailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivityDetailsAsync(String portfolioId, String activityId, final ApiCallback<CoinbaseEngPrimeApiApiGetPrimeActivityDetailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityDetailsValidateBeforeCall(portfolioId, activityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPrimeActivityDetailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPrimeActivityDetailsStream
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivityDetailsStreamCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/portfolios/{portfolio_id}/activities/{activity_id}/activity_details"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPrimeActivityDetailsStreamValidateBeforeCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPrimeActivityDetailsStream(Async)");
        }
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling primeAPIGetPrimeActivityDetailsStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityDetailsStreamCall(portfolioId, activityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsStreamResponse primeAPIGetPrimeActivityDetailsStream(String portfolioId, String activityId) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsStreamResponse> resp = primeAPIGetPrimeActivityDetailsStreamWithHttpInfo(portfolioId, activityId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsStreamResponse> primeAPIGetPrimeActivityDetailsStreamWithHttpInfo(String portfolioId, String activityId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityDetailsStreamValidateBeforeCall(portfolioId, activityId, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivityDetailsStreamAsync(String portfolioId, String activityId, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityDetailsStreamValidateBeforeCall(portfolioId, activityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPrimeActivityDetailsStreamV2
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivityDetailsStreamV2Call(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/stream/portfolios/{portfolio_id}/activities/{activity_id}/activity_details"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPrimeActivityDetailsStreamV2ValidateBeforeCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPrimeActivityDetailsStreamV2(Async)");
        }
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling primeAPIGetPrimeActivityDetailsStreamV2(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityDetailsStreamV2Call(portfolioId, activityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2StreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2StreamResponse primeAPIGetPrimeActivityDetailsStreamV2(String portfolioId, String activityId) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2StreamResponse> resp = primeAPIGetPrimeActivityDetailsStreamV2WithHttpInfo(portfolioId, activityId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2StreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2StreamResponse> primeAPIGetPrimeActivityDetailsStreamV2WithHttpInfo(String portfolioId, String activityId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityDetailsStreamV2ValidateBeforeCall(portfolioId, activityId, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2StreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivityDetailsStreamV2Async(String portfolioId, String activityId, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2StreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityDetailsStreamV2ValidateBeforeCall(portfolioId, activityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2StreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPrimeActivityDetailsV2
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivityDetailsV2Call(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/portfolios/{portfolio_id}/activities/{activity_id}/activity_details"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPrimeActivityDetailsV2ValidateBeforeCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPrimeActivityDetailsV2(Async)");
        }
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling primeAPIGetPrimeActivityDetailsV2(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityDetailsV2Call(portfolioId, activityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return CoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2Response primeAPIGetPrimeActivityDetailsV2(String portfolioId, String activityId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2Response> resp = primeAPIGetPrimeActivityDetailsV2WithHttpInfo(portfolioId, activityId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2Response> primeAPIGetPrimeActivityDetailsV2WithHttpInfo(String portfolioId, String activityId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityDetailsV2ValidateBeforeCall(portfolioId, activityId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivityDetailsV2Async(String portfolioId, String activityId, final ApiCallback<CoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityDetailsV2ValidateBeforeCall(portfolioId, activityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPrimeActivityDetailsV2Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPrimeActivityFilters
     * @param portfolioId  (required)
     * @param categories  (optional)
     * @param statuses  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivityFiltersCall(String portfolioId, List<String> categories, List<String> statuses, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/prime_activity_filters"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (categories != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "categories", categories));
        if (statuses != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "statuses", statuses));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPrimeActivityFiltersValidateBeforeCall(String portfolioId, List<String> categories, List<String> statuses, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetPrimeActivityFilters(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityFiltersCall(portfolioId, categories, statuses, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param categories  (optional)
     * @param statuses  (optional)
     * @return CoinbaseEngPrimeApiApiGetPrimeActivityFiltersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetPrimeActivityFiltersResponse primeAPIGetPrimeActivityFilters(String portfolioId, List<String> categories, List<String> statuses) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetPrimeActivityFiltersResponse> resp = primeAPIGetPrimeActivityFiltersWithHttpInfo(portfolioId, categories, statuses);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param categories  (optional)
     * @param statuses  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetPrimeActivityFiltersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetPrimeActivityFiltersResponse> primeAPIGetPrimeActivityFiltersWithHttpInfo(String portfolioId, List<String> categories, List<String> statuses) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityFiltersValidateBeforeCall(portfolioId, categories, statuses, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPrimeActivityFiltersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param categories  (optional)
     * @param statuses  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeActivityFiltersAsync(String portfolioId, List<String> categories, List<String> statuses, final ApiCallback<CoinbaseEngPrimeApiApiGetPrimeActivityFiltersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPrimeActivityFiltersValidateBeforeCall(portfolioId, categories, statuses, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetPrimeActivityFiltersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetPrimeInvoices
     * @param vehicleId  (required)
     * @param invoiceNumber  (optional)
     * @param billingYear  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeInvoicesCall(String vehicleId, String invoiceNumber, Integer billingYear, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/invoices/prime"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (invoiceNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("invoice_number", invoiceNumber));
        if (billingYear != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("billing_year", billingYear));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetPrimeInvoicesValidateBeforeCall(String vehicleId, String invoiceNumber, Integer billingYear, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetPrimeInvoices(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetPrimeInvoicesCall(vehicleId, invoiceNumber, billingYear, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param invoiceNumber  (optional)
     * @param billingYear  (optional)
     * @return List&lt;CoinbaseEngPrimeApiApiInvoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CoinbaseEngPrimeApiApiInvoice> primeAPIGetPrimeInvoices(String vehicleId, String invoiceNumber, Integer billingYear) throws ApiException {
        ApiResponse<List<CoinbaseEngPrimeApiApiInvoice>> resp = primeAPIGetPrimeInvoicesWithHttpInfo(vehicleId, invoiceNumber, billingYear);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param invoiceNumber  (optional)
     * @param billingYear  (optional)
     * @return ApiResponse&lt;List&lt;CoinbaseEngPrimeApiApiInvoice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CoinbaseEngPrimeApiApiInvoice>> primeAPIGetPrimeInvoicesWithHttpInfo(String vehicleId, String invoiceNumber, Integer billingYear) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetPrimeInvoicesValidateBeforeCall(vehicleId, invoiceNumber, billingYear, null, null);
        Type localVarReturnType = new TypeToken<List<CoinbaseEngPrimeApiApiInvoice>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param invoiceNumber  (optional)
     * @param billingYear  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetPrimeInvoicesAsync(String vehicleId, String invoiceNumber, Integer billingYear, final ApiCallback<List<CoinbaseEngPrimeApiApiInvoice>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetPrimeInvoicesValidateBeforeCall(vehicleId, invoiceNumber, billingYear, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CoinbaseEngPrimeApiApiInvoice>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetProductStats
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetProductStatsCall(String productId, String geolocationLocality, String geolocationCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/products/{product_id}/stats"
            .replaceAll("\\{" + "product_id" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (geolocationLocality != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geolocation.locality", geolocationLocality));
        if (geolocationCountry != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geolocation.country", geolocationCountry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetProductStatsValidateBeforeCall(String productId, String geolocationLocality, String geolocationCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling primeAPIGetProductStats(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetProductStatsCall(productId, geolocationLocality, geolocationCountry, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @return CoinbaseBrokerageProxyTradingApiProductStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseBrokerageProxyTradingApiProductStats primeAPIGetProductStats(String productId, String geolocationLocality, String geolocationCountry) throws ApiException {
        ApiResponse<CoinbaseBrokerageProxyTradingApiProductStats> resp = primeAPIGetProductStatsWithHttpInfo(productId, geolocationLocality, geolocationCountry);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @return ApiResponse&lt;CoinbaseBrokerageProxyTradingApiProductStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseBrokerageProxyTradingApiProductStats> primeAPIGetProductStatsWithHttpInfo(String productId, String geolocationLocality, String geolocationCountry) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetProductStatsValidateBeforeCall(productId, geolocationLocality, geolocationCountry, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyTradingApiProductStats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetProductStatsAsync(String productId, String geolocationLocality, String geolocationCountry, final ApiCallback<CoinbaseBrokerageProxyTradingApiProductStats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetProductStatsValidateBeforeCall(productId, geolocationLocality, geolocationCountry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyTradingApiProductStats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetProductStatsStream
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param updateInterval Time between each patch for the stats (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetProductStatsStreamCall(String productId, String updateInterval, String geolocationLocality, String geolocationCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/products/{product_id}/stats"
            .replaceAll("\\{" + "product_id" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("update_interval", updateInterval));
        if (geolocationLocality != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geolocation.locality", geolocationLocality));
        if (geolocationCountry != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geolocation.country", geolocationCountry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetProductStatsStreamValidateBeforeCall(String productId, String updateInterval, String geolocationLocality, String geolocationCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling primeAPIGetProductStatsStream(Async)");
        }
        
        // verify the required parameter 'updateInterval' is set
        if (updateInterval == null) {
            throw new ApiException("Missing the required parameter 'updateInterval' when calling primeAPIGetProductStatsStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetProductStatsStreamCall(productId, updateInterval, geolocationLocality, geolocationCountry, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param updateInterval Time between each patch for the stats (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @return StreamResultOfCoinbaseBrokerageProxyTradingApiGetProductStatsStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseBrokerageProxyTradingApiGetProductStatsStreamResponse primeAPIGetProductStatsStream(String productId, String updateInterval, String geolocationLocality, String geolocationCountry) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseBrokerageProxyTradingApiGetProductStatsStreamResponse> resp = primeAPIGetProductStatsStreamWithHttpInfo(productId, updateInterval, geolocationLocality, geolocationCountry);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param updateInterval Time between each patch for the stats (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @return ApiResponse&lt;StreamResultOfCoinbaseBrokerageProxyTradingApiGetProductStatsStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseBrokerageProxyTradingApiGetProductStatsStreamResponse> primeAPIGetProductStatsStreamWithHttpInfo(String productId, String updateInterval, String geolocationLocality, String geolocationCountry) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetProductStatsStreamValidateBeforeCall(productId, updateInterval, geolocationLocality, geolocationCountry, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseBrokerageProxyTradingApiGetProductStatsStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId The trading pair, i.e. &#39;BTC-USD&#39; (required)
     * @param updateInterval Time between each patch for the stats (required)
     * @param geolocationLocality  (optional)
     * @param geolocationCountry  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetProductStatsStreamAsync(String productId, String updateInterval, String geolocationLocality, String geolocationCountry, final ApiCallback<StreamResultOfCoinbaseBrokerageProxyTradingApiGetProductStatsStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetProductStatsStreamValidateBeforeCall(productId, updateInterval, geolocationLocality, geolocationCountry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseBrokerageProxyTradingApiGetProductStatsStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetProducts
     * @param limit Number of products to return in the initial snapshot. Maximum of 100 (optional)
     * @param productId  (optional)
     * @param portfolioId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetProductsCall(Long limit, List<String> productId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (productId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "product_id", productId));
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetProductsValidateBeforeCall(Long limit, List<String> productId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = primeAPIGetProductsCall(limit, productId, portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param limit Number of products to return in the initial snapshot. Maximum of 100 (optional)
     * @param productId  (optional)
     * @param portfolioId  (optional)
     * @return CoinbaseEngPrimeApiApiProducts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiProducts primeAPIGetProducts(Long limit, List<String> productId, String portfolioId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiProducts> resp = primeAPIGetProductsWithHttpInfo(limit, productId, portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param limit Number of products to return in the initial snapshot. Maximum of 100 (optional)
     * @param productId  (optional)
     * @param portfolioId  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiProducts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiProducts> primeAPIGetProductsWithHttpInfo(Long limit, List<String> productId, String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetProductsValidateBeforeCall(limit, productId, portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiProducts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param limit Number of products to return in the initial snapshot. Maximum of 100 (optional)
     * @param productId  (optional)
     * @param portfolioId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetProductsAsync(Long limit, List<String> productId, String portfolioId, final ApiCallback<CoinbaseEngPrimeApiApiProducts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetProductsValidateBeforeCall(limit, productId, portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiProducts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetProductsStream
     * @param updateInterval Time between each patch for the products (required)
     * @param limit Number of products to return in the initial snapshot. (optional)
     * @param productId  (optional)
     * @param portfolioId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetProductsStreamCall(String updateInterval, Long limit, List<String> productId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (updateInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("update_interval", updateInterval));
        if (productId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "product_id", productId));
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetProductsStreamValidateBeforeCall(String updateInterval, Long limit, List<String> productId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateInterval' is set
        if (updateInterval == null) {
            throw new ApiException("Missing the required parameter 'updateInterval' when calling primeAPIGetProductsStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetProductsStreamCall(updateInterval, limit, productId, portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param updateInterval Time between each patch for the products (required)
     * @param limit Number of products to return in the initial snapshot. (optional)
     * @param productId  (optional)
     * @param portfolioId  (optional)
     * @return StreamResultOfCoinbaseEngPrimeApiApiGetProductsStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiGetProductsStreamResponse primeAPIGetProductsStream(String updateInterval, Long limit, List<String> productId, String portfolioId) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetProductsStreamResponse> resp = primeAPIGetProductsStreamWithHttpInfo(updateInterval, limit, productId, portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param updateInterval Time between each patch for the products (required)
     * @param limit Number of products to return in the initial snapshot. (optional)
     * @param productId  (optional)
     * @param portfolioId  (optional)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiGetProductsStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetProductsStreamResponse> primeAPIGetProductsStreamWithHttpInfo(String updateInterval, Long limit, List<String> productId, String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetProductsStreamValidateBeforeCall(updateInterval, limit, productId, portfolioId, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetProductsStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateInterval Time between each patch for the products (required)
     * @param limit Number of products to return in the initial snapshot. (optional)
     * @param productId  (optional)
     * @param portfolioId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetProductsStreamAsync(String updateInterval, Long limit, List<String> productId, String portfolioId, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiGetProductsStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetProductsStreamValidateBeforeCall(updateInterval, limit, productId, portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetProductsStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetRateCard
     * @param currency  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetRateCardCall(String currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{currency}/rate_cards"
            .replaceAll("\\{" + "currency" + "\\}", apiClient.escapeString(currency.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetRateCardValidateBeforeCall(String currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling primeAPIGetRateCard(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetRateCardCall(currency, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param currency  (required)
     * @return CoinbaseEngPrimeApiApiGetRateCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetRateCardResponse primeAPIGetRateCard(String currency) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetRateCardResponse> resp = primeAPIGetRateCardWithHttpInfo(currency);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param currency  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetRateCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetRateCardResponse> primeAPIGetRateCardWithHttpInfo(String currency) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetRateCardValidateBeforeCall(currency, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetRateCardResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param currency  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetRateCardAsync(String currency, final ApiCallback<CoinbaseEngPrimeApiApiGetRateCardResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetRateCardValidateBeforeCall(currency, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetRateCardResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetReportingCenterDownloadLink
     * @param portfolioId  (required)
     * @param s3Bucket  (optional)
     * @param s3Key  (optional)
     * @param type  (optional, default to REPORT_TYPE_UNSPECIFIED)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetReportingCenterDownloadLinkCall(String portfolioId, String s3Bucket, String s3Key, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/reporting_center/{portfolio_id}/download"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (s3Bucket != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("s3_bucket", s3Bucket));
        if (s3Key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("s3_key", s3Key));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetReportingCenterDownloadLinkValidateBeforeCall(String portfolioId, String s3Bucket, String s3Key, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetReportingCenterDownloadLink(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetReportingCenterDownloadLinkCall(portfolioId, s3Bucket, s3Key, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param s3Bucket  (optional)
     * @param s3Key  (optional)
     * @param type  (optional, default to REPORT_TYPE_UNSPECIFIED)
     * @return CoinbaseEngPrimeApiApiGetReportingCenterDownloadLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetReportingCenterDownloadLinkResponse primeAPIGetReportingCenterDownloadLink(String portfolioId, String s3Bucket, String s3Key, String type) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetReportingCenterDownloadLinkResponse> resp = primeAPIGetReportingCenterDownloadLinkWithHttpInfo(portfolioId, s3Bucket, s3Key, type);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param s3Bucket  (optional)
     * @param s3Key  (optional)
     * @param type  (optional, default to REPORT_TYPE_UNSPECIFIED)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetReportingCenterDownloadLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetReportingCenterDownloadLinkResponse> primeAPIGetReportingCenterDownloadLinkWithHttpInfo(String portfolioId, String s3Bucket, String s3Key, String type) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetReportingCenterDownloadLinkValidateBeforeCall(portfolioId, s3Bucket, s3Key, type, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetReportingCenterDownloadLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param s3Bucket  (optional)
     * @param s3Key  (optional)
     * @param type  (optional, default to REPORT_TYPE_UNSPECIFIED)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetReportingCenterDownloadLinkAsync(String portfolioId, String s3Bucket, String s3Key, String type, final ApiCallback<CoinbaseEngPrimeApiApiGetReportingCenterDownloadLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetReportingCenterDownloadLinkValidateBeforeCall(portfolioId, s3Bucket, s3Key, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetReportingCenterDownloadLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetReportingCenterFilters
     * @param vehicleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetReportingCenterFiltersCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/reporting_center/{vehicle_id}/filters"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetReportingCenterFiltersValidateBeforeCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetReportingCenterFilters(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetReportingCenterFiltersCall(vehicleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return CoinbaseEngPrimeApiApiGetReportingCenterFiltersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetReportingCenterFiltersResponse primeAPIGetReportingCenterFilters(String vehicleId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetReportingCenterFiltersResponse> resp = primeAPIGetReportingCenterFiltersWithHttpInfo(vehicleId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetReportingCenterFiltersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetReportingCenterFiltersResponse> primeAPIGetReportingCenterFiltersWithHttpInfo(String vehicleId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetReportingCenterFiltersValidateBeforeCall(vehicleId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetReportingCenterFiltersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetReportingCenterFiltersAsync(String vehicleId, final ApiCallback<CoinbaseEngPrimeApiApiGetReportingCenterFiltersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetReportingCenterFiltersValidateBeforeCall(vehicleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetReportingCenterFiltersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetReportingDocumentByOrderId
     * @param portfolioId  (required)
     * @param orderId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetReportingDocumentByOrderIdCall(String portfolioId, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/orders/{order_id}/documents"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetReportingDocumentByOrderIdValidateBeforeCall(String portfolioId, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetReportingDocumentByOrderId(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling primeAPIGetReportingDocumentByOrderId(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetReportingDocumentByOrderIdCall(portfolioId, orderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param orderId  (required)
     * @return CoinbaseEngPrimeReportingApiDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeReportingApiDocument primeAPIGetReportingDocumentByOrderId(String portfolioId, String orderId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeReportingApiDocument> resp = primeAPIGetReportingDocumentByOrderIdWithHttpInfo(portfolioId, orderId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param orderId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeReportingApiDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeReportingApiDocument> primeAPIGetReportingDocumentByOrderIdWithHttpInfo(String portfolioId, String orderId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetReportingDocumentByOrderIdValidateBeforeCall(portfolioId, orderId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeReportingApiDocument>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param orderId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetReportingDocumentByOrderIdAsync(String portfolioId, String orderId, final ApiCallback<CoinbaseEngPrimeReportingApiDocument> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetReportingDocumentByOrderIdValidateBeforeCall(portfolioId, orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeReportingApiDocument>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetReverseAllocation
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param allocationId The allocation id to get allocations for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetReverseAllocationCall(String portfolioId, String allocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/allocation/{allocation_id}/reverse"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetReverseAllocationValidateBeforeCall(String portfolioId, String allocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetReverseAllocation(Async)");
        }
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling primeAPIGetReverseAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetReverseAllocationCall(portfolioId, allocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param allocationId The allocation id to get allocations for (required)
     * @return CoinbaseEngPrimeApiApiGetReverseAllocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetReverseAllocationResponse primeAPIGetReverseAllocation(String portfolioId, String allocationId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetReverseAllocationResponse> resp = primeAPIGetReverseAllocationWithHttpInfo(portfolioId, allocationId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param allocationId The allocation id to get allocations for (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetReverseAllocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetReverseAllocationResponse> primeAPIGetReverseAllocationWithHttpInfo(String portfolioId, String allocationId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetReverseAllocationValidateBeforeCall(portfolioId, allocationId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetReverseAllocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The ID of the portfolio to get allocation for (required)
     * @param allocationId The allocation id to get allocations for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetReverseAllocationAsync(String portfolioId, String allocationId, final ApiCallback<CoinbaseEngPrimeApiApiGetReverseAllocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetReverseAllocationValidateBeforeCall(portfolioId, allocationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetReverseAllocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetSignedDocument
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetSignedDocumentCall(String vehicleId, String documentKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/documents/signed/{document_key}"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()))
            .replaceAll("\\{" + "document_key" + "\\}", apiClient.escapeString(documentKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetSignedDocumentValidateBeforeCall(String vehicleId, String documentKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetSignedDocument(Async)");
        }
        
        // verify the required parameter 'documentKey' is set
        if (documentKey == null) {
            throw new ApiException("Missing the required parameter 'documentKey' when calling primeAPIGetSignedDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetSignedDocumentCall(vehicleId, documentKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @return CoinbaseEngPrimeApiApiGetSignedDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetSignedDocumentResponse primeAPIGetSignedDocument(String vehicleId, String documentKey) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetSignedDocumentResponse> resp = primeAPIGetSignedDocumentWithHttpInfo(vehicleId, documentKey);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetSignedDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetSignedDocumentResponse> primeAPIGetSignedDocumentWithHttpInfo(String vehicleId, String documentKey) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetSignedDocumentValidateBeforeCall(vehicleId, documentKey, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetSignedDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetSignedDocumentAsync(String vehicleId, String documentKey, final ApiCallback<CoinbaseEngPrimeApiApiGetSignedDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetSignedDocumentValidateBeforeCall(vehicleId, documentKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetSignedDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetStablecoinRewardsEarnings
     * @param vehicleId  (required)
     * @param portfolioId  (required)
     * @param currency  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetStablecoinRewardsEarningsCall(String vehicleId, String portfolioId, String currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/portfolios/{portfolio_id}/stablecoin_rewards/{currency}/earnings"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()))
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "currency" + "\\}", apiClient.escapeString(currency.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetStablecoinRewardsEarningsValidateBeforeCall(String vehicleId, String portfolioId, String currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetStablecoinRewardsEarnings(Async)");
        }
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetStablecoinRewardsEarnings(Async)");
        }
        
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling primeAPIGetStablecoinRewardsEarnings(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetStablecoinRewardsEarningsCall(vehicleId, portfolioId, currency, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param portfolioId  (required)
     * @param currency  (required)
     * @return CoinbaseEngPrimeApiApiGetStablecoinRewardsEarningsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetStablecoinRewardsEarningsResponse primeAPIGetStablecoinRewardsEarnings(String vehicleId, String portfolioId, String currency) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetStablecoinRewardsEarningsResponse> resp = primeAPIGetStablecoinRewardsEarningsWithHttpInfo(vehicleId, portfolioId, currency);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param portfolioId  (required)
     * @param currency  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetStablecoinRewardsEarningsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetStablecoinRewardsEarningsResponse> primeAPIGetStablecoinRewardsEarningsWithHttpInfo(String vehicleId, String portfolioId, String currency) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetStablecoinRewardsEarningsValidateBeforeCall(vehicleId, portfolioId, currency, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetStablecoinRewardsEarningsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param portfolioId  (required)
     * @param currency  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetStablecoinRewardsEarningsAsync(String vehicleId, String portfolioId, String currency, final ApiCallback<CoinbaseEngPrimeApiApiGetStablecoinRewardsEarningsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetStablecoinRewardsEarningsValidateBeforeCall(vehicleId, portfolioId, currency, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetStablecoinRewardsEarningsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetStablecoinRewardsEnrollment
     * @param vehicleId  (required)
     * @param currency  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetStablecoinRewardsEnrollmentCall(String vehicleId, String currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/stablecoin_rewards/{currency}/enrollment"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()))
            .replaceAll("\\{" + "currency" + "\\}", apiClient.escapeString(currency.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetStablecoinRewardsEnrollmentValidateBeforeCall(String vehicleId, String currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetStablecoinRewardsEnrollment(Async)");
        }
        
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling primeAPIGetStablecoinRewardsEnrollment(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetStablecoinRewardsEnrollmentCall(vehicleId, currency, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currency  (required)
     * @return CoinbaseEngPrimeApiApiGetStablecoinRewardsEnrollmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetStablecoinRewardsEnrollmentResponse primeAPIGetStablecoinRewardsEnrollment(String vehicleId, String currency) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetStablecoinRewardsEnrollmentResponse> resp = primeAPIGetStablecoinRewardsEnrollmentWithHttpInfo(vehicleId, currency);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currency  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetStablecoinRewardsEnrollmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetStablecoinRewardsEnrollmentResponse> primeAPIGetStablecoinRewardsEnrollmentWithHttpInfo(String vehicleId, String currency) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetStablecoinRewardsEnrollmentValidateBeforeCall(vehicleId, currency, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetStablecoinRewardsEnrollmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param currency  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetStablecoinRewardsEnrollmentAsync(String vehicleId, String currency, final ApiCallback<CoinbaseEngPrimeApiApiGetStablecoinRewardsEnrollmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetStablecoinRewardsEnrollmentValidateBeforeCall(vehicleId, currency, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetStablecoinRewardsEnrollmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetStakeTimeEstimation
     * @param portfolioId  (required)
     * @param currencySymbol  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetStakeTimeEstimationCall(String portfolioId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/{currency_symbol}/stake_time_estimation"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "currency_symbol" + "\\}", apiClient.escapeString(currencySymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetStakeTimeEstimationValidateBeforeCall(String portfolioId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetStakeTimeEstimation(Async)");
        }
        
        // verify the required parameter 'currencySymbol' is set
        if (currencySymbol == null) {
            throw new ApiException("Missing the required parameter 'currencySymbol' when calling primeAPIGetStakeTimeEstimation(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetStakeTimeEstimationCall(portfolioId, currencySymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param currencySymbol  (required)
     * @return CoinbaseCustodyApiGetStakeTimeEstimationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiGetStakeTimeEstimationResponse primeAPIGetStakeTimeEstimation(String portfolioId, String currencySymbol) throws ApiException {
        ApiResponse<CoinbaseCustodyApiGetStakeTimeEstimationResponse> resp = primeAPIGetStakeTimeEstimationWithHttpInfo(portfolioId, currencySymbol);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param currencySymbol  (required)
     * @return ApiResponse&lt;CoinbaseCustodyApiGetStakeTimeEstimationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiGetStakeTimeEstimationResponse> primeAPIGetStakeTimeEstimationWithHttpInfo(String portfolioId, String currencySymbol) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetStakeTimeEstimationValidateBeforeCall(portfolioId, currencySymbol, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetStakeTimeEstimationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param currencySymbol  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetStakeTimeEstimationAsync(String portfolioId, String currencySymbol, final ApiCallback<CoinbaseCustodyApiGetStakeTimeEstimationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetStakeTimeEstimationValidateBeforeCall(portfolioId, currencySymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetStakeTimeEstimationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetStakingActivityDetails
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetStakingActivityDetailsCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/activities/{activity_id}/staking_activity_details"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetStakingActivityDetailsValidateBeforeCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetStakingActivityDetails(Async)");
        }
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling primeAPIGetStakingActivityDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetStakingActivityDetailsCall(portfolioId, activityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return CoinbaseCustodyApiGetStakingActivityDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiGetStakingActivityDetailsResponse primeAPIGetStakingActivityDetails(String portfolioId, String activityId) throws ApiException {
        ApiResponse<CoinbaseCustodyApiGetStakingActivityDetailsResponse> resp = primeAPIGetStakingActivityDetailsWithHttpInfo(portfolioId, activityId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return ApiResponse&lt;CoinbaseCustodyApiGetStakingActivityDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiGetStakingActivityDetailsResponse> primeAPIGetStakingActivityDetailsWithHttpInfo(String portfolioId, String activityId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetStakingActivityDetailsValidateBeforeCall(portfolioId, activityId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetStakingActivityDetailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetStakingActivityDetailsAsync(String portfolioId, String activityId, final ApiCallback<CoinbaseCustodyApiGetStakingActivityDetailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetStakingActivityDetailsValidateBeforeCall(portfolioId, activityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetStakingActivityDetailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetStatement
     * @param statementId  (required)
     * @param portfolioId  (optional)
     * @param portfolioIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetStatementCall(String statementId, String portfolioId, List<String> portfolioIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/statements/{statement_id}"
            .replaceAll("\\{" + "statement_id" + "\\}", apiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));
        if (portfolioIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "portfolio_ids", portfolioIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetStatementValidateBeforeCall(String statementId, String portfolioId, List<String> portfolioIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling primeAPIGetStatement(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetStatementCall(statementId, portfolioId, portfolioIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param statementId  (required)
     * @param portfolioId  (optional)
     * @param portfolioIds  (optional)
     * @return CoinbaseEngPrimeApiApiGetStatementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetStatementResponse primeAPIGetStatement(String statementId, String portfolioId, List<String> portfolioIds) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetStatementResponse> resp = primeAPIGetStatementWithHttpInfo(statementId, portfolioId, portfolioIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param statementId  (required)
     * @param portfolioId  (optional)
     * @param portfolioIds  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetStatementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetStatementResponse> primeAPIGetStatementWithHttpInfo(String statementId, String portfolioId, List<String> portfolioIds) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetStatementValidateBeforeCall(statementId, portfolioId, portfolioIds, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetStatementResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param statementId  (required)
     * @param portfolioId  (optional)
     * @param portfolioIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetStatementAsync(String statementId, String portfolioId, List<String> portfolioIds, final ApiCallback<CoinbaseEngPrimeApiApiGetStatementResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetStatementValidateBeforeCall(statementId, portfolioId, portfolioIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetStatementResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetStatements
     * @param portfolioId  (required)
     * @param year  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetStatementsCall(String portfolioId, Integer year, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/statements"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (year != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("year", year));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetStatementsValidateBeforeCall(String portfolioId, Integer year, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetStatements(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetStatementsCall(portfolioId, year, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param year  (optional)
     * @return List&lt;CoinbaseEngPrimeReportingApiStatement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CoinbaseEngPrimeReportingApiStatement> primeAPIGetStatements(String portfolioId, Integer year) throws ApiException {
        ApiResponse<List<CoinbaseEngPrimeReportingApiStatement>> resp = primeAPIGetStatementsWithHttpInfo(portfolioId, year);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param year  (optional)
     * @return ApiResponse&lt;List&lt;CoinbaseEngPrimeReportingApiStatement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CoinbaseEngPrimeReportingApiStatement>> primeAPIGetStatementsWithHttpInfo(String portfolioId, Integer year) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetStatementsValidateBeforeCall(portfolioId, year, null, null);
        Type localVarReturnType = new TypeToken<List<CoinbaseEngPrimeReportingApiStatement>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param year  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetStatementsAsync(String portfolioId, Integer year, final ApiCallback<List<CoinbaseEngPrimeReportingApiStatement>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetStatementsValidateBeforeCall(portfolioId, year, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CoinbaseEngPrimeReportingApiStatement>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetSystemStatus
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetSystemStatusCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/system_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetSystemStatusValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = primeAPIGetSystemStatusCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @return CoinbaseEngPrimeApiApiSystemStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiSystemStatusResponse primeAPIGetSystemStatus() throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiSystemStatusResponse> resp = primeAPIGetSystemStatusWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiSystemStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiSystemStatusResponse> primeAPIGetSystemStatusWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetSystemStatusValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiSystemStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetSystemStatusAsync(final ApiCallback<CoinbaseEngPrimeApiApiSystemStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetSystemStatusValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiSystemStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetTeamMemberDetails
     * @param entityId The entity id (required)
     * @param userId The user id (required)
     * @param email The user email (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTeamMemberDetailsCall(String entityId, String userId, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/team_member/detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entity_id", entityId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetTeamMemberDetailsValidateBeforeCall(String entityId, String userId, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling primeAPIGetTeamMemberDetails(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIGetTeamMemberDetails(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling primeAPIGetTeamMemberDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetTeamMemberDetailsCall(entityId, userId, email, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId The entity id (required)
     * @param userId The user id (required)
     * @param email The user email (required)
     * @return CoinbaseEngPrimeApiApiGetTeamMemberDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetTeamMemberDetailResponse primeAPIGetTeamMemberDetails(String entityId, String userId, String email) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetTeamMemberDetailResponse> resp = primeAPIGetTeamMemberDetailsWithHttpInfo(entityId, userId, email);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId The entity id (required)
     * @param userId The user id (required)
     * @param email The user email (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetTeamMemberDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetTeamMemberDetailResponse> primeAPIGetTeamMemberDetailsWithHttpInfo(String entityId, String userId, String email) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetTeamMemberDetailsValidateBeforeCall(entityId, userId, email, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetTeamMemberDetailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId The entity id (required)
     * @param userId The user id (required)
     * @param email The user email (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTeamMemberDetailsAsync(String entityId, String userId, String email, final ApiCallback<CoinbaseEngPrimeApiApiGetTeamMemberDetailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetTeamMemberDetailsValidateBeforeCall(entityId, userId, email, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetTeamMemberDetailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetTeamMembers
     * @param queryLevel The query level (required)
     * @param queryIds The query IDs (required)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of users to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param permission Permission to filter all users by (optional, default to PERMISSION_UNKNOWN)
     * @param roles Users with these roles (or provided secondary roles) to include in response (optional)
     * @param secondaryRoles Users with these secondary roles (or provided roles) to include in response (optional)
     * @param accessTypeFilter The access type filter (optional, default to ACCESS_TYPE_UNSPECIFIED)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTeamMembersCall(String queryLevel, List<String> queryIds, String cursor, Integer limit, String sortDirection, String search, String permission, List<String> roles, List<String> secondaryRoles, String accessTypeFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/team_members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (queryLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query_level", queryLevel));
        if (queryIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "query_ids", queryIds));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (roles != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "roles", roles));
        if (secondaryRoles != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "secondary_roles", secondaryRoles));
        if (accessTypeFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_type_filter", accessTypeFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetTeamMembersValidateBeforeCall(String queryLevel, List<String> queryIds, String cursor, Integer limit, String sortDirection, String search, String permission, List<String> roles, List<String> secondaryRoles, String accessTypeFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queryLevel' is set
        if (queryLevel == null) {
            throw new ApiException("Missing the required parameter 'queryLevel' when calling primeAPIGetTeamMembers(Async)");
        }
        
        // verify the required parameter 'queryIds' is set
        if (queryIds == null) {
            throw new ApiException("Missing the required parameter 'queryIds' when calling primeAPIGetTeamMembers(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetTeamMembersCall(queryLevel, queryIds, cursor, limit, sortDirection, search, permission, roles, secondaryRoles, accessTypeFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param queryLevel The query level (required)
     * @param queryIds The query IDs (required)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of users to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param permission Permission to filter all users by (optional, default to PERMISSION_UNKNOWN)
     * @param roles Users with these roles (or provided secondary roles) to include in response (optional)
     * @param secondaryRoles Users with these secondary roles (or provided roles) to include in response (optional)
     * @param accessTypeFilter The access type filter (optional, default to ACCESS_TYPE_UNSPECIFIED)
     * @return CoinbaseEngPrimeApiApiGetTeamMembersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetTeamMembersResponse primeAPIGetTeamMembers(String queryLevel, List<String> queryIds, String cursor, Integer limit, String sortDirection, String search, String permission, List<String> roles, List<String> secondaryRoles, String accessTypeFilter) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetTeamMembersResponse> resp = primeAPIGetTeamMembersWithHttpInfo(queryLevel, queryIds, cursor, limit, sortDirection, search, permission, roles, secondaryRoles, accessTypeFilter);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param queryLevel The query level (required)
     * @param queryIds The query IDs (required)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of users to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param permission Permission to filter all users by (optional, default to PERMISSION_UNKNOWN)
     * @param roles Users with these roles (or provided secondary roles) to include in response (optional)
     * @param secondaryRoles Users with these secondary roles (or provided roles) to include in response (optional)
     * @param accessTypeFilter The access type filter (optional, default to ACCESS_TYPE_UNSPECIFIED)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetTeamMembersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetTeamMembersResponse> primeAPIGetTeamMembersWithHttpInfo(String queryLevel, List<String> queryIds, String cursor, Integer limit, String sortDirection, String search, String permission, List<String> roles, List<String> secondaryRoles, String accessTypeFilter) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetTeamMembersValidateBeforeCall(queryLevel, queryIds, cursor, limit, sortDirection, search, permission, roles, secondaryRoles, accessTypeFilter, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetTeamMembersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param queryLevel The query level (required)
     * @param queryIds The query IDs (required)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of users to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param permission Permission to filter all users by (optional, default to PERMISSION_UNKNOWN)
     * @param roles Users with these roles (or provided secondary roles) to include in response (optional)
     * @param secondaryRoles Users with these secondary roles (or provided roles) to include in response (optional)
     * @param accessTypeFilter The access type filter (optional, default to ACCESS_TYPE_UNSPECIFIED)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTeamMembersAsync(String queryLevel, List<String> queryIds, String cursor, Integer limit, String sortDirection, String search, String permission, List<String> roles, List<String> secondaryRoles, String accessTypeFilter, final ApiCallback<CoinbaseEngPrimeApiApiGetTeamMembersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetTeamMembersValidateBeforeCall(queryLevel, queryIds, cursor, limit, sortDirection, search, permission, roles, secondaryRoles, accessTypeFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetTeamMembersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetTradeReportGraphData
     * @param orderId  (required)
     * @param portfolioId  (optional)
     * @param intervalSize  (optional, default to UNKNOWN_INTERVAL)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTradeReportGraphDataCall(String orderId, String portfolioId, String intervalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orders/{order_id}/report/graph"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));
        if (intervalSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("interval_size", intervalSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetTradeReportGraphDataValidateBeforeCall(String orderId, String portfolioId, String intervalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling primeAPIGetTradeReportGraphData(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetTradeReportGraphDataCall(orderId, portfolioId, intervalSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param orderId  (required)
     * @param portfolioId  (optional)
     * @param intervalSize  (optional, default to UNKNOWN_INTERVAL)
     * @return CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse primeAPIGetTradeReportGraphData(String orderId, String portfolioId, String intervalSize) throws ApiException {
        ApiResponse<CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse> resp = primeAPIGetTradeReportGraphDataWithHttpInfo(orderId, portfolioId, intervalSize);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param orderId  (required)
     * @param portfolioId  (optional)
     * @param intervalSize  (optional, default to UNKNOWN_INTERVAL)
     * @return ApiResponse&lt;CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse> primeAPIGetTradeReportGraphDataWithHttpInfo(String orderId, String portfolioId, String intervalSize) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetTradeReportGraphDataValidateBeforeCall(orderId, portfolioId, intervalSize, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orderId  (required)
     * @param portfolioId  (optional)
     * @param intervalSize  (optional, default to UNKNOWN_INTERVAL)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTradeReportGraphDataAsync(String orderId, String portfolioId, String intervalSize, final ApiCallback<CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetTradeReportGraphDataValidateBeforeCall(orderId, portfolioId, intervalSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyTradingApiGetTradeReportGraphDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetTradeReportOrderDetails
     * @param orderId ID of order (required)
     * @param portfolioId ID of order&#39;s portfolio (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTradeReportOrderDetailsCall(String orderId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orders/{order_id}/report/order-details"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetTradeReportOrderDetailsValidateBeforeCall(String orderId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling primeAPIGetTradeReportOrderDetails(Async)");
        }
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetTradeReportOrderDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetTradeReportOrderDetailsCall(orderId, portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param orderId ID of order (required)
     * @param portfolioId ID of order&#39;s portfolio (required)
     * @return CoinbaseBrokerageProxyTradingApiTradeReportOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseBrokerageProxyTradingApiTradeReportOrder primeAPIGetTradeReportOrderDetails(String orderId, String portfolioId) throws ApiException {
        ApiResponse<CoinbaseBrokerageProxyTradingApiTradeReportOrder> resp = primeAPIGetTradeReportOrderDetailsWithHttpInfo(orderId, portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param orderId ID of order (required)
     * @param portfolioId ID of order&#39;s portfolio (required)
     * @return ApiResponse&lt;CoinbaseBrokerageProxyTradingApiTradeReportOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseBrokerageProxyTradingApiTradeReportOrder> primeAPIGetTradeReportOrderDetailsWithHttpInfo(String orderId, String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetTradeReportOrderDetailsValidateBeforeCall(orderId, portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyTradingApiTradeReportOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orderId ID of order (required)
     * @param portfolioId ID of order&#39;s portfolio (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTradeReportOrderDetailsAsync(String orderId, String portfolioId, final ApiCallback<CoinbaseBrokerageProxyTradingApiTradeReportOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetTradeReportOrderDetailsValidateBeforeCall(orderId, portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyTradingApiTradeReportOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetTradeReportOrderDetailsAndGraphData
     * @param orderId  (required)
     * @param portfolioId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTradeReportOrderDetailsAndGraphDataCall(String orderId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orders/{order_id}/report/graph-and-details"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetTradeReportOrderDetailsAndGraphDataValidateBeforeCall(String orderId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling primeAPIGetTradeReportOrderDetailsAndGraphData(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetTradeReportOrderDetailsAndGraphDataCall(orderId, portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param orderId  (required)
     * @param portfolioId  (optional)
     * @return CoinbaseBrokerageProxyTradingApiGetTradeReportOrderDetailsAndGraphDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseBrokerageProxyTradingApiGetTradeReportOrderDetailsAndGraphDataResponse primeAPIGetTradeReportOrderDetailsAndGraphData(String orderId, String portfolioId) throws ApiException {
        ApiResponse<CoinbaseBrokerageProxyTradingApiGetTradeReportOrderDetailsAndGraphDataResponse> resp = primeAPIGetTradeReportOrderDetailsAndGraphDataWithHttpInfo(orderId, portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param orderId  (required)
     * @param portfolioId  (optional)
     * @return ApiResponse&lt;CoinbaseBrokerageProxyTradingApiGetTradeReportOrderDetailsAndGraphDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseBrokerageProxyTradingApiGetTradeReportOrderDetailsAndGraphDataResponse> primeAPIGetTradeReportOrderDetailsAndGraphDataWithHttpInfo(String orderId, String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetTradeReportOrderDetailsAndGraphDataValidateBeforeCall(orderId, portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyTradingApiGetTradeReportOrderDetailsAndGraphDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orderId  (required)
     * @param portfolioId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTradeReportOrderDetailsAndGraphDataAsync(String orderId, String portfolioId, final ApiCallback<CoinbaseBrokerageProxyTradingApiGetTradeReportOrderDetailsAndGraphDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetTradeReportOrderDetailsAndGraphDataValidateBeforeCall(orderId, portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyTradingApiGetTradeReportOrderDetailsAndGraphDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetTradeReportOrderFills
     * @param orderId ID of order (required)
     * @param portfolioId ID of order&#39;s portfolio (required)
     * @param limit Maximum number of fills to return in response (optional)
     * @param beforeTradeId Trade ID of fill that response should start before. Fills are sorted by (trade_time, trade_id) descending. (optional)
     * @param afterTradeId Trade ID of fill that response should start after. Fills are sorted by (trade_time, trade_id) descending. (optional)
     * @param cursor Cursor to be used for pagination. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTradeReportOrderFillsCall(String orderId, String portfolioId, Long limit, String beforeTradeId, String afterTradeId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orders/{order_id}/report/fills"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (beforeTradeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before_trade_id", beforeTradeId));
        if (afterTradeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("after_trade_id", afterTradeId));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetTradeReportOrderFillsValidateBeforeCall(String orderId, String portfolioId, Long limit, String beforeTradeId, String afterTradeId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling primeAPIGetTradeReportOrderFills(Async)");
        }
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetTradeReportOrderFills(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetTradeReportOrderFillsCall(orderId, portfolioId, limit, beforeTradeId, afterTradeId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param orderId ID of order (required)
     * @param portfolioId ID of order&#39;s portfolio (required)
     * @param limit Maximum number of fills to return in response (optional)
     * @param beforeTradeId Trade ID of fill that response should start before. Fills are sorted by (trade_time, trade_id) descending. (optional)
     * @param afterTradeId Trade ID of fill that response should start after. Fills are sorted by (trade_time, trade_id) descending. (optional)
     * @param cursor Cursor to be used for pagination. (optional)
     * @return CoinbaseBrokerageProxyTradingApiGetTradeReportOrderFillsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseBrokerageProxyTradingApiGetTradeReportOrderFillsResponse primeAPIGetTradeReportOrderFills(String orderId, String portfolioId, Long limit, String beforeTradeId, String afterTradeId, String cursor) throws ApiException {
        ApiResponse<CoinbaseBrokerageProxyTradingApiGetTradeReportOrderFillsResponse> resp = primeAPIGetTradeReportOrderFillsWithHttpInfo(orderId, portfolioId, limit, beforeTradeId, afterTradeId, cursor);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param orderId ID of order (required)
     * @param portfolioId ID of order&#39;s portfolio (required)
     * @param limit Maximum number of fills to return in response (optional)
     * @param beforeTradeId Trade ID of fill that response should start before. Fills are sorted by (trade_time, trade_id) descending. (optional)
     * @param afterTradeId Trade ID of fill that response should start after. Fills are sorted by (trade_time, trade_id) descending. (optional)
     * @param cursor Cursor to be used for pagination. (optional)
     * @return ApiResponse&lt;CoinbaseBrokerageProxyTradingApiGetTradeReportOrderFillsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseBrokerageProxyTradingApiGetTradeReportOrderFillsResponse> primeAPIGetTradeReportOrderFillsWithHttpInfo(String orderId, String portfolioId, Long limit, String beforeTradeId, String afterTradeId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetTradeReportOrderFillsValidateBeforeCall(orderId, portfolioId, limit, beforeTradeId, afterTradeId, cursor, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyTradingApiGetTradeReportOrderFillsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orderId ID of order (required)
     * @param portfolioId ID of order&#39;s portfolio (required)
     * @param limit Maximum number of fills to return in response (optional)
     * @param beforeTradeId Trade ID of fill that response should start before. Fills are sorted by (trade_time, trade_id) descending. (optional)
     * @param afterTradeId Trade ID of fill that response should start after. Fills are sorted by (trade_time, trade_id) descending. (optional)
     * @param cursor Cursor to be used for pagination. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTradeReportOrderFillsAsync(String orderId, String portfolioId, Long limit, String beforeTradeId, String afterTradeId, String cursor, final ApiCallback<CoinbaseBrokerageProxyTradingApiGetTradeReportOrderFillsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetTradeReportOrderFillsValidateBeforeCall(orderId, portfolioId, limit, beforeTradeId, afterTradeId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyTradingApiGetTradeReportOrderFillsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetTradeReportVenueFills
     * @param orderId ID of order (required)
     * @param portfolioId ID of order&#39;s portfolio (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTradeReportVenueFillsCall(String orderId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orders/{order_id}/report/venue-fills"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetTradeReportVenueFillsValidateBeforeCall(String orderId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling primeAPIGetTradeReportVenueFills(Async)");
        }
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetTradeReportVenueFills(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetTradeReportVenueFillsCall(orderId, portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param orderId ID of order (required)
     * @param portfolioId ID of order&#39;s portfolio (required)
     * @return CoinbaseBrokerageProxyTradingApiGetTradeReportVenueFillsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseBrokerageProxyTradingApiGetTradeReportVenueFillsResponse primeAPIGetTradeReportVenueFills(String orderId, String portfolioId) throws ApiException {
        ApiResponse<CoinbaseBrokerageProxyTradingApiGetTradeReportVenueFillsResponse> resp = primeAPIGetTradeReportVenueFillsWithHttpInfo(orderId, portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param orderId ID of order (required)
     * @param portfolioId ID of order&#39;s portfolio (required)
     * @return ApiResponse&lt;CoinbaseBrokerageProxyTradingApiGetTradeReportVenueFillsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseBrokerageProxyTradingApiGetTradeReportVenueFillsResponse> primeAPIGetTradeReportVenueFillsWithHttpInfo(String orderId, String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetTradeReportVenueFillsValidateBeforeCall(orderId, portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyTradingApiGetTradeReportVenueFillsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orderId ID of order (required)
     * @param portfolioId ID of order&#39;s portfolio (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTradeReportVenueFillsAsync(String orderId, String portfolioId, final ApiCallback<CoinbaseBrokerageProxyTradingApiGetTradeReportVenueFillsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetTradeReportVenueFillsValidateBeforeCall(orderId, portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseBrokerageProxyTradingApiGetTradeReportVenueFillsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetTransferMethods
     * @param vehicleId The investment vehicle you want to transfer to/from (required)
     * @param currencySymbol The symbol of the currency you want to transfer (required)
     * @param transactionType The type of transaction you want to initiate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTransferMethodsCall(String vehicleId, String currencySymbol, String transactionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/transfer_methods"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencySymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_symbol", currencySymbol));
        if (transactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transaction_type", transactionType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetTransferMethodsValidateBeforeCall(String vehicleId, String currencySymbol, String transactionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetTransferMethods(Async)");
        }
        
        // verify the required parameter 'currencySymbol' is set
        if (currencySymbol == null) {
            throw new ApiException("Missing the required parameter 'currencySymbol' when calling primeAPIGetTransferMethods(Async)");
        }
        
        // verify the required parameter 'transactionType' is set
        if (transactionType == null) {
            throw new ApiException("Missing the required parameter 'transactionType' when calling primeAPIGetTransferMethods(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetTransferMethodsCall(vehicleId, currencySymbol, transactionType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId The investment vehicle you want to transfer to/from (required)
     * @param currencySymbol The symbol of the currency you want to transfer (required)
     * @param transactionType The type of transaction you want to initiate (required)
     * @return CoinbaseEngPrimeApiApiGetTransferMethodsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetTransferMethodsResponse primeAPIGetTransferMethods(String vehicleId, String currencySymbol, String transactionType) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetTransferMethodsResponse> resp = primeAPIGetTransferMethodsWithHttpInfo(vehicleId, currencySymbol, transactionType);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId The investment vehicle you want to transfer to/from (required)
     * @param currencySymbol The symbol of the currency you want to transfer (required)
     * @param transactionType The type of transaction you want to initiate (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetTransferMethodsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetTransferMethodsResponse> primeAPIGetTransferMethodsWithHttpInfo(String vehicleId, String currencySymbol, String transactionType) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetTransferMethodsValidateBeforeCall(vehicleId, currencySymbol, transactionType, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetTransferMethodsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId The investment vehicle you want to transfer to/from (required)
     * @param currencySymbol The symbol of the currency you want to transfer (required)
     * @param transactionType The type of transaction you want to initiate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetTransferMethodsAsync(String vehicleId, String currencySymbol, String transactionType, final ApiCallback<CoinbaseEngPrimeApiApiGetTransferMethodsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetTransferMethodsValidateBeforeCall(vehicleId, currencySymbol, transactionType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetTransferMethodsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetUnstakeTimeEstimation
     * @param portfolioId  (required)
     * @param currencySymbol  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUnstakeTimeEstimationCall(String portfolioId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/{currency_symbol}/unstake_time_estimation"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "currency_symbol" + "\\}", apiClient.escapeString(currencySymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetUnstakeTimeEstimationValidateBeforeCall(String portfolioId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetUnstakeTimeEstimation(Async)");
        }
        
        // verify the required parameter 'currencySymbol' is set
        if (currencySymbol == null) {
            throw new ApiException("Missing the required parameter 'currencySymbol' when calling primeAPIGetUnstakeTimeEstimation(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetUnstakeTimeEstimationCall(portfolioId, currencySymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param currencySymbol  (required)
     * @return CoinbaseCustodyApiGetUnstakeTimeEstimationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiGetUnstakeTimeEstimationResponse primeAPIGetUnstakeTimeEstimation(String portfolioId, String currencySymbol) throws ApiException {
        ApiResponse<CoinbaseCustodyApiGetUnstakeTimeEstimationResponse> resp = primeAPIGetUnstakeTimeEstimationWithHttpInfo(portfolioId, currencySymbol);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param currencySymbol  (required)
     * @return ApiResponse&lt;CoinbaseCustodyApiGetUnstakeTimeEstimationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiGetUnstakeTimeEstimationResponse> primeAPIGetUnstakeTimeEstimationWithHttpInfo(String portfolioId, String currencySymbol) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetUnstakeTimeEstimationValidateBeforeCall(portfolioId, currencySymbol, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetUnstakeTimeEstimationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param currencySymbol  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUnstakeTimeEstimationAsync(String portfolioId, String currencySymbol, final ApiCallback<CoinbaseCustodyApiGetUnstakeTimeEstimationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetUnstakeTimeEstimationValidateBeforeCall(portfolioId, currencySymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetUnstakeTimeEstimationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetUserEntityLevelPermission
     * @param entityId  (required)
     * @param permission  (optional, default to PERMISSION_UNKNOWN)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserEntityLevelPermissionCall(String entityId, String permission, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/{entity_id}/permission"
            .replaceAll("\\{" + "entity_id" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetUserEntityLevelPermissionValidateBeforeCall(String entityId, String permission, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling primeAPIGetUserEntityLevelPermission(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetUserEntityLevelPermissionCall(entityId, permission, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param permission  (optional, default to PERMISSION_UNKNOWN)
     * @return CoinbaseEngPrimeApiApiGetUserEntityLevelPermissionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetUserEntityLevelPermissionResponse primeAPIGetUserEntityLevelPermission(String entityId, String permission) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetUserEntityLevelPermissionResponse> resp = primeAPIGetUserEntityLevelPermissionWithHttpInfo(entityId, permission);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param permission  (optional, default to PERMISSION_UNKNOWN)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetUserEntityLevelPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetUserEntityLevelPermissionResponse> primeAPIGetUserEntityLevelPermissionWithHttpInfo(String entityId, String permission) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetUserEntityLevelPermissionValidateBeforeCall(entityId, permission, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetUserEntityLevelPermissionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId  (required)
     * @param permission  (optional, default to PERMISSION_UNKNOWN)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserEntityLevelPermissionAsync(String entityId, String permission, final ApiCallback<CoinbaseEngPrimeApiApiGetUserEntityLevelPermissionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetUserEntityLevelPermissionValidateBeforeCall(entityId, permission, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetUserEntityLevelPermissionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetUserHierarchy
     * @param userId The user ID, use &#39;self&#39; to get the current user. (required)
     * @param experiences  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserHierarchyCall(String userId, List<String> experiences, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user_id}/hierarchy"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (experiences != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "experiences", experiences));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetUserHierarchyValidateBeforeCall(String userId, List<String> experiences, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIGetUserHierarchy(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetUserHierarchyCall(userId, experiences, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId The user ID, use &#39;self&#39; to get the current user. (required)
     * @param experiences  (optional)
     * @return CoinbaseEngPrimeApiApiGetUserHierarchyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetUserHierarchyResponse primeAPIGetUserHierarchy(String userId, List<String> experiences) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetUserHierarchyResponse> resp = primeAPIGetUserHierarchyWithHttpInfo(userId, experiences);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId The user ID, use &#39;self&#39; to get the current user. (required)
     * @param experiences  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetUserHierarchyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetUserHierarchyResponse> primeAPIGetUserHierarchyWithHttpInfo(String userId, List<String> experiences) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetUserHierarchyValidateBeforeCall(userId, experiences, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetUserHierarchyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId The user ID, use &#39;self&#39; to get the current user. (required)
     * @param experiences  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserHierarchyAsync(String userId, List<String> experiences, final ApiCallback<CoinbaseEngPrimeApiApiGetUserHierarchyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetUserHierarchyValidateBeforeCall(userId, experiences, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetUserHierarchyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetUserInAppNotifications
     * @param limit  (optional)
     * @param portfolioFilterPortfolioId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserInAppNotificationsCall(Integer limit, String portfolioFilterPortfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/notifications/in-app";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (portfolioFilterPortfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_filter.portfolio_id", portfolioFilterPortfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetUserInAppNotificationsValidateBeforeCall(Integer limit, String portfolioFilterPortfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = primeAPIGetUserInAppNotificationsCall(limit, portfolioFilterPortfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param limit  (optional)
     * @param portfolioFilterPortfolioId  (optional)
     * @return CoinbaseEngPrimeApiApiGetUserInAppNotificationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetUserInAppNotificationsResponse primeAPIGetUserInAppNotifications(Integer limit, String portfolioFilterPortfolioId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetUserInAppNotificationsResponse> resp = primeAPIGetUserInAppNotificationsWithHttpInfo(limit, portfolioFilterPortfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param limit  (optional)
     * @param portfolioFilterPortfolioId  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetUserInAppNotificationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetUserInAppNotificationsResponse> primeAPIGetUserInAppNotificationsWithHttpInfo(Integer limit, String portfolioFilterPortfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetUserInAppNotificationsValidateBeforeCall(limit, portfolioFilterPortfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetUserInAppNotificationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param limit  (optional)
     * @param portfolioFilterPortfolioId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserInAppNotificationsAsync(Integer limit, String portfolioFilterPortfolioId, final ApiCallback<CoinbaseEngPrimeApiApiGetUserInAppNotificationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetUserInAppNotificationsValidateBeforeCall(limit, portfolioFilterPortfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetUserInAppNotificationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetUserInAppNotificationsStream
     * @param limit  (optional)
     * @param portfolioFilterPortfolioId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserInAppNotificationsStreamCall(Integer limit, String portfolioFilterPortfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/notifications/in-app";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (portfolioFilterPortfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_filter.portfolio_id", portfolioFilterPortfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetUserInAppNotificationsStreamValidateBeforeCall(Integer limit, String portfolioFilterPortfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = primeAPIGetUserInAppNotificationsStreamCall(limit, portfolioFilterPortfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param limit  (optional)
     * @param portfolioFilterPortfolioId  (optional)
     * @return StreamResultOfCoinbaseEngPrimeApiApiGetUserInAppNotificationsStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiGetUserInAppNotificationsStreamResponse primeAPIGetUserInAppNotificationsStream(Integer limit, String portfolioFilterPortfolioId) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetUserInAppNotificationsStreamResponse> resp = primeAPIGetUserInAppNotificationsStreamWithHttpInfo(limit, portfolioFilterPortfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param limit  (optional)
     * @param portfolioFilterPortfolioId  (optional)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiGetUserInAppNotificationsStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetUserInAppNotificationsStreamResponse> primeAPIGetUserInAppNotificationsStreamWithHttpInfo(Integer limit, String portfolioFilterPortfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetUserInAppNotificationsStreamValidateBeforeCall(limit, portfolioFilterPortfolioId, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetUserInAppNotificationsStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param limit  (optional)
     * @param portfolioFilterPortfolioId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserInAppNotificationsStreamAsync(Integer limit, String portfolioFilterPortfolioId, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiGetUserInAppNotificationsStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetUserInAppNotificationsStreamValidateBeforeCall(limit, portfolioFilterPortfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetUserInAppNotificationsStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetUserInfo
     * @param userId The user ID, use &#39;self&#39; to get the current user. (required)
     * @param portfolioId The portfolio ID, used to verify permission. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserInfoCall(String userId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_id", portfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetUserInfoValidateBeforeCall(String userId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIGetUserInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetUserInfoCall(userId, portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId The user ID, use &#39;self&#39; to get the current user. (required)
     * @param portfolioId The portfolio ID, used to verify permission. (optional)
     * @return CoinbaseEngPrimeApiApiGetUserInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetUserInfoResponse primeAPIGetUserInfo(String userId, String portfolioId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetUserInfoResponse> resp = primeAPIGetUserInfoWithHttpInfo(userId, portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId The user ID, use &#39;self&#39; to get the current user. (required)
     * @param portfolioId The portfolio ID, used to verify permission. (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetUserInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetUserInfoResponse> primeAPIGetUserInfoWithHttpInfo(String userId, String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetUserInfoValidateBeforeCall(userId, portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetUserInfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId The user ID, use &#39;self&#39; to get the current user. (required)
     * @param portfolioId The portfolio ID, used to verify permission. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserInfoAsync(String userId, String portfolioId, final ApiCallback<CoinbaseEngPrimeApiApiGetUserInfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetUserInfoValidateBeforeCall(userId, portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetUserInfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetUserInvitations
     * @param states  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserInvitationsCall(List<String> states, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invitations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (states != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "states", states));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetUserInvitationsValidateBeforeCall(List<String> states, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = primeAPIGetUserInvitationsCall(states, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param states  (optional)
     * @return CoinbaseEngPrimeApiApiGetInvitationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetInvitationsResponse primeAPIGetUserInvitations(List<String> states) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetInvitationsResponse> resp = primeAPIGetUserInvitationsWithHttpInfo(states);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param states  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetInvitationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetInvitationsResponse> primeAPIGetUserInvitationsWithHttpInfo(List<String> states) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetUserInvitationsValidateBeforeCall(states, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetInvitationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param states  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserInvitationsAsync(List<String> states, final ApiCallback<CoinbaseEngPrimeApiApiGetInvitationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetUserInvitationsValidateBeforeCall(states, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetInvitationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetUserPortfolios
     * @param userId  (required)
     * @param paginationLimit  (optional)
     * @param paginationOffset  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserPortfoliosCall(String userId, Integer paginationLimit, Integer paginationOffset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user_id}/portfolios"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (paginationLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagination.limit", paginationLimit));
        if (paginationOffset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagination.offset", paginationOffset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetUserPortfoliosValidateBeforeCall(String userId, Integer paginationLimit, Integer paginationOffset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIGetUserPortfolios(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetUserPortfoliosCall(userId, paginationLimit, paginationOffset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param paginationLimit  (optional)
     * @param paginationOffset  (optional)
     * @return CoinbaseEngPrimeApiApiGetUserPortfoliosResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetUserPortfoliosResponse primeAPIGetUserPortfolios(String userId, Integer paginationLimit, Integer paginationOffset) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetUserPortfoliosResponse> resp = primeAPIGetUserPortfoliosWithHttpInfo(userId, paginationLimit, paginationOffset);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param paginationLimit  (optional)
     * @param paginationOffset  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetUserPortfoliosResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetUserPortfoliosResponse> primeAPIGetUserPortfoliosWithHttpInfo(String userId, Integer paginationLimit, Integer paginationOffset) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetUserPortfoliosValidateBeforeCall(userId, paginationLimit, paginationOffset, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetUserPortfoliosResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param paginationLimit  (optional)
     * @param paginationOffset  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserPortfoliosAsync(String userId, Integer paginationLimit, Integer paginationOffset, final ApiCallback<CoinbaseEngPrimeApiApiGetUserPortfoliosResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetUserPortfoliosValidateBeforeCall(userId, paginationLimit, paginationOffset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetUserPortfoliosResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetUserPreferences
     * @param userId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserPreferencesCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user_id}/preferences"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetUserPreferencesValidateBeforeCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIGetUserPreferences(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetUserPreferencesCall(userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @return CoinbaseEngPrimeApiApiUserPreferences
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiUserPreferences primeAPIGetUserPreferences(String userId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiUserPreferences> resp = primeAPIGetUserPreferencesWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiUserPreferences&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiUserPreferences> primeAPIGetUserPreferencesWithHttpInfo(String userId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetUserPreferencesValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiUserPreferences>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserPreferencesAsync(String userId, final ApiCallback<CoinbaseEngPrimeApiApiUserPreferences> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetUserPreferencesValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiUserPreferences>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetUserRoles
     * @param userId  (required)
     * @param portfolioId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserRolesCall(String userId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user_id}/{portfolio_id}/userRoles"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetUserRolesValidateBeforeCall(String userId, String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIGetUserRoles(Async)");
        }
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetUserRoles(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetUserRolesCall(userId, portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param portfolioId  (required)
     * @return CoinbaseEngPrimeApiApiGetUserRolesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetUserRolesResponse primeAPIGetUserRoles(String userId, String portfolioId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetUserRolesResponse> resp = primeAPIGetUserRolesWithHttpInfo(userId, portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param portfolioId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetUserRolesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetUserRolesResponse> primeAPIGetUserRolesWithHttpInfo(String userId, String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetUserRolesValidateBeforeCall(userId, portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetUserRolesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param portfolioId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetUserRolesAsync(String userId, String portfolioId, final ApiCallback<CoinbaseEngPrimeApiApiGetUserRolesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetUserRolesValidateBeforeCall(userId, portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetUserRolesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetVehicleBalances
     * @param vehicleId The ID of the vehicle to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleBalancesCall(String vehicleId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/balances"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencySymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_symbol", currencySymbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetVehicleBalancesValidateBeforeCall(String vehicleId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetVehicleBalances(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetVehicleBalancesCall(vehicleId, currencySymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId The ID of the vehicle to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @return CoinbaseCustodyApiGetBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiGetBalanceResponse primeAPIGetVehicleBalances(String vehicleId, String currencySymbol) throws ApiException {
        ApiResponse<CoinbaseCustodyApiGetBalanceResponse> resp = primeAPIGetVehicleBalancesWithHttpInfo(vehicleId, currencySymbol);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId The ID of the vehicle to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @return ApiResponse&lt;CoinbaseCustodyApiGetBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiGetBalanceResponse> primeAPIGetVehicleBalancesWithHttpInfo(String vehicleId, String currencySymbol) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetVehicleBalancesValidateBeforeCall(vehicleId, currencySymbol, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId The ID of the vehicle to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleBalancesAsync(String vehicleId, String currencySymbol, final ApiCallback<CoinbaseCustodyApiGetBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetVehicleBalancesValidateBeforeCall(vehicleId, currencySymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetVehicleBalancesStream
     * @param vehicleId The ID of the vehicle to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleBalancesStreamCall(String vehicleId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/vehicles/{vehicle_id}/balances"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencySymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_symbol", currencySymbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetVehicleBalancesStreamValidateBeforeCall(String vehicleId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetVehicleBalancesStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetVehicleBalancesStreamCall(vehicleId, currencySymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId The ID of the vehicle to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @return StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse primeAPIGetVehicleBalancesStream(String vehicleId, String currencySymbol) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse> resp = primeAPIGetVehicleBalancesStreamWithHttpInfo(vehicleId, currencySymbol);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId The ID of the vehicle to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse> primeAPIGetVehicleBalancesStreamWithHttpInfo(String vehicleId, String currencySymbol) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetVehicleBalancesStreamValidateBeforeCall(vehicleId, currencySymbol, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId The ID of the vehicle to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleBalancesStreamAsync(String vehicleId, String currencySymbol, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetVehicleBalancesStreamValidateBeforeCall(vehicleId, currencySymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetVehicleBillingPermission
     * @param portfolioId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleBillingPermissionCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/billing_permission"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetVehicleBillingPermissionValidateBeforeCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetVehicleBillingPermission(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetVehicleBillingPermissionCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @return CoinbaseEngPrimeApiApiGetVehicleBillingPermissionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetVehicleBillingPermissionResponse primeAPIGetVehicleBillingPermission(String portfolioId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetVehicleBillingPermissionResponse> resp = primeAPIGetVehicleBillingPermissionWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetVehicleBillingPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetVehicleBillingPermissionResponse> primeAPIGetVehicleBillingPermissionWithHttpInfo(String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetVehicleBillingPermissionValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetVehicleBillingPermissionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleBillingPermissionAsync(String portfolioId, final ApiCallback<CoinbaseEngPrimeApiApiGetVehicleBillingPermissionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetVehicleBillingPermissionValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetVehicleBillingPermissionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetVehicleCurrencies
     * @param vehicleId  (required)
     * @param currencySymbols  (optional)
     * @param onlyBillableCurrencies  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleCurrenciesCall(String vehicleId, List<String> currencySymbols, Boolean onlyBillableCurrencies, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/currencies"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencySymbols != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "currency_symbols", currencySymbols));
        if (onlyBillableCurrencies != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("only_billable_currencies", onlyBillableCurrencies));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetVehicleCurrenciesValidateBeforeCall(String vehicleId, List<String> currencySymbols, Boolean onlyBillableCurrencies, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetVehicleCurrencies(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetVehicleCurrenciesCall(vehicleId, currencySymbols, onlyBillableCurrencies, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currencySymbols  (optional)
     * @param onlyBillableCurrencies  (optional)
     * @return List&lt;CoinbaseCustodyApiCurrency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CoinbaseCustodyApiCurrency> primeAPIGetVehicleCurrencies(String vehicleId, List<String> currencySymbols, Boolean onlyBillableCurrencies) throws ApiException {
        ApiResponse<List<CoinbaseCustodyApiCurrency>> resp = primeAPIGetVehicleCurrenciesWithHttpInfo(vehicleId, currencySymbols, onlyBillableCurrencies);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currencySymbols  (optional)
     * @param onlyBillableCurrencies  (optional)
     * @return ApiResponse&lt;List&lt;CoinbaseCustodyApiCurrency&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CoinbaseCustodyApiCurrency>> primeAPIGetVehicleCurrenciesWithHttpInfo(String vehicleId, List<String> currencySymbols, Boolean onlyBillableCurrencies) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetVehicleCurrenciesValidateBeforeCall(vehicleId, currencySymbols, onlyBillableCurrencies, null, null);
        Type localVarReturnType = new TypeToken<List<CoinbaseCustodyApiCurrency>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param currencySymbols  (optional)
     * @param onlyBillableCurrencies  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleCurrenciesAsync(String vehicleId, List<String> currencySymbols, Boolean onlyBillableCurrencies, final ApiCallback<List<CoinbaseCustodyApiCurrency>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetVehicleCurrenciesValidateBeforeCall(vehicleId, currencySymbols, onlyBillableCurrencies, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CoinbaseCustodyApiCurrency>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetVehicleCurrenciesStream
     * @param vehicleId  (required)
     * @param currencySymbols  (optional)
     * @param onlyBillableCurrencies  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleCurrenciesStreamCall(String vehicleId, List<String> currencySymbols, Boolean onlyBillableCurrencies, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/vehicles/{vehicle_id}/currencies"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencySymbols != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "currency_symbols", currencySymbols));
        if (onlyBillableCurrencies != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("only_billable_currencies", onlyBillableCurrencies));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetVehicleCurrenciesStreamValidateBeforeCall(String vehicleId, List<String> currencySymbols, Boolean onlyBillableCurrencies, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetVehicleCurrenciesStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetVehicleCurrenciesStreamCall(vehicleId, currencySymbols, onlyBillableCurrencies, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currencySymbols  (optional)
     * @param onlyBillableCurrencies  (optional)
     * @return StreamResultOfCoinbaseEngPrimeApiApiGetVehicleCurrenciesStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiGetVehicleCurrenciesStreamResponse primeAPIGetVehicleCurrenciesStream(String vehicleId, List<String> currencySymbols, Boolean onlyBillableCurrencies) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetVehicleCurrenciesStreamResponse> resp = primeAPIGetVehicleCurrenciesStreamWithHttpInfo(vehicleId, currencySymbols, onlyBillableCurrencies);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currencySymbols  (optional)
     * @param onlyBillableCurrencies  (optional)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiGetVehicleCurrenciesStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetVehicleCurrenciesStreamResponse> primeAPIGetVehicleCurrenciesStreamWithHttpInfo(String vehicleId, List<String> currencySymbols, Boolean onlyBillableCurrencies) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetVehicleCurrenciesStreamValidateBeforeCall(vehicleId, currencySymbols, onlyBillableCurrencies, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetVehicleCurrenciesStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param currencySymbols  (optional)
     * @param onlyBillableCurrencies  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleCurrenciesStreamAsync(String vehicleId, List<String> currencySymbols, Boolean onlyBillableCurrencies, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiGetVehicleCurrenciesStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetVehicleCurrenciesStreamValidateBeforeCall(vehicleId, currencySymbols, onlyBillableCurrencies, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetVehicleCurrenciesStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetVehicleFinancingStream
     * @param vehicleId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleFinancingStreamCall(String vehicleId, String updateInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/vehicles/{vehicle_id}/financing"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("update_interval", updateInterval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetVehicleFinancingStreamValidateBeforeCall(String vehicleId, String updateInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetVehicleFinancingStream(Async)");
        }
        
        // verify the required parameter 'updateInterval' is set
        if (updateInterval == null) {
            throw new ApiException("Missing the required parameter 'updateInterval' when calling primeAPIGetVehicleFinancingStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetVehicleFinancingStreamCall(vehicleId, updateInterval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @return StreamResultOfCoinbaseEngPrimeApiApiVehicleFinancingStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiVehicleFinancingStreamResponse primeAPIGetVehicleFinancingStream(String vehicleId, String updateInterval) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiVehicleFinancingStreamResponse> resp = primeAPIGetVehicleFinancingStreamWithHttpInfo(vehicleId, updateInterval);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiVehicleFinancingStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiVehicleFinancingStreamResponse> primeAPIGetVehicleFinancingStreamWithHttpInfo(String vehicleId, String updateInterval) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetVehicleFinancingStreamValidateBeforeCall(vehicleId, updateInterval, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiVehicleFinancingStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleFinancingStreamAsync(String vehicleId, String updateInterval, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiVehicleFinancingStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetVehicleFinancingStreamValidateBeforeCall(vehicleId, updateInterval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiVehicleFinancingStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetVehiclePortfolioMarginStream
     * @param vehicleId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehiclePortfolioMarginStreamCall(String vehicleId, String updateInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/vehicles/{vehicle_id}/financing/portfolio_margin"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("update_interval", updateInterval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetVehiclePortfolioMarginStreamValidateBeforeCall(String vehicleId, String updateInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetVehiclePortfolioMarginStream(Async)");
        }
        
        // verify the required parameter 'updateInterval' is set
        if (updateInterval == null) {
            throw new ApiException("Missing the required parameter 'updateInterval' when calling primeAPIGetVehiclePortfolioMarginStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetVehiclePortfolioMarginStreamCall(vehicleId, updateInterval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @return StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponse primeAPIGetVehiclePortfolioMarginStream(String vehicleId, String updateInterval) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponse> resp = primeAPIGetVehiclePortfolioMarginStreamWithHttpInfo(vehicleId, updateInterval);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponse> primeAPIGetVehiclePortfolioMarginStreamWithHttpInfo(String vehicleId, String updateInterval) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetVehiclePortfolioMarginStreamValidateBeforeCall(vehicleId, updateInterval, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehiclePortfolioMarginStreamAsync(String vehicleId, String updateInterval, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetVehiclePortfolioMarginStreamValidateBeforeCall(vehicleId, updateInterval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetVehiclePortfolioMarginStreamV2
     * @param vehicleId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @param marginSummaryContext optional field to request a subset of MarginSummary data. (optional, default to UNSPECIFIED)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehiclePortfolioMarginStreamV2Call(String vehicleId, String updateInterval, String marginSummaryContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/stream/vehicles/{vehicle_id}/financing/portfolio_margin"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("update_interval", updateInterval));
        if (marginSummaryContext != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("margin_summary_context", marginSummaryContext));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetVehiclePortfolioMarginStreamV2ValidateBeforeCall(String vehicleId, String updateInterval, String marginSummaryContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetVehiclePortfolioMarginStreamV2(Async)");
        }
        
        // verify the required parameter 'updateInterval' is set
        if (updateInterval == null) {
            throw new ApiException("Missing the required parameter 'updateInterval' when calling primeAPIGetVehiclePortfolioMarginStreamV2(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetVehiclePortfolioMarginStreamV2Call(vehicleId, updateInterval, marginSummaryContext, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @param marginSummaryContext optional field to request a subset of MarginSummary data. (optional, default to UNSPECIFIED)
     * @return StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponseV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponseV2 primeAPIGetVehiclePortfolioMarginStreamV2(String vehicleId, String updateInterval, String marginSummaryContext) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponseV2> resp = primeAPIGetVehiclePortfolioMarginStreamV2WithHttpInfo(vehicleId, updateInterval, marginSummaryContext);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @param marginSummaryContext optional field to request a subset of MarginSummary data. (optional, default to UNSPECIFIED)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponseV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponseV2> primeAPIGetVehiclePortfolioMarginStreamV2WithHttpInfo(String vehicleId, String updateInterval, String marginSummaryContext) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetVehiclePortfolioMarginStreamV2ValidateBeforeCall(vehicleId, updateInterval, marginSummaryContext, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponseV2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param updateInterval Amount of time in ms between updates (required)
     * @param marginSummaryContext optional field to request a subset of MarginSummary data. (optional, default to UNSPECIFIED)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehiclePortfolioMarginStreamV2Async(String vehicleId, String updateInterval, String marginSummaryContext, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponseV2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetVehiclePortfolioMarginStreamV2ValidateBeforeCall(vehicleId, updateInterval, marginSummaryContext, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiVehiclePortfolioMarginStreamResponseV2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetVehicleSpotPrices
     * @param vehicleId  (required)
     * @param fiatCurrencySymbol  (optional)
     * @param currencySymbols  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleSpotPricesCall(String vehicleId, String fiatCurrencySymbol, List<String> currencySymbols, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/spot_prices"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fiatCurrencySymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fiat_currency_symbol", fiatCurrencySymbol));
        if (currencySymbols != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "currency_symbols", currencySymbols));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetVehicleSpotPricesValidateBeforeCall(String vehicleId, String fiatCurrencySymbol, List<String> currencySymbols, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetVehicleSpotPrices(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetVehicleSpotPricesCall(vehicleId, fiatCurrencySymbol, currencySymbols, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param fiatCurrencySymbol  (optional)
     * @param currencySymbols  (optional)
     * @return Map&lt;String, CoinbaseEngPrimeApiApiSpotPrice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, CoinbaseEngPrimeApiApiSpotPrice> primeAPIGetVehicleSpotPrices(String vehicleId, String fiatCurrencySymbol, List<String> currencySymbols) throws ApiException {
        ApiResponse<Map<String, CoinbaseEngPrimeApiApiSpotPrice>> resp = primeAPIGetVehicleSpotPricesWithHttpInfo(vehicleId, fiatCurrencySymbol, currencySymbols);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param fiatCurrencySymbol  (optional)
     * @param currencySymbols  (optional)
     * @return ApiResponse&lt;Map&lt;String, CoinbaseEngPrimeApiApiSpotPrice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, CoinbaseEngPrimeApiApiSpotPrice>> primeAPIGetVehicleSpotPricesWithHttpInfo(String vehicleId, String fiatCurrencySymbol, List<String> currencySymbols) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetVehicleSpotPricesValidateBeforeCall(vehicleId, fiatCurrencySymbol, currencySymbols, null, null);
        Type localVarReturnType = new TypeToken<Map<String, CoinbaseEngPrimeApiApiSpotPrice>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param fiatCurrencySymbol  (optional)
     * @param currencySymbols  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleSpotPricesAsync(String vehicleId, String fiatCurrencySymbol, List<String> currencySymbols, final ApiCallback<Map<String, CoinbaseEngPrimeApiApiSpotPrice>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetVehicleSpotPricesValidateBeforeCall(vehicleId, fiatCurrencySymbol, currencySymbols, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, CoinbaseEngPrimeApiApiSpotPrice>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetVehicleSpotPricesStream
     * @param vehicleId  (required)
     * @param fiatCurrencySymbol  (optional)
     * @param currencySymbols  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleSpotPricesStreamCall(String vehicleId, String fiatCurrencySymbol, List<String> currencySymbols, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/vehicles/{vehicle_id}/spot_prices"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fiatCurrencySymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fiat_currency_symbol", fiatCurrencySymbol));
        if (currencySymbols != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "currency_symbols", currencySymbols));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetVehicleSpotPricesStreamValidateBeforeCall(String vehicleId, String fiatCurrencySymbol, List<String> currencySymbols, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetVehicleSpotPricesStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetVehicleSpotPricesStreamCall(vehicleId, fiatCurrencySymbol, currencySymbols, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param fiatCurrencySymbol  (optional)
     * @param currencySymbols  (optional)
     * @return StreamResultOfCoinbaseEngPrimeApiApiGetVehicleSpotPricesStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiGetVehicleSpotPricesStreamResponse primeAPIGetVehicleSpotPricesStream(String vehicleId, String fiatCurrencySymbol, List<String> currencySymbols) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetVehicleSpotPricesStreamResponse> resp = primeAPIGetVehicleSpotPricesStreamWithHttpInfo(vehicleId, fiatCurrencySymbol, currencySymbols);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param fiatCurrencySymbol  (optional)
     * @param currencySymbols  (optional)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiGetVehicleSpotPricesStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetVehicleSpotPricesStreamResponse> primeAPIGetVehicleSpotPricesStreamWithHttpInfo(String vehicleId, String fiatCurrencySymbol, List<String> currencySymbols) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetVehicleSpotPricesStreamValidateBeforeCall(vehicleId, fiatCurrencySymbol, currencySymbols, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetVehicleSpotPricesStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param fiatCurrencySymbol  (optional)
     * @param currencySymbols  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleSpotPricesStreamAsync(String vehicleId, String fiatCurrencySymbol, List<String> currencySymbols, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiGetVehicleSpotPricesStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetVehicleSpotPricesStreamValidateBeforeCall(vehicleId, fiatCurrencySymbol, currencySymbols, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetVehicleSpotPricesStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetVehicleValidators
     * @param vehicleId  (required)
     * @param currencySymbol  (required)
     * @param walletId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleValidatorsCall(String vehicleId, String currencySymbol, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/{currency_symbol}/validators"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()))
            .replaceAll("\\{" + "currency_symbol" + "\\}", apiClient.escapeString(currencySymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (walletId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("wallet_id", walletId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetVehicleValidatorsValidateBeforeCall(String vehicleId, String currencySymbol, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIGetVehicleValidators(Async)");
        }
        
        // verify the required parameter 'currencySymbol' is set
        if (currencySymbol == null) {
            throw new ApiException("Missing the required parameter 'currencySymbol' when calling primeAPIGetVehicleValidators(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetVehicleValidatorsCall(vehicleId, currencySymbol, walletId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (required)
     * @param walletId  (optional)
     * @return List&lt;CoinbaseCustodyApiStakingValidator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CoinbaseCustodyApiStakingValidator> primeAPIGetVehicleValidators(String vehicleId, String currencySymbol, String walletId) throws ApiException {
        ApiResponse<List<CoinbaseCustodyApiStakingValidator>> resp = primeAPIGetVehicleValidatorsWithHttpInfo(vehicleId, currencySymbol, walletId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (required)
     * @param walletId  (optional)
     * @return ApiResponse&lt;List&lt;CoinbaseCustodyApiStakingValidator&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CoinbaseCustodyApiStakingValidator>> primeAPIGetVehicleValidatorsWithHttpInfo(String vehicleId, String currencySymbol, String walletId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetVehicleValidatorsValidateBeforeCall(vehicleId, currencySymbol, walletId, null, null);
        Type localVarReturnType = new TypeToken<List<CoinbaseCustodyApiStakingValidator>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param currencySymbol  (required)
     * @param walletId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVehicleValidatorsAsync(String vehicleId, String currencySymbol, String walletId, final ApiCallback<List<CoinbaseCustodyApiStakingValidator>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetVehicleValidatorsValidateBeforeCall(vehicleId, currencySymbol, walletId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CoinbaseCustodyApiStakingValidator>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetVideoUpload
     * @param uploadId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVideoUploadCall(String uploadId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/video_uploads/{upload_id}"
            .replaceAll("\\{" + "upload_id" + "\\}", apiClient.escapeString(uploadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetVideoUploadValidateBeforeCall(String uploadId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uploadId' is set
        if (uploadId == null) {
            throw new ApiException("Missing the required parameter 'uploadId' when calling primeAPIGetVideoUpload(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetVideoUploadCall(uploadId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param uploadId  (required)
     * @return CoinbaseCustodyApiVideoUpload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiVideoUpload primeAPIGetVideoUpload(String uploadId) throws ApiException {
        ApiResponse<CoinbaseCustodyApiVideoUpload> resp = primeAPIGetVideoUploadWithHttpInfo(uploadId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param uploadId  (required)
     * @return ApiResponse&lt;CoinbaseCustodyApiVideoUpload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiVideoUpload> primeAPIGetVideoUploadWithHttpInfo(String uploadId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetVideoUploadValidateBeforeCall(uploadId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiVideoUpload>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uploadId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVideoUploadAsync(String uploadId, final ApiCallback<CoinbaseCustodyApiVideoUpload> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetVideoUploadValidateBeforeCall(uploadId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiVideoUpload>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetVideoUploadPermissions
     * @param transactionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVideoUploadPermissionsCall(String transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/transactions/{transaction_id}/video_upload_permissions"
            .replaceAll("\\{" + "transaction_id" + "\\}", apiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetVideoUploadPermissionsValidateBeforeCall(String transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling primeAPIGetVideoUploadPermissions(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetVideoUploadPermissionsCall(transactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param transactionId  (required)
     * @return CoinbaseCustodyApiGetVideoUploadPermissionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiGetVideoUploadPermissionsResponse primeAPIGetVideoUploadPermissions(String transactionId) throws ApiException {
        ApiResponse<CoinbaseCustodyApiGetVideoUploadPermissionsResponse> resp = primeAPIGetVideoUploadPermissionsWithHttpInfo(transactionId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param transactionId  (required)
     * @return ApiResponse&lt;CoinbaseCustodyApiGetVideoUploadPermissionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiGetVideoUploadPermissionsResponse> primeAPIGetVideoUploadPermissionsWithHttpInfo(String transactionId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetVideoUploadPermissionsValidateBeforeCall(transactionId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetVideoUploadPermissionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param transactionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetVideoUploadPermissionsAsync(String transactionId, final ApiCallback<CoinbaseCustodyApiGetVideoUploadPermissionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetVideoUploadPermissionsValidateBeforeCall(transactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetVideoUploadPermissionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetWallet
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetWalletValidateBeforeCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetWallet(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIGetWallet(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetWalletCall(portfolioId, walletId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return CoinbaseEngPrimeApiApiGetWalletResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetWalletResponse primeAPIGetWallet(String portfolioId, String walletId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetWalletResponse> resp = primeAPIGetWalletWithHttpInfo(portfolioId, walletId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetWalletResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetWalletResponse> primeAPIGetWalletWithHttpInfo(String portfolioId, String walletId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetWalletValidateBeforeCall(portfolioId, walletId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetWalletResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletAsync(String portfolioId, String walletId, final ApiCallback<CoinbaseEngPrimeApiApiGetWalletResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetWalletValidateBeforeCall(portfolioId, walletId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetWalletResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetWalletAssetSettings
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletAssetSettingsCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/asset_settings"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetWalletAssetSettingsValidateBeforeCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetWalletAssetSettings(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIGetWalletAssetSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetWalletAssetSettingsCall(portfolioId, walletId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return CoinbaseEngPrimeApiApiGetWalletAssetSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetWalletAssetSettingsResponse primeAPIGetWalletAssetSettings(String portfolioId, String walletId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetWalletAssetSettingsResponse> resp = primeAPIGetWalletAssetSettingsWithHttpInfo(portfolioId, walletId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetWalletAssetSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetWalletAssetSettingsResponse> primeAPIGetWalletAssetSettingsWithHttpInfo(String portfolioId, String walletId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetWalletAssetSettingsValidateBeforeCall(portfolioId, walletId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetWalletAssetSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletAssetSettingsAsync(String portfolioId, String walletId, final ApiCallback<CoinbaseEngPrimeApiApiGetWalletAssetSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetWalletAssetSettingsValidateBeforeCall(portfolioId, walletId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetWalletAssetSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetWalletBalances
     * @param portfolioId The ID of the portfolio that contains the wallet (required)
     * @param walletId The ID of the wallet to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletBalancesCall(String portfolioId, String walletId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/balances"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencySymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_symbol", currencySymbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetWalletBalancesValidateBeforeCall(String portfolioId, String walletId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetWalletBalances(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIGetWalletBalances(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetWalletBalancesCall(portfolioId, walletId, currencySymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio that contains the wallet (required)
     * @param walletId The ID of the wallet to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @return CoinbaseCustodyApiGetBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiGetBalanceResponse primeAPIGetWalletBalances(String portfolioId, String walletId, String currencySymbol) throws ApiException {
        ApiResponse<CoinbaseCustodyApiGetBalanceResponse> resp = primeAPIGetWalletBalancesWithHttpInfo(portfolioId, walletId, currencySymbol);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio that contains the wallet (required)
     * @param walletId The ID of the wallet to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @return ApiResponse&lt;CoinbaseCustodyApiGetBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiGetBalanceResponse> primeAPIGetWalletBalancesWithHttpInfo(String portfolioId, String walletId, String currencySymbol) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetWalletBalancesValidateBeforeCall(portfolioId, walletId, currencySymbol, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The ID of the portfolio that contains the wallet (required)
     * @param walletId The ID of the wallet to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletBalancesAsync(String portfolioId, String walletId, String currencySymbol, final ApiCallback<CoinbaseCustodyApiGetBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetWalletBalancesValidateBeforeCall(portfolioId, walletId, currencySymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiGetBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetWalletBalancesStream
     * @param portfolioId The ID of the portfolio that contains the wallet (required)
     * @param walletId The ID of the wallet to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletBalancesStreamCall(String portfolioId, String walletId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stream/portfolios/{portfolio_id}/wallets/{wallet_id}/balances"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencySymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_symbol", currencySymbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetWalletBalancesStreamValidateBeforeCall(String portfolioId, String walletId, String currencySymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetWalletBalancesStream(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIGetWalletBalancesStream(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetWalletBalancesStreamCall(portfolioId, walletId, currencySymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio that contains the wallet (required)
     * @param walletId The ID of the wallet to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @return StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse primeAPIGetWalletBalancesStream(String portfolioId, String walletId, String currencySymbol) throws ApiException {
        ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse> resp = primeAPIGetWalletBalancesStreamWithHttpInfo(portfolioId, walletId, currencySymbol);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio that contains the wallet (required)
     * @param walletId The ID of the wallet to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @return ApiResponse&lt;StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse> primeAPIGetWalletBalancesStreamWithHttpInfo(String portfolioId, String walletId, String currencySymbol) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetWalletBalancesStreamValidateBeforeCall(portfolioId, walletId, currencySymbol, null, null);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The ID of the portfolio that contains the wallet (required)
     * @param walletId The ID of the wallet to get balances for (required)
     * @param currencySymbol Optional filter for symbol of the currency to get balances for (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletBalancesStreamAsync(String portfolioId, String walletId, String currencySymbol, final ApiCallback<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetWalletBalancesStreamValidateBeforeCall(portfolioId, walletId, currencySymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResultOfCoinbaseEngPrimeApiApiGetBalancesStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetWalletDefiBalances
     * @param portfolioId The ID of the portfolio that contains the wallet (required)
     * @param walletId The ID of the wallet to get defi balances for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletDefiBalancesCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/defi/balances"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetWalletDefiBalancesValidateBeforeCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetWalletDefiBalances(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIGetWalletDefiBalances(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetWalletDefiBalancesCall(portfolioId, walletId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio that contains the wallet (required)
     * @param walletId The ID of the wallet to get defi balances for (required)
     * @return CoinbaseEngPrimeApiApiGetWalletDefiBalancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetWalletDefiBalancesResponse primeAPIGetWalletDefiBalances(String portfolioId, String walletId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetWalletDefiBalancesResponse> resp = primeAPIGetWalletDefiBalancesWithHttpInfo(portfolioId, walletId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio that contains the wallet (required)
     * @param walletId The ID of the wallet to get defi balances for (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetWalletDefiBalancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetWalletDefiBalancesResponse> primeAPIGetWalletDefiBalancesWithHttpInfo(String portfolioId, String walletId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetWalletDefiBalancesValidateBeforeCall(portfolioId, walletId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetWalletDefiBalancesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The ID of the portfolio that contains the wallet (required)
     * @param walletId The ID of the wallet to get defi balances for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletDefiBalancesAsync(String portfolioId, String walletId, final ApiCallback<CoinbaseEngPrimeApiApiGetWalletDefiBalancesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetWalletDefiBalancesValidateBeforeCall(portfolioId, walletId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetWalletDefiBalancesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetWalletRewardsStatus
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletRewardsStatusCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/rewards"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetWalletRewardsStatusValidateBeforeCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetWalletRewardsStatus(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIGetWalletRewardsStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetWalletRewardsStatusCall(portfolioId, walletId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return CoinbaseCustodyApiWalletRewardsStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiWalletRewardsStatus primeAPIGetWalletRewardsStatus(String portfolioId, String walletId) throws ApiException {
        ApiResponse<CoinbaseCustodyApiWalletRewardsStatus> resp = primeAPIGetWalletRewardsStatusWithHttpInfo(portfolioId, walletId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return ApiResponse&lt;CoinbaseCustodyApiWalletRewardsStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiWalletRewardsStatus> primeAPIGetWalletRewardsStatusWithHttpInfo(String portfolioId, String walletId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetWalletRewardsStatusValidateBeforeCall(portfolioId, walletId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiWalletRewardsStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletRewardsStatusAsync(String portfolioId, String walletId, final ApiCallback<CoinbaseCustodyApiWalletRewardsStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetWalletRewardsStatusValidateBeforeCall(portfolioId, walletId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiWalletRewardsStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetWalletStakingStatus
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletStakingStatusCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/staking"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetWalletStakingStatusValidateBeforeCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetWalletStakingStatus(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIGetWalletStakingStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetWalletStakingStatusCall(portfolioId, walletId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return CoinbaseCustodyApiWalletStakingStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiWalletStakingStatus primeAPIGetWalletStakingStatus(String portfolioId, String walletId) throws ApiException {
        ApiResponse<CoinbaseCustodyApiWalletStakingStatus> resp = primeAPIGetWalletStakingStatusWithHttpInfo(portfolioId, walletId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return ApiResponse&lt;CoinbaseCustodyApiWalletStakingStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiWalletStakingStatus> primeAPIGetWalletStakingStatusWithHttpInfo(String portfolioId, String walletId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetWalletStakingStatusValidateBeforeCall(portfolioId, walletId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiWalletStakingStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletStakingStatusAsync(String portfolioId, String walletId, final ApiCallback<CoinbaseCustodyApiWalletStakingStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetWalletStakingStatusValidateBeforeCall(portfolioId, walletId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiWalletStakingStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetWalletTokens
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletTokensCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallet_tokens/{wallet_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetWalletTokensValidateBeforeCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetWalletTokens(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIGetWalletTokens(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetWalletTokensCall(portfolioId, walletId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return CoinbaseEngPrimeApiApiListWalletTokensResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListWalletTokensResponse primeAPIGetWalletTokens(String portfolioId, String walletId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListWalletTokensResponse> resp = primeAPIGetWalletTokensWithHttpInfo(portfolioId, walletId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListWalletTokensResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListWalletTokensResponse> primeAPIGetWalletTokensWithHttpInfo(String portfolioId, String walletId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetWalletTokensValidateBeforeCall(portfolioId, walletId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListWalletTokensResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletTokensAsync(String portfolioId, String walletId, final ApiCallback<CoinbaseEngPrimeApiApiListWalletTokensResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetWalletTokensValidateBeforeCall(portfolioId, walletId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListWalletTokensResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetWalletVestingStatus
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletVestingStatusCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/vesting"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetWalletVestingStatusValidateBeforeCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetWalletVestingStatus(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIGetWalletVestingStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetWalletVestingStatusCall(portfolioId, walletId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return CoinbaseEngPrimeApiApiGetWalletVestingStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiGetWalletVestingStatusResponse primeAPIGetWalletVestingStatus(String portfolioId, String walletId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiGetWalletVestingStatusResponse> resp = primeAPIGetWalletVestingStatusWithHttpInfo(portfolioId, walletId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiGetWalletVestingStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiGetWalletVestingStatusResponse> primeAPIGetWalletVestingStatusWithHttpInfo(String portfolioId, String walletId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetWalletVestingStatusValidateBeforeCall(portfolioId, walletId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetWalletVestingStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletVestingStatusAsync(String portfolioId, String walletId, final ApiCallback<CoinbaseEngPrimeApiApiGetWalletVestingStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetWalletVestingStatusValidateBeforeCall(portfolioId, walletId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiGetWalletVestingStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIGetWallets
     * @param portfolioId  (required)
     * @param states  (optional)
     * @param currencySymbols  (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of wallets to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param types Filter to only return specified types (optional)
     * @param actions Filter to only return specified available actions (optional)
     * @param sortField Sorting field (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletsCall(String portfolioId, List<String> states, List<String> currencySymbols, String cursor, Integer limit, String sortDirection, String search, List<String> types, List<String> actions, String sortField, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (states != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "states", states));
        if (currencySymbols != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "currency_symbols", currencySymbols));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (types != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "types", types));
        if (actions != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "actions", actions));
        if (sortField != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_field", sortField));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIGetWalletsValidateBeforeCall(String portfolioId, List<String> states, List<String> currencySymbols, String cursor, Integer limit, String sortDirection, String search, List<String> types, List<String> actions, String sortField, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIGetWallets(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIGetWalletsCall(portfolioId, states, currencySymbols, cursor, limit, sortDirection, search, types, actions, sortField, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param states  (optional)
     * @param currencySymbols  (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of wallets to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param types Filter to only return specified types (optional)
     * @param actions Filter to only return specified available actions (optional)
     * @param sortField Sorting field (optional)
     * @return CoinbaseEngPrimeApiApiListWalletsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListWalletsResponse primeAPIGetWallets(String portfolioId, List<String> states, List<String> currencySymbols, String cursor, Integer limit, String sortDirection, String search, List<String> types, List<String> actions, String sortField) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListWalletsResponse> resp = primeAPIGetWalletsWithHttpInfo(portfolioId, states, currencySymbols, cursor, limit, sortDirection, search, types, actions, sortField);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param states  (optional)
     * @param currencySymbols  (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of wallets to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param types Filter to only return specified types (optional)
     * @param actions Filter to only return specified available actions (optional)
     * @param sortField Sorting field (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListWalletsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListWalletsResponse> primeAPIGetWalletsWithHttpInfo(String portfolioId, List<String> states, List<String> currencySymbols, String cursor, Integer limit, String sortDirection, String search, List<String> types, List<String> actions, String sortField) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIGetWalletsValidateBeforeCall(portfolioId, states, currencySymbols, cursor, limit, sortDirection, search, types, actions, sortField, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListWalletsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param states  (optional)
     * @param currencySymbols  (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of wallets to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param search Search query to match user name (optional)
     * @param types Filter to only return specified types (optional)
     * @param actions Filter to only return specified available actions (optional)
     * @param sortField Sorting field (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIGetWalletsAsync(String portfolioId, List<String> states, List<String> currencySymbols, String cursor, Integer limit, String sortDirection, String search, List<String> types, List<String> actions, String sortField, final ApiCallback<CoinbaseEngPrimeApiApiListWalletsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIGetWalletsValidateBeforeCall(portfolioId, states, currencySymbols, cursor, limit, sortDirection, search, types, actions, sortField, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListWalletsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIInitiateTransactionSigning
     * @param portfolioId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIInitiateTransactionSigningCall(String portfolioId, CoinbaseEngPrimeApiApiInitiateTransactionSigningRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/portfolios/{portfolio_id}/transactions/initiate_signing"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIInitiateTransactionSigningValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiInitiateTransactionSigningRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIInitiateTransactionSigning(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIInitiateTransactionSigning(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIInitiateTransactionSigningCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiInitiateTransactionSigningResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiInitiateTransactionSigningResponse primeAPIInitiateTransactionSigning(String portfolioId, CoinbaseEngPrimeApiApiInitiateTransactionSigningRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiInitiateTransactionSigningResponse> resp = primeAPIInitiateTransactionSigningWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiInitiateTransactionSigningResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiInitiateTransactionSigningResponse> primeAPIInitiateTransactionSigningWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiInitiateTransactionSigningRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIInitiateTransactionSigningValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiInitiateTransactionSigningResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIInitiateTransactionSigningAsync(String portfolioId, CoinbaseEngPrimeApiApiInitiateTransactionSigningRequest body, final ApiCallback<CoinbaseEngPrimeApiApiInitiateTransactionSigningResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIInitiateTransactionSigningValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiInitiateTransactionSigningResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIListActiveValidators
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIListActiveValidatorsCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/validators"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIListActiveValidatorsValidateBeforeCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIListActiveValidators(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIListActiveValidators(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIListActiveValidatorsCall(portfolioId, walletId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return CoinbaseEngPrimeApiApiListActiveValidatorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListActiveValidatorsResponse primeAPIListActiveValidators(String portfolioId, String walletId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListActiveValidatorsResponse> resp = primeAPIListActiveValidatorsWithHttpInfo(portfolioId, walletId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListActiveValidatorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListActiveValidatorsResponse> primeAPIListActiveValidatorsWithHttpInfo(String portfolioId, String walletId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIListActiveValidatorsValidateBeforeCall(portfolioId, walletId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListActiveValidatorsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIListActiveValidatorsAsync(String portfolioId, String walletId, final ApiCallback<CoinbaseEngPrimeApiApiListActiveValidatorsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIListActiveValidatorsValidateBeforeCall(portfolioId, walletId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListActiveValidatorsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIListBulkPoliciesForEntity
     * @param entityId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIListBulkPoliciesForEntityCall(String entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/entities/{entity_id}/policies"
            .replaceAll("\\{" + "entity_id" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIListBulkPoliciesForEntityValidateBeforeCall(String entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling primeAPIListBulkPoliciesForEntity(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIListBulkPoliciesForEntityCall(entityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @return CoinbaseEngPrimeApiApiListBulkPoliciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListBulkPoliciesResponse primeAPIListBulkPoliciesForEntity(String entityId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListBulkPoliciesResponse> resp = primeAPIListBulkPoliciesForEntityWithHttpInfo(entityId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListBulkPoliciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListBulkPoliciesResponse> primeAPIListBulkPoliciesForEntityWithHttpInfo(String entityId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIListBulkPoliciesForEntityValidateBeforeCall(entityId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListBulkPoliciesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIListBulkPoliciesForEntityAsync(String entityId, final ApiCallback<CoinbaseEngPrimeApiApiListBulkPoliciesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIListBulkPoliciesForEntityValidateBeforeCall(entityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListBulkPoliciesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIListDeviceGroups
     * @param listLevel  (optional, default to LIST_LEVEL_UNSPECIFIED)
     * @param listIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIListDeviceGroupsCall(String listLevel, List<String> listIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/device_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (listLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("list_level", listLevel));
        if (listIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "list_ids", listIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIListDeviceGroupsValidateBeforeCall(String listLevel, List<String> listIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = primeAPIListDeviceGroupsCall(listLevel, listIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param listLevel  (optional, default to LIST_LEVEL_UNSPECIFIED)
     * @param listIds  (optional)
     * @return CoinbaseEngPrimeApiApiListDeviceGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListDeviceGroupsResponse primeAPIListDeviceGroups(String listLevel, List<String> listIds) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListDeviceGroupsResponse> resp = primeAPIListDeviceGroupsWithHttpInfo(listLevel, listIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param listLevel  (optional, default to LIST_LEVEL_UNSPECIFIED)
     * @param listIds  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListDeviceGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListDeviceGroupsResponse> primeAPIListDeviceGroupsWithHttpInfo(String listLevel, List<String> listIds) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIListDeviceGroupsValidateBeforeCall(listLevel, listIds, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListDeviceGroupsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param listLevel  (optional, default to LIST_LEVEL_UNSPECIFIED)
     * @param listIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIListDeviceGroupsAsync(String listLevel, List<String> listIds, final ApiCallback<CoinbaseEngPrimeApiApiListDeviceGroupsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIListDeviceGroupsValidateBeforeCall(listLevel, listIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListDeviceGroupsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIListInvitationsForUser
     * @param entityId  (required)
     * @param email  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIListInvitationsForUserCall(String entityId, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/entities/{entity_id}/users/invitations"
            .replaceAll("\\{" + "entity_id" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIListInvitationsForUserValidateBeforeCall(String entityId, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling primeAPIListInvitationsForUser(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIListInvitationsForUserCall(entityId, email, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param email  (optional)
     * @return CoinbaseEngPrimeApiApiListUserInvitationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListUserInvitationResponse primeAPIListInvitationsForUser(String entityId, String email) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListUserInvitationResponse> resp = primeAPIListInvitationsForUserWithHttpInfo(entityId, email);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param email  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListUserInvitationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListUserInvitationResponse> primeAPIListInvitationsForUserWithHttpInfo(String entityId, String email) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIListInvitationsForUserValidateBeforeCall(entityId, email, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListUserInvitationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId  (required)
     * @param email  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIListInvitationsForUserAsync(String entityId, String email, final ApiCallback<CoinbaseEngPrimeApiApiListUserInvitationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIListInvitationsForUserValidateBeforeCall(entityId, email, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListUserInvitationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIListPaymentMethods
     * @param vehicleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIListPaymentMethodsCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/payment_methods"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIListPaymentMethodsValidateBeforeCall(String vehicleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIListPaymentMethods(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIListPaymentMethodsCall(vehicleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return CoinbaseEngPrimeApiApiListPaymentMethodsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListPaymentMethodsResponse primeAPIListPaymentMethods(String vehicleId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListPaymentMethodsResponse> resp = primeAPIListPaymentMethodsWithHttpInfo(vehicleId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListPaymentMethodsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListPaymentMethodsResponse> primeAPIListPaymentMethodsWithHttpInfo(String vehicleId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIListPaymentMethodsValidateBeforeCall(vehicleId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListPaymentMethodsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIListPaymentMethodsAsync(String vehicleId, final ApiCallback<CoinbaseEngPrimeApiApiListPaymentMethodsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIListPaymentMethodsValidateBeforeCall(vehicleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListPaymentMethodsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIListPolicies
     * @param portfolioId Portfolio ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIListPoliciesCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/policies"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIListPoliciesValidateBeforeCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIListPolicies(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIListPoliciesCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId Portfolio ID (required)
     * @return EngPrimePolicyApiListPoliciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EngPrimePolicyApiListPoliciesResponse primeAPIListPolicies(String portfolioId) throws ApiException {
        ApiResponse<EngPrimePolicyApiListPoliciesResponse> resp = primeAPIListPoliciesWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId Portfolio ID (required)
     * @return ApiResponse&lt;EngPrimePolicyApiListPoliciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EngPrimePolicyApiListPoliciesResponse> primeAPIListPoliciesWithHttpInfo(String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIListPoliciesValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<EngPrimePolicyApiListPoliciesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId Portfolio ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIListPoliciesAsync(String portfolioId, final ApiCallback<EngPrimePolicyApiListPoliciesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIListPoliciesValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EngPrimePolicyApiListPoliciesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIListReportingCenterData
     * @param vehicleId  (required)
     * @param portfolioIds  (optional)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param year  (optional)
     * @param type  (optional, default to REPORT_TYPE_UNSPECIFIED)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIListReportingCenterDataCall(String vehicleId, List<String> portfolioIds, String cursor, String limit, String year, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/reporting_center/{vehicle_id}"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "portfolio_ids", portfolioIds));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (year != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("year", year));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIListReportingCenterDataValidateBeforeCall(String vehicleId, List<String> portfolioIds, String cursor, String limit, String year, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIListReportingCenterData(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIListReportingCenterDataCall(vehicleId, portfolioIds, cursor, limit, year, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param portfolioIds  (optional)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param year  (optional)
     * @param type  (optional, default to REPORT_TYPE_UNSPECIFIED)
     * @return CoinbaseEngPrimeApiApiListReportingCenterDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListReportingCenterDataResponse primeAPIListReportingCenterData(String vehicleId, List<String> portfolioIds, String cursor, String limit, String year, String type) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListReportingCenterDataResponse> resp = primeAPIListReportingCenterDataWithHttpInfo(vehicleId, portfolioIds, cursor, limit, year, type);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param portfolioIds  (optional)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param year  (optional)
     * @param type  (optional, default to REPORT_TYPE_UNSPECIFIED)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListReportingCenterDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListReportingCenterDataResponse> primeAPIListReportingCenterDataWithHttpInfo(String vehicleId, List<String> portfolioIds, String cursor, String limit, String year, String type) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIListReportingCenterDataValidateBeforeCall(vehicleId, portfolioIds, cursor, limit, year, type, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListReportingCenterDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param portfolioIds  (optional)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param year  (optional)
     * @param type  (optional, default to REPORT_TYPE_UNSPECIFIED)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIListReportingCenterDataAsync(String vehicleId, List<String> portfolioIds, String cursor, String limit, String year, String type, final ApiCallback<CoinbaseEngPrimeApiApiListReportingCenterDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIListReportingCenterDataValidateBeforeCall(vehicleId, portfolioIds, cursor, limit, year, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListReportingCenterDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIListSignerIdsForActivity
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIListSignerIdsForActivityCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/activities/{activity_id}/signers"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIListSignerIdsForActivityValidateBeforeCall(String portfolioId, String activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIListSignerIdsForActivity(Async)");
        }
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling primeAPIListSignerIdsForActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIListSignerIdsForActivityCall(portfolioId, activityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return CoinbaseEngPrimeApiApiListSignerIdsForActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListSignerIdsForActivityResponse primeAPIListSignerIdsForActivity(String portfolioId, String activityId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListSignerIdsForActivityResponse> resp = primeAPIListSignerIdsForActivityWithHttpInfo(portfolioId, activityId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListSignerIdsForActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListSignerIdsForActivityResponse> primeAPIListSignerIdsForActivityWithHttpInfo(String portfolioId, String activityId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIListSignerIdsForActivityValidateBeforeCall(portfolioId, activityId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListSignerIdsForActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIListSignerIdsForActivityAsync(String portfolioId, String activityId, final ApiCallback<CoinbaseEngPrimeApiApiListSignerIdsForActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIListSignerIdsForActivityValidateBeforeCall(portfolioId, activityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListSignerIdsForActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIListTradingWalletCryptoDepositAddresses
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param search  (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of addresses to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIListTradingWalletCryptoDepositAddressesCall(String portfolioId, String walletId, String search, String cursor, Integer limit, String sortDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/crypto_deposit_addresses"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIListTradingWalletCryptoDepositAddressesValidateBeforeCall(String portfolioId, String walletId, String search, String cursor, Integer limit, String sortDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIListTradingWalletCryptoDepositAddresses(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIListTradingWalletCryptoDepositAddresses(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIListTradingWalletCryptoDepositAddressesCall(portfolioId, walletId, search, cursor, limit, sortDirection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param search  (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of addresses to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @return CoinbaseEngPrimeApiApiListTradingWalletCryptoDepositAddressesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListTradingWalletCryptoDepositAddressesResponse primeAPIListTradingWalletCryptoDepositAddresses(String portfolioId, String walletId, String search, String cursor, Integer limit, String sortDirection) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListTradingWalletCryptoDepositAddressesResponse> resp = primeAPIListTradingWalletCryptoDepositAddressesWithHttpInfo(portfolioId, walletId, search, cursor, limit, sortDirection);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param search  (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of addresses to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListTradingWalletCryptoDepositAddressesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListTradingWalletCryptoDepositAddressesResponse> primeAPIListTradingWalletCryptoDepositAddressesWithHttpInfo(String portfolioId, String walletId, String search, String cursor, Integer limit, String sortDirection) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIListTradingWalletCryptoDepositAddressesValidateBeforeCall(portfolioId, walletId, search, cursor, limit, sortDirection, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListTradingWalletCryptoDepositAddressesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param search  (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of addresses to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIListTradingWalletCryptoDepositAddressesAsync(String portfolioId, String walletId, String search, String cursor, Integer limit, String sortDirection, final ApiCallback<CoinbaseEngPrimeApiApiListTradingWalletCryptoDepositAddressesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIListTradingWalletCryptoDepositAddressesValidateBeforeCall(portfolioId, walletId, search, cursor, limit, sortDirection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListTradingWalletCryptoDepositAddressesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIListVideoUploads
     * @param transactionId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIListVideoUploadsCall(String transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/video_uploads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (transactionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transaction_id", transactionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIListVideoUploadsValidateBeforeCall(String transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = primeAPIListVideoUploadsCall(transactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param transactionId  (optional)
     * @return CoinbaseCustodyApiListVideoUploadsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseCustodyApiListVideoUploadsResponse primeAPIListVideoUploads(String transactionId) throws ApiException {
        ApiResponse<CoinbaseCustodyApiListVideoUploadsResponse> resp = primeAPIListVideoUploadsWithHttpInfo(transactionId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param transactionId  (optional)
     * @return ApiResponse&lt;CoinbaseCustodyApiListVideoUploadsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseCustodyApiListVideoUploadsResponse> primeAPIListVideoUploadsWithHttpInfo(String transactionId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIListVideoUploadsValidateBeforeCall(transactionId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiListVideoUploadsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param transactionId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIListVideoUploadsAsync(String transactionId, final ApiCallback<CoinbaseCustodyApiListVideoUploadsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIListVideoUploadsValidateBeforeCall(transactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseCustodyApiListVideoUploadsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIListWalletsV2
     * @param portfolioId  (required)
     * @param states Filter to only return specified states (optional)
     * @param currencySymbols  (optional)
     * @param types Filter to only return specified types (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of wallets to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param fetchWalletOptionResolveBalances  (optional)
     * @param fetchWalletOptionResolveCurrency  (optional)
     * @param fetchWalletOptionResolveStakingInfo  (optional)
     * @param fetchWalletOptionResolveVestingInfo  (optional)
     * @param fetchWalletOptionResolveAvailableActions  (optional)
     * @param name Filter wallets that contain given name (optional)
     * @param sortBy Sorting By (optional, default to LIST_WALLETS_SORT_BY_UNSPECIFIED)
     * @param actions Filter to only return specified available actions (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIListWalletsV2Call(String portfolioId, List<String> states, List<String> currencySymbols, List<String> types, String cursor, String limit, String sortDirection, Boolean fetchWalletOptionResolveBalances, Boolean fetchWalletOptionResolveCurrency, Boolean fetchWalletOptionResolveStakingInfo, Boolean fetchWalletOptionResolveVestingInfo, Boolean fetchWalletOptionResolveAvailableActions, String name, String sortBy, List<String> actions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/portfolios/{portfolio_id}/wallets"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (states != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "states", states));
        if (currencySymbols != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "currency_symbols", currencySymbols));
        if (types != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "types", types));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_direction", sortDirection));
        if (fetchWalletOptionResolveBalances != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fetch_wallet_option.resolve_balances", fetchWalletOptionResolveBalances));
        if (fetchWalletOptionResolveCurrency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fetch_wallet_option.resolve_currency", fetchWalletOptionResolveCurrency));
        if (fetchWalletOptionResolveStakingInfo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fetch_wallet_option.resolve_staking_info", fetchWalletOptionResolveStakingInfo));
        if (fetchWalletOptionResolveVestingInfo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fetch_wallet_option.resolve_vesting_info", fetchWalletOptionResolveVestingInfo));
        if (fetchWalletOptionResolveAvailableActions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fetch_wallet_option.resolve_available_actions", fetchWalletOptionResolveAvailableActions));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (actions != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "actions", actions));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIListWalletsV2ValidateBeforeCall(String portfolioId, List<String> states, List<String> currencySymbols, List<String> types, String cursor, String limit, String sortDirection, Boolean fetchWalletOptionResolveBalances, Boolean fetchWalletOptionResolveCurrency, Boolean fetchWalletOptionResolveStakingInfo, Boolean fetchWalletOptionResolveVestingInfo, Boolean fetchWalletOptionResolveAvailableActions, String name, String sortBy, List<String> actions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIListWalletsV2(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIListWalletsV2Call(portfolioId, states, currencySymbols, types, cursor, limit, sortDirection, fetchWalletOptionResolveBalances, fetchWalletOptionResolveCurrency, fetchWalletOptionResolveStakingInfo, fetchWalletOptionResolveVestingInfo, fetchWalletOptionResolveAvailableActions, name, sortBy, actions, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param states Filter to only return specified states (optional)
     * @param currencySymbols  (optional)
     * @param types Filter to only return specified types (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of wallets to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param fetchWalletOptionResolveBalances  (optional)
     * @param fetchWalletOptionResolveCurrency  (optional)
     * @param fetchWalletOptionResolveStakingInfo  (optional)
     * @param fetchWalletOptionResolveVestingInfo  (optional)
     * @param fetchWalletOptionResolveAvailableActions  (optional)
     * @param name Filter wallets that contain given name (optional)
     * @param sortBy Sorting By (optional, default to LIST_WALLETS_SORT_BY_UNSPECIFIED)
     * @param actions Filter to only return specified available actions (optional)
     * @return CoinbaseEngPrimeApiApiListWalletsV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListWalletsV2Response primeAPIListWalletsV2(String portfolioId, List<String> states, List<String> currencySymbols, List<String> types, String cursor, String limit, String sortDirection, Boolean fetchWalletOptionResolveBalances, Boolean fetchWalletOptionResolveCurrency, Boolean fetchWalletOptionResolveStakingInfo, Boolean fetchWalletOptionResolveVestingInfo, Boolean fetchWalletOptionResolveAvailableActions, String name, String sortBy, List<String> actions) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListWalletsV2Response> resp = primeAPIListWalletsV2WithHttpInfo(portfolioId, states, currencySymbols, types, cursor, limit, sortDirection, fetchWalletOptionResolveBalances, fetchWalletOptionResolveCurrency, fetchWalletOptionResolveStakingInfo, fetchWalletOptionResolveVestingInfo, fetchWalletOptionResolveAvailableActions, name, sortBy, actions);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param states Filter to only return specified states (optional)
     * @param currencySymbols  (optional)
     * @param types Filter to only return specified types (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of wallets to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param fetchWalletOptionResolveBalances  (optional)
     * @param fetchWalletOptionResolveCurrency  (optional)
     * @param fetchWalletOptionResolveStakingInfo  (optional)
     * @param fetchWalletOptionResolveVestingInfo  (optional)
     * @param fetchWalletOptionResolveAvailableActions  (optional)
     * @param name Filter wallets that contain given name (optional)
     * @param sortBy Sorting By (optional, default to LIST_WALLETS_SORT_BY_UNSPECIFIED)
     * @param actions Filter to only return specified available actions (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListWalletsV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListWalletsV2Response> primeAPIListWalletsV2WithHttpInfo(String portfolioId, List<String> states, List<String> currencySymbols, List<String> types, String cursor, String limit, String sortDirection, Boolean fetchWalletOptionResolveBalances, Boolean fetchWalletOptionResolveCurrency, Boolean fetchWalletOptionResolveStakingInfo, Boolean fetchWalletOptionResolveVestingInfo, Boolean fetchWalletOptionResolveAvailableActions, String name, String sortBy, List<String> actions) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIListWalletsV2ValidateBeforeCall(portfolioId, states, currencySymbols, types, cursor, limit, sortDirection, fetchWalletOptionResolveBalances, fetchWalletOptionResolveCurrency, fetchWalletOptionResolveStakingInfo, fetchWalletOptionResolveVestingInfo, fetchWalletOptionResolveAvailableActions, name, sortBy, actions, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListWalletsV2Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param states Filter to only return specified states (optional)
     * @param currencySymbols  (optional)
     * @param types Filter to only return specified types (optional)
     * @param cursor Id to retrieve additional results strictly after. (optional)
     * @param limit Number of wallets to retrieve (optional)
     * @param sortDirection Sorting order (optional, default to DESC)
     * @param fetchWalletOptionResolveBalances  (optional)
     * @param fetchWalletOptionResolveCurrency  (optional)
     * @param fetchWalletOptionResolveStakingInfo  (optional)
     * @param fetchWalletOptionResolveVestingInfo  (optional)
     * @param fetchWalletOptionResolveAvailableActions  (optional)
     * @param name Filter wallets that contain given name (optional)
     * @param sortBy Sorting By (optional, default to LIST_WALLETS_SORT_BY_UNSPECIFIED)
     * @param actions Filter to only return specified available actions (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIListWalletsV2Async(String portfolioId, List<String> states, List<String> currencySymbols, List<String> types, String cursor, String limit, String sortDirection, Boolean fetchWalletOptionResolveBalances, Boolean fetchWalletOptionResolveCurrency, Boolean fetchWalletOptionResolveStakingInfo, Boolean fetchWalletOptionResolveVestingInfo, Boolean fetchWalletOptionResolveAvailableActions, String name, String sortBy, List<String> actions, final ApiCallback<CoinbaseEngPrimeApiApiListWalletsV2Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIListWalletsV2ValidateBeforeCall(portfolioId, states, currencySymbols, types, cursor, limit, sortDirection, fetchWalletOptionResolveBalances, fetchWalletOptionResolveCurrency, fetchWalletOptionResolveStakingInfo, fetchWalletOptionResolveVestingInfo, fetchWalletOptionResolveAvailableActions, name, sortBy, actions, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListWalletsV2Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIListWeb3SecurityKeys
     * @param portfolioId  (required)
     * @param includeArchived  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIListWeb3SecurityKeysCall(String portfolioId, Boolean includeArchived, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/portfolios/{portfolio_id}/web3_security_keys"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeArchived != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_archived", includeArchived));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIListWeb3SecurityKeysValidateBeforeCall(String portfolioId, Boolean includeArchived, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIListWeb3SecurityKeys(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIListWeb3SecurityKeysCall(portfolioId, includeArchived, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param includeArchived  (optional)
     * @return CoinbaseEngPrimeApiApiListWeb3SecurityKeysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiListWeb3SecurityKeysResponse primeAPIListWeb3SecurityKeys(String portfolioId, Boolean includeArchived) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiListWeb3SecurityKeysResponse> resp = primeAPIListWeb3SecurityKeysWithHttpInfo(portfolioId, includeArchived);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param includeArchived  (optional)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiListWeb3SecurityKeysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiListWeb3SecurityKeysResponse> primeAPIListWeb3SecurityKeysWithHttpInfo(String portfolioId, Boolean includeArchived) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIListWeb3SecurityKeysValidateBeforeCall(portfolioId, includeArchived, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListWeb3SecurityKeysResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param includeArchived  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIListWeb3SecurityKeysAsync(String portfolioId, Boolean includeArchived, final ApiCallback<CoinbaseEngPrimeApiApiListWeb3SecurityKeysResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIListWeb3SecurityKeysValidateBeforeCall(portfolioId, includeArchived, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiListWeb3SecurityKeysResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostAcceptInvitation
     * @param invitationId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostAcceptInvitationCall(String invitationId, CoinbaseEngPrimeApiApiAcceptInvitationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/invitations/{invitation_id}"
            .replaceAll("\\{" + "invitation_id" + "\\}", apiClient.escapeString(invitationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostAcceptInvitationValidateBeforeCall(String invitationId, CoinbaseEngPrimeApiApiAcceptInvitationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invitationId' is set
        if (invitationId == null) {
            throw new ApiException("Missing the required parameter 'invitationId' when calling primeAPIPostAcceptInvitation(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostAcceptInvitation(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostAcceptInvitationCall(invitationId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param invitationId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiAcceptInvitationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiAcceptInvitationResponse primeAPIPostAcceptInvitation(String invitationId, CoinbaseEngPrimeApiApiAcceptInvitationRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiAcceptInvitationResponse> resp = primeAPIPostAcceptInvitationWithHttpInfo(invitationId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param invitationId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiAcceptInvitationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiAcceptInvitationResponse> primeAPIPostAcceptInvitationWithHttpInfo(String invitationId, CoinbaseEngPrimeApiApiAcceptInvitationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostAcceptInvitationValidateBeforeCall(invitationId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiAcceptInvitationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param invitationId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostAcceptInvitationAsync(String invitationId, CoinbaseEngPrimeApiApiAcceptInvitationRequest body, final ApiCallback<CoinbaseEngPrimeApiApiAcceptInvitationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostAcceptInvitationValidateBeforeCall(invitationId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiAcceptInvitationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostActivateAPIKey
     * @param portfolioId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostActivateAPIKeyCall(String portfolioId, CoinbaseEngPrimeApiApiActivateAPIKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/api-key/activate"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostActivateAPIKeyValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiActivateAPIKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPostActivateAPIKey(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostActivateAPIKey(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostActivateAPIKeyCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiActivateAPIKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiActivateAPIKeyResponse primeAPIPostActivateAPIKey(String portfolioId, CoinbaseEngPrimeApiApiActivateAPIKeyRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiActivateAPIKeyResponse> resp = primeAPIPostActivateAPIKeyWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiActivateAPIKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiActivateAPIKeyResponse> primeAPIPostActivateAPIKeyWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiActivateAPIKeyRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostActivateAPIKeyValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiActivateAPIKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostActivateAPIKeyAsync(String portfolioId, CoinbaseEngPrimeApiApiActivateAPIKeyRequest body, final ApiCallback<CoinbaseEngPrimeApiApiActivateAPIKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostActivateAPIKeyValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiActivateAPIKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostActivateAPIKeyV2
     * @param groupId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostActivateAPIKeyV2Call(String groupId, CoinbaseEngPrimeApiApiActivateAPIKeyRequestV2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/groups/{group_id}/api-key/activate"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostActivateAPIKeyV2ValidateBeforeCall(String groupId, CoinbaseEngPrimeApiApiActivateAPIKeyRequestV2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling primeAPIPostActivateAPIKeyV2(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostActivateAPIKeyV2(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostActivateAPIKeyV2Call(groupId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiActivateAPIKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiActivateAPIKeyResponse primeAPIPostActivateAPIKeyV2(String groupId, CoinbaseEngPrimeApiApiActivateAPIKeyRequestV2 body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiActivateAPIKeyResponse> resp = primeAPIPostActivateAPIKeyV2WithHttpInfo(groupId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiActivateAPIKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiActivateAPIKeyResponse> primeAPIPostActivateAPIKeyV2WithHttpInfo(String groupId, CoinbaseEngPrimeApiApiActivateAPIKeyRequestV2 body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostActivateAPIKeyV2ValidateBeforeCall(groupId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiActivateAPIKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groupId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostActivateAPIKeyV2Async(String groupId, CoinbaseEngPrimeApiApiActivateAPIKeyRequestV2 body, final ApiCallback<CoinbaseEngPrimeApiApiActivateAPIKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostActivateAPIKeyV2ValidateBeforeCall(groupId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiActivateAPIKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostAddressBookEntry
     * @param portfolioId Portfolio id (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostAddressBookEntryCall(String portfolioId, CoinbaseEngPrimeApiApiPostAddressBookEntryRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/addressbook"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostAddressBookEntryValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiPostAddressBookEntryRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPostAddressBookEntry(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostAddressBookEntry(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostAddressBookEntryCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId Portfolio id (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostAddressBookEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostAddressBookEntryResponse primeAPIPostAddressBookEntry(String portfolioId, CoinbaseEngPrimeApiApiPostAddressBookEntryRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostAddressBookEntryResponse> resp = primeAPIPostAddressBookEntryWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId Portfolio id (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostAddressBookEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostAddressBookEntryResponse> primeAPIPostAddressBookEntryWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiPostAddressBookEntryRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostAddressBookEntryValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostAddressBookEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId Portfolio id (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostAddressBookEntryAsync(String portfolioId, CoinbaseEngPrimeApiApiPostAddressBookEntryRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostAddressBookEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostAddressBookEntryValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostAddressBookEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostAllocation
     * @param sourcePortfolioId The source portfolio id for the allocation (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostAllocationCall(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostAllocationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{source_portfolio_id}/allocation"
            .replaceAll("\\{" + "source_portfolio_id" + "\\}", apiClient.escapeString(sourcePortfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostAllocationValidateBeforeCall(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostAllocationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sourcePortfolioId' is set
        if (sourcePortfolioId == null) {
            throw new ApiException("Missing the required parameter 'sourcePortfolioId' when calling primeAPIPostAllocation(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostAllocationCall(sourcePortfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param sourcePortfolioId The source portfolio id for the allocation (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostAllocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostAllocationResponse primeAPIPostAllocation(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostAllocationRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostAllocationResponse> resp = primeAPIPostAllocationWithHttpInfo(sourcePortfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param sourcePortfolioId The source portfolio id for the allocation (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostAllocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostAllocationResponse> primeAPIPostAllocationWithHttpInfo(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostAllocationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostAllocationValidateBeforeCall(sourcePortfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostAllocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sourcePortfolioId The source portfolio id for the allocation (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostAllocationAsync(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostAllocationRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostAllocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostAllocationValidateBeforeCall(sourcePortfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostAllocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostAllocationPreview
     * @param sourcePortfolioId The ID of the source portfolio id (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostAllocationPreviewCall(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostAllocationPreviewRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{source_portfolio_id}/allocation/preview"
            .replaceAll("\\{" + "source_portfolio_id" + "\\}", apiClient.escapeString(sourcePortfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostAllocationPreviewValidateBeforeCall(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostAllocationPreviewRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sourcePortfolioId' is set
        if (sourcePortfolioId == null) {
            throw new ApiException("Missing the required parameter 'sourcePortfolioId' when calling primeAPIPostAllocationPreview(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostAllocationPreview(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostAllocationPreviewCall(sourcePortfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param sourcePortfolioId The ID of the source portfolio id (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostAllocationPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostAllocationPreviewResponse primeAPIPostAllocationPreview(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostAllocationPreviewRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostAllocationPreviewResponse> resp = primeAPIPostAllocationPreviewWithHttpInfo(sourcePortfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param sourcePortfolioId The ID of the source portfolio id (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostAllocationPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostAllocationPreviewResponse> primeAPIPostAllocationPreviewWithHttpInfo(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostAllocationPreviewRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostAllocationPreviewValidateBeforeCall(sourcePortfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostAllocationPreviewResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sourcePortfolioId The ID of the source portfolio id (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostAllocationPreviewAsync(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostAllocationPreviewRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostAllocationPreviewResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostAllocationPreviewValidateBeforeCall(sourcePortfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostAllocationPreviewResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostApprovePortfolioActivity
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostApprovePortfolioActivityCall(String portfolioId, String activityId, CoinbaseEngPrimeApiApiPostApprovePortfolioActivityRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/activities/{activity_id}/approve"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostApprovePortfolioActivityValidateBeforeCall(String portfolioId, String activityId, CoinbaseEngPrimeApiApiPostApprovePortfolioActivityRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPostApprovePortfolioActivity(Async)");
        }
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling primeAPIPostApprovePortfolioActivity(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostApprovePortfolioActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostApprovePortfolioActivityCall(portfolioId, activityId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostApprovePortfolioActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostApprovePortfolioActivityResponse primeAPIPostApprovePortfolioActivity(String portfolioId, String activityId, CoinbaseEngPrimeApiApiPostApprovePortfolioActivityRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostApprovePortfolioActivityResponse> resp = primeAPIPostApprovePortfolioActivityWithHttpInfo(portfolioId, activityId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostApprovePortfolioActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostApprovePortfolioActivityResponse> primeAPIPostApprovePortfolioActivityWithHttpInfo(String portfolioId, String activityId, CoinbaseEngPrimeApiApiPostApprovePortfolioActivityRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostApprovePortfolioActivityValidateBeforeCall(portfolioId, activityId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostApprovePortfolioActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostApprovePortfolioActivityAsync(String portfolioId, String activityId, CoinbaseEngPrimeApiApiPostApprovePortfolioActivityRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostApprovePortfolioActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostApprovePortfolioActivityValidateBeforeCall(portfolioId, activityId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostApprovePortfolioActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostApproveVehicleActivity
     * @param vehicleId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostApproveVehicleActivityCall(String vehicleId, String activityId, CoinbaseEngPrimeApiApiPostApproveVehicleActivityRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/activities/{activity_id}/approve"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()))
            .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostApproveVehicleActivityValidateBeforeCall(String vehicleId, String activityId, CoinbaseEngPrimeApiApiPostApproveVehicleActivityRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIPostApproveVehicleActivity(Async)");
        }
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling primeAPIPostApproveVehicleActivity(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostApproveVehicleActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostApproveVehicleActivityCall(vehicleId, activityId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostApproveVehicleActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostApproveVehicleActivityResponse primeAPIPostApproveVehicleActivity(String vehicleId, String activityId, CoinbaseEngPrimeApiApiPostApproveVehicleActivityRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostApproveVehicleActivityResponse> resp = primeAPIPostApproveVehicleActivityWithHttpInfo(vehicleId, activityId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostApproveVehicleActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostApproveVehicleActivityResponse> primeAPIPostApproveVehicleActivityWithHttpInfo(String vehicleId, String activityId, CoinbaseEngPrimeApiApiPostApproveVehicleActivityRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostApproveVehicleActivityValidateBeforeCall(vehicleId, activityId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostApproveVehicleActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostApproveVehicleActivityAsync(String vehicleId, String activityId, CoinbaseEngPrimeApiApiPostApproveVehicleActivityRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostApproveVehicleActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostApproveVehicleActivityValidateBeforeCall(vehicleId, activityId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostApproveVehicleActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostBulkActionActivities
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostBulkActionActivitiesCall(CoinbaseEngPrimeApiApiPostBulkActionActivitiesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/activities/action/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostBulkActionActivitiesValidateBeforeCall(CoinbaseEngPrimeApiApiPostBulkActionActivitiesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostBulkActionActivities(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostBulkActionActivitiesCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostBulkActionActivitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostBulkActionActivitiesResponse primeAPIPostBulkActionActivities(CoinbaseEngPrimeApiApiPostBulkActionActivitiesRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostBulkActionActivitiesResponse> resp = primeAPIPostBulkActionActivitiesWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostBulkActionActivitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostBulkActionActivitiesResponse> primeAPIPostBulkActionActivitiesWithHttpInfo(CoinbaseEngPrimeApiApiPostBulkActionActivitiesRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostBulkActionActivitiesValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostBulkActionActivitiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostBulkActionActivitiesAsync(CoinbaseEngPrimeApiApiPostBulkActionActivitiesRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostBulkActionActivitiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostBulkActionActivitiesValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostBulkActionActivitiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostBulkActionSetting
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostBulkActionSettingCall(CoinbaseEngPrimeApiApiPostBulkActionSettingsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/settings/bulk_action";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostBulkActionSettingValidateBeforeCall(CoinbaseEngPrimeApiApiPostBulkActionSettingsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostBulkActionSetting(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostBulkActionSettingCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostBulkActionSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostBulkActionSettingsResponse primeAPIPostBulkActionSetting(CoinbaseEngPrimeApiApiPostBulkActionSettingsRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostBulkActionSettingsResponse> resp = primeAPIPostBulkActionSettingWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostBulkActionSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostBulkActionSettingsResponse> primeAPIPostBulkActionSettingWithHttpInfo(CoinbaseEngPrimeApiApiPostBulkActionSettingsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostBulkActionSettingValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostBulkActionSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostBulkActionSettingAsync(CoinbaseEngPrimeApiApiPostBulkActionSettingsRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostBulkActionSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostBulkActionSettingValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostBulkActionSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostBulkInvitation
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostBulkInvitationCall(CoinbaseEngPrimeApiApiPostBulkUserInvitationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/users/invite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostBulkInvitationValidateBeforeCall(CoinbaseEngPrimeApiApiPostBulkUserInvitationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostBulkInvitation(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostBulkInvitationCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostBulkUserInvitationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostBulkUserInvitationResponse primeAPIPostBulkInvitation(CoinbaseEngPrimeApiApiPostBulkUserInvitationRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostBulkUserInvitationResponse> resp = primeAPIPostBulkInvitationWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostBulkUserInvitationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostBulkUserInvitationResponse> primeAPIPostBulkInvitationWithHttpInfo(CoinbaseEngPrimeApiApiPostBulkUserInvitationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostBulkInvitationValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostBulkUserInvitationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostBulkInvitationAsync(CoinbaseEngPrimeApiApiPostBulkUserInvitationRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostBulkUserInvitationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostBulkInvitationValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostBulkUserInvitationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostCancelOrder
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostCancelOrderCall(CoinbaseEngPrimeApiApiPostCancelOrderRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/orders/batch_cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostCancelOrderValidateBeforeCall(CoinbaseEngPrimeApiApiPostCancelOrderRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostCancelOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostCancelOrderCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostCancelOrderResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostCancelOrderResponseBody primeAPIPostCancelOrder(CoinbaseEngPrimeApiApiPostCancelOrderRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostCancelOrderResponseBody> resp = primeAPIPostCancelOrderWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostCancelOrderResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostCancelOrderResponseBody> primeAPIPostCancelOrderWithHttpInfo(CoinbaseEngPrimeApiApiPostCancelOrderRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostCancelOrderValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostCancelOrderResponseBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostCancelOrderAsync(CoinbaseEngPrimeApiApiPostCancelOrderRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostCancelOrderResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostCancelOrderValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostCancelOrderResponseBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostCreateAPIKey
     * @param portfolioId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostCreateAPIKeyCall(String portfolioId, CoinbaseEngPrimeApiApiCreateAPIKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/api-key/create"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostCreateAPIKeyValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiCreateAPIKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPostCreateAPIKey(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostCreateAPIKey(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostCreateAPIKeyCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiCreateAPIKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiCreateAPIKeyResponse primeAPIPostCreateAPIKey(String portfolioId, CoinbaseEngPrimeApiApiCreateAPIKeyRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiCreateAPIKeyResponse> resp = primeAPIPostCreateAPIKeyWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiCreateAPIKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiCreateAPIKeyResponse> primeAPIPostCreateAPIKeyWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiCreateAPIKeyRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostCreateAPIKeyValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiCreateAPIKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostCreateAPIKeyAsync(String portfolioId, CoinbaseEngPrimeApiApiCreateAPIKeyRequest body, final ApiCallback<CoinbaseEngPrimeApiApiCreateAPIKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostCreateAPIKeyValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiCreateAPIKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostCreateAPIKeyV2
     * @param groupId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostCreateAPIKeyV2Call(String groupId, CoinbaseEngPrimeApiApiCreateAPIKeyRequestV2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/groups/{group_id}/api-key/create"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostCreateAPIKeyV2ValidateBeforeCall(String groupId, CoinbaseEngPrimeApiApiCreateAPIKeyRequestV2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling primeAPIPostCreateAPIKeyV2(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostCreateAPIKeyV2(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostCreateAPIKeyV2Call(groupId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiCreateAPIKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiCreateAPIKeyResponse primeAPIPostCreateAPIKeyV2(String groupId, CoinbaseEngPrimeApiApiCreateAPIKeyRequestV2 body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiCreateAPIKeyResponse> resp = primeAPIPostCreateAPIKeyV2WithHttpInfo(groupId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiCreateAPIKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiCreateAPIKeyResponse> primeAPIPostCreateAPIKeyV2WithHttpInfo(String groupId, CoinbaseEngPrimeApiApiCreateAPIKeyRequestV2 body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostCreateAPIKeyV2ValidateBeforeCall(groupId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiCreateAPIKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groupId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostCreateAPIKeyV2Async(String groupId, CoinbaseEngPrimeApiApiCreateAPIKeyRequestV2 body, final ApiCallback<CoinbaseEngPrimeApiApiCreateAPIKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostCreateAPIKeyV2ValidateBeforeCall(groupId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiCreateAPIKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostDeactivateAPIKey
     * @param portfolioId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostDeactivateAPIKeyCall(String portfolioId, CoinbaseEngPrimeApiApiDeactivateAPIKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/api-key/deactivate"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostDeactivateAPIKeyValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiDeactivateAPIKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPostDeactivateAPIKey(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostDeactivateAPIKey(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostDeactivateAPIKeyCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse primeAPIPostDeactivateAPIKey(String portfolioId, CoinbaseEngPrimeApiApiDeactivateAPIKeyRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse> resp = primeAPIPostDeactivateAPIKeyWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse> primeAPIPostDeactivateAPIKeyWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiDeactivateAPIKeyRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostDeactivateAPIKeyValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostDeactivateAPIKeyAsync(String portfolioId, CoinbaseEngPrimeApiApiDeactivateAPIKeyRequest body, final ApiCallback<CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostDeactivateAPIKeyValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostDeactivateAPIKeyV2
     * @param groupId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostDeactivateAPIKeyV2Call(String groupId, CoinbaseEngPrimeApiApiDeactivateAPIKeyRequestV2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/groups/{group_id}/api-key/deactivate"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostDeactivateAPIKeyV2ValidateBeforeCall(String groupId, CoinbaseEngPrimeApiApiDeactivateAPIKeyRequestV2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling primeAPIPostDeactivateAPIKeyV2(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostDeactivateAPIKeyV2(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostDeactivateAPIKeyV2Call(groupId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse primeAPIPostDeactivateAPIKeyV2(String groupId, CoinbaseEngPrimeApiApiDeactivateAPIKeyRequestV2 body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse> resp = primeAPIPostDeactivateAPIKeyV2WithHttpInfo(groupId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse> primeAPIPostDeactivateAPIKeyV2WithHttpInfo(String groupId, CoinbaseEngPrimeApiApiDeactivateAPIKeyRequestV2 body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostDeactivateAPIKeyV2ValidateBeforeCall(groupId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groupId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostDeactivateAPIKeyV2Async(String groupId, CoinbaseEngPrimeApiApiDeactivateAPIKeyRequestV2 body, final ApiCallback<CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostDeactivateAPIKeyV2ValidateBeforeCall(groupId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiDeactivateAPIKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostDelegationAccount
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostDelegationAccountCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/governance/delegation"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostDelegationAccountValidateBeforeCall(String portfolioId, String walletId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPostDelegationAccount(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIPostDelegationAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostDelegationAccountCall(portfolioId, walletId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return CoinbaseEngPrimeApiApiPostDelegationAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostDelegationAccountResponse primeAPIPostDelegationAccount(String portfolioId, String walletId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostDelegationAccountResponse> resp = primeAPIPostDelegationAccountWithHttpInfo(portfolioId, walletId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostDelegationAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostDelegationAccountResponse> primeAPIPostDelegationAccountWithHttpInfo(String portfolioId, String walletId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostDelegationAccountValidateBeforeCall(portfolioId, walletId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostDelegationAccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostDelegationAccountAsync(String portfolioId, String walletId, final ApiCallback<CoinbaseEngPrimeApiApiPostDelegationAccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostDelegationAccountValidateBeforeCall(portfolioId, walletId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostDelegationAccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostDocumentSignature
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostDocumentSignatureCall(String vehicleId, String documentKey, CoinbaseEngPrimeApiApiPostDocumentSignatureRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/documents/{document_key}"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()))
            .replaceAll("\\{" + "document_key" + "\\}", apiClient.escapeString(documentKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostDocumentSignatureValidateBeforeCall(String vehicleId, String documentKey, CoinbaseEngPrimeApiApiPostDocumentSignatureRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIPostDocumentSignature(Async)");
        }
        
        // verify the required parameter 'documentKey' is set
        if (documentKey == null) {
            throw new ApiException("Missing the required parameter 'documentKey' when calling primeAPIPostDocumentSignature(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostDocumentSignature(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostDocumentSignatureCall(vehicleId, documentKey, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostDocumentSignatureResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostDocumentSignatureResponse primeAPIPostDocumentSignature(String vehicleId, String documentKey, CoinbaseEngPrimeApiApiPostDocumentSignatureRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostDocumentSignatureResponse> resp = primeAPIPostDocumentSignatureWithHttpInfo(vehicleId, documentKey, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostDocumentSignatureResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostDocumentSignatureResponse> primeAPIPostDocumentSignatureWithHttpInfo(String vehicleId, String documentKey, CoinbaseEngPrimeApiApiPostDocumentSignatureRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostDocumentSignatureValidateBeforeCall(vehicleId, documentKey, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostDocumentSignatureResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param documentKey  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostDocumentSignatureAsync(String vehicleId, String documentKey, CoinbaseEngPrimeApiApiPostDocumentSignatureRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostDocumentSignatureResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostDocumentSignatureValidateBeforeCall(vehicleId, documentKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostDocumentSignatureResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostEntitySettings
     * @param entityId  (required)
     * @param key  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostEntitySettingsCall(String entityId, String key, CoinbaseEngPrimeApiApiPostEntitySettingsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/entities/{entity_id}/settings/{key}"
            .replaceAll("\\{" + "entity_id" + "\\}", apiClient.escapeString(entityId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostEntitySettingsValidateBeforeCall(String entityId, String key, CoinbaseEngPrimeApiApiPostEntitySettingsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling primeAPIPostEntitySettings(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling primeAPIPostEntitySettings(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostEntitySettings(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostEntitySettingsCall(entityId, key, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param key  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostEntitySettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostEntitySettingsResponse primeAPIPostEntitySettings(String entityId, String key, CoinbaseEngPrimeApiApiPostEntitySettingsRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostEntitySettingsResponse> resp = primeAPIPostEntitySettingsWithHttpInfo(entityId, key, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param key  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostEntitySettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostEntitySettingsResponse> primeAPIPostEntitySettingsWithHttpInfo(String entityId, String key, CoinbaseEngPrimeApiApiPostEntitySettingsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostEntitySettingsValidateBeforeCall(entityId, key, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostEntitySettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId  (required)
     * @param key  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostEntitySettingsAsync(String entityId, String key, CoinbaseEngPrimeApiApiPostEntitySettingsRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostEntitySettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostEntitySettingsValidateBeforeCall(entityId, key, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostEntitySettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostFidoChallenge
     * @param userId User UUID. (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostFidoChallengeCall(String userId, CoinbaseEngPrimeApiApiPostFidoChallengeRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/users/{user_id}/fido/challenge"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostFidoChallengeValidateBeforeCall(String userId, CoinbaseEngPrimeApiApiPostFidoChallengeRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIPostFidoChallenge(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostFidoChallenge(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostFidoChallengeCall(userId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId User UUID. (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostFidoChallengeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostFidoChallengeResponse primeAPIPostFidoChallenge(String userId, CoinbaseEngPrimeApiApiPostFidoChallengeRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostFidoChallengeResponse> resp = primeAPIPostFidoChallengeWithHttpInfo(userId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId User UUID. (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostFidoChallengeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostFidoChallengeResponse> primeAPIPostFidoChallengeWithHttpInfo(String userId, CoinbaseEngPrimeApiApiPostFidoChallengeRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostFidoChallengeValidateBeforeCall(userId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostFidoChallengeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId User UUID. (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostFidoChallengeAsync(String userId, CoinbaseEngPrimeApiApiPostFidoChallengeRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostFidoChallengeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostFidoChallengeValidateBeforeCall(userId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostFidoChallengeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostFidoChallengeCreate
     * @param userId User UUID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostFidoChallengeCreateCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user_id}/fido/challenge/create"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostFidoChallengeCreateValidateBeforeCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIPostFidoChallengeCreate(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostFidoChallengeCreateCall(userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId User UUID. (required)
     * @return CoinbaseEngPrimeApiApiPostFidoChallengeCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostFidoChallengeCreateResponse primeAPIPostFidoChallengeCreate(String userId) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostFidoChallengeCreateResponse> resp = primeAPIPostFidoChallengeCreateWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId User UUID. (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostFidoChallengeCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostFidoChallengeCreateResponse> primeAPIPostFidoChallengeCreateWithHttpInfo(String userId) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostFidoChallengeCreateValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostFidoChallengeCreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId User UUID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostFidoChallengeCreateAsync(String userId, final ApiCallback<CoinbaseEngPrimeApiApiPostFidoChallengeCreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostFidoChallengeCreateValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostFidoChallengeCreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostFidoRegistration
     * @param userId User UUID. (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostFidoRegistrationCall(String userId, CoinbaseEngPrimeApiApiPostFidoRegistrationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/users/{user_id}/fido/register"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostFidoRegistrationValidateBeforeCall(String userId, CoinbaseEngPrimeApiApiPostFidoRegistrationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIPostFidoRegistration(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostFidoRegistration(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostFidoRegistrationCall(userId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId User UUID. (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostFidoRegistrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostFidoRegistrationResponse primeAPIPostFidoRegistration(String userId, CoinbaseEngPrimeApiApiPostFidoRegistrationRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostFidoRegistrationResponse> resp = primeAPIPostFidoRegistrationWithHttpInfo(userId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId User UUID. (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostFidoRegistrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostFidoRegistrationResponse> primeAPIPostFidoRegistrationWithHttpInfo(String userId, CoinbaseEngPrimeApiApiPostFidoRegistrationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostFidoRegistrationValidateBeforeCall(userId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostFidoRegistrationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId User UUID. (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostFidoRegistrationAsync(String userId, CoinbaseEngPrimeApiApiPostFidoRegistrationRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostFidoRegistrationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostFidoRegistrationValidateBeforeCall(userId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostFidoRegistrationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostGovernanceStatus
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostGovernanceStatusCall(String portfolioId, String walletId, CoinbaseEngPrimeApiApiPostGovernanceStatusRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/governance/status"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostGovernanceStatusValidateBeforeCall(String portfolioId, String walletId, CoinbaseEngPrimeApiApiPostGovernanceStatusRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPostGovernanceStatus(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIPostGovernanceStatus(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostGovernanceStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostGovernanceStatusCall(portfolioId, walletId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostGovernanceStatusResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostGovernanceStatusResponseBody primeAPIPostGovernanceStatus(String portfolioId, String walletId, CoinbaseEngPrimeApiApiPostGovernanceStatusRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostGovernanceStatusResponseBody> resp = primeAPIPostGovernanceStatusWithHttpInfo(portfolioId, walletId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostGovernanceStatusResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostGovernanceStatusResponseBody> primeAPIPostGovernanceStatusWithHttpInfo(String portfolioId, String walletId, CoinbaseEngPrimeApiApiPostGovernanceStatusRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostGovernanceStatusValidateBeforeCall(portfolioId, walletId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostGovernanceStatusResponseBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostGovernanceStatusAsync(String portfolioId, String walletId, CoinbaseEngPrimeApiApiPostGovernanceStatusRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostGovernanceStatusResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostGovernanceStatusValidateBeforeCall(portfolioId, walletId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostGovernanceStatusResponseBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostGovernanceVote
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostGovernanceVoteCall(String portfolioId, String walletId, CoinbaseEngPrimeApiApiPostGovernanceVoteRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/governance/votes"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostGovernanceVoteValidateBeforeCall(String portfolioId, String walletId, CoinbaseEngPrimeApiApiPostGovernanceVoteRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPostGovernanceVote(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIPostGovernanceVote(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostGovernanceVote(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostGovernanceVoteCall(portfolioId, walletId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostGovernanceVoteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostGovernanceVoteResponse primeAPIPostGovernanceVote(String portfolioId, String walletId, CoinbaseEngPrimeApiApiPostGovernanceVoteRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostGovernanceVoteResponse> resp = primeAPIPostGovernanceVoteWithHttpInfo(portfolioId, walletId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostGovernanceVoteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostGovernanceVoteResponse> primeAPIPostGovernanceVoteWithHttpInfo(String portfolioId, String walletId, CoinbaseEngPrimeApiApiPostGovernanceVoteRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostGovernanceVoteValidateBeforeCall(portfolioId, walletId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostGovernanceVoteResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostGovernanceVoteAsync(String portfolioId, String walletId, CoinbaseEngPrimeApiApiPostGovernanceVoteRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostGovernanceVoteResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostGovernanceVoteValidateBeforeCall(portfolioId, walletId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostGovernanceVoteResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostInvitation
     * @param portfolioId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostInvitationCall(String portfolioId, CoinbaseEngPrimeApiApiCreateInvitationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/invitations"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostInvitationValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiCreateInvitationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPostInvitation(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostInvitation(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostInvitationCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiNewConsensusActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiNewConsensusActivityResponse primeAPIPostInvitation(String portfolioId, CoinbaseEngPrimeApiApiCreateInvitationRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> resp = primeAPIPostInvitationWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiNewConsensusActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> primeAPIPostInvitationWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiCreateInvitationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostInvitationValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiNewConsensusActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostInvitationAsync(String portfolioId, CoinbaseEngPrimeApiApiCreateInvitationRequest body, final ApiCallback<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostInvitationValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiNewConsensusActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostNetAllocationPreview
     * @param sourcePortfolioId The ID of the source portfolio id (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostNetAllocationPreviewCall(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostNetAllocationPreviewRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{source_portfolio_id}/allocation/net_preview"
            .replaceAll("\\{" + "source_portfolio_id" + "\\}", apiClient.escapeString(sourcePortfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostNetAllocationPreviewValidateBeforeCall(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostNetAllocationPreviewRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sourcePortfolioId' is set
        if (sourcePortfolioId == null) {
            throw new ApiException("Missing the required parameter 'sourcePortfolioId' when calling primeAPIPostNetAllocationPreview(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostNetAllocationPreview(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostNetAllocationPreviewCall(sourcePortfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param sourcePortfolioId The ID of the source portfolio id (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse primeAPIPostNetAllocationPreview(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostNetAllocationPreviewRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse> resp = primeAPIPostNetAllocationPreviewWithHttpInfo(sourcePortfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param sourcePortfolioId The ID of the source portfolio id (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse> primeAPIPostNetAllocationPreviewWithHttpInfo(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostNetAllocationPreviewRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostNetAllocationPreviewValidateBeforeCall(sourcePortfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sourcePortfolioId The ID of the source portfolio id (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostNetAllocationPreviewAsync(String sourcePortfolioId, CoinbaseEngPrimeApiApiPostNetAllocationPreviewRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostNetAllocationPreviewValidateBeforeCall(sourcePortfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostNetAllocationPreviewResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostOrder
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostOrderCall(CoinbaseEngPrimeApiApiPostOrderRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostOrderValidateBeforeCall(CoinbaseEngPrimeApiApiPostOrderRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostOrderCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostOrderResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostOrderResponseBody primeAPIPostOrder(CoinbaseEngPrimeApiApiPostOrderRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostOrderResponseBody> resp = primeAPIPostOrderWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostOrderResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostOrderResponseBody> primeAPIPostOrderWithHttpInfo(CoinbaseEngPrimeApiApiPostOrderRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostOrderValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostOrderResponseBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostOrderAsync(CoinbaseEngPrimeApiApiPostOrderRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostOrderResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostOrderValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostOrderResponseBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostOrderPreview
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostOrderPreviewCall(CoinbaseEngPrimeApiApiPostOrderPreviewRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/order/preview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostOrderPreviewValidateBeforeCall(CoinbaseEngPrimeApiApiPostOrderPreviewRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostOrderPreview(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostOrderPreviewCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiOrderPreviewResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiOrderPreviewResponseBody primeAPIPostOrderPreview(CoinbaseEngPrimeApiApiPostOrderPreviewRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiOrderPreviewResponseBody> resp = primeAPIPostOrderPreviewWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiOrderPreviewResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiOrderPreviewResponseBody> primeAPIPostOrderPreviewWithHttpInfo(CoinbaseEngPrimeApiApiPostOrderPreviewRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostOrderPreviewValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiOrderPreviewResponseBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostOrderPreviewAsync(CoinbaseEngPrimeApiApiPostOrderPreviewRequest body, final ApiCallback<CoinbaseEngPrimeApiApiOrderPreviewResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostOrderPreviewValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiOrderPreviewResponseBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostPortfolioSettings
     * @param portfolioId  (required)
     * @param key  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostPortfolioSettingsCall(String portfolioId, String key, CoinbaseEngPrimeApiApiPostPortfolioSettingsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/settings/{key}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostPortfolioSettingsValidateBeforeCall(String portfolioId, String key, CoinbaseEngPrimeApiApiPostPortfolioSettingsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPostPortfolioSettings(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling primeAPIPostPortfolioSettings(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostPortfolioSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostPortfolioSettingsCall(portfolioId, key, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param key  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostPortfolioSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostPortfolioSettingsResponse primeAPIPostPortfolioSettings(String portfolioId, String key, CoinbaseEngPrimeApiApiPostPortfolioSettingsRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostPortfolioSettingsResponse> resp = primeAPIPostPortfolioSettingsWithHttpInfo(portfolioId, key, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param key  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostPortfolioSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostPortfolioSettingsResponse> primeAPIPostPortfolioSettingsWithHttpInfo(String portfolioId, String key, CoinbaseEngPrimeApiApiPostPortfolioSettingsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostPortfolioSettingsValidateBeforeCall(portfolioId, key, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostPortfolioSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param key  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostPortfolioSettingsAsync(String portfolioId, String key, CoinbaseEngPrimeApiApiPostPortfolioSettingsRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostPortfolioSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostPortfolioSettingsValidateBeforeCall(portfolioId, key, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostPortfolioSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostPreviewUserChange
     * @param portfolioId  (required)
     * @param userId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostPreviewUserChangeCall(String portfolioId, String userId, CoinbaseEngPrimeApiApiPostPreviewUserChangeRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/users/{user_id}/preview_user_change"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostPreviewUserChangeValidateBeforeCall(String portfolioId, String userId, CoinbaseEngPrimeApiApiPostPreviewUserChangeRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPostPreviewUserChange(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIPostPreviewUserChange(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostPreviewUserChange(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostPreviewUserChangeCall(portfolioId, userId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param userId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostPreviewUserChangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostPreviewUserChangeResponse primeAPIPostPreviewUserChange(String portfolioId, String userId, CoinbaseEngPrimeApiApiPostPreviewUserChangeRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostPreviewUserChangeResponse> resp = primeAPIPostPreviewUserChangeWithHttpInfo(portfolioId, userId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param userId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostPreviewUserChangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostPreviewUserChangeResponse> primeAPIPostPreviewUserChangeWithHttpInfo(String portfolioId, String userId, CoinbaseEngPrimeApiApiPostPreviewUserChangeRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostPreviewUserChangeValidateBeforeCall(portfolioId, userId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostPreviewUserChangeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param userId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostPreviewUserChangeAsync(String portfolioId, String userId, CoinbaseEngPrimeApiApiPostPreviewUserChangeRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostPreviewUserChangeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostPreviewUserChangeValidateBeforeCall(portfolioId, userId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostPreviewUserChangeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostPushNotificationDeviceDeregistration
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostPushNotificationDeviceDeregistrationCall(CoinbaseEngPrimeApiApiPostPushNotificationDeviceDeregistrationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/notifications/push/device_deregistration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostPushNotificationDeviceDeregistrationValidateBeforeCall(CoinbaseEngPrimeApiApiPostPushNotificationDeviceDeregistrationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostPushNotificationDeviceDeregistration(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostPushNotificationDeviceDeregistrationCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object primeAPIPostPushNotificationDeviceDeregistration(CoinbaseEngPrimeApiApiPostPushNotificationDeviceDeregistrationRequest body) throws ApiException {
        ApiResponse<Object> resp = primeAPIPostPushNotificationDeviceDeregistrationWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> primeAPIPostPushNotificationDeviceDeregistrationWithHttpInfo(CoinbaseEngPrimeApiApiPostPushNotificationDeviceDeregistrationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostPushNotificationDeviceDeregistrationValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostPushNotificationDeviceDeregistrationAsync(CoinbaseEngPrimeApiApiPostPushNotificationDeviceDeregistrationRequest body, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostPushNotificationDeviceDeregistrationValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostPushNotificationDeviceRegistration
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostPushNotificationDeviceRegistrationCall(CoinbaseEngPrimeApiApiPostPushNotificationDeviceRegistrationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/notifications/push/device_registration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostPushNotificationDeviceRegistrationValidateBeforeCall(CoinbaseEngPrimeApiApiPostPushNotificationDeviceRegistrationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostPushNotificationDeviceRegistration(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostPushNotificationDeviceRegistrationCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object primeAPIPostPushNotificationDeviceRegistration(CoinbaseEngPrimeApiApiPostPushNotificationDeviceRegistrationRequest body) throws ApiException {
        ApiResponse<Object> resp = primeAPIPostPushNotificationDeviceRegistrationWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> primeAPIPostPushNotificationDeviceRegistrationWithHttpInfo(CoinbaseEngPrimeApiApiPostPushNotificationDeviceRegistrationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostPushNotificationDeviceRegistrationValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostPushNotificationDeviceRegistrationAsync(CoinbaseEngPrimeApiApiPostPushNotificationDeviceRegistrationRequest body, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostPushNotificationDeviceRegistrationValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostRejectPortfolioActivity
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostRejectPortfolioActivityCall(String portfolioId, String activityId, CoinbaseEngPrimeApiApiPostRejectPortfolioActivityRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/activities/{activity_id}/reject"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostRejectPortfolioActivityValidateBeforeCall(String portfolioId, String activityId, CoinbaseEngPrimeApiApiPostRejectPortfolioActivityRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPostRejectPortfolioActivity(Async)");
        }
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling primeAPIPostRejectPortfolioActivity(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostRejectPortfolioActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostRejectPortfolioActivityCall(portfolioId, activityId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostRejectPortfolioActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostRejectPortfolioActivityResponse primeAPIPostRejectPortfolioActivity(String portfolioId, String activityId, CoinbaseEngPrimeApiApiPostRejectPortfolioActivityRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostRejectPortfolioActivityResponse> resp = primeAPIPostRejectPortfolioActivityWithHttpInfo(portfolioId, activityId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostRejectPortfolioActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostRejectPortfolioActivityResponse> primeAPIPostRejectPortfolioActivityWithHttpInfo(String portfolioId, String activityId, CoinbaseEngPrimeApiApiPostRejectPortfolioActivityRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostRejectPortfolioActivityValidateBeforeCall(portfolioId, activityId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostRejectPortfolioActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostRejectPortfolioActivityAsync(String portfolioId, String activityId, CoinbaseEngPrimeApiApiPostRejectPortfolioActivityRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostRejectPortfolioActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostRejectPortfolioActivityValidateBeforeCall(portfolioId, activityId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostRejectPortfolioActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostRejectVehicleActivity
     * @param vehicleId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostRejectVehicleActivityCall(String vehicleId, String activityId, CoinbaseEngPrimeApiApiPostRejectVehicleActivityRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/activities/{activity_id}/reject"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()))
            .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostRejectVehicleActivityValidateBeforeCall(String vehicleId, String activityId, CoinbaseEngPrimeApiApiPostRejectVehicleActivityRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIPostRejectVehicleActivity(Async)");
        }
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling primeAPIPostRejectVehicleActivity(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostRejectVehicleActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostRejectVehicleActivityCall(vehicleId, activityId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostRejectVehicleActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostRejectVehicleActivityResponse primeAPIPostRejectVehicleActivity(String vehicleId, String activityId, CoinbaseEngPrimeApiApiPostRejectVehicleActivityRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostRejectVehicleActivityResponse> resp = primeAPIPostRejectVehicleActivityWithHttpInfo(vehicleId, activityId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostRejectVehicleActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostRejectVehicleActivityResponse> primeAPIPostRejectVehicleActivityWithHttpInfo(String vehicleId, String activityId, CoinbaseEngPrimeApiApiPostRejectVehicleActivityRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostRejectVehicleActivityValidateBeforeCall(vehicleId, activityId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostRejectVehicleActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param activityId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostRejectVehicleActivityAsync(String vehicleId, String activityId, CoinbaseEngPrimeApiApiPostRejectVehicleActivityRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostRejectVehicleActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostRejectVehicleActivityValidateBeforeCall(vehicleId, activityId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostRejectVehicleActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostReverseAllocation
     * @param portfolioId The ID of the portfolio of the allocation (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostReverseAllocationCall(String portfolioId, CoinbaseEngPrimeApiApiPostReverseAllocationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/allocation/reverse"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostReverseAllocationValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiPostReverseAllocationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPostReverseAllocation(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostReverseAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostReverseAllocationCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio of the allocation (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostAllocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostAllocationResponse primeAPIPostReverseAllocation(String portfolioId, CoinbaseEngPrimeApiApiPostReverseAllocationRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostAllocationResponse> resp = primeAPIPostReverseAllocationWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The ID of the portfolio of the allocation (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostAllocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostAllocationResponse> primeAPIPostReverseAllocationWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiPostReverseAllocationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostReverseAllocationValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostAllocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The ID of the portfolio of the allocation (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostReverseAllocationAsync(String portfolioId, CoinbaseEngPrimeApiApiPostReverseAllocationRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostAllocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostReverseAllocationValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostAllocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostUpdateBillingAddress
     * @param vehicleId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostUpdateBillingAddressCall(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingAddressRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/billing_address"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostUpdateBillingAddressValidateBeforeCall(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingAddressRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIPostUpdateBillingAddress(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostUpdateBillingAddress(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostUpdateBillingAddressCall(vehicleId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostUpdateBillingAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostUpdateBillingAddressResponse primeAPIPostUpdateBillingAddress(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingAddressRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostUpdateBillingAddressResponse> resp = primeAPIPostUpdateBillingAddressWithHttpInfo(vehicleId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostUpdateBillingAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostUpdateBillingAddressResponse> primeAPIPostUpdateBillingAddressWithHttpInfo(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingAddressRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostUpdateBillingAddressValidateBeforeCall(vehicleId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostUpdateBillingAddressResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostUpdateBillingAddressAsync(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingAddressRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostUpdateBillingAddressResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostUpdateBillingAddressValidateBeforeCall(vehicleId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostUpdateBillingAddressResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostUpdateBillingEmailList
     * @param vehicleId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostUpdateBillingEmailListCall(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingEmailListRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/email_list"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostUpdateBillingEmailListValidateBeforeCall(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingEmailListRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIPostUpdateBillingEmailList(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostUpdateBillingEmailList(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostUpdateBillingEmailListCall(vehicleId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPostUpdateBillingEmailListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPostUpdateBillingEmailListResponse primeAPIPostUpdateBillingEmailList(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingEmailListRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPostUpdateBillingEmailListResponse> resp = primeAPIPostUpdateBillingEmailListWithHttpInfo(vehicleId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPostUpdateBillingEmailListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPostUpdateBillingEmailListResponse> primeAPIPostUpdateBillingEmailListWithHttpInfo(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingEmailListRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostUpdateBillingEmailListValidateBeforeCall(vehicleId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostUpdateBillingEmailListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostUpdateBillingEmailListAsync(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingEmailListRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPostUpdateBillingEmailListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostUpdateBillingEmailListValidateBeforeCall(vehicleId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPostUpdateBillingEmailListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostUpdateBillingPreference
     * @param vehicleId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostUpdateBillingPreferenceCall(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingPreferenceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{vehicle_id}/billing_preference"
            .replaceAll("\\{" + "vehicle_id" + "\\}", apiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostUpdateBillingPreferenceValidateBeforeCall(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingPreferenceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling primeAPIPostUpdateBillingPreference(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostUpdateBillingPreference(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostUpdateBillingPreferenceCall(vehicleId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiNewConsensusActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiNewConsensusActivityResponse primeAPIPostUpdateBillingPreference(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingPreferenceRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> resp = primeAPIPostUpdateBillingPreferenceWithHttpInfo(vehicleId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiNewConsensusActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> primeAPIPostUpdateBillingPreferenceWithHttpInfo(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingPreferenceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostUpdateBillingPreferenceValidateBeforeCall(vehicleId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiNewConsensusActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vehicleId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostUpdateBillingPreferenceAsync(String vehicleId, CoinbaseEngPrimeApiApiPostUpdateBillingPreferenceRequest body, final ApiCallback<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostUpdateBillingPreferenceValidateBeforeCall(vehicleId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiNewConsensusActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostUserInAppNotificationStatuses
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostUserInAppNotificationStatusesCall(CoinbaseEngPrimeApiApiPostUserInAppNotificationStatusesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/notifications/in-app/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostUserInAppNotificationStatusesValidateBeforeCall(CoinbaseEngPrimeApiApiPostUserInAppNotificationStatusesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostUserInAppNotificationStatuses(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostUserInAppNotificationStatusesCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object primeAPIPostUserInAppNotificationStatuses(CoinbaseEngPrimeApiApiPostUserInAppNotificationStatusesRequest body) throws ApiException {
        ApiResponse<Object> resp = primeAPIPostUserInAppNotificationStatusesWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> primeAPIPostUserInAppNotificationStatusesWithHttpInfo(CoinbaseEngPrimeApiApiPostUserInAppNotificationStatusesRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostUserInAppNotificationStatusesValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostUserInAppNotificationStatusesAsync(CoinbaseEngPrimeApiApiPostUserInAppNotificationStatusesRequest body, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostUserInAppNotificationStatusesValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostUserPreferences
     * @param userId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostUserPreferencesCall(String userId, CoinbaseEngPrimeApiApiPostUserPreferencesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/users/{user_id}/preferences"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostUserPreferencesValidateBeforeCall(String userId, CoinbaseEngPrimeApiApiPostUserPreferencesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIPostUserPreferences(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostUserPreferences(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostUserPreferencesCall(userId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiUserPreferences
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiUserPreferences primeAPIPostUserPreferences(String userId, CoinbaseEngPrimeApiApiPostUserPreferencesRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiUserPreferences> resp = primeAPIPostUserPreferencesWithHttpInfo(userId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiUserPreferences&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiUserPreferences> primeAPIPostUserPreferencesWithHttpInfo(String userId, CoinbaseEngPrimeApiApiPostUserPreferencesRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostUserPreferencesValidateBeforeCall(userId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiUserPreferences>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostUserPreferencesAsync(String userId, CoinbaseEngPrimeApiApiPostUserPreferencesRequest body, final ApiCallback<CoinbaseEngPrimeApiApiUserPreferences> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostUserPreferencesValidateBeforeCall(userId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiUserPreferences>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostUserUpdate
     * @param portfolioId  (required)
     * @param userId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostUserUpdateCall(String portfolioId, String userId, CoinbaseEngPrimeApiApiPostUserUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/users/{user_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostUserUpdateValidateBeforeCall(String portfolioId, String userId, CoinbaseEngPrimeApiApiPostUserUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPostUserUpdate(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIPostUserUpdate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostUserUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostUserUpdateCall(portfolioId, userId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param userId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiNewConsensusActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiNewConsensusActivityResponse primeAPIPostUserUpdate(String portfolioId, String userId, CoinbaseEngPrimeApiApiPostUserUpdateRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> resp = primeAPIPostUserUpdateWithHttpInfo(portfolioId, userId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param userId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiNewConsensusActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> primeAPIPostUserUpdateWithHttpInfo(String portfolioId, String userId, CoinbaseEngPrimeApiApiPostUserUpdateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostUserUpdateValidateBeforeCall(portfolioId, userId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiNewConsensusActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param userId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostUserUpdateAsync(String portfolioId, String userId, CoinbaseEngPrimeApiApiPostUserUpdateRequest body, final ApiCallback<CoinbaseEngPrimeApiApiNewConsensusActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostUserUpdateValidateBeforeCall(portfolioId, userId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiNewConsensusActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostValidateAddress
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostValidateAddressCall(CoinbaseEngPrimeApiApiValidateAddressRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/address/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostValidateAddressValidateBeforeCall(CoinbaseEngPrimeApiApiValidateAddressRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostValidateAddress(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostValidateAddressCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiValidateAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiValidateAddressResponse primeAPIPostValidateAddress(CoinbaseEngPrimeApiApiValidateAddressRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiValidateAddressResponse> resp = primeAPIPostValidateAddressWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiValidateAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiValidateAddressResponse> primeAPIPostValidateAddressWithHttpInfo(CoinbaseEngPrimeApiApiValidateAddressRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostValidateAddressValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiValidateAddressResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostValidateAddressAsync(CoinbaseEngPrimeApiApiValidateAddressRequest body, final ApiCallback<CoinbaseEngPrimeApiApiValidateAddressResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostValidateAddressValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiValidateAddressResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPostValidateCounterparty
     * @param counterpartyId counterparty_id (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostValidateCounterpartyCall(String counterpartyId, CoinbaseEngPrimeApiApiValidateCounterpartyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/counterparties/{counterparty_id}/validate"
            .replaceAll("\\{" + "counterparty_id" + "\\}", apiClient.escapeString(counterpartyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPostValidateCounterpartyValidateBeforeCall(String counterpartyId, CoinbaseEngPrimeApiApiValidateCounterpartyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'counterpartyId' is set
        if (counterpartyId == null) {
            throw new ApiException("Missing the required parameter 'counterpartyId' when calling primeAPIPostValidateCounterparty(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPostValidateCounterparty(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPostValidateCounterpartyCall(counterpartyId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param counterpartyId counterparty_id (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiValidateCounterpartyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiValidateCounterpartyResponse primeAPIPostValidateCounterparty(String counterpartyId, CoinbaseEngPrimeApiApiValidateCounterpartyRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiValidateCounterpartyResponse> resp = primeAPIPostValidateCounterpartyWithHttpInfo(counterpartyId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param counterpartyId counterparty_id (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiValidateCounterpartyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiValidateCounterpartyResponse> primeAPIPostValidateCounterpartyWithHttpInfo(String counterpartyId, CoinbaseEngPrimeApiApiValidateCounterpartyRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPostValidateCounterpartyValidateBeforeCall(counterpartyId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiValidateCounterpartyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param counterpartyId counterparty_id (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPostValidateCounterpartyAsync(String counterpartyId, CoinbaseEngPrimeApiApiValidateCounterpartyRequest body, final ApiCallback<CoinbaseEngPrimeApiApiValidateCounterpartyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPostValidateCounterpartyValidateBeforeCall(counterpartyId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiValidateCounterpartyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIPreviewTransaction
     * @param portfolioId The portfolio you want to transact with (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIPreviewTransactionCall(String portfolioId, CoinbaseEngPrimeApiApiPreviewTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/transactions/preview"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIPreviewTransactionValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiPreviewTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIPreviewTransaction(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIPreviewTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIPreviewTransactionCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId The portfolio you want to transact with (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiPreviewTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiPreviewTransactionResponse primeAPIPreviewTransaction(String portfolioId, CoinbaseEngPrimeApiApiPreviewTransactionRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiPreviewTransactionResponse> resp = primeAPIPreviewTransactionWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId The portfolio you want to transact with (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiPreviewTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiPreviewTransactionResponse> primeAPIPreviewTransactionWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiPreviewTransactionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIPreviewTransactionValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPreviewTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId The portfolio you want to transact with (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIPreviewTransactionAsync(String portfolioId, CoinbaseEngPrimeApiApiPreviewTransactionRequest body, final ApiCallback<CoinbaseEngPrimeApiApiPreviewTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIPreviewTransactionValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiPreviewTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPISignalWeb3Action
     * @param portfolioId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPISignalWeb3ActionCall(String portfolioId, CoinbaseEngPrimeApiApiSignalWeb3ActionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/portfolios/{portfolio_id}/web3_actions/signal"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPISignalWeb3ActionValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiSignalWeb3ActionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPISignalWeb3Action(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPISignalWeb3Action(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPISignalWeb3ActionCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiSignalWeb3ActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiSignalWeb3ActionResponse primeAPISignalWeb3Action(String portfolioId, CoinbaseEngPrimeApiApiSignalWeb3ActionRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiSignalWeb3ActionResponse> resp = primeAPISignalWeb3ActionWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiSignalWeb3ActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiSignalWeb3ActionResponse> primeAPISignalWeb3ActionWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiSignalWeb3ActionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPISignalWeb3ActionValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiSignalWeb3ActionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPISignalWeb3ActionAsync(String portfolioId, CoinbaseEngPrimeApiApiSignalWeb3ActionRequest body, final ApiCallback<CoinbaseEngPrimeApiApiSignalWeb3ActionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPISignalWeb3ActionValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiSignalWeb3ActionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPISubmitDALRecall
     * @param entityId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPISubmitDALRecallCall(String entityId, CoinbaseFinancingSubmitDALRecallRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{entity_id}/submit_recall"
            .replaceAll("\\{" + "entity_id" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPISubmitDALRecallValidateBeforeCall(String entityId, CoinbaseFinancingSubmitDALRecallRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling primeAPISubmitDALRecall(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPISubmitDALRecall(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPISubmitDALRecallCall(entityId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param body  (required)
     * @return CoinbaseFinancingSubmitDALRecallResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseFinancingSubmitDALRecallResponse primeAPISubmitDALRecall(String entityId, CoinbaseFinancingSubmitDALRecallRequest body) throws ApiException {
        ApiResponse<CoinbaseFinancingSubmitDALRecallResponse> resp = primeAPISubmitDALRecallWithHttpInfo(entityId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseFinancingSubmitDALRecallResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseFinancingSubmitDALRecallResponse> primeAPISubmitDALRecallWithHttpInfo(String entityId, CoinbaseFinancingSubmitDALRecallRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPISubmitDALRecallValidateBeforeCall(entityId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingSubmitDALRecallResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPISubmitDALRecallAsync(String entityId, CoinbaseFinancingSubmitDALRecallRequest body, final ApiCallback<CoinbaseFinancingSubmitDALRecallResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPISubmitDALRecallValidateBeforeCall(entityId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingSubmitDALRecallResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPISubmitLocates
     * @param entityId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPISubmitLocatesCall(String entityId, CoinbaseFinancingSubmitLocatesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{entity_id}/pm/locates"
            .replaceAll("\\{" + "entity_id" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPISubmitLocatesValidateBeforeCall(String entityId, CoinbaseFinancingSubmitLocatesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling primeAPISubmitLocates(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPISubmitLocates(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPISubmitLocatesCall(entityId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param body  (required)
     * @return CoinbaseFinancingSubmitLocatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseFinancingSubmitLocatesResponse primeAPISubmitLocates(String entityId, CoinbaseFinancingSubmitLocatesRequest body) throws ApiException {
        ApiResponse<CoinbaseFinancingSubmitLocatesResponse> resp = primeAPISubmitLocatesWithHttpInfo(entityId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseFinancingSubmitLocatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseFinancingSubmitLocatesResponse> primeAPISubmitLocatesWithHttpInfo(String entityId, CoinbaseFinancingSubmitLocatesRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPISubmitLocatesValidateBeforeCall(entityId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingSubmitLocatesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPISubmitLocatesAsync(String entityId, CoinbaseFinancingSubmitLocatesRequest body, final ApiCallback<CoinbaseFinancingSubmitLocatesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPISubmitLocatesValidateBeforeCall(entityId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingSubmitLocatesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPISubmitMultipleLocates
     * @param entityId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPISubmitMultipleLocatesCall(String entityId, CoinbaseFinancingSubmitMultipleLocatesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vehicles/{entity_id}/pm/multiple_locates"
            .replaceAll("\\{" + "entity_id" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPISubmitMultipleLocatesValidateBeforeCall(String entityId, CoinbaseFinancingSubmitMultipleLocatesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling primeAPISubmitMultipleLocates(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPISubmitMultipleLocates(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPISubmitMultipleLocatesCall(entityId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param body  (required)
     * @return CoinbaseFinancingSubmitMultipleLocatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseFinancingSubmitMultipleLocatesResponse primeAPISubmitMultipleLocates(String entityId, CoinbaseFinancingSubmitMultipleLocatesRequest body) throws ApiException {
        ApiResponse<CoinbaseFinancingSubmitMultipleLocatesResponse> resp = primeAPISubmitMultipleLocatesWithHttpInfo(entityId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseFinancingSubmitMultipleLocatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseFinancingSubmitMultipleLocatesResponse> primeAPISubmitMultipleLocatesWithHttpInfo(String entityId, CoinbaseFinancingSubmitMultipleLocatesRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPISubmitMultipleLocatesValidateBeforeCall(entityId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingSubmitMultipleLocatesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPISubmitMultipleLocatesAsync(String entityId, CoinbaseFinancingSubmitMultipleLocatesRequest body, final ApiCallback<CoinbaseFinancingSubmitMultipleLocatesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPISubmitMultipleLocatesValidateBeforeCall(entityId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseFinancingSubmitMultipleLocatesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIUpdateNotificationPreferencesForChannel
     * @param userId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIUpdateNotificationPreferencesForChannelCall(String userId, CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/notification_preferences/{user_id}/update"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIUpdateNotificationPreferencesForChannelValidateBeforeCall(String userId, CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling primeAPIUpdateNotificationPreferencesForChannel(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIUpdateNotificationPreferencesForChannel(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIUpdateNotificationPreferencesForChannelCall(userId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelResponse primeAPIUpdateNotificationPreferencesForChannel(String userId, CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelResponse> resp = primeAPIUpdateNotificationPreferencesForChannelWithHttpInfo(userId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelResponse> primeAPIUpdateNotificationPreferencesForChannelWithHttpInfo(String userId, CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIUpdateNotificationPreferencesForChannelValidateBeforeCall(userId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIUpdateNotificationPreferencesForChannelAsync(String userId, CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelRequest body, final ApiCallback<CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIUpdateNotificationPreferencesForChannelValidateBeforeCall(userId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiUpdateUserPreferencesForChannelResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIUpdateWalletAssetSettings
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIUpdateWalletAssetSettingsCall(String portfolioId, String walletId, CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/asset_settings"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIUpdateWalletAssetSettingsValidateBeforeCall(String portfolioId, String walletId, CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIUpdateWalletAssetSettings(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIUpdateWalletAssetSettings(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIUpdateWalletAssetSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIUpdateWalletAssetSettingsCall(portfolioId, walletId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsResponse primeAPIUpdateWalletAssetSettings(String portfolioId, String walletId, CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsResponse> resp = primeAPIUpdateWalletAssetSettingsWithHttpInfo(portfolioId, walletId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsResponse> primeAPIUpdateWalletAssetSettingsWithHttpInfo(String portfolioId, String walletId, CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIUpdateWalletAssetSettingsValidateBeforeCall(portfolioId, walletId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIUpdateWalletAssetSettingsAsync(String portfolioId, String walletId, CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsRequest body, final ApiCallback<CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIUpdateWalletAssetSettingsValidateBeforeCall(portfolioId, walletId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiUpdateWalletAssetSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIUpdateWalletName
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIUpdateWalletNameCall(String portfolioId, String walletId, CoinbaseEngPrimeApiApiUpdateWalletNameRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "wallet_id" + "\\}", apiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIUpdateWalletNameValidateBeforeCall(String portfolioId, String walletId, CoinbaseEngPrimeApiApiUpdateWalletNameRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIUpdateWalletName(Async)");
        }
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling primeAPIUpdateWalletName(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIUpdateWalletName(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIUpdateWalletNameCall(portfolioId, walletId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiUpdateWalletNameResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiUpdateWalletNameResponse primeAPIUpdateWalletName(String portfolioId, String walletId, CoinbaseEngPrimeApiApiUpdateWalletNameRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiUpdateWalletNameResponse> resp = primeAPIUpdateWalletNameWithHttpInfo(portfolioId, walletId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiUpdateWalletNameResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiUpdateWalletNameResponse> primeAPIUpdateWalletNameWithHttpInfo(String portfolioId, String walletId, CoinbaseEngPrimeApiApiUpdateWalletNameRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIUpdateWalletNameValidateBeforeCall(portfolioId, walletId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiUpdateWalletNameResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param walletId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIUpdateWalletNameAsync(String portfolioId, String walletId, CoinbaseEngPrimeApiApiUpdateWalletNameRequest body, final ApiCallback<CoinbaseEngPrimeApiApiUpdateWalletNameResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIUpdateWalletNameValidateBeforeCall(portfolioId, walletId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiUpdateWalletNameResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIUpdateWeb3Device
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIUpdateWeb3DeviceCall(CoinbaseEngPrimeApiApiUpdateWeb3DeviceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/web3_device";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIUpdateWeb3DeviceValidateBeforeCall(CoinbaseEngPrimeApiApiUpdateWeb3DeviceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIUpdateWeb3Device(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIUpdateWeb3DeviceCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiUpdateWeb3DeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiUpdateWeb3DeviceResponse primeAPIUpdateWeb3Device(CoinbaseEngPrimeApiApiUpdateWeb3DeviceRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiUpdateWeb3DeviceResponse> resp = primeAPIUpdateWeb3DeviceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiUpdateWeb3DeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiUpdateWeb3DeviceResponse> primeAPIUpdateWeb3DeviceWithHttpInfo(CoinbaseEngPrimeApiApiUpdateWeb3DeviceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIUpdateWeb3DeviceValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiUpdateWeb3DeviceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIUpdateWeb3DeviceAsync(CoinbaseEngPrimeApiApiUpdateWeb3DeviceRequest body, final ApiCallback<CoinbaseEngPrimeApiApiUpdateWeb3DeviceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIUpdateWeb3DeviceValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiUpdateWeb3DeviceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIUpsertPolicyChange
     * @param portfolioId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIUpsertPolicyChangeCall(String portfolioId, CoinbaseEngPrimeApiApiUpsertPolicyChangeRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/policies"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIUpsertPolicyChangeValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiUpsertPolicyChangeRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIUpsertPolicyChange(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIUpsertPolicyChange(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIUpsertPolicyChangeCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiUpsertPolicyChangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiUpsertPolicyChangeResponse primeAPIUpsertPolicyChange(String portfolioId, CoinbaseEngPrimeApiApiUpsertPolicyChangeRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiUpsertPolicyChangeResponse> resp = primeAPIUpsertPolicyChangeWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiUpsertPolicyChangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiUpsertPolicyChangeResponse> primeAPIUpsertPolicyChangeWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiUpsertPolicyChangeRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIUpsertPolicyChangeValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiUpsertPolicyChangeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIUpsertPolicyChangeAsync(String portfolioId, CoinbaseEngPrimeApiApiUpsertPolicyChangeRequest body, final ApiCallback<CoinbaseEngPrimeApiApiUpsertPolicyChangeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIUpsertPolicyChangeValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiUpsertPolicyChangeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIValidateWeb3Authorization
     * @param portfolioId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIValidateWeb3AuthorizationCall(String portfolioId, CoinbaseEngPrimeApiApiValidateWeb3AuthorizationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/portfolios/{portfolio_id}/web3/validate"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIValidateWeb3AuthorizationValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiValidateWeb3AuthorizationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIValidateWeb3Authorization(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIValidateWeb3Authorization(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIValidateWeb3AuthorizationCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiValidateWeb3AuthorizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiValidateWeb3AuthorizationResponse primeAPIValidateWeb3Authorization(String portfolioId, CoinbaseEngPrimeApiApiValidateWeb3AuthorizationRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiValidateWeb3AuthorizationResponse> resp = primeAPIValidateWeb3AuthorizationWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiValidateWeb3AuthorizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiValidateWeb3AuthorizationResponse> primeAPIValidateWeb3AuthorizationWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiValidateWeb3AuthorizationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIValidateWeb3AuthorizationValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiValidateWeb3AuthorizationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIValidateWeb3AuthorizationAsync(String portfolioId, CoinbaseEngPrimeApiApiValidateWeb3AuthorizationRequest body, final ApiCallback<CoinbaseEngPrimeApiApiValidateWeb3AuthorizationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIValidateWeb3AuthorizationValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiValidateWeb3AuthorizationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for primeAPIValidateWeb3SecurityKey
     * @param portfolioId  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primeAPIValidateWeb3SecurityKeyCall(String portfolioId, CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/portfolios/{portfolio_id}/web3_actions/validate_security_key"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primeAPIValidateWeb3SecurityKeyValidateBeforeCall(String portfolioId, CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling primeAPIValidateWeb3SecurityKey(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primeAPIValidateWeb3SecurityKey(Async)");
        }
        

        com.squareup.okhttp.Call call = primeAPIValidateWeb3SecurityKeyCall(portfolioId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyResponse primeAPIValidateWeb3SecurityKey(String portfolioId, CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyRequest body) throws ApiException {
        ApiResponse<CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyResponse> resp = primeAPIValidateWeb3SecurityKeyWithHttpInfo(portfolioId, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyResponse> primeAPIValidateWeb3SecurityKeyWithHttpInfo(String portfolioId, CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyRequest body) throws ApiException {
        com.squareup.okhttp.Call call = primeAPIValidateWeb3SecurityKeyValidateBeforeCall(portfolioId, body, null, null);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioId  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primeAPIValidateWeb3SecurityKeyAsync(String portfolioId, CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyRequest body, final ApiCallback<CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primeAPIValidateWeb3SecurityKeyValidateBeforeCall(portfolioId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinbaseEngPrimeApiApiValidateWeb3SecurityKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
