{
  "swagger": "2.0",
  "info": {
    "title": "Coinbase Prime REST API",
    "version": "1.0"
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/activities/action/bulk": {
      "post": {
        "operationId": "PrimeAPI_PostBulkActionActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostBulkActionActivitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostBulkActionActivitiesRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/address/validate": {
      "post": {
        "operationId": "PrimeAPI_PostValidateAddress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ValidateAddressResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ValidateAddressRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/balances": {
      "get": {
        "operationId": "PrimeAPI_GetBalances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetBalancesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "balance_owner.reference_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "balance_owner.prime_wallet",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PRIME_WALLET_BALANCE_TYPE_UNSPECIFIED",
              "PRIME_WALLET_BALANCE_TYPE_WEB3_WALLET"
            ],
            "default": "PRIME_WALLET_BALANCE_TYPE_UNSPECIFIED"
          },
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VISIBILITY_STATUS_UNSPECIFIED",
                "VISIBILITY_STATUS_VISIBLE",
                "VISIBILITY_STATUS_HIDDEN",
                "VISIBILITY_STATUS_SPAM"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/configs/{name}": {
      "get": {
        "operationId": "PrimeAPI_GetConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.Config"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Get the config with a specific name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/counterparties/{counterparty_id}/validate": {
      "post": {
        "operationId": "PrimeAPI_PostValidateCounterparty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ValidateCounterpartyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "counterparty_id",
            "description": "counterparty_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ValidateCounterpartyRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/currencies": {
      "get": {
        "operationId": "PrimeAPI_GetCurrenciesInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetCurrenciesInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "query_level",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CURRENCY_INFO_QUERY_LEVEL_UNSPECIFIED",
              "CURRENCY_INFO_QUERY_LEVEL_PORTFOLIO"
            ],
            "default": "CURRENCY_INFO_QUERY_LEVEL_UNSPECIFIED"
          },
          {
            "name": "query_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/device_groups": {
      "get": {
        "operationId": "PrimeAPI_ListDeviceGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListDeviceGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "list_level",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "LIST_LEVEL_UNSPECIFIED",
              "LIST_LEVEL_PORTFOLIO",
              "LIST_LEVEL_ENTITY",
              "LIST_LEVEL_ORGANIZATION"
            ],
            "default": "LIST_LEVEL_UNSPECIFIED"
          },
          {
            "name": "list_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/entities/{entity_id}/policies": {
      "get": {
        "operationId": "PrimeAPI_ListBulkPoliciesForEntity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListBulkPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/entities/{entity_id}/settings": {
      "get": {
        "operationId": "PrimeAPI_GetEntitySettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/coinbase.custody.api.Settings"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/entities/{entity_id}/settings/{key}": {
      "post": {
        "operationId": "PrimeAPI_PostEntitySettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostEntitySettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "SETTINGS_KEY_UNKNOWN",
              "SETTINGS_KEY_CONSENSUS_WITHDRAWAL",
              "SETTINGS_KEY_MAX_WITHDRAWAL_AMOUNT",
              "SETTINGS_KEY_TRUSTED_ADDRESS_PROTECTION",
              "SETTINGS_KEY_MULTI_WALLETS",
              "SETTINGS_KEY_API_KEY_GENERATION",
              "SETTINGS_KEY_CONSENSUS_ONE",
              "SETTINGS_KEY_SIGN_STAKING_ADDENDUM",
              "SETTINGS_KEY_GOVERNANCE_VOTE_CONSENSUS",
              "SETTINGS_KEY_REQUIRED_APPROVAL",
              "SETTINGS_KEY_VIDEO_CONSENSUS",
              "SETTINGS_KEY_ORGANIZATION_AUL_STATUS"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostEntitySettingsRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/entities/{entity_id}/users/invitations": {
      "get": {
        "operationId": "PrimeAPI_ListInvitationsForUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListUserInvitationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/get_llc_rollout": {
      "get": {
        "operationId": "PrimeAPI_GetLlCRollout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.LlcRolloutResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/invitations": {
      "get": {
        "operationId": "PrimeAPI_GetUserInvitations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetInvitationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "states",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "INVITATION_STATE_UNKNOWN",
                "INVITATION_STATE_CREATED",
                "INVITATION_STATE_APPROVED",
                "INVITATION_STATE_REJECTED",
                "INVITATION_STATE_ACCEPTED",
                "INVITATION_STATE_ADMIN_CREATED",
                "INVITATION_STATE_EXPIRED",
                "INVITATION_STATE_REQUESTED",
                "INVITATION_STATE_USER_REJECTED"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/invitations/{invitation_id}": {
      "post": {
        "operationId": "PrimeAPI_PostAcceptInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.AcceptInvitationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "invitation_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.AcceptInvitationRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/notification_preferences/{user_id}": {
      "get": {
        "operationId": "PrimeAPI_GetNotificationPreferencesForChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetUserPreferencesForChannelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CHANNEL_UNSPECIFIED",
              "CHANNEL_EMAIL",
              "CHANNEL_PUSH",
              "CHANNEL_IN_APP",
              "CHANNEL_SMS"
            ],
            "default": "CHANNEL_UNSPECIFIED"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/notification_preferences/{user_id}/update": {
      "post": {
        "operationId": "PrimeAPI_UpdateNotificationPreferencesForChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.UpdateUserPreferencesForChannelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.UpdateUserPreferencesForChannelRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/notifications": {
      "get": {
        "operationId": "PrimeAPI_GetNotifications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.GetNotificationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/notifications/dismiss": {
      "post": {
        "operationId": "PrimeAPI_DismissNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.DismissNotificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.DismissNotificationRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/notifications/in-app": {
      "get": {
        "operationId": "PrimeAPI_GetUserInAppNotifications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetUserInAppNotificationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "portfolio_filter.portfolio_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/notifications/in-app/status": {
      "post": {
        "operationId": "PrimeAPI_PostUserInAppNotificationStatuses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostUserInAppNotificationStatusesRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/notifications/push/device_deregistration": {
      "post": {
        "operationId": "PrimeAPI_PostPushNotificationDeviceDeregistration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostPushNotificationDeviceDeregistrationRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/notifications/push/device_registration": {
      "post": {
        "operationId": "PrimeAPI_PostPushNotificationDeviceRegistration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostPushNotificationDeviceRegistrationRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/order/preview": {
      "post": {
        "operationId": "PrimeAPI_PostOrderPreview",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderPreviewResponseBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostOrderPreviewRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/orders": {
      "post": {
        "operationId": "PrimeAPI_PostOrder",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostOrderResponseBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostOrderRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/orders/batch_cancel": {
      "post": {
        "operationId": "PrimeAPI_PostCancelOrder",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostCancelOrderResponseBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostCancelOrderRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/orders/{order_id}": {
      "get": {
        "operationId": "PrimeAPI_GetOrder",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.brokerage.proxy.common.Order"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/orders/{order_id}/report/fills": {
      "get": {
        "operationId": "PrimeAPI_GetTradeReportOrderFills",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetTradeReportOrderFillsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "description": "ID of order",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "description": "ID of order's portfolio",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Maximum number of fills to return in response",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before_trade_id",
            "description": "Trade ID of fill that response should start before. Fills are sorted by (trade_time, trade_id) descending.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "after_trade_id",
            "description": "Trade ID of fill that response should start after. Fills are sorted by (trade_time, trade_id) descending.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Cursor to be used for pagination.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/orders/{order_id}/report/graph": {
      "get": {
        "operationId": "PrimeAPI_GetTradeReportGraphData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetTradeReportGraphDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "interval_size",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_INTERVAL",
              "SECOND",
              "MINUTE",
              "FIVE_MINUTES",
              "FIFTEEN_MINUTES",
              "THIRTY_MINUTES",
              "HOUR",
              "TWO_HOURS",
              "SIX_HOURS",
              "DAY",
              "WEEK",
              "FOUR_WEEKS",
              "YEAR",
              "THIRTY_SECONDS"
            ],
            "default": "UNKNOWN_INTERVAL"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/orders/{order_id}/report/graph-and-details": {
      "get": {
        "operationId": "PrimeAPI_GetTradeReportOrderDetailsAndGraphData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetTradeReportOrderDetailsAndGraphDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/orders/{order_id}/report/order-details": {
      "get": {
        "operationId": "PrimeAPI_GetTradeReportOrderDetails",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.TradeReportOrder"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "description": "ID of order",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "description": "ID of order's portfolio",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/orders/{order_id}/report/venue-fills": {
      "get": {
        "operationId": "PrimeAPI_GetTradeReportVenueFills",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetTradeReportVenueFillsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "description": "ID of order",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "description": "ID of order's portfolio",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolio/{portfolio_id}/financing_product_permissions": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioFinancingProductPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.financing.PortfolioOverviewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/statements/{statement_id}": {
      "get": {
        "operationId": "PrimeAPI_GetStatement",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetStatementResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "statement_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "portfolio_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/activities": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPortfolioActivitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio to retrieve activities for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "states",
            "description": "States to filter by.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_STATE_UNKNOWN",
                "ACTIVITY_STATE_SETTLED",
                "ACTIVITY_STATE_CREATED",
                "ACTIVITY_STATE_EXPIRED",
                "ACTIVITY_STATE_REJECTED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "currencies",
            "description": "Currencies to filter by.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "description": "Types to filter by.\n\n - ACTIVITY_TYPE_WITHDRAWAL: PrimeActivityService Custody ActivityTypes that will replace the above",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACTIVITY_TYPE_UNKNOWN",
              "ACTIVITY_TYPE_GOVERNANCE_VOTE",
              "ACTIVITY_TYPE_INVITATION",
              "ACTIVITY_TYPE_WALLET_CHANGE",
              "ACTIVITY_TYPE_API_KEY_CHANGE",
              "ACTIVITY_TYPE_SETTINGS_CHANGE",
              "ACTIVITY_TYPE_BILLING_PREFERENCE_CHANGE",
              "ACTIVITY_TYPE_PAYMENT_METHOD_CHANGE",
              "ACTIVITY_TYPE_WITHDRAWAL",
              "ACTIVITY_TYPE_DEPOSIT",
              "ACTIVITY_TYPE_CREATE_WALLET",
              "ACTIVITY_TYPE_REMOVE_WALLET",
              "ACTIVITY_TYPE_UPDATE_WALLET",
              "ACTIVITY_TYPE_CAST_VOTE",
              "ACTIVITY_TYPE_ENABLE_VOTING",
              "ACTIVITY_TYPE_STAKE",
              "ACTIVITY_TYPE_UNSTAKE",
              "ACTIVITY_TYPE_CHANGE_VALIDATOR",
              "ACTIVITY_TYPE_RESTAKE",
              "ACTIVITY_TYPE_ADDRESS_BOOK",
              "ACTIVITY_TYPE_TEAM_MEMBERS",
              "ACTIVITY_TYPE_BILLING",
              "ACTIVITY_TYPE_SECURITY",
              "ACTIVITY_TYPE_API",
              "ACTIVITY_TYPE_SETTINGS",
              "ACTIVITY_TYPE_SMART_CONTRACT",
              "ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS",
              "ACTIVITY_TYPE_WEB3_TRANSACTION",
              "ACTIVITY_TYPE_WEB3_MESSAGE"
            ],
            "default": "ACTIVITY_TYPE_UNKNOWN"
          },
          {
            "name": "start_date",
            "description": "Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided. ",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end_date",
            "description": "End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided. ",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search",
            "description": "Query string to search titles and descriptions for.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Activity id to retrieve additional results strictly after.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of activities to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order of activities",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/activities/{activity_id}": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioActivity",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.Activity",
              "required": [
                "activity"
              ]
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/activities/{activity_id}/activity_details": {
      "get": {
        "operationId": "PrimeAPI_GetPrimeActivityDetails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPrimeActivityDetailsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/activities/{activity_id}/approve": {
      "post": {
        "operationId": "PrimeAPI_PostApprovePortfolioActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostApprovePortfolioActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostApprovePortfolioActivityRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/activities/{activity_id}/consensus_audit": {
      "get": {
        "operationId": "PrimeAPI_GetPrimeActivityConsensusAudit",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ActivityConsensusAuditResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/activities/{activity_id}/reject": {
      "post": {
        "operationId": "PrimeAPI_PostRejectPortfolioActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostRejectPortfolioActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostRejectPortfolioActivityRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/activities/{activity_id}/signers": {
      "get": {
        "operationId": "PrimeAPI_ListSignerIdsForActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListSignerIdsForActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/activities/{activity_id}/staking_activity_details": {
      "get": {
        "operationId": "PrimeAPI_GetStakingActivityDetails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.GetStakingActivityDetailsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/activity_filters": {
      "get": {
        "operationId": "PrimeAPI_GetActivityFilters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetActivityFiltersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/activity_report": {
      "get": {
        "operationId": "PrimeAPI_DownloadActivityReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.DownloadActivityReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "categories",
            "description": "ActivityCategories to filter by.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_CATEGORY_UNSPECIFIED",
                "ACTIVITY_CATEGORY_ORDER",
                "ACTIVITY_CATEGORY_TRANSACTION",
                "ACTIVITY_CATEGORY_ACCOUNT",
                "ACTIVITY_CATEGORY_ADMIN",
                "ACTIVITY_CATEGORY_LENDING",
                "ACTIVITY_CATEGORY_ALLOCATION",
                "ACTIVITY_CATEGORY_USER_CHANGE_REQUEST_NO_PAS",
                "ACTIVITY_CATEGORY_WEB3_SIGNING_PAYLOAD"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "currencies",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "types",
            "description": "ActivityTypes to filter by.\n\n - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types\n - ACTIVITY_TYPE_BLOCK_TRADE: Block trades\n - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request\n - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_TYPE_UNSPECIFIED",
                "ACTIVITY_TYPE_LIMIT_ORDER",
                "ACTIVITY_TYPE_MARKET_ORDER",
                "ACTIVITY_TYPE_TWAP_ORDER",
                "ACTIVITY_TYPE_VWAP_ORDER",
                "ACTIVITY_TYPE_STOP_LIMIT_ORDER",
                "ACTIVITY_TYPE_DEPOSIT",
                "ACTIVITY_TYPE_WITHDRAWAL",
                "ACTIVITY_TYPE_CREATE_WALLET",
                "ACTIVITY_TYPE_REMOVE_WALLET",
                "ACTIVITY_TYPE_UPDATE_WALLET",
                "ACTIVITY_TYPE_CAST_VOTE",
                "ACTIVITY_TYPE_ENABLE_VOTING",
                "ACTIVITY_TYPE_STAKE",
                "ACTIVITY_TYPE_UNSTAKE",
                "ACTIVITY_TYPE_CHANGE_VALIDATOR",
                "ACTIVITY_TYPE_RESTAKE",
                "ACTIVITY_TYPE_ADDRESS_BOOK",
                "ACTIVITY_TYPE_TEAM_MEMBERS",
                "ACTIVITY_TYPE_BILLING",
                "ACTIVITY_TYPE_SECURITY",
                "ACTIVITY_TYPE_API",
                "ACTIVITY_TYPE_SETTINGS",
                "ACTIVITY_TYPE_SMART_CONTRACT",
                "ACTIVITY_TYPE_PRINCIPAL_OUT",
                "ACTIVITY_TYPE_PRINCIPAL_IN",
                "ACTIVITY_TYPE_COLLATERAL_OUT",
                "ACTIVITY_TYPE_COLLATERAL_IN",
                "ACTIVITY_TYPE_INTEREST_OUT",
                "ACTIVITY_TYPE_INTEREST_IN",
                "ACTIVITY_TYPE_ALLOCATION_IN",
                "ACTIVITY_TYPE_ALLOCATION_OUT",
                "ACTIVITY_TYPE_ALLOCATION_IN_REVERSAL",
                "ACTIVITY_TYPE_ALLOCATION_OUT_REVERSAL",
                "ACTIVITY_TYPE_CONVERSION",
                "ACTIVITY_TYPE_BLOCK_TRADE",
                "ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS",
                "ACTIVITY_TYPE_WEB3_TRANSACTION",
                "ACTIVITY_TYPE_REWARD",
                "ACTIVITY_TYPE_WEB3_MESSAGE",
                "ACTIVITY_TYPE_WEB3_ADD_SIGNER",
                "ACTIVITY_TYPE_WEB3_CLONE_KEYS",
                "ACTIVITY_TYPE_WEB3_ONBOARDING",
                "ACTIVITY_TYPE_WEB3_RECREATE_BACKUP",
                "ACTIVITY_TYPE_MATCH_TRANSFER_DEPOSIT",
                "ACTIVITY_TYPE_MATCH_TRANSFER_WITHDRAWAL",
                "ACTIVITY_TYPE_WEB3_DEVICE_RECOVERY",
                "ACTIVITY_TYPE_STAKING_CRYPTO_REBATE",
                "ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL",
                "ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_RETURN",
                "ACTIVITY_TYPE_WEB3_DEPOSIT_TRANSACTION",
                "ACTIVITY_TYPE_ADVANCED_TRANSFER",
                "ACTIVITY_TYPE_WEB3_UPLOAD_SECURITY_KEY",
                "ACTIVITY_TYPE_WEB3_KEY_EXPORT",
                "ACTIVITY_TYPE_WEB3_ARCHIVE_SECURITY_KEY"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "secondary_types",
            "description": "ActivitySecondaryTypes to filter by.\n\n - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order \u0026 Allocation secondary types\n - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types\n - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types\n - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types\n - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types\n - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_SECONDARY_TYPE_UNSPECIFIED",
                "ACTIVITY_SECONDARY_TYPE_BUY",
                "ACTIVITY_SECONDARY_TYPE_SELL",
                "ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER",
                "ACTIVITY_SECONDARY_TYPE_SWEEP_TRANSFER",
                "ACTIVITY_SECONDARY_TYPE_CB_LENDS",
                "ACTIVITY_SECONDARY_TYPE_CB_BORROWS",
                "ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER",
                "ACTIVITY_SECONDARY_TYPE_WEB3_WALLET",
                "ACTIVITY_SECONDARY_TYPE_QUALIFIED_CUSTODIAN_WALLET",
                "ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statuses",
            "description": "ActivityStatuses to filter by.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_STATUS_UNSPECIFIED",
                "ACTIVITY_STATUS_OPEN",
                "ACTIVITY_STATUS_CANCELLED",
                "ACTIVITY_STATUS_PROCESSING",
                "ACTIVITY_STATUS_COMPLETED",
                "ACTIVITY_STATUS_EXPIRED",
                "ACTIVITY_STATUS_REJECTED",
                "ACTIVITY_STATUS_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start_date",
            "description": "Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided. ",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end_date",
            "description": "End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided. ",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search",
            "description": "Query string to search titles and descriptions for.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/addressbook": {
      "get": {
        "operationId": "PrimeAPI_GetAddressBook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.AddressBookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "description": "Cryptocurrency symbol, if nothing is passed all addresses will be returned",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search",
            "description": "Query string that matches the address name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of addresses to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "type",
            "description": "Type of address book entry",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ADDRESS_BOOK_TYPE_UNSPECIFIED",
              "ADDRESS_BOOK_TYPE_ADDRESS",
              "ADDRESS_BOOK_TYPE_COUNTERPARTY_ID"
            ],
            "default": "ADDRESS_BOOK_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_PostAddressBookEntry",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostAddressBookEntryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostAddressBookEntryRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/addressbook/{address_entry_id}": {
      "post": {
        "operationId": "PrimeAPI_DeleteAddressBookEntry",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.DeleteAddressBookEntryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "address_entry_id",
            "description": "ID of address requested to be removed from the address book",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/allocation/order/{order_id}": {
      "get": {
        "operationId": "PrimeAPI_GetAllocationByOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetAllocationByOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio to get allocation for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "order_id",
            "description": "The ID of the order to get allocation for",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/allocation/reverse": {
      "post": {
        "operationId": "PrimeAPI_PostReverseAllocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostAllocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio of the allocation",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostReverseAllocationRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/allocation/{allocation_id}/reverse": {
      "get": {
        "operationId": "PrimeAPI_GetReverseAllocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetReverseAllocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio to get allocation for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "allocation_id",
            "description": "The allocation id to get allocations for",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/allocation/{allocation_leg_id}": {
      "get": {
        "operationId": "PrimeAPI_GetAllocationLeg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetAllocationLegResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio to get allocation for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "allocation_leg_id",
            "description": "The ID of the allocation to get allocation for",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/allocations": {
      "get": {
        "operationId": "PrimeAPI_GetAllocations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetAllocationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio to get allocation for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "allocation_ids",
            "description": "An array of allocation ids to get allocations for",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/api-key": {
      "get": {
        "operationId": "PrimeAPI_GetAPIKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListAPIKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search_text",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "states",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "API_KEY_STATE_UNKNOWN",
                "API_KEY_STATE_PENDING",
                "API_KEY_STATE_ACTIVATED",
                "API_KEY_STATE_DEACTIVATED",
                "API_KEY_STATE_EXPIRED",
                "API_KEY_STATE_DORMANT"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/api-key-count": {
      "get": {
        "operationId": "PrimeAPI_GetAPIKeyCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetAPIKeyCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "created_by_user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "states",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "API_KEY_STATE_UNKNOWN",
                "API_KEY_STATE_PENDING",
                "API_KEY_STATE_ACTIVATED",
                "API_KEY_STATE_DEACTIVATED",
                "API_KEY_STATE_EXPIRED",
                "API_KEY_STATE_DORMANT"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/api-key/activate": {
      "post": {
        "operationId": "PrimeAPI_PostActivateAPIKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ActivateAPIKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ActivateAPIKeyRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/api-key/create": {
      "post": {
        "operationId": "PrimeAPI_PostCreateAPIKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateAPIKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateAPIKeyRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/api-key/deactivate": {
      "post": {
        "operationId": "PrimeAPI_PostDeactivateAPIKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.DeactivateAPIKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.DeactivateAPIKeyRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/api-key/{access_key}": {
      "get": {
        "operationId": "PrimeAPI_GetAPIKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetAPIKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "access_key",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/auc_tiers": {
      "get": {
        "operationId": "PrimeAPI_GetAUCFeeTiers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eng.prime.billing.api.GetAUCFeeTiersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/balances": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioBalances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.GetBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio to get balances for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "description": "Optional filter for symbol of the currency to get balances for",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/billing_permission": {
      "get": {
        "operationId": "PrimeAPI_GetVehicleBillingPermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetVehicleBillingPermissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/commission": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioCommission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPortfolioCommissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/counterparties": {
      "get": {
        "operationId": "PrimeAPI_GetCounterparty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetCounterpartyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "portfolio id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "qc_counterparty",
            "description": "is the request for the qc counterparty",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/credit": {
      "get": {
        "operationId": "PrimeAPI_GetPostTradeCredit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPostTradeCreditResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio id for the financing request",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/device_group": {
      "get": {
        "operationId": "PrimeAPI_GetDeviceGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetDeviceGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/fees": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioFeeInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.fees.api.GetFeeInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/investmentVehicle": {
      "get": {
        "operationId": "PrimeAPI_GetInvestmentVehicle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetInvestmentVehicleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Filter results by a specific profile_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/invitations": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioInvitations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetInvitationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "states",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "INVITATION_STATE_UNKNOWN",
                "INVITATION_STATE_CREATED",
                "INVITATION_STATE_APPROVED",
                "INVITATION_STATE_REJECTED",
                "INVITATION_STATE_ACCEPTED",
                "INVITATION_STATE_ADMIN_CREATED",
                "INVITATION_STATE_EXPIRED",
                "INVITATION_STATE_REQUESTED",
                "INVITATION_STATE_USER_REJECTED"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_PostInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.NewConsensusActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateInvitationRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/orders/{order_id}/documents": {
      "get": {
        "operationId": "PrimeAPI_GetReportingDocumentByOrderId",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.reporting.api.Document"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_CreateOrderFillsDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateOrderFillsDocumentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateOrderFillsDocumentRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/policies": {
      "get": {
        "operationId": "PrimeAPI_ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eng.prime.policy.api.ListPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_UpsertPolicyChange",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.UpsertPolicyChangeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.UpsertPolicyChangeRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/policies/evaluation": {
      "get": {
        "operationId": "PrimeAPI_GetEvaluationResult",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetEvaluationResultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "description": "Activity ID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction_id",
            "description": "Transaction ID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "hierarchy.hierarchy_type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "HIERARCHY_TYPE_UNKNOWN",
              "HIERARCHY_TYPE_PORTFOLIO",
              "HIERARCHY_TYPE_ENTITY"
            ],
            "default": "HIERARCHY_TYPE_UNKNOWN"
          },
          {
            "name": "hierarchy.hierarchy_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/portfolio": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolio",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.Portfolio"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Filter results by a specific profile_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/prime_activities": {
      "get": {
        "operationId": "PrimeAPI_GetPrimeActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPrimeActivitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio to retrieve activities for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organization_id",
            "description": "Organization to retrieve activities for.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statuses",
            "description": "ActivityStatuses to filter by.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_STATUS_UNSPECIFIED",
                "ACTIVITY_STATUS_OPEN",
                "ACTIVITY_STATUS_CANCELLED",
                "ACTIVITY_STATUS_PROCESSING",
                "ACTIVITY_STATUS_COMPLETED",
                "ACTIVITY_STATUS_EXPIRED",
                "ACTIVITY_STATUS_REJECTED",
                "ACTIVITY_STATUS_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "currencies",
            "description": "Currencies to filter by.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "types",
            "description": "ActivityTypes to filter by.\n\n - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types\n - ACTIVITY_TYPE_BLOCK_TRADE: Block trades\n - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request\n - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_TYPE_UNSPECIFIED",
                "ACTIVITY_TYPE_LIMIT_ORDER",
                "ACTIVITY_TYPE_MARKET_ORDER",
                "ACTIVITY_TYPE_TWAP_ORDER",
                "ACTIVITY_TYPE_VWAP_ORDER",
                "ACTIVITY_TYPE_STOP_LIMIT_ORDER",
                "ACTIVITY_TYPE_DEPOSIT",
                "ACTIVITY_TYPE_WITHDRAWAL",
                "ACTIVITY_TYPE_CREATE_WALLET",
                "ACTIVITY_TYPE_REMOVE_WALLET",
                "ACTIVITY_TYPE_UPDATE_WALLET",
                "ACTIVITY_TYPE_CAST_VOTE",
                "ACTIVITY_TYPE_ENABLE_VOTING",
                "ACTIVITY_TYPE_STAKE",
                "ACTIVITY_TYPE_UNSTAKE",
                "ACTIVITY_TYPE_CHANGE_VALIDATOR",
                "ACTIVITY_TYPE_RESTAKE",
                "ACTIVITY_TYPE_ADDRESS_BOOK",
                "ACTIVITY_TYPE_TEAM_MEMBERS",
                "ACTIVITY_TYPE_BILLING",
                "ACTIVITY_TYPE_SECURITY",
                "ACTIVITY_TYPE_API",
                "ACTIVITY_TYPE_SETTINGS",
                "ACTIVITY_TYPE_SMART_CONTRACT",
                "ACTIVITY_TYPE_PRINCIPAL_OUT",
                "ACTIVITY_TYPE_PRINCIPAL_IN",
                "ACTIVITY_TYPE_COLLATERAL_OUT",
                "ACTIVITY_TYPE_COLLATERAL_IN",
                "ACTIVITY_TYPE_INTEREST_OUT",
                "ACTIVITY_TYPE_INTEREST_IN",
                "ACTIVITY_TYPE_ALLOCATION_IN",
                "ACTIVITY_TYPE_ALLOCATION_OUT",
                "ACTIVITY_TYPE_ALLOCATION_IN_REVERSAL",
                "ACTIVITY_TYPE_ALLOCATION_OUT_REVERSAL",
                "ACTIVITY_TYPE_CONVERSION",
                "ACTIVITY_TYPE_BLOCK_TRADE",
                "ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS",
                "ACTIVITY_TYPE_WEB3_TRANSACTION",
                "ACTIVITY_TYPE_REWARD",
                "ACTIVITY_TYPE_WEB3_MESSAGE",
                "ACTIVITY_TYPE_WEB3_ADD_SIGNER",
                "ACTIVITY_TYPE_WEB3_CLONE_KEYS",
                "ACTIVITY_TYPE_WEB3_ONBOARDING",
                "ACTIVITY_TYPE_WEB3_RECREATE_BACKUP",
                "ACTIVITY_TYPE_MATCH_TRANSFER_DEPOSIT",
                "ACTIVITY_TYPE_MATCH_TRANSFER_WITHDRAWAL",
                "ACTIVITY_TYPE_WEB3_DEVICE_RECOVERY",
                "ACTIVITY_TYPE_STAKING_CRYPTO_REBATE",
                "ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL",
                "ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_RETURN",
                "ACTIVITY_TYPE_WEB3_DEPOSIT_TRANSACTION",
                "ACTIVITY_TYPE_ADVANCED_TRANSFER",
                "ACTIVITY_TYPE_WEB3_UPLOAD_SECURITY_KEY",
                "ACTIVITY_TYPE_WEB3_KEY_EXPORT",
                "ACTIVITY_TYPE_WEB3_ARCHIVE_SECURITY_KEY"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "secondary_types",
            "description": "ActivitySecondaryTypes to filter by.\n\n - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order \u0026 Allocation secondary types\n - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types\n - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types\n - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types\n - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types\n - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_SECONDARY_TYPE_UNSPECIFIED",
                "ACTIVITY_SECONDARY_TYPE_BUY",
                "ACTIVITY_SECONDARY_TYPE_SELL",
                "ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER",
                "ACTIVITY_SECONDARY_TYPE_SWEEP_TRANSFER",
                "ACTIVITY_SECONDARY_TYPE_CB_LENDS",
                "ACTIVITY_SECONDARY_TYPE_CB_BORROWS",
                "ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER",
                "ACTIVITY_SECONDARY_TYPE_WEB3_WALLET",
                "ACTIVITY_SECONDARY_TYPE_QUALIFIED_CUSTODIAN_WALLET",
                "ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start_date",
            "description": "Start date to filter activities by in RFC3339 Time format. Requires end_date to be specified if start_date provided. ",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end_date",
            "description": "End date to filter activities by in RFC3339 Time format. Requires start_date to be specified if end_date provided. ",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search",
            "description": "Query string to search titles and descriptions for.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Activity cursor to retrieve additional results strictly after.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of activities to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categories",
            "description": "ActivityCategories to filter by.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_CATEGORY_UNSPECIFIED",
                "ACTIVITY_CATEGORY_ORDER",
                "ACTIVITY_CATEGORY_TRANSACTION",
                "ACTIVITY_CATEGORY_ACCOUNT",
                "ACTIVITY_CATEGORY_ADMIN",
                "ACTIVITY_CATEGORY_LENDING",
                "ACTIVITY_CATEGORY_ALLOCATION",
                "ACTIVITY_CATEGORY_USER_CHANGE_REQUEST_NO_PAS",
                "ACTIVITY_CATEGORY_WEB3_SIGNING_PAYLOAD"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "processing_in_front",
            "description": "Whether sort processing activities in front",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "status_updated_at_start",
            "description": "Beginning of the \"Status Update At\" to filter activities by in RFC3339 Time format.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status_updated_at_end",
            "description": "End of the \"Status Update At\" to filter activities by in RFC3339 Time format.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order of activities",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/prime_activity_filters": {
      "get": {
        "operationId": "PrimeAPI_GetPrimeActivityFilters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPrimeActivityFiltersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_CATEGORY_UNSPECIFIED",
                "ACTIVITY_CATEGORY_ORDER",
                "ACTIVITY_CATEGORY_TRANSACTION",
                "ACTIVITY_CATEGORY_ACCOUNT",
                "ACTIVITY_CATEGORY_ADMIN",
                "ACTIVITY_CATEGORY_LENDING",
                "ACTIVITY_CATEGORY_ALLOCATION",
                "ACTIVITY_CATEGORY_USER_CHANGE_REQUEST_NO_PAS",
                "ACTIVITY_CATEGORY_WEB3_SIGNING_PAYLOAD"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_STATUS_UNSPECIFIED",
                "ACTIVITY_STATUS_OPEN",
                "ACTIVITY_STATUS_CANCELLED",
                "ACTIVITY_STATUS_PROCESSING",
                "ACTIVITY_STATUS_COMPLETED",
                "ACTIVITY_STATUS_EXPIRED",
                "ACTIVITY_STATUS_REJECTED",
                "ACTIVITY_STATUS_FAILED"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/settings": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/coinbase.custody.api.Settings"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/settings/{key}": {
      "post": {
        "operationId": "PrimeAPI_PostPortfolioSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostPortfolioSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "SETTINGS_KEY_UNKNOWN",
              "SETTINGS_KEY_CONSENSUS_WITHDRAWAL",
              "SETTINGS_KEY_MAX_WITHDRAWAL_AMOUNT",
              "SETTINGS_KEY_TRUSTED_ADDRESS_PROTECTION",
              "SETTINGS_KEY_MULTI_WALLETS",
              "SETTINGS_KEY_API_KEY_GENERATION",
              "SETTINGS_KEY_CONSENSUS_ONE",
              "SETTINGS_KEY_SIGN_STAKING_ADDENDUM",
              "SETTINGS_KEY_GOVERNANCE_VOTE_CONSENSUS",
              "SETTINGS_KEY_REQUIRED_APPROVAL",
              "SETTINGS_KEY_VIDEO_CONSENSUS",
              "SETTINGS_KEY_ORGANIZATION_AUL_STATUS"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostPortfolioSettingsRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/source_currency/{source_currency_symbol}/destination_currency/{destination_currency_symbol}/exchange_rate": {
      "get": {
        "operationId": "PrimeAPI_GetExchangeRate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetExchangeRateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "source_currency_symbol",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "destination_currency_symbol",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/statements": {
      "get": {
        "operationId": "PrimeAPI_GetStatements",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/coinbase.eng.prime.reporting.api.Statement"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "year",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/test_transaction": {
      "post": {
        "operationId": "PrimeAPI_CreateTestTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateTestTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateTestTransactionRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/test_transaction/status": {
      "post": {
        "operationId": "PrimeAPI_GetLatestTestTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetLatestTestTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetLatestTestTransactionRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/transactions": {
      "post": {
        "operationId": "PrimeAPI_CreateTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.NewConsensusActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio you want to transact with",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateTransactionRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/transactions/cancel": {
      "post": {
        "operationId": "PrimeAPI_CancelTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CancelTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio id of the transaction",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CancelTransactionRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/transactions/preview": {
      "post": {
        "operationId": "PrimeAPI_PreviewTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PreviewTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio you want to transact with",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PreviewTransactionRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/users": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListPortfolioUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of users to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "search",
            "description": "Search query to match user name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "permission",
            "description": "Permission to filter all users by",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PERMISSION_UNKNOWN",
              "PERMISSION_READ",
              "PERMISSION_INITIATE",
              "PERMISSION_REVIEW",
              "PERMISSION_ADMIN",
              "PERMISSION_TRADE",
              "PERMISSION_VIDEO_APPROVE",
              "PERMISSION_TEAM_APPROVE",
              "PERMISSION_WEB3_SIGN"
            ],
            "default": "PERMISSION_UNKNOWN"
          },
          {
            "name": "roles",
            "description": "Users with these roles (or provided secondary roles) to include in response",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ROLE_UNKNOWN",
                "ROLE_AUTHORIZED_SIGNATORY",
                "ROLE_INITIATOR",
                "ROLE_APPROVER",
                "ROLE_AUDITOR",
                "ROLE_ADMINISTRATOR",
                "ROLE_TRADER",
                "ROLE_INTERNAL_TRADER",
                "ROLE_TEAM_MANAGER",
                "ROLE_FULL_TRADER",
                "ROLE_INTERNAL_AUDITOR"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "secondary_roles",
            "description": "Users with these secondary roles (or provided roles) to include in response",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SECONDARY_ROLE_UNKNOWN",
                "SECONDARY_ROLE_VIDEO_APPROVER",
                "SECONDARY_ROLE_TEAM_APPROVER",
                "SECONDARY_ROLE_WEB3_SIGNER"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "restrict_entity_users",
            "description": "If set to true, will not return entity users as part of the response",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/users/concise": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioConciseUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListPortfolioConciseUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of users to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "search",
            "description": "Search query to match user name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "roles",
            "description": "Users with these roles (or provided secondary roles) to include in response",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ROLE_UNKNOWN",
                "ROLE_AUTHORIZED_SIGNATORY",
                "ROLE_INITIATOR",
                "ROLE_APPROVER",
                "ROLE_AUDITOR",
                "ROLE_ADMINISTRATOR",
                "ROLE_TRADER",
                "ROLE_INTERNAL_TRADER",
                "ROLE_TEAM_MANAGER",
                "ROLE_FULL_TRADER",
                "ROLE_INTERNAL_AUDITOR"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "secondary_roles",
            "description": "Users with these secondary roles (or provided roles) to include in response",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SECONDARY_ROLE_UNKNOWN",
                "SECONDARY_ROLE_VIDEO_APPROVER",
                "SECONDARY_ROLE_TEAM_APPROVER",
                "SECONDARY_ROLE_WEB3_SIGNER"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/users/{user_id}": {
      "post": {
        "operationId": "PrimeAPI_PostUserUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.NewConsensusActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostUserUpdateRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/users/{user_id}/preview_user_change": {
      "post": {
        "operationId": "PrimeAPI_PostPreviewUserChange",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostPreviewUserChangeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostPreviewUserChangeRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallet_tokens/{wallet_id}": {
      "get": {
        "operationId": "PrimeAPI_GetWalletTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListWalletTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets": {
      "get": {
        "operationId": "PrimeAPI_GetWallets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListWalletsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "states",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "WALLET_STATE_UNKNOWN",
                "IN_USE",
                "REMOVED",
                "PENDING"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "currency_symbols",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of wallets to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "search",
            "description": "Search query to match user name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "types",
            "description": "Filter to only return specified types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "WALLET_TYPE_UNKNOWN",
                "STANDARD",
                "STAKING",
                "VOTING",
                "SECONDARY",
                "SIGNALLING",
                "TRADABLE",
                "CONTRACT",
                "PRIME_OMNIBUS_QC"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "actions",
            "description": "Filter to only return specified available actions",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "WALLET_ACTION_UNKNOWN",
                "DEPOSIT",
                "WITHDRAW",
                "DELEGATE",
                "UNDELEGATE",
                "UNSTAKE",
                "RESTAKE",
                "CHANGE_VALIDATOR",
                "ENABLE_GOVERNANCE",
                "DISABLE_GOVERNANCE",
                "STAKE",
                "VOTE",
                "PARTIAL_STAKE",
                "CONVERSION",
                "CLAIM_REWARDS"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort_field",
            "description": "Sorting field",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_CreateWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateWalletResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateWalletRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/balances/{currency_symbol}": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioWalletsBalances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.GetBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio to get balances for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "description": "The filter for symbol of the currency to get balances for",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}": {
      "get": {
        "operationId": "PrimeAPI_GetWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetWalletResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_UpdateWalletName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.UpdateWalletNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.UpdateWalletNameRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/asset_settings": {
      "get": {
        "operationId": "PrimeAPI_GetWalletAssetSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetWalletAssetSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_UpdateWalletAssetSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.UpdateWalletAssetSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.UpdateWalletAssetSettingsRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/balances": {
      "get": {
        "operationId": "PrimeAPI_GetWalletBalances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.GetBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio that contains the wallet",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "description": "The ID of the wallet to get balances for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "description": "Optional filter for symbol of the currency to get balances for",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/crypto_deposit_addresses": {
      "get": {
        "operationId": "PrimeAPI_ListTradingWalletCryptoDepositAddresses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListTradingWalletCryptoDepositAddressesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of addresses to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/defi/balances": {
      "get": {
        "operationId": "PrimeAPI_GetWalletDefiBalances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetWalletDefiBalancesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio that contains the wallet",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "description": "The ID of the wallet to get defi balances for",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/deposit_instructions": {
      "get": {
        "operationId": "PrimeAPI_GetDepositInstructions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetDepositInstructionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "transfer_method_type",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/governance/delegation": {
      "post": {
        "operationId": "PrimeAPI_PostDelegationAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostDelegationAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/governance/status": {
      "get": {
        "operationId": "PrimeAPI_GetGovernanceStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetGovernanceStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_PostGovernanceStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostGovernanceStatusResponseBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostGovernanceStatusRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/governance/votes": {
      "get": {
        "operationId": "PrimeAPI_GetGovernanceVotes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetGovernanceVotesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_PostGovernanceVote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostGovernanceVoteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostGovernanceVoteRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/rewards": {
      "get": {
        "operationId": "PrimeAPI_GetWalletRewardsStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.WalletRewardsStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/staking": {
      "get": {
        "operationId": "PrimeAPI_GetWalletStakingStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.WalletStakingStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/validators": {
      "get": {
        "operationId": "PrimeAPI_ListActiveValidators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListActiveValidatorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/vesting": {
      "get": {
        "operationId": "PrimeAPI_GetWalletVestingStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetWalletVestingStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/web3/validate": {
      "post": {
        "operationId": "PrimeAPI_ValidateWeb3Authorization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ValidateWeb3AuthorizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ValidateWeb3AuthorizationRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/{currency_symbol}/stake_time_estimation": {
      "get": {
        "operationId": "PrimeAPI_GetStakeTimeEstimation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.GetStakeTimeEstimationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/{currency_symbol}/unstake_time_estimation": {
      "get": {
        "operationId": "PrimeAPI_GetUnstakeTimeEstimation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.GetUnstakeTimeEstimationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{source_portfolio_id}/allocation": {
      "post": {
        "operationId": "PrimeAPI_PostAllocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostAllocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "source_portfolio_id",
            "description": "The source portfolio id for the allocation",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostAllocationRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{source_portfolio_id}/allocation/net_preview": {
      "post": {
        "operationId": "PrimeAPI_PostNetAllocationPreview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostNetAllocationPreviewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "source_portfolio_id",
            "description": "The ID of the source portfolio id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostNetAllocationPreviewRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/portfolios/{source_portfolio_id}/allocation/preview": {
      "post": {
        "operationId": "PrimeAPI_PostAllocationPreview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostAllocationPreviewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "source_portfolio_id",
            "description": "The ID of the source portfolio id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostAllocationPreviewRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/products": {
      "get": {
        "operationId": "PrimeAPI_GetProducts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.Products"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Number of products to return in the initial snapshot. Maximum of 100",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "portfolio_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/products/{product_id}/candles": {
      "get": {
        "operationId": "PrimeAPI_GetCandles",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.Candles"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The trading pair, i.e. 'BTC-USD'",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "description": "Timestamp for starting range of aggregations (e.g 1596640920)",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "end",
            "description": "Timestamp for ending range of aggregations (e.g 1596650920)",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "description": "The candle interval (e.g. 1m, 5m, 15m)",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "UNKNOWN_GRANULARITY",
              "ONE_MINUTE",
              "FIVE_MINUTE",
              "FIFTEEN_MINUTE",
              "THIRTY_MINUTE",
              "ONE_HOUR",
              "TWO_HOUR",
              "SIX_HOUR",
              "ONE_DAY"
            ],
            "default": "UNKNOWN_GRANULARITY"
          },
          {
            "name": "geolocation.locality",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "geolocation.country",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_id",
            "description": "optional field used for feature flags",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/products/{product_id}/stats": {
      "get": {
        "operationId": "PrimeAPI_GetProductStats",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.ProductStats"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The trading pair, i.e. 'BTC-USD'",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "geolocation.locality",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "geolocation.country",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/reporting_center/document/generate": {
      "get": {
        "operationId": "PrimeAPI_GenerateReportingCenterDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GenerateReportingCenterDocumentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "report_type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "GENERATE_REPORT_TYPE_UNSPECIFIED",
              "GENERATE_REPORT_TYPE_DAL_REPORT",
              "GENERATE_REPORT_TYPE_STAKING_REPORT"
            ],
            "default": "GENERATE_REPORT_TYPE_UNSPECIFIED"
          },
          {
            "name": "staking_report_generation_args.portfolio_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "staking_report_generation_args.start_unix",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "staking_report_generation_args.end_unix",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/reporting_center/document/{document_id}/download": {
      "get": {
        "operationId": "PrimeAPI_GetDocumentDownloadLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetDocumentDownloadLinksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/reporting_center/{portfolio_id}/download": {
      "get": {
        "operationId": "PrimeAPI_GetReportingCenterDownloadLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetReportingCenterDownloadLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "s3_bucket",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "s3_key",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "REPORT_TYPE_UNSPECIFIED",
              "REPORT_TYPE_MONTHLY_STATEMENT"
            ],
            "default": "REPORT_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/reporting_center/{portfolio_id}/generate/web3": {
      "get": {
        "operationId": "PrimeAPI_GenerateWeb3Report",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GenerateWeb3ReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start_unix",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "end_unix",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/reporting_center/{vehicle_id}": {
      "get": {
        "operationId": "PrimeAPI_ListReportingCenterData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListReportingCenterDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "year",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "REPORT_TYPE_UNSPECIFIED",
              "REPORT_TYPE_MONTHLY_STATEMENT"
            ],
            "default": "REPORT_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/reporting_center/{vehicle_id}/filters": {
      "get": {
        "operationId": "PrimeAPI_GetReportingCenterFilters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetReportingCenterFiltersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/reporting_center/{vehicle_id}/generate/dal": {
      "get": {
        "operationId": "PrimeAPI_GenerateDALReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GenerateDALReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "date_start",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "date_end",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/reporting_center/{vehicle_id}/generate/financing": {
      "get": {
        "operationId": "PrimeAPI_GenerateFinancingReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GenerateFinancingReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start_unix",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "end_unix",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "portfolio_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "report_types",
            "description": " - REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_SHORT_ACCRUALS: Financing portfolio margin report types\n - REPORT_TYPE_FINANCING_TRADE_FINANCE_ACCRUALS: Financing trade finance report types\n - REPORT_TYPE_FINANCING_DIGITAL_AGENCY_LENDING_ACCRUALS: Financing digital agency lending report types\n - REPORT_TYPE_FINANCING_BILATERAL_LENDING_ACCRUALS: Financing bilateral lending report types\n - REPORT_TYPE_STAKING: Staking report type\n - REPORT_TYPE_WEB3_TRANSACTIONS_CSV: Web3 report type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "REPORT_TYPE_UNSPECIFIED",
                "REPORT_TYPE_BALANCE",
                "REPORT_TYPE_ADDRESS",
                "REPORT_TYPE_TRANSACTION",
                "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_SHORT_ACCRUALS",
                "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_SHORT_COLLATERAL_ACCRUALS",
                "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_MARGIN_DETAIL",
                "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_MARGIN_SUMMARY",
                "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_CONVERSIONS",
                "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_MARGIN_SUMMARY_DOD",
                "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_MARGIN_SHORT_COLLATERAL_SUMMARY",
                "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_MARGIN_SHORT_COLLATERAL_DETAIL",
                "REPORT_TYPE_FINANCING_TRADE_FINANCE_ACCRUALS",
                "REPORT_TYPE_FINANCING_TRADE_FINANCE_USAGE",
                "REPORT_TYPE_FINANCING_DIGITAL_AGENCY_LENDING_ACCRUALS",
                "REPORT_TYPE_FINANCING_DIGITAL_AGENCY_LENDING_COLLATERAL",
                "REPORT_TYPE_FINANCING_DIGITAL_AGENCY_LENDING_POSITION",
                "REPORT_TYPE_FINANCING_BILATERAL_LENDING_ACCRUALS",
                "REPORT_TYPE_FINANCING_BILATERAL_LENDING_COLLATERAL",
                "REPORT_TYPE_STAKING",
                "REPORT_TYPE_STAKING_SUMMARY_CSV",
                "REPORT_TYPE_STAKING_WALLET_REWARDS_SUMMARY_CSV",
                "REPORT_TYPE_STAKING_WALLET_TRANSACTIONS_CSV",
                "REPORT_TYPE_WEB3_TRANSACTIONS_CSV",
                "REPORT_TYPE_WEB3_BALANCES_CSV"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/sessions/introspect": {
      "get": {
        "operationId": "PrimeAPI_GetIntrospect",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetIntrospectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/settings/bulk_action": {
      "post": {
        "operationId": "PrimeAPI_PostBulkActionSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostBulkActionSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostBulkActionSettingsRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/notifications/in-app": {
      "get": {
        "operationId": "PrimeAPI_GetUserInAppNotificationsStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.GetUserInAppNotificationsStreamResponseBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.GetUserInAppNotificationsStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "portfolio_filter.portfolio_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/orders": {
      "get": {
        "operationId": "PrimeAPI_GetOrdersStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.OrderStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.brokerage.proxy.trading.api.OrderStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The trading pair, i.e. 'BTC-USD'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "The status of the order, i.e. 'filled', 'open'",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_ORDER_EXECUTION_STATUS",
              "PENDING",
              "OPEN",
              "FILLED",
              "CANCELLED",
              "EXPIRED",
              "FAILED"
            ],
            "default": "UNKNOWN_ORDER_EXECUTION_STATUS"
          },
          {
            "name": "user_id",
            "description": "The uuid of the user who created the order",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "description": "Optionally specify a portfolio id. Only orders from this portfolio will be returned in the stream.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "update_interval",
            "description": "Time between each patch for the current orders stream",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "TWO_HUNDRED_FIFTY_MS_ORDERS"
            ],
            "default": "TWO_HUNDRED_FIFTY_MS_ORDERS"
          },
          {
            "name": "product_type",
            "description": "Optionally specify a product type to filter by, i.e. 'FUTURE', 'SPOT'",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_PRODUCT_TYPE",
              "SPOT",
              "FUTURE"
            ],
            "default": "UNKNOWN_PRODUCT_TYPE"
          },
          {
            "name": "order_placement_sources",
            "description": "Optionally specify N order placement source to filter by, i.e. 'RETAIL_WEB_CLIENT', 'RETAIL_SIMPLE'",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN_PLACEMENT_SOURCE",
                "RETAIL_PUBLIC_API",
                "RETAIL_WEB_CLIENT",
                "RETAIL_MOBILE_WEB_CLIENT",
                "RETAIL_IOS_CLIENT",
                "RETAIL_ANDROID_CLIENT",
                "RETAIL_SIMPLE",
                "RETAIL_PUBLIC_API_OAUTH2",
                "RETAIL_ADVANCED_UNKNOWN",
                "RETAIL_LIQUIDATION",
                "RETAIL_PUBLIC_API_CLOUD",
                "FIX",
                "PRIME_INTERNAL_API",
                "PRIME_PUBLIC_API",
                "PRIME_UNKNOWN",
                "NEITHER_PRIME_RETAIL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "risk_management_type",
            "description": "Optionally specify a risk management type to filter by, i.e. 'MANAGED_BY_FCM', 'MANAGED_BY_VENUE'",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_RISK_MANAGEMENT_TYPE",
              "MANAGED_BY_FCM",
              "MANAGED_BY_VENUE"
            ],
            "default": "UNKNOWN_RISK_MANAGEMENT_TYPE"
          },
          {
            "name": "contract_expiry_type",
            "description": "Optionally specify a contract expiry type to filter by, i.e. 'EXPIRING', 'PERPETUAL'",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_CONTRACT_EXPIRY_TYPE",
              "EXPIRING",
              "PERPETUAL"
            ],
            "default": "UNKNOWN_CONTRACT_EXPIRY_TYPE"
          },
          {
            "name": "orderPlacementFilter.applyNotFilter",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "orderPlacementFilter.order_placement_sources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN_PLACEMENT_SOURCE",
                "RETAIL_PUBLIC_API",
                "RETAIL_WEB_CLIENT",
                "RETAIL_MOBILE_WEB_CLIENT",
                "RETAIL_IOS_CLIENT",
                "RETAIL_ANDROID_CLIENT",
                "RETAIL_SIMPLE",
                "RETAIL_PUBLIC_API_OAUTH2",
                "RETAIL_ADVANCED_UNKNOWN",
                "RETAIL_LIQUIDATION",
                "RETAIL_PUBLIC_API_CLOUD",
                "FIX",
                "PRIME_INTERNAL_API",
                "PRIME_PUBLIC_API",
                "PRIME_UNKNOWN",
                "NEITHER_PRIME_RETAIL"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/portfolios/{portfolio_id}/activities": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioActivitiesStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPortfolioActivitiesStreamResponseBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.GetPortfolioActivitiesStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio to retrieve activities for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "states",
            "description": "States to filter by.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_STATE_UNKNOWN",
                "ACTIVITY_STATE_SETTLED",
                "ACTIVITY_STATE_CREATED",
                "ACTIVITY_STATE_EXPIRED",
                "ACTIVITY_STATE_REJECTED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "currencies",
            "description": "Currencies to filter by.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "description": "Types to filter by.\n\n - ACTIVITY_TYPE_WITHDRAWAL: PrimeActivityService Custody ActivityTypes that will replace the above",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACTIVITY_TYPE_UNKNOWN",
              "ACTIVITY_TYPE_GOVERNANCE_VOTE",
              "ACTIVITY_TYPE_INVITATION",
              "ACTIVITY_TYPE_WALLET_CHANGE",
              "ACTIVITY_TYPE_API_KEY_CHANGE",
              "ACTIVITY_TYPE_SETTINGS_CHANGE",
              "ACTIVITY_TYPE_BILLING_PREFERENCE_CHANGE",
              "ACTIVITY_TYPE_PAYMENT_METHOD_CHANGE",
              "ACTIVITY_TYPE_WITHDRAWAL",
              "ACTIVITY_TYPE_DEPOSIT",
              "ACTIVITY_TYPE_CREATE_WALLET",
              "ACTIVITY_TYPE_REMOVE_WALLET",
              "ACTIVITY_TYPE_UPDATE_WALLET",
              "ACTIVITY_TYPE_CAST_VOTE",
              "ACTIVITY_TYPE_ENABLE_VOTING",
              "ACTIVITY_TYPE_STAKE",
              "ACTIVITY_TYPE_UNSTAKE",
              "ACTIVITY_TYPE_CHANGE_VALIDATOR",
              "ACTIVITY_TYPE_RESTAKE",
              "ACTIVITY_TYPE_ADDRESS_BOOK",
              "ACTIVITY_TYPE_TEAM_MEMBERS",
              "ACTIVITY_TYPE_BILLING",
              "ACTIVITY_TYPE_SECURITY",
              "ACTIVITY_TYPE_API",
              "ACTIVITY_TYPE_SETTINGS",
              "ACTIVITY_TYPE_SMART_CONTRACT",
              "ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS",
              "ACTIVITY_TYPE_WEB3_TRANSACTION",
              "ACTIVITY_TYPE_WEB3_MESSAGE"
            ],
            "default": "ACTIVITY_TYPE_UNKNOWN"
          },
          {
            "name": "start_date",
            "description": "Start date to filter activities by in YYYY-MM-DD format. Requires end_date to be specified if start_date provided. ",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end_date",
            "description": "End date to filter activities by in YYYY-MM-DD format. Requires start_date to be specified if end_date provided. ",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search",
            "description": "Query string to search titles and descriptions for.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Activity id to retrieve additional results strictly after.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of activities to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order of activities",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/portfolios/{portfolio_id}/activities/{activity_id}": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioActivityStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPortfolioActivityStreamResponseBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.GetPortfolioActivityStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/portfolios/{portfolio_id}/activities/{activity_id}/activity_details": {
      "get": {
        "operationId": "PrimeAPI_GetPrimeActivityDetailsStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPrimeActivityDetailsStreamResponseBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.GetPrimeActivityDetailsStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/portfolios/{portfolio_id}/balances": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioBalancesStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.GetBalancesStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.GetBalancesStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio to get balances for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "description": "Optional filter for symbol of the currency to get balances for",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/portfolios/{portfolio_id}/financing": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioFinancingStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.PortfolioFinancingStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.PortfolioFinancingStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_interval",
            "description": "Amount of time in ms between updates",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "TWO_HUNDRED_FIFTY_MS_FINANCING"
            ],
            "default": "TWO_HUNDRED_FIFTY_MS_FINANCING"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/portfolios/{portfolio_id}/prime_activities": {
      "get": {
        "operationId": "PrimeAPI_GetPrimeActivitiesStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPrimeActivitiesStreamResponseBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.GetPrimeActivitiesStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio to retrieve activities for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organization_id",
            "description": "Organization to retrieve activities for.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statuses",
            "description": "ActivityStatuses to filter by.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_STATUS_UNSPECIFIED",
                "ACTIVITY_STATUS_OPEN",
                "ACTIVITY_STATUS_CANCELLED",
                "ACTIVITY_STATUS_PROCESSING",
                "ACTIVITY_STATUS_COMPLETED",
                "ACTIVITY_STATUS_EXPIRED",
                "ACTIVITY_STATUS_REJECTED",
                "ACTIVITY_STATUS_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "currencies",
            "description": "Currencies to filter by.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "types",
            "description": "ActivityTypes to filter by.\n\n - ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types\n - ACTIVITY_TYPE_BLOCK_TRADE: Block trades\n - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request\n - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_TYPE_UNSPECIFIED",
                "ACTIVITY_TYPE_LIMIT_ORDER",
                "ACTIVITY_TYPE_MARKET_ORDER",
                "ACTIVITY_TYPE_TWAP_ORDER",
                "ACTIVITY_TYPE_VWAP_ORDER",
                "ACTIVITY_TYPE_STOP_LIMIT_ORDER",
                "ACTIVITY_TYPE_DEPOSIT",
                "ACTIVITY_TYPE_WITHDRAWAL",
                "ACTIVITY_TYPE_CREATE_WALLET",
                "ACTIVITY_TYPE_REMOVE_WALLET",
                "ACTIVITY_TYPE_UPDATE_WALLET",
                "ACTIVITY_TYPE_CAST_VOTE",
                "ACTIVITY_TYPE_ENABLE_VOTING",
                "ACTIVITY_TYPE_STAKE",
                "ACTIVITY_TYPE_UNSTAKE",
                "ACTIVITY_TYPE_CHANGE_VALIDATOR",
                "ACTIVITY_TYPE_RESTAKE",
                "ACTIVITY_TYPE_ADDRESS_BOOK",
                "ACTIVITY_TYPE_TEAM_MEMBERS",
                "ACTIVITY_TYPE_BILLING",
                "ACTIVITY_TYPE_SECURITY",
                "ACTIVITY_TYPE_API",
                "ACTIVITY_TYPE_SETTINGS",
                "ACTIVITY_TYPE_SMART_CONTRACT",
                "ACTIVITY_TYPE_PRINCIPAL_OUT",
                "ACTIVITY_TYPE_PRINCIPAL_IN",
                "ACTIVITY_TYPE_COLLATERAL_OUT",
                "ACTIVITY_TYPE_COLLATERAL_IN",
                "ACTIVITY_TYPE_INTEREST_OUT",
                "ACTIVITY_TYPE_INTEREST_IN",
                "ACTIVITY_TYPE_ALLOCATION_IN",
                "ACTIVITY_TYPE_ALLOCATION_OUT",
                "ACTIVITY_TYPE_ALLOCATION_IN_REVERSAL",
                "ACTIVITY_TYPE_ALLOCATION_OUT_REVERSAL",
                "ACTIVITY_TYPE_CONVERSION",
                "ACTIVITY_TYPE_BLOCK_TRADE",
                "ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS",
                "ACTIVITY_TYPE_WEB3_TRANSACTION",
                "ACTIVITY_TYPE_REWARD",
                "ACTIVITY_TYPE_WEB3_MESSAGE",
                "ACTIVITY_TYPE_WEB3_ADD_SIGNER",
                "ACTIVITY_TYPE_WEB3_CLONE_KEYS",
                "ACTIVITY_TYPE_WEB3_ONBOARDING",
                "ACTIVITY_TYPE_WEB3_RECREATE_BACKUP",
                "ACTIVITY_TYPE_MATCH_TRANSFER_DEPOSIT",
                "ACTIVITY_TYPE_MATCH_TRANSFER_WITHDRAWAL",
                "ACTIVITY_TYPE_WEB3_DEVICE_RECOVERY",
                "ACTIVITY_TYPE_STAKING_CRYPTO_REBATE",
                "ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL",
                "ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_RETURN",
                "ACTIVITY_TYPE_WEB3_DEPOSIT_TRANSACTION",
                "ACTIVITY_TYPE_ADVANCED_TRANSFER",
                "ACTIVITY_TYPE_WEB3_UPLOAD_SECURITY_KEY",
                "ACTIVITY_TYPE_WEB3_KEY_EXPORT",
                "ACTIVITY_TYPE_WEB3_ARCHIVE_SECURITY_KEY"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "secondary_types",
            "description": "ActivitySecondaryTypes to filter by.\n\n - ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order \u0026 Allocation secondary types\n - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types\n - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types\n - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types\n - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types\n - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_SECONDARY_TYPE_UNSPECIFIED",
                "ACTIVITY_SECONDARY_TYPE_BUY",
                "ACTIVITY_SECONDARY_TYPE_SELL",
                "ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER",
                "ACTIVITY_SECONDARY_TYPE_SWEEP_TRANSFER",
                "ACTIVITY_SECONDARY_TYPE_CB_LENDS",
                "ACTIVITY_SECONDARY_TYPE_CB_BORROWS",
                "ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER",
                "ACTIVITY_SECONDARY_TYPE_WEB3_WALLET",
                "ACTIVITY_SECONDARY_TYPE_QUALIFIED_CUSTODIAN_WALLET",
                "ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start_date",
            "description": "Start date to filter activities by in RFC3339 Time format. Requires end_date to be specified if start_date provided. ",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end_date",
            "description": "End date to filter activities by in RFC3339 Time format. Requires start_date to be specified if end_date provided. ",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search",
            "description": "Query string to search titles and descriptions for.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Activity cursor to retrieve additional results strictly after.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of activities to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categories",
            "description": "ActivityCategories to filter by.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACTIVITY_CATEGORY_UNSPECIFIED",
                "ACTIVITY_CATEGORY_ORDER",
                "ACTIVITY_CATEGORY_TRANSACTION",
                "ACTIVITY_CATEGORY_ACCOUNT",
                "ACTIVITY_CATEGORY_ADMIN",
                "ACTIVITY_CATEGORY_LENDING",
                "ACTIVITY_CATEGORY_ALLOCATION",
                "ACTIVITY_CATEGORY_USER_CHANGE_REQUEST_NO_PAS",
                "ACTIVITY_CATEGORY_WEB3_SIGNING_PAYLOAD"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "processing_in_front",
            "description": "Whether sort processing activities in front",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order of activities",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/portfolios/{portfolio_id}/products/{product_id}/financing": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioFinancingProductStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.PortfolioFinancingProductStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.PortfolioFinancingProductStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_interval",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "TWO_HUNDRED_FIFTY_MS_FINANCING"
            ],
            "default": "TWO_HUNDRED_FIFTY_MS_FINANCING"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/portfolios/{portfolio_id}/wallets/balances/{currency_symbol}": {
      "get": {
        "operationId": "PrimeAPI_GetPortfolioWalletsBalancesStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.GetBalancesStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.GetBalancesStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio to get balances for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "description": "The filter for symbol of the currency to get balances for",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/portfolios/{portfolio_id}/wallets/{wallet_id}/balances": {
      "get": {
        "operationId": "PrimeAPI_GetWalletBalancesStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.GetBalancesStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.GetBalancesStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio that contains the wallet",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "description": "The ID of the wallet to get balances for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "description": "Optional filter for symbol of the currency to get balances for",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/products": {
      "get": {
        "operationId": "PrimeAPI_GetProductsStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.GetProductsStreamResponseBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.GetProductsStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Number of products to return in the initial snapshot.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "update_interval",
            "description": "Time between each patch for the products",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "TWO_HUNDRED_FIFTY_MS_PRODUCTS",
              "THREE_SECOND_PRODUCTS"
            ],
            "default": "TWO_HUNDRED_FIFTY_MS_PRODUCTS"
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "portfolio_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/products/{product_id}/candles": {
      "get": {
        "operationId": "PrimeAPI_GetCandlesStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetCandlesStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.brokerage.proxy.trading.api.GetCandlesStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The trading pair, i.e. 'BTC-USD'",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "description": "The candle interval (e.g. 1m, 5m, 15m)",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "UNKNOWN_GRANULARITY",
              "ONE_MINUTE",
              "FIVE_MINUTE",
              "FIFTEEN_MINUTE",
              "THIRTY_MINUTE",
              "ONE_HOUR",
              "TWO_HOUR",
              "SIX_HOUR",
              "ONE_DAY"
            ],
            "default": "UNKNOWN_GRANULARITY"
          },
          {
            "name": "limit",
            "description": "Number of candles to return in the initial snapshot. Maximum of 300",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "update_interval",
            "description": "Time between each patch, limited to 1 second for now due to implementation details.",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "ONE_SECOND_CANDLE"
            ],
            "default": "ONE_SECOND_CANDLE"
          },
          {
            "name": "geolocation.locality",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "geolocation.country",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_id",
            "description": "optional field used for feature flags",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/products/{product_id}/depth": {
      "get": {
        "operationId": "PrimeAPI_GetDepthStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetDepthStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.brokerage.proxy.trading.api.GetDepthStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_interval",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "TWO_HUNDRED_FIFTY_MS_DEPTH",
              "FIVE_HUNDRED_MS_DEPTH"
            ],
            "default": "TWO_HUNDRED_FIFTY_MS_DEPTH"
          },
          {
            "name": "geolocation.locality",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "geolocation.country",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/products/{product_id}/ladder": {
      "get": {
        "operationId": "PrimeAPI_GetLadderStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetLadderStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.brokerage.proxy.trading.api.GetLadderStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "Product id for the requested ladder",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_interval",
            "description": "Time between each patch for the ladder",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FIFTY_MS_LADDER",
              "TWO_HUNDRED_FIFTY_MS_LADDER",
              "FIVE_HUNDRED_MS_LADDER"
            ],
            "default": "FIFTY_MS_LADDER"
          },
          {
            "name": "aggregation",
            "description": "Aggregation amount for the requested ladder",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "order_amount",
            "description": "(Deprecated) Order amount for the requested ladder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fee_adjust",
            "description": "True if the requested ladder is fee adjust",
            "in": "query",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "geolocation.locality",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "geolocation.country",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/products/{product_id}/order_simulation": {
      "get": {
        "operationId": "PrimeAPI_GetOrderSimulationStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetOrderSimulationStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.brokerage.proxy.trading.api.GetOrderSimulationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "Product id for the requested ladder",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_interval",
            "description": "Time between each patch for the order simulation",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FIFTY_MS_LADDER",
              "TWO_HUNDRED_FIFTY_MS_LADDER",
              "FIVE_HUNDRED_MS_LADDER"
            ],
            "default": "FIFTY_MS_LADDER"
          },
          {
            "name": "order_amount",
            "description": "Order amount for the requested ladder",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "fee_adjust",
            "description": "True if the requested ladder is fee adjust",
            "in": "query",
            "required": true,
            "type": "boolean"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/products/{product_id}/stats": {
      "get": {
        "operationId": "PrimeAPI_GetProductStatsStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetProductStatsStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.brokerage.proxy.trading.api.GetProductStatsStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The trading pair, i.e. 'BTC-USD'",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_interval",
            "description": "Time between each patch for the stats",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "TWO_HUNDRED_FIFTY_MS_STATS"
            ],
            "default": "TWO_HUNDRED_FIFTY_MS_STATS"
          },
          {
            "name": "geolocation.locality",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "geolocation.country",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/products/{product_id}/trades": {
      "get": {
        "operationId": "PrimeAPI_GetMarketTradesStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetMarketTradesStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.brokerage.proxy.trading.api.GetMarketTradesStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The trading pair, i.e. 'BTC-USD'",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of trades to return.",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "venue_filters",
            "description": "List of Venue filters to apply on trades",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "COINBASE",
                "BITSTAMP",
                "LMAX",
                "KRAKEN",
                "FTX",
                "NEPTUNE"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "side_filter",
            "description": "Side filters to apply on trades",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL_ORDERS",
              "BUY_ORDERS",
              "SELL_ORDERS"
            ],
            "default": "ALL_ORDERS"
          },
          {
            "name": "update_interval",
            "description": "Time between each patch for the market trades",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "HUNDRED_MS_MARKET_TRADES",
              "TWO_HUNDRED_FIFTY_MS_MARKET_TRADES"
            ],
            "default": "HUNDRED_MS_MARKET_TRADES"
          },
          {
            "name": "order_by_field",
            "description": "The field the data can be ordered by (e.g. price)",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PRICE",
              "AMOUNT",
              "TIME",
              "EXCHANGE"
            ],
            "default": "PRICE"
          },
          {
            "name": "sort_direction",
            "description": "The direction the data will be ordered by (e.g. ASC | DSC)",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "default": "ASC"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/vehicles/{vehicle_id}/balances": {
      "get": {
        "operationId": "PrimeAPI_GetVehicleBalancesStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.GetBalancesStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.GetBalancesStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "description": "The ID of the vehicle to get balances for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "description": "Optional filter for symbol of the currency to get balances for",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/vehicles/{vehicle_id}/currencies": {
      "get": {
        "operationId": "PrimeAPI_GetVehicleCurrenciesStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.GetVehicleCurrenciesStreamResponseBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.GetVehicleCurrenciesStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbols",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "only_billable_currencies",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/vehicles/{vehicle_id}/financing": {
      "get": {
        "operationId": "PrimeAPI_GetVehicleFinancingStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.VehicleFinancingStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.VehicleFinancingStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_interval",
            "description": "Amount of time in ms between updates",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "TWO_HUNDRED_FIFTY_MS_FINANCING"
            ],
            "default": "TWO_HUNDRED_FIFTY_MS_FINANCING"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/vehicles/{vehicle_id}/financing/portfolio_margin": {
      "get": {
        "operationId": "PrimeAPI_GetVehiclePortfolioMarginStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.VehiclePortfolioMarginStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.VehiclePortfolioMarginStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_interval",
            "description": "Amount of time in ms between updates",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "TWO_HUNDRED_FIFTY_MS_FINANCING"
            ],
            "default": "TWO_HUNDRED_FIFTY_MS_FINANCING"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/stream/vehicles/{vehicle_id}/spot_prices": {
      "get": {
        "operationId": "PrimeAPI_GetVehicleSpotPricesStream",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.GetVehicleSpotPricesStreamBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.GetVehicleSpotPricesStreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fiat_currency_symbol",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "currency_symbols",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/system_status": {
      "get": {
        "operationId": "PrimeAPI_GetSystemStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.SystemStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/team_member/detail": {
      "get": {
        "operationId": "PrimeAPI_GetTeamMemberDetails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetTeamMemberDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "The entity id",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "description": "The user id",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "description": "The user email",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/team_members": {
      "get": {
        "operationId": "PrimeAPI_GetTeamMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetTeamMembersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "query_level",
            "description": "The query level",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "PORTFOLIO",
              "ENTITY",
              "ORGANIZATION",
              "USER"
            ],
            "default": "PORTFOLIO"
          },
          {
            "name": "query_ids",
            "description": "The query IDs",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of users to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "search",
            "description": "Search query to match user name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "permission",
            "description": "Permission to filter all users by",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PERMISSION_UNKNOWN",
              "PERMISSION_READ",
              "PERMISSION_INITIATE",
              "PERMISSION_REVIEW",
              "PERMISSION_ADMIN",
              "PERMISSION_TRADE",
              "PERMISSION_VIDEO_APPROVE",
              "PERMISSION_TEAM_APPROVE",
              "PERMISSION_WEB3_SIGN"
            ],
            "default": "PERMISSION_UNKNOWN"
          },
          {
            "name": "roles",
            "description": "Users with these roles (or provided secondary roles) to include in response",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ROLE_UNKNOWN",
                "ROLE_AUTHORIZED_SIGNATORY",
                "ROLE_INITIATOR",
                "ROLE_APPROVER",
                "ROLE_AUDITOR",
                "ROLE_ADMINISTRATOR",
                "ROLE_TRADER",
                "ROLE_INTERNAL_TRADER",
                "ROLE_TEAM_MANAGER",
                "ROLE_FULL_TRADER",
                "ROLE_INTERNAL_AUDITOR"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "secondary_roles",
            "description": "Users with these secondary roles (or provided roles) to include in response",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SECONDARY_ROLE_UNKNOWN",
                "SECONDARY_ROLE_VIDEO_APPROVER",
                "SECONDARY_ROLE_TEAM_APPROVER",
                "SECONDARY_ROLE_WEB3_SIGNER"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "access_type_filter",
            "description": "The access type filter",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACCESS_TYPE_UNSPECIFIED",
              "ACCESS_TYPE_PORTFOLIO",
              "ACCESS_TYPE_ENTITY"
            ],
            "default": "ACCESS_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/transactions/{transaction_id}/video_upload_permissions": {
      "get": {
        "operationId": "PrimeAPI_GetVideoUploadPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.GetVideoUploadPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/user/{entity_id}/permission": {
      "get": {
        "operationId": "PrimeAPI_GetUserEntityLevelPermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetUserEntityLevelPermissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "permission",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PERMISSION_UNKNOWN",
              "PERMISSION_READ",
              "PERMISSION_INITIATE",
              "PERMISSION_REVIEW",
              "PERMISSION_ADMIN",
              "PERMISSION_TRADE",
              "PERMISSION_VIDEO_APPROVE",
              "PERMISSION_TEAM_APPROVE",
              "PERMISSION_WEB3_SIGN"
            ],
            "default": "PERMISSION_UNKNOWN"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/users/invite": {
      "post": {
        "operationId": "PrimeAPI_PostBulkInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostBulkUserInvitationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostBulkUserInvitationRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/users/invitee_access": {
      "post": {
        "operationId": "PrimeAPI_FetchInviteeAccessByEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.FetchInviteeAccessByEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.FetchInviteeAccessByEmailRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/users/{user_id}": {
      "get": {
        "operationId": "PrimeAPI_GetUserInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetUserInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "The user ID, use 'self' to get the current user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "description": "The portfolio ID, used to verify permission.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/users/{user_id}/entities/{entity_id}/pending_consensus": {
      "get": {
        "operationId": "PrimeAPI_GetPendingConsensus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPendingConsensusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "reference_type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "REFERENCE_TYPE_INVITATION",
              "REFERENCE_TYPE_USER_CHANGE",
              "REFERENCE_TYPE_USER_CHANGES"
            ],
            "default": "REFERENCE_TYPE_INVITATION"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/users/{user_id}/fido/challenge": {
      "post": {
        "operationId": "PrimeAPI_PostFidoChallenge",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostFidoChallengeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "User UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostFidoChallengeRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/users/{user_id}/fido/challenge/create": {
      "post": {
        "operationId": "PrimeAPI_PostFidoChallengeCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostFidoChallengeCreateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "User UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/users/{user_id}/fido/register": {
      "get": {
        "operationId": "PrimeAPI_GetFidoRegistration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetFidoRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "User UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_PostFidoRegistration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostFidoRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "User UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostFidoRegistrationRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/users/{user_id}/hierarchy": {
      "get": {
        "operationId": "PrimeAPI_GetUserHierarchy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetUserHierarchyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "The user ID, use 'self' to get the current user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiences",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EXPERIENCE_UNKNOWN",
                "EXPERIENCE_PRIME",
                "EXPERIENCE_PRIME_VAULT_ONLY",
                "EXPERIENCE_CUSTODY",
                "EXPERIENCE_ALL"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/users/{user_id}/investment_vehicle_portfolios": {
      "get": {
        "operationId": "PrimeAPI_GetInvestmentVehiclePortfolios",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetInvestmentVehiclePortfoliosResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "vehicle_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "include_roles",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/users/{user_id}/portfolios": {
      "get": {
        "operationId": "PrimeAPI_GetUserPortfolios",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetUserPortfoliosResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/users/{user_id}/preferences": {
      "get": {
        "operationId": "PrimeAPI_GetUserPreferences",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.UserPreferences"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_PostUserPreferences",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.UserPreferences"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostUserPreferencesRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/users/{user_id}/roles/update": {
      "post": {
        "operationId": "PrimeAPI_BulkUserRolesUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.BulkUserRolesUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.BulkUserRolesUpdateRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/users/{user_id}/{portfolio_id}/userRoles": {
      "get": {
        "operationId": "PrimeAPI_GetUserRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetUserRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{entity_id}/dal_collateral_snapshots": {
      "get": {
        "operationId": "PrimeAPI_GetDalCollateralSnapshots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.financing.GetDalCollateralSnapshotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{entity_id}/pm/locates": {
      "get": {
        "operationId": "PrimeAPI_GetCurrentLocates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.financing.GetCurrentLocatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locate_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "conversion_date",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_SubmitLocates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.financing.SubmitLocatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.financing.SubmitLocatesRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{entity_id}/pm/locates/assets": {
      "get": {
        "operationId": "PrimeAPI_GetLocateAssets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.financing.GetLocateAssetsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{entity_id}/pm/multiple_locates": {
      "post": {
        "operationId": "PrimeAPI_SubmitMultipleLocates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.financing.SubmitMultipleLocatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.financing.SubmitMultipleLocatesRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{entity_id}/portfolios/{portfolio_id}/pm/locates": {
      "get": {
        "operationId": "PrimeAPI_GetAllLocateByPortfolio",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.financing.GetAllLocatesByPortfolioResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_key",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filters.statuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filters.start_conversion_date",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filters.end_conversion_date",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.direction",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{entity_id}/submit_recall": {
      "post": {
        "operationId": "PrimeAPI_SubmitDALRecall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.financing.SubmitDALRecallResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.financing.SubmitDALRecallRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/activities/{activity_id}/approve": {
      "post": {
        "operationId": "PrimeAPI_PostApproveVehicleActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostApproveVehicleActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostApproveVehicleActivityRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/activities/{activity_id}/reject": {
      "post": {
        "operationId": "PrimeAPI_PostRejectVehicleActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostRejectVehicleActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostRejectVehicleActivityRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/balances": {
      "get": {
        "operationId": "PrimeAPI_GetVehicleBalances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.GetBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "description": "The ID of the vehicle to get balances for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "description": "Optional filter for symbol of the currency to get balances for",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/billing_address": {
      "post": {
        "operationId": "PrimeAPI_PostUpdateBillingAddress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostUpdateBillingAddressResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostUpdateBillingAddressRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/billing_preference": {
      "get": {
        "operationId": "PrimeAPI_GetBillingPreference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetBillingPreferenceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_PostUpdateBillingPreference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.NewConsensusActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostUpdateBillingPreferenceRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/currencies": {
      "get": {
        "operationId": "PrimeAPI_GetVehicleCurrencies",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/coinbase.custody.api.Currency"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbols",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "only_billable_currencies",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/documents/signed/{document_key}": {
      "get": {
        "operationId": "PrimeAPI_GetSignedDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetSignedDocumentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "document_key",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "DOCUMENT_TYPE_UNKNOWN",
              "DOCUMENT_TYPE_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_STACKING_ADDENDUM",
              "DOCUMENT_TYPE_NFT_ADDENDUM",
              "DOCUMENT_TYPE_ETH_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_WEB3_TERMS_AND_CONDITIONS",
              "DOCUMENT_TYPE_LIQUID_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_LSETH_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_USDC_REWARDS_ADDENDUM"
            ]
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/documents/{document_key}": {
      "get": {
        "operationId": "PrimeAPI_GetDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetDocumentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "document_key",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "DOCUMENT_TYPE_UNKNOWN",
              "DOCUMENT_TYPE_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_STACKING_ADDENDUM",
              "DOCUMENT_TYPE_NFT_ADDENDUM",
              "DOCUMENT_TYPE_ETH_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_WEB3_TERMS_AND_CONDITIONS",
              "DOCUMENT_TYPE_LIQUID_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_LSETH_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_USDC_REWARDS_ADDENDUM"
            ]
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_PostDocumentSignature",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostDocumentSignatureResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "document_key",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "DOCUMENT_TYPE_UNKNOWN",
              "DOCUMENT_TYPE_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_STACKING_ADDENDUM",
              "DOCUMENT_TYPE_NFT_ADDENDUM",
              "DOCUMENT_TYPE_ETH_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_WEB3_TERMS_AND_CONDITIONS",
              "DOCUMENT_TYPE_LIQUID_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_LSETH_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_USDC_REWARDS_ADDENDUM"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostDocumentSignatureRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/documents/{document_key}/status": {
      "get": {
        "operationId": "PrimeAPI_GetDocumentSignatureStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetDocumentSignatureStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "document_key",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "DOCUMENT_TYPE_UNKNOWN",
              "DOCUMENT_TYPE_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_STACKING_ADDENDUM",
              "DOCUMENT_TYPE_NFT_ADDENDUM",
              "DOCUMENT_TYPE_ETH_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_WEB3_TERMS_AND_CONDITIONS",
              "DOCUMENT_TYPE_LIQUID_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_LSETH_STAKING_ADDENDUM",
              "DOCUMENT_TYPE_USDC_REWARDS_ADDENDUM"
            ]
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/domicile_category": {
      "post": {
        "operationId": "PrimeAPI_GetIvDomicileCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetIvDomicileCategoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetIvDomicileCategoryRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/email_list": {
      "get": {
        "operationId": "PrimeAPI_GetBillingEmailList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetBillingEmailListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_PostUpdateBillingEmailList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostUpdateBillingEmailListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.PostUpdateBillingEmailListRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/financing_product_permissions": {
      "get": {
        "operationId": "PrimeAPI_GetFinancingProductPermisions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetFinancingProductPermisionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/invoices": {
      "get": {
        "operationId": "PrimeAPI_GetInvoices",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/coinbase.custody.api.Invoice"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoice_number",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billing_year",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/invoices/prime": {
      "get": {
        "operationId": "PrimeAPI_GetPrimeInvoices",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/coinbase.eng.prime.api.api.Invoice"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoice_number",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billing_year",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/invoices/{uuid}/download": {
      "get": {
        "operationId": "PrimeAPI_GetInvoiceDownloadLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetInvoiceDownloadLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/invoices_balance": {
      "get": {
        "operationId": "PrimeAPI_GetInvoicesRemainingBalance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetInvoicesRemainingBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/margin_reports": {
      "get": {
        "operationId": "PrimeAPI_GetConversionSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.financing.GetConversionSummariesV2Response"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/organization": {
      "get": {
        "operationId": "PrimeAPI_GetOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/payment_methods": {
      "get": {
        "operationId": "PrimeAPI_ListPaymentMethods",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListPaymentMethodsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/payment_methods/{payment_method_id}": {
      "post": {
        "operationId": "PrimeAPI_DeletePaymentMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.DeletePaymentMethodResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.DeletePaymentMethodRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/portfolio/financing_product_permissions": {
      "get": {
        "operationId": "PrimeAPI_GetPortfoliosFinancingProductPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.financing.PortfolioOverviewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/portfolios/balances": {
      "get": {
        "operationId": "PrimeAPI_GetIVPortfolioBalances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetIVPortfolioBalancesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/portfolios/{portfolio_id}/stablecoin_rewards/{currency}/earnings": {
      "get": {
        "operationId": "PrimeAPI_GetStablecoinRewardsEarnings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetStablecoinRewardsEarningsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/preferences": {
      "get": {
        "operationId": "PrimeAPI_GetPreference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPreferenceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_CreateOrUpdatePreference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateOrUpdatePreferenceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateOrUpdatePreferenceRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/range_statement": {
      "get": {
        "operationId": "PrimeAPI_GenerateStatement",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GenerateStatementResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date_rfc3339",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end_date_rfc3339",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "portfolio_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statement_type",
            "description": " - STATEMENT_TYPE_CUSTODY_EOM: This type correspond to portfolio level statement\n - STATEMENT_TYPE_PRIME_ENTITY_LEVEL: This type correspond to entity level statement",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "STATEMENT_TYPE_UNKNOWN",
              "STATEMENT_TYPE_CUSTODY_EOM",
              "STATEMENT_TYPE_PRIME_ENTITY_LEVEL"
            ],
            "default": "STATEMENT_TYPE_UNKNOWN"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/restrictions": {
      "get": {
        "operationId": "PrimeAPI_GetIVRestrictions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetIVRestrictionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/spot_prices": {
      "get": {
        "operationId": "PrimeAPI_GetVehicleSpotPrices",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/coinbase.eng.prime.api.api.SpotPrice"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fiat_currency_symbol",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "currency_symbols",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/stablecoin_rewards/{currency}/enroll": {
      "post": {
        "operationId": "PrimeAPI_EnrollInStablecoinRewards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.EnrollInStablecoinRewardsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.EnrollInStablecoinRewardsRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/stablecoin_rewards/{currency}/enrollment": {
      "get": {
        "operationId": "PrimeAPI_GetStablecoinRewardsEnrollment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetStablecoinRewardsEnrollmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/transfer_methods": {
      "get": {
        "operationId": "PrimeAPI_GetTransferMethods",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetTransferMethodsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "description": "The investment vehicle you want to transfer to/from",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "description": "The symbol of the currency you want to transfer",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "transaction_type",
            "description": "The type of transaction you want to initiate",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "TRANSACTION_TYPE_UNKNOWN",
              "TRANSACTION_TYPE_DEPOSIT",
              "TRANSACTION_TYPE_WITHDRAWAL",
              "TRANSACTION_TYPE_REWARD",
              "TRANSACTION_TYPE_SWEEP_WITHDRAWAL",
              "TRANSACTION_TYPE_SWEEP_DEPOSIT",
              "TRANSACTION_TYPE_TRANSFER_WITHDRAWAL",
              "TRANSACTION_TYPE_TRANSFER_DEPOSIT",
              "TRANSACTION_TYPE_PROXY_WITHDRAWAL",
              "TRANSACTION_TYPE_PROXY_DEPOSIT",
              "TRANSACTION_TYPE_COINBASE_DEPOSIT",
              "TRANSACTION_TYPE_KEY_REGISTRATION",
              "TRANSACTION_TYPE_BILLING_WITHDRAWAL",
              "TRANSACTION_TYPE_DELEGATION",
              "TRANSACTION_TYPE_UNDELEGATION",
              "TRANSACTION_TYPE_RESTAKE",
              "TRANSACTION_TYPE_COMPLETE_UNBONDING",
              "TRANSACTION_TYPE_COINBASE_REFUND",
              "TRANSACTION_TYPE_WITHDRAW_UNBONDED",
              "TRANSACTION_TYPE_STAKE_ACCOUNT_CREATE",
              "TRANSACTION_TYPE_CHANGE_VALIDATOR",
              "TRANSACTION_TYPE_STAKE",
              "TRANSACTION_TYPE_UNSTAKE",
              "TRANSACTION_TYPE_INTERNAL_DEPOSIT",
              "TRANSACTION_TYPE_INTERNAL_WITHDRAWAL",
              "TRANSACTION_TYPE_STAKE_AUTHORIZE_WITH_SEED",
              "TRANSACTION_TYPE_REMOVE_AUTHORIZED_PARTY",
              "TRANSACTION_TYPE_SLASH",
              "TRANSACTION_TYPE_CLAIM_REWARDS",
              "TRANSACTION_TYPE_VOTE_AUTHORIZE"
            ],
            "default": "TRANSACTION_TYPE_UNKNOWN"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/{currency_symbol}/topics": {
      "get": {
        "operationId": "PrimeAPI_GetGovernanceTopics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetGovernanceTopicsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/{currency_symbol}/topics/{topic_id}": {
      "get": {
        "operationId": "PrimeAPI_GetGovernanceTopic",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.GovernanceTopic"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/vehicles/{vehicle_id}/{currency_symbol}/validators": {
      "get": {
        "operationId": "PrimeAPI_GetVehicleValidators",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/coinbase.custody.api.StakingValidator"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/video_uploads": {
      "get": {
        "operationId": "PrimeAPI_ListVideoUploads",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.ListVideoUploadsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "transaction_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/video_uploads/create": {
      "post": {
        "operationId": "PrimeAPI_CreateVideoUpload",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.VideoUpload"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.CreateVideoUploadRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/video_uploads/{upload_id}": {
      "get": {
        "operationId": "PrimeAPI_GetVideoUpload",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.VideoUpload"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "upload_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/video_uploads/{upload_id}/finish": {
      "post": {
        "operationId": "PrimeAPI_FinishVideoUpload",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.VideoUpload"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "upload_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.FinishVideoUploadRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/wallets/{wallet_id}/voting_weights": {
      "get": {
        "operationId": "PrimeAPI_GetGovernanceVotingWeights",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.custody.api.GetVotingWeightsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "topic_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "portfolio_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/web3_device": {
      "post": {
        "operationId": "PrimeAPI_UpdateWeb3Device",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.UpdateWeb3DeviceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.UpdateWeb3DeviceRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v1/{currency}/rate_cards": {
      "get": {
        "operationId": "PrimeAPI_GetRateCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetRateCardResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/groups/{group_id}/api-key": {
      "get": {
        "operationId": "PrimeAPI_GetAPIKeysV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListAPIKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search_text",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "states",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "API_KEY_STATE_UNKNOWN",
                "API_KEY_STATE_PENDING",
                "API_KEY_STATE_ACTIVATED",
                "API_KEY_STATE_DEACTIVATED",
                "API_KEY_STATE_EXPIRED",
                "API_KEY_STATE_DORMANT"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PORTFOLIO",
              "ENTITY",
              "ORGANIZATION"
            ],
            "default": "PORTFOLIO"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/groups/{group_id}/api-key-count": {
      "get": {
        "operationId": "PrimeAPI_GetAPIKeyCountV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetAPIKeyCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "created_by_user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "states",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "API_KEY_STATE_UNKNOWN",
                "API_KEY_STATE_PENDING",
                "API_KEY_STATE_ACTIVATED",
                "API_KEY_STATE_DEACTIVATED",
                "API_KEY_STATE_EXPIRED",
                "API_KEY_STATE_DORMANT"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/groups/{group_id}/api-key/activate": {
      "post": {
        "operationId": "PrimeAPI_PostActivateAPIKeyV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ActivateAPIKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ActivateAPIKeyRequestV2"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/groups/{group_id}/api-key/create": {
      "post": {
        "operationId": "PrimeAPI_PostCreateAPIKeyV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateAPIKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateAPIKeyRequestV2"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/groups/{group_id}/api-key/deactivate": {
      "post": {
        "operationId": "PrimeAPI_PostDeactivateAPIKeyV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.DeactivateAPIKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.DeactivateAPIKeyRequestV2"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/groups/{group_id}/api-key/{access_key}": {
      "get": {
        "operationId": "PrimeAPI_GetAPIKeyV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetAPIKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "access_key",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/portfolios/{portfolio_id}/activities/{activity_id}/activity_details": {
      "get": {
        "operationId": "PrimeAPI_GetPrimeActivityDetailsV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPrimeActivityDetailsV2Response"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/portfolios/{portfolio_id}/transactions": {
      "post": {
        "operationId": "PrimeAPI_CreateTransactionV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.NewConsensusActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio to perform transaction action with",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateTransactionV2Request"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/portfolios/{portfolio_id}/transactions/initiate_signing": {
      "post": {
        "operationId": "PrimeAPI_InitiateTransactionSigning",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.InitiateTransactionSigningResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.InitiateTransactionSigningRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/portfolios/{portfolio_id}/wallets": {
      "get": {
        "operationId": "PrimeAPI_ListWalletsV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListWalletsV2Response"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "states",
            "description": "Filter to only return specified states",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "WALLET_STATE_UNKNOWN",
                "WALLET_STATE_PENDING",
                "WALLET_STATE_IN_USE",
                "WALLET_STATE_REMOVED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "currency_symbols",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "types",
            "description": "Filter to only return specified types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "WALLET_TYPE_UNKNOWN",
                "WALLET_TYPE_COLD",
                "WALLET_TYPE_TRADING",
                "WALLET_TYPE_WEB3",
                "WALLET_TYPE_PRIME_OMNIBUS_QC"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of wallets to retrieve",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "fetch_wallet_option.resolve_balances",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fetch_wallet_option.resolve_currency",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fetch_wallet_option.resolve_staking_info",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fetch_wallet_option.resolve_vesting_info",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fetch_wallet_option.resolve_available_actions",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "name",
            "description": "Filter wallets that contain given name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by",
            "description": "Sorting By",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "LIST_WALLETS_SORT_BY_UNSPECIFIED",
              "LIST_WALLETS_SORT_BY_CREATED_AT",
              "LIST_WALLETS_SORT_BY_BALANCE"
            ],
            "default": "LIST_WALLETS_SORT_BY_UNSPECIFIED"
          },
          {
            "name": "actions",
            "description": "Filter to only return specified available actions",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "WALLET_ACTION_UNKNOWN",
                "WALLET_ACTION_WITHDRAWAL",
                "WALLET_ACTION_DEPOSIT",
                "WALLET_ACTION_STAKE",
                "WALLET_ACTION_UNSTAKE",
                "WALLET_ACTION_GOVERNANCE",
                "WALLET_ACTION_PARTIAL_STAKE",
                "WALLET_ACTION_VESTING",
                "WALLET_ACTION_VOTING",
                "WALLET_ACTION_RESTAKING",
                "WALLET_ACTION_CHANGE_VALIDATOR",
                "WALLET_ACTION_DELEGATE",
                "WALLET_ACTION_CONVERSION"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      },
      "post": {
        "operationId": "PrimeAPI_CreateWalletV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.NewConsensusActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateWalletV2Request"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/portfolios/{portfolio_id}/web3_actions": {
      "post": {
        "operationId": "PrimeAPI_CreateWeb3Action",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.NewConsensusActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.CreateWeb3ActionRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/portfolios/{portfolio_id}/web3_actions/signal": {
      "post": {
        "operationId": "PrimeAPI_SignalWeb3Action",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.SignalWeb3ActionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.SignalWeb3ActionRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/portfolios/{portfolio_id}/web3_actions/validate_security_key": {
      "post": {
        "operationId": "PrimeAPI_ValidateWeb3SecurityKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ValidateWeb3SecurityKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ValidateWeb3SecurityKeyRequest"
            }
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/portfolios/{portfolio_id}/web3_security_keys": {
      "get": {
        "operationId": "PrimeAPI_ListWeb3SecurityKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.ListWeb3SecurityKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/stream/portfolios/{portfolio_id}/activities/{activity_id}/activity_details": {
      "get": {
        "operationId": "PrimeAPI_GetPrimeActivityDetailsStreamV2",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPrimeActivityDetailsV2StreamResponseBody"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.GetPrimeActivityDetailsV2StreamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/stream/vehicles/{vehicle_id}/financing/portfolio_margin": {
      "get": {
        "operationId": "PrimeAPI_GetVehiclePortfolioMarginStreamV2",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/coinbase.eng.prime.api.api.VehiclePortfolioMarginStreamBodyV2"
                },
                "error": {
                  "$ref": "#/definitions/grpc.gateway.runtime.StreamError"
                }
              },
              "title": "Stream result of coinbase.eng.prime.api.api.VehiclePortfolioMarginStreamResponseV2"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_interval",
            "description": "Amount of time in ms between updates",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "TWO_HUNDRED_FIFTY_MS_FINANCING"
            ],
            "default": "TWO_HUNDRED_FIFTY_MS_FINANCING"
          },
          {
            "name": "margin_summary_context",
            "description": "optional field to request a subset of MarginSummary data.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSPECIFIED",
              "CREDIT_USAGE"
            ],
            "default": "UNSPECIFIED"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    },
    "/v2/vehicles/{vehicle_id}/conversion_summaries": {
      "get": {
        "operationId": "PrimeAPI_GetConversionSummariesV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.eng.prime.api.api.GetConversionSummariesV2Response"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "vehicle_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "PrimeAPI"
        ]
      }
    }
  },
  "definitions": {
    "coinbase.brokerage.proxy.common.BlockTradeLimitLimitFok": {
      "type": "object",
      "properties": {
        "cross_id": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        },
        "crossing_type": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.CrossingType"
        }
      }
    },
    "coinbase.brokerage.proxy.common.CancelReason": {
      "type": "string",
      "enum": [
        "CANCEL_REASON_UNSPECIFIED",
        "CANCEL_REASON_FILLED_SIZE_INCLUSIVE_OF_FEES",
        "CANCEL_REASON_GTD_ORDER_EXPIRED",
        "CANCEL_REASON_USER_CANCEL_REQUESTED",
        "CANCEL_REASON_ALGO_DISCRETION",
        "CANCEL_REASON_PARENT_CANCELLATION",
        "CANCEL_REASON_BELOW_MIN_ORDER_SIZE",
        "CANCEL_REASON_ALGO_BY_DEFINITION",
        "CANCEL_REASON_VENUE_DISABLED",
        "CANCEL_REASON_VENUE_PRODUCT_DISABLED",
        "CANCEL_REASON_PASSIVE_REBALANCE_REMOVAL",
        "CANCEL_REASON_PASSIVE_REBALANCE_PRICE_ADJUST",
        "CANCEL_REASON_NO_TRADEABILITY",
        "CANCEL_REASON_PARENT_SWEEP_DUST",
        "CANCEL_REASON_NO_LIQUIDITY_CANCEL",
        "CANCEL_REASON_VENUE_FUNDS_INSUFFICIENT",
        "CANCEL_REASON_MISSING_DUST_NOTIONAL_RATE",
        "CANCEL_REASON_EXCEEDED_DUST_NOTIONAL_MAX",
        "CANCEL_REASON_DUSTBUSTER_UNAVAILABLE",
        "CANCEL_REASON_MAXIMUM_MARKET_WHEELS",
        "CANCEL_REASON_MAXIMUM_MARKET_DURATION",
        "CANCEL_REASON_DUSTBUSTER_REJECTED",
        "CANCEL_REASON_DISPLAY_SIZE_BELOW_MIN",
        "CANCEL_REASON_MAXIMUM_ATTEMPTS",
        "CANCEL_REASON_POST_ONLY_PRICE_MARKETABLE",
        "CANCEL_REASON_INTERNAL_ERROR",
        "CANCEL_REASON_INVALID_FIELD_ON_CHILD",
        "CANCEL_REASON_ORDER_LIFETIME_EXCEEDED",
        "CANCEL_REASON_INSUFFICIENT_HOLD_REMAINING",
        "CANCEL_REASON_VENUE_DISCONNECT_CANCEL",
        "CANCEL_REASON_STP_CANCEL",
        "CANCEL_REASON_VENUE_ADMIN_CANCEL",
        "CANCEL_REASON_VENUE_COMPLETED",
        "CANCEL_REASON_CANCEL_REQUESTED",
        "CANCEL_REASON_PRICE_PROTECTION_POINT",
        "CANCEL_REASON_MISSING_SPOT_PRODUCT",
        "CANCEL_REASON_VENUE_PRODUCT_NOT_FOUND",
        "CANCEL_REASON_VENUE_PRODUCT_NO_LONGER_TRADABLE",
        "CANCEL_REASON_INVALID_EFFECTIVE_PRICE",
        "CANCEL_REASON_KILLSWITCH_ENABLED",
        "CANCEL_REASON_PENDING_ORDER_TIMEOUT",
        "CANCEL_REASON_FOK_ORDER_KILLED",
        "CANCEL_REASON_POST_ONLY_ORDER",
        "CANCEL_REASON_ORDER_EXPIRED",
        "CANCEL_REASON_PENDING_CANCEL_ORDER_TIMEOUT",
        "CANCEL_REASON_INSUFFICIENT_FUNDS"
      ],
      "default": "CANCEL_REASON_UNSPECIFIED"
    },
    "coinbase.brokerage.proxy.common.CommissionModel": {
      "type": "string",
      "enum": [
        "UNKNOWN_MODEL",
        "ALL_IN",
        "COST_PLUS"
      ],
      "default": "UNKNOWN_MODEL"
    },
    "coinbase.brokerage.proxy.common.CrossingType": {
      "type": "string",
      "enum": [
        "UNKNOWN_CROSSING_TYPE",
        "PRIME_TO_PRIME",
        "PRIME_TO_EXCHANGE"
      ],
      "default": "UNKNOWN_CROSSING_TYPE"
    },
    "coinbase.brokerage.proxy.common.Edit": {
      "type": "object",
      "properties": {
        "price": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "replace_accept_timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "coinbase.brokerage.proxy.common.Fill": {
      "type": "object",
      "properties": {
        "entry_id": {
          "type": "string"
        },
        "trade_id": {
          "type": "string"
        },
        "order_id": {
          "type": "string"
        },
        "trade_time": {
          "type": "string",
          "format": "date-time"
        },
        "trade_type": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "commission": {
          "type": "string"
        },
        "venue_id": {
          "type": "string"
        },
        "venue_name": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "sequence_timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "liquidity_indicator": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.LiquidityIndicator"
        },
        "metadata": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.FillMetadata"
        },
        "size_in_quote": {
          "type": "boolean"
        },
        "all_in_commission_details_client_commission": {
          "type": "string"
        },
        "cost_plus_commission_details_client_commission": {
          "type": "string"
        },
        "cost_plus_commission_details_venue_commission": {
          "type": "string"
        },
        "commission_model": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.CommissionModel"
        },
        "all_in_commission_details_ces_commission": {
          "type": "string"
        },
        "cost_plus_commission_details_ces_commission": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "quote_size": {
          "type": "string"
        },
        "is_dust_eligible": {
          "type": "boolean"
        }
      }
    },
    "coinbase.brokerage.proxy.common.FillMetadata": {
      "type": "object",
      "properties": {
        "original_price": {
          "type": "string"
        },
        "original_commission": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.common.FutureProductDetails": {
      "type": "object",
      "properties": {
        "risk_managed_by": {
          "$ref": "#/definitions/core.RiskManagementType"
        },
        "contract_expiry_type": {
          "$ref": "#/definitions/core.ContractExpiryType"
        }
      },
      "title": "Futures-specific product details"
    },
    "coinbase.brokerage.proxy.common.Heartbeat": {
      "type": "object",
      "properties": {
        "server_time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "coinbase.brokerage.proxy.common.JsonPatch": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.common.JsonPatchOperation"
          }
        }
      },
      "required": [
        "operations"
      ]
    },
    "coinbase.brokerage.proxy.common.JsonPatchOperation": {
      "type": "object",
      "example": {
        "op": "replace",
        "path": "/buys/0/size",
        "value": "1234.5678"
      },
      "properties": {
        "op": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      },
      "required": [
        "op",
        "path"
      ]
    },
    "coinbase.brokerage.proxy.common.LimitLimitGtc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "post_only": {
          "type": "boolean"
        },
        "display_quote_size": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.common.LimitLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "post_only": {
          "type": "boolean"
        },
        "display_quote_size": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.common.LiquidationMarketGtc": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.common.LiquidationMarketGtd": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "coinbase.brokerage.proxy.common.LiquidityIndicator": {
      "type": "string",
      "enum": [
        "UNKNOWN_LIQUIDITY_INDICATOR",
        "MAKER",
        "TAKER"
      ],
      "default": "UNKNOWN_LIQUIDITY_INDICATOR"
    },
    "coinbase.brokerage.proxy.common.MarginScope": {
      "type": "string",
      "enum": [
        "MARGIN_SCOPE_UNKNOWN",
        "MARGIN_SCOPE_CROSS",
        "MARGIN_SCOPE_ISOLATED"
      ],
      "default": "MARGIN_SCOPE_UNKNOWN"
    },
    "coinbase.brokerage.proxy.common.MarketMarketIoc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        }
      },
      "title": "Order entry configurations"
    },
    "coinbase.brokerage.proxy.common.Order": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "description": "The unique id for this order",
          "required": [
            "order_id"
          ]
        },
        "client_order_id": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string",
          "description": "The id of the portfolio that this order was created in'",
          "required": [
            "portfolio_id"
          ]
        },
        "product_id": {
          "type": "string",
          "description": "The product this order was created for e.g. 'BTC-USD'",
          "required": [
            "product_id"
          ]
        },
        "user_id": {
          "type": "string"
        },
        "side": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.OrderSide",
          "description": "The side of the market that the order is on e.g. 'BUY', 'SELL'",
          "required": [
            "side"
          ]
        },
        "order_configuration": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.OrderConfiguration"
        },
        "status": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.OrderExecutionStatus",
          "description": "The current state of the order",
          "required": [
            "status"
          ]
        },
        "time_in_force": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.TimeInForceType"
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp for when the order was created",
          "required": [
            "created_time"
          ]
        },
        "completion_percentage": {
          "type": "string",
          "description": "Completion percentage of order, as a stringified float. Value will be an empty string if percentage cannot be calculated.",
          "required": [
            "completion_percentage"
          ]
        },
        "filled_size": {
          "type": "string",
          "description": "Total filled size, in base currency",
          "required": [
            "filled_size"
          ]
        },
        "filled_value": {
          "type": "string",
          "description": "Total filled value, in quote currency",
          "required": [
            "filled_value"
          ]
        },
        "average_filled_price": {
          "type": "string"
        },
        "number_of_fills": {
          "type": "string"
        },
        "size_in_quote": {
          "type": "boolean"
        },
        "pending_cancel": {
          "type": "boolean"
        },
        "total_fees": {
          "type": "string"
        },
        "size_inclusive_of_fees": {
          "type": "boolean"
        },
        "quote_quantity_remaining": {
          "type": "string"
        },
        "base_quantity_remaining": {
          "type": "string"
        },
        "outstanding_hold_amount": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.OrderMetadata"
        },
        "total_value_after_fees": {
          "type": "string",
          "description": "derived field: filled_value + total_fees for buy orders and filled_value - total_fees for sell orders."
        },
        "display_size": {
          "type": "string"
        },
        "trigger_status": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.StopTriggerStatus"
        },
        "all_in_commission_details_client_commission": {
          "type": "string"
        },
        "cost_plus_commission_details_client_commission": {
          "type": "string"
        },
        "cost_plus_commission_details_venue_commission": {
          "type": "string"
        },
        "commission_model": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.CommissionModel"
        },
        "all_in_commission_details_ces_commission": {
          "type": "string"
        },
        "cost_plus_commission_details_ces_commission": {
          "type": "string"
        },
        "product_type": {
          "$ref": "#/definitions/core.ProductType",
          "description": "Product type of this order's product"
        },
        "product_details": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.ProductDetails"
        },
        "sole_venue_id": {
          "type": "string",
          "description": "sole_venue_id of this order's product. (Empty for products that are not necessarily tied to a single venue.)"
        },
        "order_placement_source": {
          "$ref": "#/definitions/core.OrderPlacementSource",
          "description": "Placement source of this order"
        },
        "last_fill_time": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the most recent fill for this order"
        },
        "intx_portfolio_id": {
          "type": "string"
        },
        "reject_reason": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.RejectReason"
        },
        "cancel_reason": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.CancelReason"
        },
        "is_dust_eligible": {
          "type": "boolean"
        },
        "edit_history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.common.Edit"
          },
          "description": "An array of the latest 5 edits per order"
        },
        "margin_scope": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.MarginScope"
        },
        "leverage": {
          "type": "string"
        }
      },
      "description": "This is the shared type for how orders are presented\nto the external world by the order read and order historical proxy API.",
      "required": [
        "order_id",
        "portfolio_id",
        "product_id",
        "type",
        "side",
        "created_time",
        "status"
      ]
    },
    "coinbase.brokerage.proxy.common.OrderConfiguration": {
      "type": "object",
      "properties": {
        "market_market_ioc": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.MarketMarketIoc"
        },
        "sor_limit_ioc": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.SorLimitIoc"
        },
        "sor_limit_fok": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.SorLimitFok"
        },
        "limit_limit_gtc": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.LimitLimitGtc"
        },
        "limit_limit_gtd": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.LimitLimitGtd"
        },
        "twap_limit_gtd": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.TwapLimitGtd"
        },
        "vwap_limit_gtd": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.VwapLimitGtd"
        },
        "stop_limit_stop_limit_gtc": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.StopLimitStopLimitGtc"
        },
        "stop_limit_stop_limit_gtd": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.StopLimitStopLimitGtd"
        },
        "block_trade_limit_limit_fok": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.BlockTradeLimitLimitFok"
        },
        "liquidation_market_gtc": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.LiquidationMarketGtc"
        },
        "liquidation_market_gtd": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.LiquidationMarketGtd"
        },
        "trigger_stop_limit_gtc": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.TriggerStopLimitGtc"
        },
        "trigger_stop_limit_gtd": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.TriggerStopLimitGtd"
        },
        "trigger_take_profit_stop_loss_gtc": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.TriggerTakeProfitStopLossGtc"
        },
        "trigger_take_profit_stop_loss_gtd": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.TriggerTakeProfitStopLossGtd"
        }
      }
    },
    "coinbase.brokerage.proxy.common.OrderExecutionStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN_ORDER_EXECUTION_STATUS",
        "PENDING",
        "OPEN",
        "FILLED",
        "CANCELLED",
        "EXPIRED",
        "FAILED"
      ],
      "default": "UNKNOWN_ORDER_EXECUTION_STATUS",
      "title": "The UI currently has a different notion of\norder execution state that is used for filtering\nfrom the core order status.\nSee order/shared/transform package"
    },
    "coinbase.brokerage.proxy.common.OrderMetadata": {
      "type": "object",
      "properties": {
        "original_filled_size": {
          "type": "string"
        },
        "original_filled_value": {
          "type": "string"
        },
        "original_average_filled_price": {
          "type": "string"
        },
        "price_adjusted_time": {
          "type": "string",
          "format": "date-time"
        },
        "size_adjusted_time": {
          "type": "string",
          "format": "date-time"
        },
        "last_adjusted_time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "coinbase.brokerage.proxy.common.OrderSide": {
      "type": "string",
      "enum": [
        "UNKNOWN_ORDER_SIDE",
        "BUY",
        "SELL"
      ],
      "default": "UNKNOWN_ORDER_SIDE"
    },
    "coinbase.brokerage.proxy.common.Orders": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.common.Order"
          }
        }
      },
      "required": [
        "orders"
      ]
    },
    "coinbase.brokerage.proxy.common.ProductDetails": {
      "type": "object",
      "properties": {
        "future_details": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.FutureProductDetails"
        }
      }
    },
    "coinbase.brokerage.proxy.common.RejectReason": {
      "type": "string",
      "enum": [
        "REJECT_REASON_UNSPECIFIED",
        "REJECT_REASON_INTERNAL",
        "REJECT_REASON_MISSING_FIELD",
        "REJECT_REASON_INVALID_FIELD",
        "REJECT_REASON_HOLD_FAILURE",
        "REJECT_REASON_NO_LIQUIDITY",
        "REJECT_REASON_INVALID_ORDER_TYPE_FOR_TARGET",
        "REJECT_REASON_INVALID_ORDER_TYPE_FOR_COMPUTING_HOLD",
        "REJECT_REASON_INVALID_ORDER_TYPE_FOR_COMPUTING_ORDER_PREVIEW",
        "REJECT_REASON_TOO_MANY_OPEN_ORDERS",
        "REJECT_REASON_MAX_NOTIONAL_CHECK_FAILURE",
        "REJECT_REASON_MAX_NOTIONAL_EXCEEDED",
        "REJECT_REASON_MALFORMED_REQUEST",
        "REJECT_REASON_INVALID_ORDER_SIZE",
        "REJECT_REASON_VENUE_CONNECTION_DOWN",
        "REJECT_REASON_CANCEL_REQUESTED_BEFORE_ACCEPT",
        "REJECT_REASON_INVALID_ORDER_SIDE_FOR_COMPUTING_HOLD",
        "REJECT_REASON_OMS_REQUEST_CHANNEL_FULL",
        "REJECT_REASON_VENUE_REQUEST_THROTTLED",
        "REJECT_REASON_INVALID_ORDER_PRICE",
        "REJECT_REASON_VENUE_NOT_TRADABLE",
        "REJECT_REASON_VENUE_PRODUCT_NOT_TRADABLE",
        "REJECT_REASON_ORDER_PRICE_OUT_OF_VOL_BANDS",
        "REJECT_REASON_PRICE_MARKETABLE",
        "REJECT_REASON_INVALID_ORDER_STOP_PRICE",
        "REJECT_REASON_INVALID_DISPLAY_SIZE",
        "REJECT_REASON_MAX_PENDING_ORDERS",
        "REJECT_REASON_INVALID_COMMISSION_CONFIG",
        "REJECT_REASON_NEW_ORDERS_DISABLED",
        "REJECT_REASON_EMPTY_ORDERBOOK",
        "REJECT_REASON_INSTRUMENT_NOT_AVAILABLE",
        "REJECT_REASON_INVALID_PRICE",
        "REJECT_REASON_INVALID_PARAMS",
        "REJECT_REASON_CANNOT_ROUTE_ORDER",
        "REJECT_REASON_WORKING_QUANTITY_EXCEEDED",
        "REJECT_REASON_QUOTE_NOT_FOUND",
        "REJECT_REASON_STALE_QUOTE",
        "REJECT_REASON_VENUE_LIMIT_EXCEEDED",
        "REJECT_REASON_PRICE_LIMIT_EXCEEDED",
        "REJECT_REASON_BELOW_MIN_SIZE_FOR_DURATION",
        "REJECT_REASON_DUPLICATE_ORDER",
        "REJECT_REASON_UNKNOWN_ACCOUNT",
        "REJECT_REASON_INSUFFICIENT_CREDIT_LIMIT",
        "REJECT_REASON_IN_LIQUIDATION",
        "REJECT_REASON_INVALID_CLIENT",
        "REJECT_REASON_INVALID_FOK_ORDER_SIZE",
        "REJECT_REASON_INVALID_PRIME_STOP_LIMIT_PRICE",
        "REJECT_REASON_INVALID_PRIME_STOP_LIMIT_TYPE",
        "REJECT_REASON_RATE_LIMIT_EXCEEDED",
        "REJECT_REASON_INSUFFICIENT_FUNDS_FOR_ORDER"
      ],
      "default": "REJECT_REASON_UNSPECIFIED",
      "description": "- REJECT_REASON_PRICE_MARKETABLE: The price crossed the far touch. Used when post_only=true and the order would have executed immediately.",
      "title": "Reject reason the reason the pending order was rejected"
    },
    "coinbase.brokerage.proxy.common.SorLimitFok": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.common.SorLimitIoc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.common.StopLimitStopLimitGtc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "stop_price": {
          "type": "string"
        },
        "stop_direction": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.StopPriceDirection"
        }
      }
    },
    "coinbase.brokerage.proxy.common.StopLimitStopLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "stop_price": {
          "type": "string"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "stop_direction": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.StopPriceDirection"
        }
      }
    },
    "coinbase.brokerage.proxy.common.StopPriceDirection": {
      "type": "string",
      "enum": [
        "UNKNOWN_STOP_DIRECTION",
        "STOP_DIRECTION_STOP_UP",
        "STOP_DIRECTION_STOP_DOWN"
      ],
      "default": "UNKNOWN_STOP_DIRECTION"
    },
    "coinbase.brokerage.proxy.common.StopTriggerStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN_TRIGGER_STATUS",
        "INVALID_ORDER_TYPE",
        "STOP_PENDING",
        "STOP_TRIGGERED"
      ],
      "default": "UNKNOWN_TRIGGER_STATUS"
    },
    "coinbase.brokerage.proxy.common.TimeInForceType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TIME_IN_FORCE",
        "GOOD_UNTIL_DATE_TIME",
        "GOOD_UNTIL_CANCELLED",
        "IMMEDIATE_OR_CANCEL",
        "FILL_OR_KILL"
      ],
      "default": "UNKNOWN_TIME_IN_FORCE"
    },
    "coinbase.brokerage.proxy.common.TriggerStopLimitGtc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "stop_price": {
          "type": "string"
        },
        "stop_direction": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.StopPriceDirection"
        },
        "display_quote_size": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.common.TriggerStopLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "stop_price": {
          "type": "string"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "stop_direction": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.StopPriceDirection"
        },
        "display_quote_size": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.common.TriggerTakeProfitStopLossGtc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "take_profit_price": {
          "type": "string"
        },
        "stop_loss_price": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.common.TriggerTakeProfitStopLossGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "take_profit_price": {
          "type": "string"
        },
        "stop_loss_price": {
          "type": "string"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "coinbase.brokerage.proxy.common.TwapLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "limit_price": {
          "type": "string"
        },
        "display_quote_size": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        },
        "historical_pov": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.common.VwapLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "limit_price": {
          "type": "string"
        },
        "historical_pov": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.events.materialized.api.CancelReason": {
      "type": "string",
      "enum": [
        "CANCEL_REASON_UNSPECIFIED",
        "CANCEL_REASON_FILLED_SIZE_INCLUSIVE_OF_FEES",
        "CANCEL_REASON_GTD_ORDER_EXPIRED",
        "CANCEL_REASON_USER_CANCEL_REQUESTED",
        "CANCEL_REASON_ALGO_DISCRETION",
        "CANCEL_REASON_PARENT_CANCELLATION",
        "CANCEL_REASON_BELOW_MIN_ORDER_SIZE",
        "CANCEL_REASON_ALGO_BY_DEFINITION",
        "CANCEL_REASON_VENUE_DISABLED",
        "CANCEL_REASON_VENUE_PRODUCT_DISABLED",
        "CANCEL_REASON_PASSIVE_REBALANCE_REMOVAL",
        "CANCEL_REASON_PASSIVE_REBALANCE_PRICE_ADJUST",
        "CANCEL_REASON_NO_TRADEABILITY",
        "CANCEL_REASON_PARENT_SWEEP_DUST",
        "CANCEL_REASON_NO_LIQUIDITY_CANCEL",
        "CANCEL_REASON_VENUE_FUNDS_INSUFFICIENT",
        "CANCEL_REASON_MISSING_DUST_NOTIONAL_RATE",
        "CANCEL_REASON_EXCEEDED_DUST_NOTIONAL_MAX",
        "CANCEL_REASON_DUSTBUSTER_UNAVAILABLE",
        "CANCEL_REASON_MAXIMUM_MARKET_WHEELS",
        "CANCEL_REASON_MAXIMUM_MARKET_DURATION",
        "CANCEL_REASON_DUSTBUSTER_REJECTED",
        "CANCEL_REASON_DISPLAY_SIZE_BELOW_MIN",
        "CANCEL_REASON_MAXIMUM_ATTEMPTS",
        "CANCEL_REASON_POST_ONLY_PRICE_MARKETABLE",
        "CANCEL_REASON_INTERNAL_ERROR",
        "CANCEL_REASON_INVALID_FIELD_ON_CHILD",
        "CANCEL_REASON_ORDER_LIFETIME_EXCEEDED",
        "CANCEL_REASON_INSUFFICIENT_HOLD_REMAINING",
        "CANCEL_REASON_VENUE_DISCONNECT_CANCEL",
        "CANCEL_REASON_STP_CANCEL",
        "CANCEL_REASON_VENUE_ADMIN_CANCEL",
        "CANCEL_REASON_VENUE_COMPLETED",
        "CANCEL_REASON_CANCEL_REQUESTED",
        "CANCEL_REASON_PRICE_PROTECTION_POINT",
        "CANCEL_REASON_MISSING_SPOT_PRODUCT",
        "CANCEL_REASON_VENUE_PRODUCT_NOT_FOUND",
        "CANCEL_REASON_VENUE_PRODUCT_NO_LONGER_TRADABLE",
        "CANCEL_REASON_INVALID_EFFECTIVE_PRICE",
        "CANCEL_REASON_KILLSWITCH_ENABLED",
        "CANCEL_REASON_PENDING_ORDER_TIMEOUT",
        "CANCEL_REASON_FOK_ORDER_KILLED",
        "CANCEL_REASON_POST_ONLY_ORDER",
        "CANCEL_REASON_ORDER_EXPIRED",
        "CANCEL_REASON_PENDING_CANCEL_ORDER_TIMEOUT",
        "CANCEL_REASON_INSUFFICIENT_FUNDS"
      ],
      "default": "CANCEL_REASON_UNSPECIFIED",
      "title": "CancelReason the reason the order was canceled"
    },
    "coinbase.brokerage.proxy.events.materialized.api.CrossingType": {
      "type": "string",
      "enum": [
        "CROSSING_TYPE_UNSPECIFIED",
        "CROSSING_TYPE_PRIME_TO_PRIME",
        "CROSSING_TYPE_PRIME_TO_EXCHANGE"
      ],
      "default": "CROSSING_TYPE_UNSPECIFIED",
      "title": "Block trade cross types"
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration": {
      "type": "object",
      "properties": {
        "market_market_ioc": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.MarketMarketIoc"
        },
        "sor_limit_ioc": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.SorLimitIoc"
        },
        "limit_limit_gtc": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.LimitLimitGtc"
        },
        "limit_limit_gtd": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.LimitLimitGtd"
        },
        "twap_limit_gtd": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.TwapLimitGtd"
        },
        "stop_limit_stop_limit_gtc": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.StopLimitStopLimitGtc"
        },
        "stop_limit_stop_limit_gtd": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.StopLimitStopLimitGtd"
        },
        "block_trade_limit_limit_fok": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.BlockTradeLimitLimitFok"
        },
        "liquidation_market_gtc": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.LiquidationMarketGtc"
        },
        "liquidation_market_gtd": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.LiquidationMarketGtd"
        },
        "vwap_limit_gtd": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.VwapLimitGtd"
        },
        "sor_limit_fok": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.SorLimitFok"
        },
        "trigger_stop_limit_gtc": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.TriggerStopLimitGtc"
        },
        "trigger_stop_limit_gtd": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.TriggerStopLimitGtd"
        },
        "trigger_take_profit_stop_loss_gtc": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.TriggerTakeProfitStopLossGtc"
        },
        "trigger_take_profit_stop_loss_gtd": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.TriggerTakeProfitStopLossGtd"
        }
      },
      "title": "Entry order entry configurations"
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.BlockTradeLimitLimitFok": {
      "type": "object",
      "properties": {
        "cross_id": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "cross_type": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.CrossingType"
        },
        "exchange_counter_party": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.ExchangeCounterParty"
        }
      },
      "title": "Block Trades Orders"
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.LimitLimitGtc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "display_quote_size": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "post_only": {
          "type": "boolean"
        }
      },
      "title": "Limit Order Good Till Canceled"
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.LimitLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "post_only": {
          "type": "boolean"
        },
        "display_quote_size": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        }
      },
      "title": "LimitOrder Good Till Date"
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.LiquidationMarketGtc": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string"
        }
      },
      "title": "Liquidation Order for futures"
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.LiquidationMarketGtd": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "GTD Liquidation Order for futures"
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.MarketMarketIoc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        }
      },
      "title": "Market Order Immediate or Cancel"
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.SorLimitFok": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        }
      },
      "title": "SOR Limit Fill or Kill Order"
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.SorLimitIoc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        }
      },
      "title": "SOR Taker Limit Order Immediate or Cancel"
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.StopLimitStopLimitGtc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "stop_price": {
          "type": "string"
        }
      },
      "title": "StopLimit Good Till Canceled"
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.StopLimitStopLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "stop_price": {
          "type": "string"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "StopLimit Good Till Date"
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.TriggerStopLimitGtc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "stop_price": {
          "type": "string"
        },
        "stop_direction": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.StopDirection"
        },
        "display_quote_size": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.TriggerStopLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "stop_price": {
          "type": "string"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "stop_direction": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.StopDirection"
        },
        "display_quote_size": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.TriggerTakeProfitStopLossGtc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "take_profit_price": {
          "type": "string"
        },
        "stop_loss_price": {
          "type": "string"
        },
        "stop_limit_price": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.TriggerTakeProfitStopLossGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "take_profit_price": {
          "type": "string"
        },
        "stop_loss_price": {
          "type": "string"
        },
        "stop_limit_price": {
          "type": "string"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.TwapLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "limit_price": {
          "type": "string"
        },
        "historical_pov": {
          "type": "string"
        }
      },
      "title": "TWAP Limit Order Good Till Date"
    },
    "coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration.VwapLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "limit_price": {
          "type": "string"
        },
        "historical_pov": {
          "type": "string"
        }
      },
      "title": "VWAP Limit Order Good Till Date"
    },
    "coinbase.brokerage.proxy.events.materialized.api.ExchangeCounterParty": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "profile_id": {
          "type": "string"
        }
      },
      "title": "Prime to Exchange block trade counter-party"
    },
    "coinbase.brokerage.proxy.events.materialized.api.StopDirection": {
      "type": "string",
      "enum": [
        "STOP_DIRECTION_STOP_DIRECTION_UNSPECIFIED",
        "STOP_DIRECTION_STOP_UP",
        "STOP_DIRECTION_STOP_DOWN"
      ],
      "default": "STOP_DIRECTION_STOP_DIRECTION_UNSPECIFIED",
      "title": "Stop Price Direction"
    },
    "coinbase.brokerage.proxy.trading.api.Candle": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "description": "The date/time in which the candle started. This is a UNIX ts string, '1596640920'"
        },
        "low": {
          "type": "string",
          "description": "The lowest value for which a trade executed during this candle's time frame"
        },
        "high": {
          "type": "string",
          "description": "The highest value for which a trade executed during this candle's time frame"
        },
        "open": {
          "type": "string",
          "description": "The price of the product at the beginning of the candle's timeframe"
        },
        "close": {
          "type": "string",
          "description": "The price of the product at the end of the candle's timeframe"
        },
        "volume": {
          "type": "string",
          "description": "How much asset was traded during this timeframe, represented in base"
        }
      },
      "required": [
        "start",
        "low",
        "high",
        "open",
        "close",
        "volume"
      ]
    },
    "coinbase.brokerage.proxy.trading.api.Candles": {
      "type": "object",
      "properties": {
        "candles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.Candle"
          },
          "description": "Collection of candles, ordered by time, each holding the high, open, low and close prices for a specific timeframe"
        }
      },
      "required": [
        "candles"
      ]
    },
    "coinbase.brokerage.proxy.trading.api.Depth": {
      "type": "object",
      "example": {
        "date": "2019-11-21T14:58:49.879Z",
        "last": "405.60",
        "bid_l2": [
          {
            "price": "156.62",
            "size": "141"
          },
          {
            "price": "306.5",
            "size": "47"
          }
        ],
        "ask_l2": [
          {
            "price": "504.71",
            "size": "173"
          },
          {
            "price": "629.07",
            "size": "59"
          }
        ],
        "spread_bps": "3927.20572",
        "spread_absolute": "198.21"
      },
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "last": {
          "type": "string",
          "description": "The last (current) price - if not present, the average of the lowest bid and the highest ask (i.e., (lowest bid + highest ask) / 2)"
        },
        "bid_l2": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.L2Level"
          },
          "description": "Array of bid [price, size] pairs, sorted in price desc order"
        },
        "ask_l2": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.L2Level"
          },
          "description": "Array of ask [price, size] pairs, sorted in price asc order"
        },
        "mid_market": {
          "type": "string",
          "description": "Calculated as (lowest ask price + highest bid price) / 2"
        },
        "spread_bps": {
          "type": "string",
          "description": "Calculated in bps as ((lowest ask price - highest bid price) / lowest ask price) * 10000"
        },
        "spread_absolute": {
          "type": "string",
          "description": "Difference between best ask and best bid prices. Calculated as lowest ask price - highest bid price"
        }
      },
      "required": [
        "date",
        "last",
        "bid_l2",
        "ask_l2",
        "mid_market",
        "spread_bps",
        "spread_absolute"
      ]
    },
    "coinbase.brokerage.proxy.trading.api.FcmTradingSessionDetails": {
      "type": "object",
      "properties": {
        "is_session_open": {
          "type": "boolean"
        },
        "open_time": {
          "type": "string",
          "format": "date-time"
        },
        "close_time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.FutureProductDetails": {
      "type": "object",
      "properties": {
        "venue": {
          "type": "string",
          "description": "The venue this product trades on. Eg: cme, cde"
        },
        "contract_code": {
          "type": "string",
          "description": "The group identifier for this contract. Eg: MBT, MET"
        },
        "contract_expiry": {
          "type": "string",
          "format": "date-time",
          "description": "The expiration timestamp of this product. Eg: 2022-06-16T00:00:00Z"
        },
        "contract_size": {
          "type": "string",
          "description": "The size of each contract in terms of the contract root unit. Eg: 100"
        },
        "contract_root_unit": {
          "type": "string",
          "description": "The root unit to describe the underlying instrument. Eg: BTC, ETH"
        },
        "group_description": {
          "type": "string",
          "description": "The descriptive name for the product group. Eg: Nano Bitcoin, Micro Ethereum, etc"
        },
        "contract_expiry_timezone": {
          "type": "string",
          "description": "The IANA time zone for the contract's expiration time. Eg: Europe/London, America/Chicago, etc"
        },
        "group_short_description": {
          "type": "string",
          "description": "The short version of the group description. Eg: Nano BTC, Micro ETH, etc"
        },
        "risk_managed_by": {
          "$ref": "#/definitions/core.RiskManagementType",
          "description": "The party responsible for risk management of the product. E.g. FCM or VENUE"
        },
        "contract_expiry_type": {
          "$ref": "#/definitions/core.ContractExpiryType",
          "description": "The type of contract expiry for the product. E.g. EXPIRING or PERPETUAL"
        },
        "funding_interval": {
          "type": "string",
          "description": "The time between funding payments for perpetual futures. E.g. 1 hour. Nil for expiring futures."
        },
        "max_leverage": {
          "type": "string",
          "description": "The maximum leverage allowed for the product. E.g. '5' for 5x leverage. empty string for expiring futures."
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.FutureProductStats": {
      "type": "object",
      "properties": {
        "open_interest": {
          "type": "string"
        },
        "settlement_price": {
          "type": "string"
        },
        "settlement_timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "last_settlement_price": {
          "type": "string"
        },
        "last_settlement_timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "funding_rate": {
          "type": "string"
        },
        "funding_time": {
          "type": "string",
          "format": "date-time"
        },
        "index_price": {
          "type": "string"
        }
      },
      "title": "FUTURE products specific market data"
    },
    "coinbase.brokerage.proxy.trading.api.GeolocationInformation": {
      "type": "object",
      "properties": {
        "locality": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetCandlesResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.Candles"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetCandlesStreamBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.Candles"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Heartbeat"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetCandlesStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetCandlesStreamBody"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetDepthStreamBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.Depth"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Heartbeat"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetDepthStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetDepthStreamBody"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetLadderStreamBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.Ladder"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Heartbeat"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetLadderStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetLadderStreamBody"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetMarketTradesStreamBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.MarketTrades"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Heartbeat"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetMarketTradesStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetMarketTradesStreamBody"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetOrderSimulationResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetOrderSimulationStreamBody"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetOrderSimulationStreamBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.OrderSimulated"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Heartbeat"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetProductStatsResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.ProductStats"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetProductStatsStreamBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.ProductStats"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Heartbeat"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetProductStatsStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.GetProductStatsStreamBody"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetTradeReportGraphDataResponse": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "window_start": {
          "type": "string",
          "format": "date-time"
        },
        "window_end": {
          "type": "string",
          "format": "date-time"
        },
        "market_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.MarketTradeIntervalData"
          }
        },
        "order_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.OrderTradeIntervalData"
          }
        },
        "interval_size": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.TradeIntervalSize"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetTradeReportOrderDetailsAndGraphDataResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.TradeReportOrder"
        },
        "window_start": {
          "type": "string",
          "format": "date-time"
        },
        "window_end": {
          "type": "string",
          "format": "date-time"
        },
        "graph_window_start": {
          "type": "string",
          "format": "date-time"
        },
        "graph_window_end": {
          "type": "string",
          "format": "date-time"
        },
        "market_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.MarketTradeIntervalData"
          }
        },
        "order_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.OrderTradeIntervalData"
          }
        },
        "interval_size": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.TradeIntervalSize"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetTradeReportOrderDetailsResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.TradeReportOrder"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetTradeReportOrderFillsResponse": {
      "type": "object",
      "properties": {
        "fills": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.TradeReportFill"
          }
        },
        "cursor": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.GetTradeReportVenueFillsResponse": {
      "type": "object",
      "properties": {
        "venue_fills": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.TradeReportVenueFill"
          }
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.Granularity": {
      "type": "string",
      "enum": [
        "UNKNOWN_GRANULARITY",
        "ONE_MINUTE",
        "FIVE_MINUTE",
        "FIFTEEN_MINUTE",
        "THIRTY_MINUTE",
        "ONE_HOUR",
        "TWO_HOUR",
        "SIX_HOUR",
        "ONE_DAY"
      ],
      "default": "UNKNOWN_GRANULARITY"
    },
    "coinbase.brokerage.proxy.trading.api.L2Level": {
      "type": "object",
      "example": {
        "price": "530",
        "size": "50"
      },
      "properties": {
        "price": {
          "type": "string"
        },
        "size": {
          "type": "string"
        }
      },
      "required": [
        "price",
        "size"
      ]
    },
    "coinbase.brokerage.proxy.trading.api.Ladder": {
      "type": "object",
      "example": {
        "price_levels": [
          {
            "price": "305.74",
            "ask_size": "13",
            "ask_sum_size": "33",
            "bid_size": "0",
            "bid_sum_size": "0"
          },
          {
            "price": "305.73",
            "ask_size": "20",
            "ask_sum_size": "20",
            "bid_size": "0",
            "bid_sum_size": "0"
          },
          {
            "price": "305.72",
            "ask_size": "0",
            "ask_sum_size": "0",
            "bid_size": "158",
            "bid_sum_size": "158"
          },
          {
            "price": "305.71",
            "ask_size": "0",
            "ask_sum_size": "0",
            "bid_size": "90",
            "bid_sum_size": "248"
          }
        ],
        "price_levels_mid_index": 2
      },
      "properties": {
        "price_levels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.LadderPriceLevel"
          },
          "description": "Array of price levels: [price, ask_size, ask_sum_size, bid_size, bid_sum_size], sorted in price desc order."
        },
        "price_levels_mid_index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the mid-price level for the price levels. If the mid-price is between two levels, the index will round down to the closest level. If no levels are returned it will return 0."
        }
      },
      "required": [
        "price_levels",
        "price_levels_mid_index"
      ]
    },
    "coinbase.brokerage.proxy.trading.api.LadderBestPrice": {
      "type": "object",
      "properties": {
        "price": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.LadderBestPriceError"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.LadderBestPriceError": {
      "type": "string",
      "enum": [
        "ORDER_AMOUNT_CANNOT_BE_SATISFIED",
        "NO_PRICE_LEVELS"
      ],
      "default": "ORDER_AMOUNT_CANNOT_BE_SATISFIED"
    },
    "coinbase.brokerage.proxy.trading.api.LadderPriceLevel": {
      "type": "object",
      "example": {
        "price": "144.52",
        "ask_size": "0",
        "ask_sum_size": "0",
        "bid_size": "158",
        "bid_sum_size": "250"
      },
      "properties": {
        "price": {
          "type": "string",
          "description": "The price of the associated orders"
        },
        "ask_size": {
          "type": "string",
          "description": "The sum of all ask orders at this associated price"
        },
        "ask_sum_size": {
          "type": "string",
          "description": "The sum of all ask orders inclusive from the lowest ask price to this associated price"
        },
        "bid_size": {
          "type": "string",
          "description": "The sum of all bid orders at this associated price"
        },
        "bid_sum_size": {
          "type": "string",
          "description": "The sum of all bid orders inclusive from the highest bid price to this associated price"
        }
      },
      "required": [
        "price",
        "ask_size",
        "ask_sum_size",
        "bid_size",
        "bid_sum_size"
      ]
    },
    "coinbase.brokerage.proxy.trading.api.LadderSpreadError": {
      "type": "string",
      "enum": [
        "CANNOT_BE_COMPUTED"
      ],
      "default": "CANNOT_BE_COMPUTED"
    },
    "coinbase.brokerage.proxy.trading.api.MarketTrade": {
      "type": "object",
      "properties": {
        "trade_id": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "side": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.OrderSide"
        },
        "exchange": {
          "type": "string"
        }
      },
      "required": [
        "trade_id",
        "product_id",
        "price",
        "size",
        "time",
        "side",
        "exchange"
      ]
    },
    "coinbase.brokerage.proxy.trading.api.MarketTradeIntervalData": {
      "type": "object",
      "properties": {
        "interval_start": {
          "type": "string",
          "format": "date-time"
        },
        "interval_end": {
          "type": "string",
          "format": "date-time"
        },
        "cumulative_vwap": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.MarketTradeSideFilter": {
      "type": "string",
      "enum": [
        "ALL_ORDERS",
        "BUY_ORDERS",
        "SELL_ORDERS"
      ],
      "default": "ALL_ORDERS"
    },
    "coinbase.brokerage.proxy.trading.api.MarketTrades": {
      "type": "object",
      "properties": {
        "market_trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.MarketTrade"
          }
        }
      },
      "required": [
        "market_trades"
      ]
    },
    "coinbase.brokerage.proxy.trading.api.MarketTradesOrderByField": {
      "type": "string",
      "enum": [
        "PRICE",
        "AMOUNT",
        "TIME",
        "EXCHANGE"
      ],
      "default": "PRICE"
    },
    "coinbase.brokerage.proxy.trading.api.MarketTradesVenueFilter": {
      "type": "string",
      "enum": [
        "COINBASE",
        "BITSTAMP",
        "LMAX",
        "KRAKEN",
        "FTX",
        "NEPTUNE"
      ],
      "default": "COINBASE"
    },
    "coinbase.brokerage.proxy.trading.api.OrderPlacementSourceFilter": {
      "type": "object",
      "properties": {
        "applyNotFilter": {
          "type": "boolean"
        },
        "order_placement_sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/core.OrderPlacementSource"
          }
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.OrderSimulated": {
      "type": "object",
      "example": {
        "price_levels": [
          {
            "price": "305.74",
            "ask_size": "13",
            "ask_sum_size": "33",
            "bid_size": "0",
            "bid_sum_size": "0"
          },
          {
            "price": "305.73",
            "ask_size": "20",
            "ask_sum_size": "20",
            "bid_size": "0",
            "bid_sum_size": "0"
          },
          {
            "price": "305.72",
            "ask_size": "0",
            "ask_sum_size": "0",
            "bid_size": "158",
            "bid_sum_size": "158"
          },
          {
            "price": "305.71",
            "ask_size": "0",
            "ask_sum_size": "0",
            "bid_size": "90",
            "bid_sum_size": "248"
          }
        ],
        "price_levels_mid_index": 2,
        "lift_ask": {
          "price": "305.73"
        },
        "hit_bid": {
          "price": "305.72"
        },
        "spread": {
          "value": "0.01"
        },
        "spread_bps": {
          "value": "0.32079"
        }
      },
      "properties": {
        "lift_ask": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.LadderBestPrice",
          "description": "The weighted price that can accommodate the order amount, otherwise it returns an error. If the order amount is 0 it will return the lowest ask."
        },
        "hit_bid": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.LadderBestPrice",
          "description": "The weighted price that can accommodate the order amount, otherwise it returns an error. If the order amount is 0 it will return the highest bid."
        },
        "spread": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.Spread",
          "description": "Calculated as lift_ask - hit_bid, otherwise it returns an error."
        },
        "spread_bps": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.Spread",
          "description": "Calculated as ((lift_ask - hit_bid) / lift_ask) * 10000, otherwise returns an error."
        }
      },
      "required": [
        "lift_ask",
        "hit_bid",
        "spread",
        "spread_bps"
      ]
    },
    "coinbase.brokerage.proxy.trading.api.OrderStreamBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Orders"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Heartbeat"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.OrderStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.OrderStreamBody"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.OrderTradeIntervalData": {
      "type": "object",
      "properties": {
        "interval_start": {
          "type": "string",
          "format": "date-time"
        },
        "interval_end": {
          "type": "string",
          "format": "date-time"
        },
        "average_price": {
          "type": "string"
        },
        "volume": {
          "type": "string"
        },
        "cumulative_price": {
          "type": "string"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.ProductPermissions": {
      "type": "string",
      "enum": [
        "PRODUCT_PERMISSION_UNKNOWN",
        "PRODUCT_PERMISSION_READ",
        "PRODUCT_PERMISSION_TRADE",
        "PRODUCT_PERMISSION_LENDING"
      ],
      "default": "PRODUCT_PERMISSION_UNKNOWN"
    },
    "coinbase.brokerage.proxy.trading.api.ProductStats": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "volume_24h": {
          "type": "string"
        },
        "volume_percentage_change_24h": {
          "type": "string"
        },
        "price_percentage_change_24h": {
          "type": "string"
        },
        "high_24h": {
          "type": "string"
        },
        "low_24h": {
          "type": "string"
        },
        "high_52w": {
          "type": "string"
        },
        "low_52w": {
          "type": "string"
        },
        "market_cap": {
          "type": "string"
        },
        "price_percentage_change_mtd": {
          "type": "string"
        },
        "price_percentage_change_ytd": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.ProductPermissions"
          }
        },
        "product_type": {
          "$ref": "#/definitions/core.ProductType"
        },
        "base_currency": {
          "type": "string"
        },
        "quote_currency": {
          "type": "string"
        },
        "fcm_trading_session_details": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.FcmTradingSessionDetails"
        },
        "mid_market_price": {
          "type": "string"
        },
        "tradable": {
          "type": "boolean"
        },
        "alias": {
          "type": "string"
        },
        "volume_30d": {
          "type": "string"
        },
        "average_daily_volume_30d": {
          "type": "string"
        },
        "sole_venue_id": {
          "type": "string"
        },
        "future_product_details": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.FutureProductDetails"
        },
        "future_product_stats": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.FutureProductStats",
          "description": "Market data stats for a FUTURES specific product. Not present for a SPOT product"
        }
      },
      "required": [
        "name",
        "price",
        "volume_24h",
        "volume_percentage_change_24h",
        "price_percentage_change_24h",
        "high_24h",
        "low_24h",
        "high_52w",
        "low_52w",
        "market_cap",
        "permissions"
      ]
    },
    "coinbase.brokerage.proxy.trading.api.SortDirection": {
      "type": "string",
      "enum": [
        "ASC",
        "DESC"
      ],
      "default": "ASC"
    },
    "coinbase.brokerage.proxy.trading.api.Spread": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.trading.api.LadderSpreadError"
        }
      }
    },
    "coinbase.brokerage.proxy.trading.api.TradeIntervalSize": {
      "type": "string",
      "enum": [
        "UNKNOWN_INTERVAL",
        "SECOND",
        "MINUTE",
        "FIVE_MINUTES",
        "FIFTEEN_MINUTES",
        "THIRTY_MINUTES",
        "HOUR",
        "TWO_HOURS",
        "SIX_HOURS",
        "DAY",
        "WEEK",
        "FOUR_WEEKS",
        "YEAR",
        "THIRTY_SECONDS"
      ],
      "default": "UNKNOWN_INTERVAL"
    },
    "coinbase.brokerage.proxy.trading.api.TradeReportFill": {
      "type": "object",
      "properties": {
        "fill": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Fill",
          "description": "Order fill details",
          "required": [
            "fill"
          ]
        },
        "latest_adjusted_price": {
          "type": "string",
          "description": "Price after latest adjustment. Empty if there are no adjustments."
        },
        "latest_adjusted_size": {
          "type": "string",
          "description": "Size after latest adjustment. Empty if there are no adjustments."
        }
      },
      "title": "Fill history",
      "required": [
        "fill"
      ]
    },
    "coinbase.brokerage.proxy.trading.api.TradeReportOrder": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Order",
          "description": "Order details",
          "required": [
            "order"
          ]
        },
        "arrival_best_bid_price": {
          "type": "string",
          "description": "Best bid price at order arrival time",
          "required": [
            "arrival_best_bid_price"
          ]
        },
        "arrival_best_ask_price": {
          "type": "string",
          "description": "Best ask price at order arrival time",
          "required": [
            "arrival_best_ask_price"
          ]
        },
        "interval_vwap": {
          "type": "string",
          "description": "Volume-weighted average price across all venues for order execution window",
          "required": [
            "interval_vwap"
          ]
        },
        "interval_unweighted_avg_price": {
          "type": "string",
          "description": "Average price of the asset across all venues for order execution window",
          "required": [
            "interval_unweighted_avg_price"
          ]
        },
        "interval_avg_spread": {
          "type": "string",
          "description": "Average difference between best bid and best ask for order execution window",
          "required": [
            "interval_avg_spread"
          ]
        },
        "arrival_mid_price": {
          "type": "string",
          "description": "Mid price at order arrival time",
          "required": [
            "arrival_mid_price"
          ]
        },
        "percent_interval_volume": {
          "type": "string",
          "description": "Order fill volume as a percentage of market volume for the product during the execution window",
          "required": [
            "percent_interval_volume"
          ]
        },
        "percent_daily_volume": {
          "type": "string",
          "description": "Order fill volume as a percentage of 30 day average daily volume immediately before order creation",
          "required": [
            "percent_daily_volume"
          ]
        },
        "interval_volatility": {
          "type": "string",
          "description": "Market volatility during order execution window",
          "required": [
            "interval_volatility"
          ]
        }
      },
      "title": "Order Details",
      "required": [
        "order",
        "arrival_best_bid_price",
        "arrival_best_ask_price",
        "interval_vwap",
        "interval_unweighted_avg_price",
        "interval_avg_spread"
      ]
    },
    "coinbase.brokerage.proxy.trading.api.TradeReportVenueFill": {
      "type": "object",
      "properties": {
        "venue_name": {
          "type": "string",
          "description": "Name of venue ",
          "required": [
            "venue_name"
          ]
        },
        "total_size": {
          "type": "string",
          "description": "Total size of fills for venue, in pair base (ex. BTC for BTC/USD)",
          "required": [
            "total_size"
          ]
        },
        "total_value": {
          "type": "string",
          "description": "Total value of fills, in pair quote",
          "required": [
            "total_value"
          ]
        },
        "total_fills": {
          "type": "string",
          "description": "Total number of fills",
          "required": [
            "total_fills"
          ]
        },
        "venue_id": {
          "type": "string",
          "description": "ID of venue",
          "required": [
            "venue_id"
          ]
        }
      },
      "title": "Venue Fill Progress",
      "required": [
        "venue_name",
        "total_size",
        "total_value",
        "total_fills",
        "venue_id"
      ]
    },
    "coinbase.brokerage.proxy.trading.api.UpdateIntervalCandles": {
      "type": "string",
      "enum": [
        "ONE_SECOND_CANDLE"
      ],
      "default": "ONE_SECOND_CANDLE"
    },
    "coinbase.brokerage.proxy.trading.api.UpdateIntervalDepth": {
      "type": "string",
      "enum": [
        "TWO_HUNDRED_FIFTY_MS_DEPTH",
        "FIVE_HUNDRED_MS_DEPTH"
      ],
      "default": "TWO_HUNDRED_FIFTY_MS_DEPTH",
      "title": "How frequently should server push updates ?"
    },
    "coinbase.brokerage.proxy.trading.api.UpdateIntervalLadder": {
      "type": "string",
      "enum": [
        "FIFTY_MS_LADDER",
        "TWO_HUNDRED_FIFTY_MS_LADDER",
        "FIVE_HUNDRED_MS_LADDER"
      ],
      "default": "FIFTY_MS_LADDER"
    },
    "coinbase.brokerage.proxy.trading.api.UpdateIntervalMarketTrades": {
      "type": "string",
      "enum": [
        "HUNDRED_MS_MARKET_TRADES",
        "TWO_HUNDRED_FIFTY_MS_MARKET_TRADES"
      ],
      "default": "HUNDRED_MS_MARKET_TRADES"
    },
    "coinbase.brokerage.proxy.trading.api.UpdateIntervalOrders": {
      "type": "string",
      "enum": [
        "TWO_HUNDRED_FIFTY_MS_ORDERS"
      ],
      "default": "TWO_HUNDRED_FIFTY_MS_ORDERS"
    },
    "coinbase.brokerage.proxy.trading.api.UpdateIntervalStats": {
      "type": "string",
      "enum": [
        "TWO_HUNDRED_FIFTY_MS_STATS"
      ],
      "default": "TWO_HUNDRED_FIFTY_MS_STATS"
    },
    "coinbase.brokerage.types.Decimal": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "String representation allows for unlimited precision."
        }
      },
      "description": "Represents a decimal number with precision."
    },
    "coinbase.custody.api.APIKeyChangePlatform": {
      "type": "string",
      "enum": [
        "API_KEY_CHANGE_PLATFORM_CUSTODY",
        "API_KEY_CHANGE_PLATFORM_PRIME"
      ],
      "default": "API_KEY_CHANGE_PLATFORM_CUSTODY"
    },
    "coinbase.custody.api.APIKeyPermission": {
      "type": "string",
      "enum": [
        "API_KEY_PERMISSION_UNKNOWN",
        "API_KEY_PERMISSION_READ",
        "API_KEY_PERMISSION_TRADE",
        "API_KEY_PERMISSION_TRANSFER",
        "API_KEY_PERMISSION_ALLOCATE"
      ],
      "default": "API_KEY_PERMISSION_UNKNOWN",
      "title": "APIKeyPermission is for prime api keys where an api key could have a combination of permissions\nApiKeyScope is for custody api keys which is not applicable to prime api keys"
    },
    "coinbase.custody.api.AccessType": {
      "type": "string",
      "enum": [
        "ACCESS_TYPE_UNSPECIFIED",
        "ACCESS_TYPE_PORTFOLIO",
        "ACCESS_TYPE_ENTITY"
      ],
      "default": "ACCESS_TYPE_UNSPECIFIED"
    },
    "coinbase.custody.api.ActiveValidator": {
      "type": "object",
      "properties": {
        "service_provider": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "blockchain_url": {
          "type": "string"
        },
        "balance": {
          "type": "string"
        },
        "pending_rewards_balance": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "validator_status": {
          "$ref": "#/definitions/coinbase.custody.api.ValidatorStatus"
        },
        "status_updated_at": {
          "type": "string"
        },
        "balance_usd_value": {
          "type": "string"
        },
        "pending_rewards_balance_usd_value": {
          "type": "string"
        },
        "stake_tx_id": {
          "type": "string"
        },
        "active_status_at": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        }
      },
      "description": "Next ID: 11.",
      "required": [
        "address",
        "balance"
      ]
    },
    "coinbase.custody.api.Activity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "auditable_type": {
          "$ref": "#/definitions/coinbase.custody.api.AuditableType"
        },
        "auditable_id": {
          "type": "string"
        },
        "auditable_state": {
          "$ref": "#/definitions/coinbase.custody.api.AuditableState"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.ActivityState"
        },
        "user": {
          "$ref": "#/definitions/coinbase.custody.api.ActivityUser"
        },
        "created_at": {
          "type": "string"
        },
        "human_last_updated": {
          "type": "string"
        },
        "secondary_auditable_type": {
          "$ref": "#/definitions/coinbase.custody.api.SecondaryAuditableType"
        },
        "time_remaining": {
          "$ref": "#/definitions/coinbase.custody.api.ActivityTimeRemaining"
        },
        "title": {
          "type": "string"
        },
        "approved_at": {
          "type": "string"
        },
        "expired_at": {
          "type": "string"
        },
        "timeline_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.ActivityTimelineEvent"
          }
        },
        "currency": {
          "$ref": "#/definitions/coinbase.custody.api.ActivityCurrency"
        },
        "action": {
          "type": "string"
        },
        "standard_value": {
          "$ref": "#/definitions/coinbase.custody.api.StandardAuditValue",
          "title": "Uses StandardAuditValue:\n Invitation\n GovernanceVote\n SmartContractRelease"
        },
        "wallet_change_value": {
          "$ref": "#/definitions/coinbase.custody.api.WalletChangeAuditValue"
        },
        "user_change_value": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeAuditValue"
        },
        "settings_change_value": {
          "$ref": "#/definitions/coinbase.custody.api.SettingsChangeAuditValue"
        },
        "redo_plan_value": {
          "$ref": "#/definitions/coinbase.custody.api.RedoPlanAuditValue"
        },
        "withdrawal_address_change_value": {
          "$ref": "#/definitions/coinbase.custody.api.WithdrawalAddressChangeAuditValue"
        },
        "transaction_value": {
          "$ref": "#/definitions/coinbase.custody.api.TransactionAuditValue"
        },
        "email_list_change_value": {
          "$ref": "#/definitions/coinbase.custody.api.EmailListChangeAuditValue"
        },
        "document_signature_value": {
          "$ref": "#/definitions/coinbase.custody.api.DocumentSignatureAuditValue"
        },
        "billing_preference_change_value": {
          "$ref": "#/definitions/coinbase.custody.api.BillingPreferenceChangeAuditValue"
        },
        "billing_address_change_value": {
          "$ref": "#/definitions/coinbase.custody.api.BillingAddressChangeAuditValue"
        },
        "api_key_change_value": {
          "$ref": "#/definitions/coinbase.custody.api.ApiKeyChangeAuditValue"
        },
        "admin_change_request_value": {
          "$ref": "#/definitions/coinbase.custody.api.AdminChangeRequestAuditValue"
        },
        "payment_method_change_value": {
          "$ref": "#/definitions/coinbase.custody.api.PaymentMethodChangeAuditValue"
        },
        "wallet_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.WalletChangeAuditData"
        },
        "user_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeAuditData"
        },
        "smart_contract_release_data": {
          "$ref": "#/definitions/coinbase.custody.api.SmartContractReleaseAuditData"
        },
        "settings_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.SettingsChangeAuditData"
        },
        "redo_plan_data": {
          "$ref": "#/definitions/coinbase.custody.api.RedoPlanAuditData"
        },
        "withdrawal_address_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.WithdrawalAddressChangeAuditData"
        },
        "transaction_data": {
          "$ref": "#/definitions/coinbase.custody.api.TransactionAuditData"
        },
        "invitation_data": {
          "$ref": "#/definitions/coinbase.custody.api.InvitationAuditData"
        },
        "governance_vote_data": {
          "$ref": "#/definitions/coinbase.custody.api.GovernanceVoteAuditData"
        },
        "email_list_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.EmailListChangeAuditData"
        },
        "document_signature_data": {
          "$ref": "#/definitions/coinbase.custody.api.DocumentSignatureAuditData"
        },
        "billing_preference_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.BillingPreferenceChangeAuditData"
        },
        "billing_address_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.BillingAddressChangeAuditData"
        },
        "api_key_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.ApiKeyChangeAuditData"
        },
        "admin_change_request_data": {
          "$ref": "#/definitions/coinbase.custody.api.AdminChangeRequestAuditData"
        },
        "payment_method_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.PaymentMethodChangeAuditData"
        },
        "user_change_request_data": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeRequestAuditData"
        },
        "timestamp": {
          "type": "string"
        },
        "approve_by": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "auditable_type",
        "auditable_id",
        "auditable_state",
        "state",
        "created_at",
        "human_last_updated",
        "secondary_auditable_type",
        "time_remaining",
        "title",
        "approved_at",
        "expired_at",
        "timeline_events",
        "action",
        "timestamp"
      ]
    },
    "coinbase.custody.api.ActivityCurrency": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string"
        },
        "properties_enabled": {
          "$ref": "#/definitions/coinbase.custody.api.PropertiesEnabled"
        },
        "decimals": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "currency_type": {
          "$ref": "#/definitions/coinbase.custody.api.CurrencyType"
        }
      },
      "required": [
        "symbol",
        "properties_enabled",
        "decimals",
        "icon",
        "currency_type"
      ]
    },
    "coinbase.custody.api.ActivityDetails": {
      "type": "object",
      "properties": {
        "wallet_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.WalletChangeAuditData",
          "title": "Note: Data should match the format of [name]AuditData = [name]_data"
        },
        "user_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeAuditData"
        },
        "smart_contract_release_data": {
          "$ref": "#/definitions/coinbase.custody.api.SmartContractReleaseAuditData"
        },
        "settings_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.SettingsChangeAuditData"
        },
        "redo_plan_data": {
          "$ref": "#/definitions/coinbase.custody.api.RedoPlanAuditData"
        },
        "withdrawal_address_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.WithdrawalAddressChangeAuditData"
        },
        "transaction_data": {
          "$ref": "#/definitions/coinbase.custody.api.TransactionAuditData"
        },
        "invitation_data": {
          "$ref": "#/definitions/coinbase.custody.api.InvitationAuditData"
        },
        "governance_vote_data": {
          "$ref": "#/definitions/coinbase.custody.api.GovernanceVoteAuditData"
        },
        "email_list_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.EmailListChangeAuditData"
        },
        "document_signature_data": {
          "$ref": "#/definitions/coinbase.custody.api.DocumentSignatureAuditData"
        },
        "billing_preference_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.BillingPreferenceChangeAuditData"
        },
        "billing_address_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.BillingAddressChangeAuditData"
        },
        "api_key_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.ApiKeyChangeAuditData"
        },
        "admin_change_request_data": {
          "$ref": "#/definitions/coinbase.custody.api.AdminChangeRequestAuditData"
        },
        "payment_method_change_data": {
          "$ref": "#/definitions/coinbase.custody.api.PaymentMethodChangeAuditData"
        },
        "user_change_request_data": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeRequestAuditData"
        },
        "timeline_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.ActivityTimelineEvent"
          }
        }
      }
    },
    "coinbase.custody.api.ActivityState": {
      "type": "string",
      "enum": [
        "ACTIVITY_STATE_UNKNOWN",
        "ACTIVITY_STATE_SETTLED",
        "ACTIVITY_STATE_CREATED",
        "ACTIVITY_STATE_EXPIRED",
        "ACTIVITY_STATE_REJECTED"
      ],
      "default": "ACTIVITY_STATE_UNKNOWN",
      "title": "Enums"
    },
    "coinbase.custody.api.ActivityTimeRemaining": {
      "type": "object",
      "properties": {
        "pretty": {
          "type": "string"
        }
      },
      "required": [
        "pretty"
      ]
    },
    "coinbase.custody.api.ActivityTimelineEvent": {
      "type": "object",
      "properties": {
        "event": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lifecycleable_id": {
          "type": "string"
        },
        "lifecycleable_type": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "pending": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/coinbase.custody.api.ActivityUser"
        }
      },
      "required": [
        "event",
        "id",
        "lifecycleable_id",
        "lifecycleable_type",
        "links",
        "name",
        "pending",
        "timestamp"
      ]
    },
    "coinbase.custody.api.ActivityType": {
      "type": "string",
      "enum": [
        "ACTIVITY_TYPE_UNKNOWN",
        "ACTIVITY_TYPE_GOVERNANCE_VOTE",
        "ACTIVITY_TYPE_INVITATION",
        "ACTIVITY_TYPE_WALLET_CHANGE",
        "ACTIVITY_TYPE_API_KEY_CHANGE",
        "ACTIVITY_TYPE_SETTINGS_CHANGE",
        "ACTIVITY_TYPE_BILLING_PREFERENCE_CHANGE",
        "ACTIVITY_TYPE_PAYMENT_METHOD_CHANGE",
        "ACTIVITY_TYPE_WITHDRAWAL",
        "ACTIVITY_TYPE_DEPOSIT",
        "ACTIVITY_TYPE_CREATE_WALLET",
        "ACTIVITY_TYPE_REMOVE_WALLET",
        "ACTIVITY_TYPE_UPDATE_WALLET",
        "ACTIVITY_TYPE_CAST_VOTE",
        "ACTIVITY_TYPE_ENABLE_VOTING",
        "ACTIVITY_TYPE_STAKE",
        "ACTIVITY_TYPE_UNSTAKE",
        "ACTIVITY_TYPE_CHANGE_VALIDATOR",
        "ACTIVITY_TYPE_RESTAKE",
        "ACTIVITY_TYPE_ADDRESS_BOOK",
        "ACTIVITY_TYPE_TEAM_MEMBERS",
        "ACTIVITY_TYPE_BILLING",
        "ACTIVITY_TYPE_SECURITY",
        "ACTIVITY_TYPE_API",
        "ACTIVITY_TYPE_SETTINGS",
        "ACTIVITY_TYPE_SMART_CONTRACT",
        "ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS",
        "ACTIVITY_TYPE_WEB3_TRANSACTION",
        "ACTIVITY_TYPE_WEB3_MESSAGE"
      ],
      "default": "ACTIVITY_TYPE_UNKNOWN",
      "title": "- ACTIVITY_TYPE_WITHDRAWAL: PrimeActivityService Custody ActivityTypes that will replace the above"
    },
    "coinbase.custody.api.ActivityUser": {
      "type": "object",
      "properties": {
        "avatar_url": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "display_coinbase_label": {
          "type": "boolean"
        }
      },
      "required": [
        "avatar_url",
        "created_at",
        "email",
        "id",
        "name",
        "state",
        "display_coinbase_label"
      ]
    },
    "coinbase.custody.api.Address": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.AddressState"
        },
        "blockchain_balance": {
          "type": "string"
        },
        "explorer_link": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "restored_at": {
          "type": "string"
        },
        "wallet_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.AddressBookEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "UUID identifying this address book entry"
        },
        "currency_symbol": {
          "type": "string",
          "description": "Currency symbol"
        },
        "name": {
          "type": "string",
          "description": "Name for this address book entry"
        },
        "address": {
          "type": "string",
          "description": "Cryptocurrency address"
        },
        "account_identifier": {
          "type": "string",
          "description": "Memo or destination tag for currencies which support them"
        },
        "account_identifier_name": {
          "type": "string",
          "description": "Name of the account identifier. For instance Destination Tag"
        },
        "state": {
          "type": "string",
          "description": "State of this address book entry"
        },
        "explorer_link": {
          "type": "string",
          "description": "Link to a blockchain explorer"
        },
        "last_used_at": {
          "type": "string",
          "format": "date-time",
          "description": "When this entry was last used for a transaction"
        },
        "added_at": {
          "type": "string",
          "format": "date-time",
          "description": "When this entry was added to the address book"
        },
        "added_by": {
          "$ref": "#/definitions/coinbase.custody.api.DisplayUser",
          "description": "User who created this address book entry"
        },
        "type": {
          "$ref": "#/definitions/coinbase.custody.api.AddressBookType",
          "description": "Type of address book entry"
        },
        "counterparty_id": {
          "type": "string",
          "description": "counterparty id"
        }
      },
      "required": [
        "id",
        "name",
        "state",
        "added_by"
      ]
    },
    "coinbase.custody.api.AddressBookType": {
      "type": "string",
      "enum": [
        "ADDRESS_BOOK_TYPE_UNSPECIFIED",
        "ADDRESS_BOOK_TYPE_ADDRESS",
        "ADDRESS_BOOK_TYPE_COUNTERPARTY_ID"
      ],
      "default": "ADDRESS_BOOK_TYPE_UNSPECIFIED"
    },
    "coinbase.custody.api.AddressState": {
      "type": "string",
      "enum": [
        "ADDRESS_STATE_UNKNOWN",
        "COLD",
        "WARM",
        "RESTORE_IN_PROGRESS",
        "RESTORED",
        "FOREIGN",
        "INVALIDATED",
        "SKIPPED",
        "REVOKED",
        "CREATE_IN_PROGRESS"
      ],
      "default": "ADDRESS_STATE_UNKNOWN"
    },
    "coinbase.custody.api.AdminChangeRequestAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.AdminChangeRequestState"
        },
        "task": {
          "$ref": "#/definitions/coinbase.custody.api.AdminChangeRequestTask"
        },
        "title": {
          "type": "string"
        },
        "to_properties": {
          "type": "object"
        },
        "from_properties": {
          "type": "object"
        }
      }
    },
    "coinbase.custody.api.AdminChangeRequestAuditValue": {
      "type": "object",
      "properties": {
        "num_all_approvers": {
          "type": "integer",
          "format": "int32"
        },
        "task": {
          "$ref": "#/definitions/coinbase.custody.api.AdminChangeRequestTask"
        },
        "all_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "approved_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rejected_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "num_approvals_required": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "coinbase.custody.api.AdminChangeRequestState": {
      "type": "string",
      "enum": [
        "ADMIN_CHANGE_REQUEST_STATE_UNKNOWN",
        "ADMIN_CHANGE_REQUEST_STATE_CREATED",
        "ADMIN_CHANGE_REQUEST_STATE_APPROVED",
        "ADMIN_CHANGE_REQUEST_STATE_REJECTED",
        "ADMIN_CHANGE_REQUEST_STATE_EXPIRED",
        "ADMIN_CHANGE_REQUEST_STATE_PROCESSING",
        "ADMIN_CHANGE_REQUEST_STATE_PROCESSING_FAILED",
        "ADMIN_CHANGE_REQUEST_STATE_PROCESSING_COMPLETED"
      ],
      "default": "ADMIN_CHANGE_REQUEST_STATE_UNKNOWN",
      "title": "AdminChangeRequest"
    },
    "coinbase.custody.api.AdminChangeRequestTask": {
      "type": "string",
      "enum": [
        "ADMIN_CHANGE_REQUEST_TASK_UNKNOWN",
        "ADMIN_CHANGE_REQUEST_TASK_EDIT_CURRENCY",
        "ADMIN_CHANGE_REQUEST_TASK_APPROVE_ORGANIZATION",
        "ADMIN_CHANGE_REQUEST_TASK_APPROVE_SWEEP_TX_CREATION",
        "ADMIN_CHANGE_REQUEST_TASK_APPROVE_TX_CANCELLATION",
        "ADMIN_CHANGE_REQUEST_TASK_REJECT_ORGANIZATION",
        "ADMIN_CHANGE_REQUEST_TASK_CONFIGURE_CURRENCY_FOR_ORGANIZATION",
        "ADMIN_CHANGE_REQUEST_TASK_REMOVE_USER_FROM_ORGANIZATION",
        "ADMIN_CHANGE_REQUEST_TASK_REACTIVATE_USER",
        "ADMIN_CHANGE_REQUEST_TASK_DEACTIVATE_USER",
        "ADMIN_CHANGE_REQUEST_TASK_EDIT_ORGANIZATION",
        "ADMIN_CHANGE_REQUEST_TASK_ORGANIZATION_RESET_U2F",
        "ADMIN_CHANGE_REQUEST_TASK_APPROVE_TRANSACTION",
        "ADMIN_CHANGE_REQUEST_TASK_REJECT_TRANSACTION",
        "ADMIN_CHANGE_REQUEST_TASK_UPDATE_ORGANIZATION_API_KEY",
        "ADMIN_CHANGE_REQUEST_TASK_ADD_CURRENCY_TO_ORGANIZATION",
        "ADMIN_CHANGE_REQUEST_TASK_REMOVE_CURRENCY_FROM_ORGANIZATION",
        "ADMIN_CHANGE_REQUEST_TASK_RUN_RAKE_TASK",
        "ADMIN_CHANGE_REQUEST_TASK_FETCH_ORG_MEMBERS",
        "ADMIN_CHANGE_REQUEST_TASK_ADMIN_CREATE_INVITATION",
        "ADMIN_CHANGE_REQUEST_TASK_UPDATE_ORG_SETTINGS",
        "ADMIN_CHANGE_REQUEST_TASK_DISABLE_ORGANIZATION",
        "ADMIN_CHANGE_REQUEST_TASK_RUN_BILLING_BATCH",
        "ADMIN_CHANGE_REQUEST_TASK_UPDATE_USER_ROLE_IN_ORGANIZATION",
        "ADMIN_CHANGE_REQUEST_TASK_APPROVE_INVITATION",
        "ADMIN_CHANGE_REQUEST_TASK_REJECT_INVITATION",
        "ADMIN_CHANGE_REQUEST_TASK_APPROVE_USER_ROLE_CHANGE",
        "ADMIN_CHANGE_REQUEST_TASK_REJECT_USER_ROLE_CHANGE",
        "ADMIN_CHANGE_REQUEST_TASK_CREATE_BILLING_INVOICES",
        "ADMIN_CHANGE_REQUEST_TASK_PREVIEW_BILLING_INVOICES",
        "ADMIN_CHANGE_REQUEST_TASK_INITIATE_REDO_TRANSACTION",
        "ADMIN_CHANGE_REQUEST_TASK_UPDATE_VEHICLE_AND_PARENT_ORG_RELATIONSHIP"
      ],
      "default": "ADMIN_CHANGE_REQUEST_TASK_UNKNOWN"
    },
    "coinbase.custody.api.ApiKeyChangeAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/coinbase.custody.api.ApiKeyScope"
        },
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.ApiKeyChangeCategory"
        },
        "vehicle_id": {
          "type": "string"
        },
        "vehicle_name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.APIKeyPermission"
          }
        },
        "platform": {
          "$ref": "#/definitions/coinbase.custody.api.APIKeyChangePlatform"
        },
        "expiration_date": {
          "type": "string"
        },
        "group_id": {
          "type": "string"
        },
        "group_type": {
          "$ref": "#/definitions/coinbase.custody.api.GroupType"
        }
      }
    },
    "coinbase.custody.api.ApiKeyChangeAuditValue": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.ApiKeyChangeCategory"
        },
        "scope": {
          "$ref": "#/definitions/coinbase.custody.api.ApiKeyScope"
        },
        "num_all_approvers": {
          "type": "integer",
          "format": "int32"
        },
        "all_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "approved_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rejected_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "num_approvals_required": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "coinbase.custody.api.ApiKeyChangeCategory": {
      "type": "string",
      "enum": [
        "API_KEY_CHANGE_CATEGORY_UNKNOWN",
        "API_KEY_CHANGE_CATEGORY_TO_CREATE",
        "API_KEY_CHANGE_CATEGORY_TO_REVOKE"
      ],
      "default": "API_KEY_CHANGE_CATEGORY_UNKNOWN",
      "title": "ApiKeyChange"
    },
    "coinbase.custody.api.ApiKeyChangeState": {
      "type": "string",
      "enum": [
        "API_KEY_CHANGE_STATE_UNKNOWN",
        "API_KEY_CHANGE_STATE_CREATED",
        "API_KEY_CHANGE_STATE_APPROVED",
        "API_KEY_CHANGE_STATE_REJECTED",
        "API_KEY_CHANGE_STATE_EXPIRED"
      ],
      "default": "API_KEY_CHANGE_STATE_UNKNOWN"
    },
    "coinbase.custody.api.ApiKeyScope": {
      "type": "string",
      "enum": [
        "API_KEY_SCOPE_UNKNOWN",
        "API_KEY_SCOPE_READ_ONLY",
        "API_KEY_SCOPE_READ_WRITE"
      ],
      "default": "API_KEY_SCOPE_UNKNOWN"
    },
    "coinbase.custody.api.ApprovalPlatform": {
      "type": "string",
      "enum": [
        "APPROVAL_PLATFORM_UNKNOWN",
        "APPROVAL_PLATFORM_WEB",
        "APPROVAL_PLATFORM_MOBILE",
        "APPROVAL_PLATFORM_API"
      ],
      "default": "APPROVAL_PLATFORM_UNKNOWN"
    },
    "coinbase.custody.api.AssignedValueStrategy": {
      "type": "string",
      "enum": [
        "ASSIGNED_VALUE_STRATEGY_UNKNOWN",
        "ASSIGNED_VALUE_STRATEGY_UNASSIGNED",
        "ASSIGNED_VALUE_STRATEGY_LAST_SALE_PRICE"
      ],
      "default": "ASSIGNED_VALUE_STRATEGY_UNKNOWN"
    },
    "coinbase.custody.api.AuditableState": {
      "type": "object",
      "properties": {
        "wallet_change_state": {
          "$ref": "#/definitions/coinbase.custody.api.WalletChangeState"
        },
        "user_change_state": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeState"
        },
        "smart_contract_release_state": {
          "$ref": "#/definitions/coinbase.custody.api.SmartContractReleaseState"
        },
        "settings_change_state": {
          "$ref": "#/definitions/coinbase.custody.api.SettingsChangeState"
        },
        "redo_plan_state": {
          "$ref": "#/definitions/coinbase.custody.api.RedoPlanState"
        },
        "withdrawal_address_change_state": {
          "$ref": "#/definitions/coinbase.custody.api.WithdrawalAddressChangeState"
        },
        "transaction_state": {
          "$ref": "#/definitions/coinbase.custody.api.TransactionState"
        },
        "email_list_change_state": {
          "$ref": "#/definitions/coinbase.custody.api.EmailListChangeState"
        },
        "document_signature_state": {
          "$ref": "#/definitions/coinbase.custody.api.DocumentSignatureState"
        },
        "billing_preference_change_state": {
          "$ref": "#/definitions/coinbase.custody.api.BillingPreferenceChangeState"
        },
        "billing_address_change_state": {
          "$ref": "#/definitions/coinbase.custody.api.BillingAddressChangeState"
        },
        "api_key_change_state": {
          "$ref": "#/definitions/coinbase.custody.api.ApiKeyChangeState"
        },
        "admin_change_request_state": {
          "$ref": "#/definitions/coinbase.custody.api.AdminChangeRequestState"
        },
        "governance_vote_state": {
          "$ref": "#/definitions/coinbase.custody.api.GovernanceVoteState"
        },
        "invitation_state": {
          "$ref": "#/definitions/coinbase.custody.api.InvitationState"
        },
        "payment_method_change_state": {
          "$ref": "#/definitions/coinbase.custody.api.PaymentMethodChangeState"
        },
        "user_change_request_state": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeRequestState"
        }
      }
    },
    "coinbase.custody.api.AuditableType": {
      "type": "string",
      "enum": [
        "AUDITABLE_TYPE_UNKNOWN",
        "AUDITABLE_TYPE_SETTINGS_CHANGE",
        "AUDITABLE_TYPE_WITHDRAWAL_ADDRESS_CHANGE",
        "AUDITABLE_TYPE_API_KEY_CHANGE",
        "AUDITABLE_TYPE_BILLING_PREFERENCE_CHANGE",
        "AUDITABLE_TYPE_GOVERNANCE_VOTE",
        "AUDITABLE_TYPE_INVITATION",
        "AUDITABLE_TYPE_USER_CHANGE",
        "AUDITABLE_TYPE_TRANSACTION",
        "AUDITABLE_TYPE_WALLET_CHANGE",
        "AUDITABLE_TYPE_SMART_CONTRACT_RELEASE",
        "AUDITABLE_TYPE_ADMIN_CHANGE_REQUEST",
        "AUDITABLE_TYPE_BILLING_ADDRESS_CHANGE",
        "AUDITABLE_TYPE_DOCUMENT_SIGNATURE",
        "AUDITABLE_TYPE_EMAIL_LIST_CHANGE",
        "AUDITABLE_TYPE_TRANSFER",
        "AUDITABLE_TYPE_REDO_PLAN",
        "AUDITABLE_TYPE_PAYMENT_METHOD_CHANGE",
        "AUDITABLE_TYPE_USER_CHANGE_REQUEST"
      ],
      "default": "AUDITABLE_TYPE_UNKNOWN"
    },
    "coinbase.custody.api.Balance": {
      "type": "object",
      "properties": {
        "currency_symbol": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Total balance"
        },
        "withdrawable_value": {
          "type": "string",
          "description": "Withdrawable (i.e. available) balance for vault + trading balance"
        },
        "usd_value": {
          "type": "string",
          "description": "Total balance in fiat"
        },
        "scope": {
          "$ref": "#/definitions/coinbase.custody.api.BalanceScope"
        },
        "withdrawable_usd_value": {
          "type": "string",
          "description": "Withdrawable (i.e. available) balance for vault + trading balance in fiat"
        },
        "bonded_value": {
          "type": "string",
          "description": "Balance which has been locked due to bonding/staking, potentially subject to an unbonding period"
        },
        "reserved_value": {
          "type": "string",
          "description": "Balance which must remain in the wallet untouched due to the protocol"
        },
        "unbonding_value": {
          "type": "string",
          "description": "Balance which is currently in the process of unbonding"
        },
        "unvested_value": {
          "type": "string",
          "description": "Unrealized balance subject to a vesting schedule"
        },
        "vested_value": {
          "type": "string",
          "description": "Realized vested balance (balance - unvested balance)"
        },
        "currency_type": {
          "type": "string"
        },
        "tradable_value": {
          "type": "string",
          "description": "Tradable (i.e. available) balance from trading balance wallet"
        },
        "tradable_usd_value": {
          "type": "string",
          "description": "Tradable (i.e. available) balance from trading balance wallet in fiat"
        },
        "hold_tradable_value": {
          "type": "string",
          "description": "Hold balance from trading balance wallet"
        },
        "hold_tradable_usd_value": {
          "type": "string",
          "description": "Hold balance from trading balance wallet in fiat"
        },
        "total_tradable_value": {
          "type": "string",
          "description": "Total balance of trading balance wallet (available + hold)"
        },
        "total_tradable_usd_value": {
          "type": "string",
          "description": "Total balance of trading balance wallet (available + hold) in fiat"
        },
        "pending_rewards_value": {
          "type": "string",
          "description": "Pending bonding/staking rewards that have not yet been realized"
        },
        "lifetime_rewards_value": {
          "type": "string",
          "description": "Previously realized bonding/staking rewards"
        },
        "bondable_value": {
          "type": "string",
          "description": "Balance available for bonding/staking"
        },
        "omnibus_qc_value": {
          "type": "string",
          "description": "Omnibus QC (i.e. available) balance from omnibus qc wallet"
        },
        "omnibus_qc_usd_value": {
          "type": "string",
          "description": "Omnibus QC (i.e. available) balance from omnibus qc wallet in USD"
        },
        "hold_omnibus_qc_value": {
          "type": "string",
          "description": "Hold balance from omnibus qc wallet"
        },
        "hold_omnibus_qc_usd_value": {
          "type": "string",
          "description": "Hold balance from omnibus qc wallet in USD"
        },
        "total_omnibus_qc_value": {
          "type": "string",
          "description": "Total balance of omnibus qc wallet (available + hold)"
        },
        "total_omnibus_qc_usd_value": {
          "type": "string",
          "description": "Total balance of omnibus qc wallet (available + hold) in USD"
        },
        "hold_value": {
          "type": "string",
          "description": "Total Hold balance"
        },
        "hold_usd_value": {
          "type": "string",
          "description": "Total Hold in fiat"
        }
      },
      "required": [
        "currency_symbol",
        "value",
        "withdrawable_value",
        "usd_value",
        "bonded_value",
        "reserved_value",
        "unbonding_value",
        "unvested_value",
        "vested_value",
        "currency_type",
        "tradable_value",
        "tradable_usd_value",
        "hold_tradable_value",
        "hold_tradable_usd_value",
        "total_tradable_value",
        "total_tradable_usd_value",
        "pending_rewards_value",
        "lifetime_rewards_value",
        "omnibus_qc_value",
        "omnibus_qc_usd_value",
        "hold_omnibus_qc_value",
        "hold_omnibus_qc_usd_value",
        "total_omnibus_qc_value",
        "total_omnibus_qc_usd_value"
      ]
    },
    "coinbase.custody.api.BalanceScope": {
      "type": "object",
      "properties": {
        "vehicle_id": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "wallet_id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.BillingAddressChangeAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "initiator_id": {
          "type": "string"
        },
        "address_1": {
          "type": "string"
        },
        "address_2": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "address_state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "city": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.BillingAddressChangeAuditValue": {
      "type": "object",
      "properties": {
        "initiator_id": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.BillingAddressChangeState": {
      "type": "string",
      "enum": [
        "BILLING_ADDRESS_CHANGE_STATE_UNKNOWN",
        "BILLING_ADDRESS_CHANGE_STATE_CREATED",
        "BILLING_ADDRESS_CHANGE_STATE_APPROVED",
        "BILLING_ADDRESS_CHANGE_STATE_REJECTED",
        "BILLING_ADDRESS_CHANGE_STATE_EXPIRED"
      ],
      "default": "BILLING_ADDRESS_CHANGE_STATE_UNKNOWN",
      "title": "BillingAddressChange"
    },
    "coinbase.custody.api.BillingPreference": {
      "type": "object",
      "properties": {
        "vehicle_id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.BillingPreferenceState"
        },
        "wallet": {
          "$ref": "#/definitions/coinbase.custody.api.Wallet"
        },
        "currency": {
          "$ref": "#/definitions/coinbase.custody.api.Currency"
        }
      },
      "required": [
        "vehicle_id",
        "state"
      ]
    },
    "coinbase.custody.api.BillingPreferenceChangeAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "wallet_id": {
          "type": "string"
        },
        "wallet_name": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "vehicle_name": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.BillingPreferenceChangeAuditValue": {
      "type": "object",
      "properties": {
        "num_all_approvers": {
          "type": "integer",
          "format": "int32"
        },
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.BillingPreferenceChangeCategory"
        },
        "all_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "approved_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rejected_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "num_approvals_required": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "coinbase.custody.api.BillingPreferenceChangeCategory": {
      "type": "string",
      "enum": [
        "BILLING_PREFERENCE_CHANGE_CATEGORY_UNKNOWN",
        "BILLING_PREFERENCE_CHANGE_CATEGORY_DISABLE",
        "BILLING_PREFERENCE_CHANGE_CATEGORY_UPDATE"
      ],
      "default": "BILLING_PREFERENCE_CHANGE_CATEGORY_UNKNOWN",
      "title": "BillingPreferenceChange"
    },
    "coinbase.custody.api.BillingPreferenceChangeState": {
      "type": "string",
      "enum": [
        "BILLING_PREFERENCE_CHANGE_STATE_UNKNOWN",
        "BILLING_PREFERENCE_CHANGE_STATE_CREATED",
        "BILLING_PREFERENCE_CHANGE_STATE_APPROVED",
        "BILLING_PREFERENCE_CHANGE_STATE_REJECTED",
        "BILLING_PREFERENCE_CHANGE_STATE_EXPIRED"
      ],
      "default": "BILLING_PREFERENCE_CHANGE_STATE_UNKNOWN"
    },
    "coinbase.custody.api.BillingPreferenceState": {
      "type": "string",
      "enum": [
        "BILLING_PREFERENCE_STATE_UNKNOWN",
        "BILLING_PREFERENCE_STATE_ENABLED",
        "BILLING_PREFERENCE_STATE_DISABLED"
      ],
      "default": "BILLING_PREFERENCE_STATE_UNKNOWN"
    },
    "coinbase.custody.api.CompletedEvaluation": {
      "type": "object",
      "properties": {
        "input": {
          "$ref": "#/definitions/coinbase.custody.api.EvaluationInput"
        },
        "outcome": {
          "$ref": "#/definitions/coinbase.custody.api.Outcome",
          "title": "Policy evaluated_policy = 2;\nRule evaluated_rule = 3;\ndouble priority = 4;"
        }
      },
      "description": "CompletedEvaluation is the results of a single evaluation (definition comes from Policy Service)\nThe FE only needs EvaluationInput \u0026 Outcome so the other fields are commented out for now."
    },
    "coinbase.custody.api.ConditionValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "ConditionValue defines the value for a particular condition, ex. CurrencyValue{ name: \"Currency\", value: \"fiat\" }"
    },
    "coinbase.custody.api.ConsensusSetting": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "percentage": {
          "type": "string",
          "format": "int64"
        },
        "expiration_in_seconds": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "ConsensusSetting represents the Consensus setting for a policy"
    },
    "coinbase.custody.api.ConsensusWithdrawalValue": {
      "type": "object",
      "properties": {
        "is_percent_value": {
          "type": "boolean",
          "description": "True if the consensus value is a percent of total approvers, false if it's the number of approvers"
        },
        "consensus_value": {
          "type": "integer",
          "format": "int32",
          "description": "Value of consensus withdrawal"
        }
      },
      "required": [
        "is_percent_value",
        "consensus_value"
      ]
    },
    "coinbase.custody.api.ConversionOptions": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "wallet_id": {
          "type": "string"
        },
        "wallet_name": {
          "type": "string"
        },
        "minted_amount": {
          "type": "string"
        },
        "from_amount": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.CreateVideoUploadRequest": {
      "type": "object",
      "properties": {
        "transaction_id": {
          "type": "string"
        }
      },
      "required": [
        "transaction_id"
      ]
    },
    "coinbase.custody.api.CryptoDepositAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "destination_tag": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.CryptoNetwork": {
      "type": "object",
      "properties": {
        "blockchain": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.Currency": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "decimals": {
          "type": "string",
          "format": "int64"
        },
        "required_withdrawal_options": {
          "$ref": "#/definitions/coinbase.custody.api.RequiredWithdrawalOptions"
        },
        "properties_enabled": {
          "$ref": "#/definitions/coinbase.custody.api.PropertiesEnabled"
        },
        "price": {
          "type": "string"
        },
        "price_change_pct": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "supports_test_withdrawal": {
          "type": "boolean"
        },
        "address_link_prefix": {
          "type": "string"
        },
        "currency_type": {
          "type": "string"
        },
        "unstaking_period": {
          "type": "string"
        },
        "next_reward_cycle": {
          "type": "integer",
          "format": "int32"
        },
        "min_stake_amount": {
          "type": "string"
        },
        "ams_uuid": {
          "type": "string"
        },
        "crypto_network": {
          "$ref": "#/definitions/coinbase.custody.api.CryptoNetwork"
        },
        "contract_address": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "symbol",
        "decimals",
        "required_withdrawal_options",
        "properties_enabled",
        "price",
        "price_change_pct",
        "icon",
        "supports_test_withdrawal",
        "address_link_prefix",
        "currency_type",
        "unstaking_period",
        "next_reward_cycle",
        "min_stake_amount"
      ]
    },
    "coinbase.custody.api.CurrencyType": {
      "type": "string",
      "enum": [
        "CURRENCY_TYPE_COIN",
        "CURRENCY_TYPE_ERC20_TOKEN",
        "CURRENCY_TYPE_FIAT",
        "CURRENCY_TYPE_ERC1400_TOKEN",
        "CURRENCY_TYPE_SPL_TOKEN"
      ],
      "default": "CURRENCY_TYPE_COIN"
    },
    "coinbase.custody.api.DestinationOptions": {
      "type": "object",
      "properties": {
        "destination_tag": {
          "$ref": "#/definitions/coinbase.custody.api.DestinationTag",
          "title": "Inside shared"
        },
        "memo_value": {
          "$ref": "#/definitions/coinbase.custody.api.Memo"
        }
      }
    },
    "coinbase.custody.api.DestinationTag": {
      "type": "object",
      "properties": {
        "destination_tag": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.DismissNotificationRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "coinbase.custody.api.DismissNotificationResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "coinbase.custody.api.DisplayUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User UUID"
        },
        "name": {
          "type": "string",
          "description": "User full name"
        },
        "avatar_url": {
          "type": "string",
          "description": "User avatar URL"
        }
      },
      "required": [
        "id",
        "name",
        "avatar_url"
      ]
    },
    "coinbase.custody.api.DocumentSignature": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "document_id": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "agreed_by_user_id": {
          "type": "string"
        },
        "document_key": {
          "$ref": "#/definitions/coinbase.custody.api.DocumentType"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "is_latest_signed": {
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "document_id",
        "vehicle_id",
        "agreed_by_user_id",
        "document_key",
        "created_at",
        "updated_at",
        "is_latest_signed"
      ]
    },
    "coinbase.custody.api.DocumentSignatureAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "document_id": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "signer_user_id": {
          "type": "string"
        },
        "document_key": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "document_url": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.DocumentSignatureAuditValue": {
      "type": "object",
      "properties": {
        "signed_user_id": {
          "type": "string",
          "title": "This model does not undergo consensus"
        }
      }
    },
    "coinbase.custody.api.DocumentSignatureState": {
      "type": "string",
      "enum": [
        "DOCUMENT_SIGNATURE_STATE_UNKNOWN",
        "DOCUMENT_SIGNATURE_STATE_CREATED",
        "DOCUMENT_SIGNATURE_STATE_APPROVED",
        "DOCUMENT_SIGNATURE_STATE_EXPIRED"
      ],
      "default": "DOCUMENT_SIGNATURE_STATE_UNKNOWN",
      "title": "DocumentSignature"
    },
    "coinbase.custody.api.DocumentType": {
      "type": "string",
      "enum": [
        "DOCUMENT_TYPE_UNKNOWN",
        "DOCUMENT_TYPE_STAKING_ADDENDUM",
        "DOCUMENT_TYPE_STACKING_ADDENDUM",
        "DOCUMENT_TYPE_NFT_ADDENDUM",
        "DOCUMENT_TYPE_ETH_STAKING_ADDENDUM",
        "DOCUMENT_TYPE_WEB3_TERMS_AND_CONDITIONS",
        "DOCUMENT_TYPE_LIQUID_STAKING_ADDENDUM",
        "DOCUMENT_TYPE_LSETH_STAKING_ADDENDUM",
        "DOCUMENT_TYPE_USDC_REWARDS_ADDENDUM"
      ],
      "default": "DOCUMENT_TYPE_UNKNOWN"
    },
    "coinbase.custody.api.EmailList": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coinbase.custody.api.EmailListType"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.EmailListState"
        }
      },
      "required": [
        "id",
        "vehicle_id",
        "email",
        "type",
        "created_at",
        "updated_at",
        "state"
      ]
    },
    "coinbase.custody.api.EmailListAction": {
      "type": "string",
      "enum": [
        "EMAIL_LIST_ACTION_UNKNOWN",
        "EMAIL_LIST_ACTION_ADD",
        "EMAIL_LIST_ACTION_REMOVE"
      ],
      "default": "EMAIL_LIST_ACTION_UNKNOWN"
    },
    "coinbase.custody.api.EmailListChangeAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "initiator_id": {
          "type": "string"
        },
        "email_list_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.EmailListChangeAuditValue": {
      "type": "object",
      "properties": {
        "initiator_id": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.EmailListChangeState": {
      "type": "string",
      "enum": [
        "EMAIL_LIST_CHANGE_STATE_UNKNOWN",
        "EMAIL_LIST_CHANGE_STATE_CREATED",
        "EMAIL_LIST_CHANGE_STATE_APPROVED",
        "EMAIL_LIST_CHANGE_STATE_EXPIRED"
      ],
      "default": "EMAIL_LIST_CHANGE_STATE_UNKNOWN",
      "title": "EmailListChange"
    },
    "coinbase.custody.api.EmailListState": {
      "type": "string",
      "enum": [
        "EMAIL_LIST_STATE_UNKNOWN",
        "EMAIL_LIST_STATE_ACTIVE",
        "EMAIL_LIST_STATE_REMOVED"
      ],
      "default": "EMAIL_LIST_STATE_UNKNOWN"
    },
    "coinbase.custody.api.EmailListType": {
      "type": "string",
      "enum": [
        "EMAIL_LIST_TYPE_UNKNOWN",
        "EMAIL_LIST_TYPE_INVOICE"
      ],
      "default": "EMAIL_LIST_TYPE_UNKNOWN"
    },
    "coinbase.custody.api.EnabledValue": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Is setting enabled"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "coinbase.custody.api.EvaluationInput": {
      "type": "object",
      "properties": {
        "policy_type": {
          "type": "string"
        },
        "hierarchy": {
          "$ref": "#/definitions/coinbase.custody.api.Hierarchy"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.ConditionValue"
          }
        }
      },
      "title": "EvaluationInput is the input to an evaluation request"
    },
    "coinbase.custody.api.Experience": {
      "type": "string",
      "enum": [
        "EXPERIENCE_UNKNOWN",
        "EXPERIENCE_PRIME",
        "EXPERIENCE_PRIME_VAULT_ONLY",
        "EXPERIENCE_CUSTODY",
        "EXPERIENCE_ALL"
      ],
      "default": "EXPERIENCE_UNKNOWN"
    },
    "coinbase.custody.api.FeeEstimate": {
      "type": "object",
      "properties": {
        "coinbase_obligation": {
          "type": "string"
        },
        "customer_obligation": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.FinishVideoUploadRequest": {
      "type": "object",
      "properties": {
        "upload_id": {
          "type": "string"
        }
      },
      "required": [
        "upload_id"
      ]
    },
    "coinbase.custody.api.GetBalanceResponse": {
      "type": "object",
      "properties": {
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Balance"
          },
          "title": "Returns a list of balance, each corresponding to a currency"
        },
        "total_fiat_balance": {
          "$ref": "#/definitions/coinbase.custody.api.TotalFiatBalance"
        }
      },
      "required": [
        "balances"
      ]
    },
    "coinbase.custody.api.GetNotificationsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Notification"
          }
        }
      }
    },
    "coinbase.custody.api.GetStakeTimeEstimationResponse": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "string",
          "format": "uint64"
        },
        "unknown": {
          "type": "boolean"
        }
      },
      "required": [
        "seconds"
      ]
    },
    "coinbase.custody.api.GetStakingActivityDetailsResponse": {
      "type": "object",
      "properties": {
        "estimated_unstake_complete_time": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.GetUnstakeTimeEstimationResponse": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "string",
          "format": "uint64"
        },
        "unknown": {
          "type": "boolean"
        }
      },
      "required": [
        "seconds"
      ]
    },
    "coinbase.custody.api.GetUserInformationResponse": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "email",
        "name",
        "avatar_url"
      ]
    },
    "coinbase.custody.api.GetVideoUploadPermissionsResponse": {
      "type": "object",
      "properties": {
        "can_upload": {
          "type": "boolean",
          "description": "Whether the user can upload a video for the transaction"
        },
        "reason": {
          "type": "string",
          "description": "Reason for why the user cannot upload a video"
        }
      },
      "required": [
        "can_upload"
      ]
    },
    "coinbase.custody.api.GetVotingWeightsResponse": {
      "type": "object",
      "properties": {
        "global": {
          "type": "string"
        },
        "current": {
          "type": "string"
        },
        "topics": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "global",
        "current",
        "topics"
      ]
    },
    "coinbase.custody.api.GovernanceProposal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "blockchain_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "hidden": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string"
        },
        "vote_count": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "blockchain_id",
        "title",
        "hidden",
        "created_at",
        "vote_count"
      ]
    },
    "coinbase.custody.api.GovernanceTopic": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "blockchain_id": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "markdown": {
          "type": "string"
        },
        "start_date": {
          "type": "string"
        },
        "end_date": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coinbase.custody.api.GovernanceTopicType"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.GovernanceTopicState"
        },
        "proposals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.GovernanceProposal"
          }
        }
      },
      "required": [
        "id",
        "blockchain_id",
        "summary",
        "title",
        "markdown",
        "start_date",
        "end_date",
        "type",
        "state",
        "proposals"
      ]
    },
    "coinbase.custody.api.GovernanceTopicState": {
      "type": "string",
      "enum": [
        "GOVERNANCE_TOPIC_STATE_UNKNOWN",
        "GOVERNANCE_TOPIC_STATE_PENDING",
        "GOVERNANCE_TOPIC_STATE_ACTIVE",
        "GOVERNANCE_TOPIC_STATE_CANCELED",
        "GOVERNANCE_TOPIC_STATE_DEFEATED",
        "GOVERNANCE_TOPIC_STATE_SUCCEEDED",
        "GOVERNANCE_TOPIC_STATE_QUEUED",
        "GOVERNANCE_TOPIC_STATE_EXPIRED",
        "GOVERNANCE_TOPIC_STATE_EXECUTED"
      ],
      "default": "GOVERNANCE_TOPIC_STATE_UNKNOWN"
    },
    "coinbase.custody.api.GovernanceTopicType": {
      "type": "string",
      "enum": [
        "GOVERNANCE_TOPIC_TYPE_UNKNOWN",
        "GOVERNANCE_TOPIC_TYPE_MAKER_EXEC",
        "GOVERNANCE_TOPIC_TYPE_MAKER_POLL",
        "GOVERNANCE_TOPIC_TYPE_COMPOUND",
        "GOVERNANCE_TOPIC_TYPE_UNISWAP",
        "GOVERNANCE_TOPIC_TYPE_GITCOIN",
        "GOVERNANCE_TOPIC_TYPE_DYDX",
        "GOVERNANCE_TOPIC_TYPE_AAVE"
      ],
      "default": "GOVERNANCE_TOPIC_TYPE_UNKNOWN"
    },
    "coinbase.custody.api.GovernanceVote": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "vote_weight": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.GovernanceVoteState"
        },
        "proposals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.GovernanceProposal"
          }
        },
        "topic_id": {
          "type": "string"
        },
        "wallet_id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "active",
        "vote_weight",
        "state",
        "proposals"
      ]
    },
    "coinbase.custody.api.GovernanceVoteAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "vehicle_name": {
          "type": "string"
        },
        "topic": {
          "type": "string"
        },
        "vote_weight": {
          "type": "string"
        },
        "wallet_id": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.GovernanceVoteState": {
      "type": "string",
      "enum": [
        "GOVERNANCE_VOTE_STATE_UNKNOWN",
        "GOVERNANCE_VOTE_STATE_PENDING",
        "GOVERNANCE_VOTE_STATE_SYNCED",
        "GOVERNANCE_VOTE_STATE_FAILED",
        "GOVERNANCE_VOTE_STATE_DEACTIVATED",
        "GOVERNANCE_VOTE_STATE_CREATED",
        "GOVERNANCE_VOTE_STATE_APPROVED",
        "GOVERNANCE_VOTE_STATE_REJECTED",
        "GOVERNANCE_VOTE_STATE_EXPIRED"
      ],
      "default": "GOVERNANCE_VOTE_STATE_UNKNOWN"
    },
    "coinbase.custody.api.GroupType": {
      "type": "string",
      "enum": [
        "GROUP_TYPE_PORTFOLIO",
        "GROUP_TYPE_ENTITY",
        "GROUP_TYPE_ORGANIZATION"
      ],
      "default": "GROUP_TYPE_PORTFOLIO"
    },
    "coinbase.custody.api.Hierarchy": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/coinbase.custody.api.HierarchyType"
        },
        "id": {
          "type": "string"
        }
      },
      "title": "Hierarchy identifies a specific hierarchy with the combination HierarchyType and id"
    },
    "coinbase.custody.api.HierarchyType": {
      "type": "string",
      "enum": [
        "HIERARCHY_TYPE_UNSPECIFIED",
        "HIERARCHY_TYPE_PORTFOLIO",
        "HIERARCHY_TYPE_ENTITY"
      ],
      "default": "HIERARCHY_TYPE_UNSPECIFIED",
      "title": "HierarchyType are the enums for various hierarchies within Prime, ex Entity, Organization, Wallet, User in the future"
    },
    "coinbase.custody.api.InvestmentVehicle": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "default_portfolio_id": {
          "type": "string"
        },
        "address_1": {
          "type": "string"
        },
        "address_2": {
          "type": "string"
        },
        "address_state": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "entity": {
          "$ref": "#/definitions/coinbase.custody.api.InvestmentVehicleEntity"
        },
        "registered_phone_number": {
          "type": "string"
        },
        "total_assets": {
          "type": "string"
        },
        "approved_at": {
          "type": "string"
        },
        "internal": {
          "type": "boolean"
        },
        "place_of_business_address_1": {
          "type": "string"
        },
        "place_of_business_address_2": {
          "type": "string"
        },
        "place_of_business_address_state": {
          "type": "string"
        },
        "place_of_business_city": {
          "type": "string"
        },
        "place_of_business_country": {
          "type": "string"
        },
        "place_of_business_postal_code": {
          "type": "string"
        },
        "place_of_incorporation_state": {
          "type": "string"
        },
        "place_of_incorporation_country": {
          "type": "string"
        },
        "prime_enabled": {
          "type": "boolean"
        },
        "experience": {
          "$ref": "#/definitions/coinbase.custody.api.Experience"
        }
      },
      "required": [
        "id",
        "organization_id",
        "name",
        "experience"
      ]
    },
    "coinbase.custody.api.InvestmentVehicleEntity": {
      "type": "string",
      "enum": [
        "INVESTMENT_VEHICLE_ENTITY_UNKNOWN",
        "INVESTMENT_VEHICLE_ENTITY_US",
        "INVESTMENT_VEHICLE_ENTITY_IRELAND",
        "INVESTMENT_VEHICLE_ENTITY_GERMANY",
        "INVESTMENT_VEHICLE_ENTITY_CB_INC"
      ],
      "default": "INVESTMENT_VEHICLE_ENTITY_UNKNOWN"
    },
    "coinbase.custody.api.Invitation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/coinbase.custody.api.InvitationRole"
        },
        "vehicle_id": {
          "type": "string"
        },
        "vehicle_name": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.InvitationState"
        },
        "creator_id": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "secondary_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.InvitationSecondaryRole"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.InvitationRole"
          }
        }
      },
      "required": [
        "id",
        "email",
        "role",
        "vehicle_id",
        "vehicle_name",
        "created_at",
        "updated_at",
        "state",
        "creator_id",
        "code",
        "portfolio_id"
      ]
    },
    "coinbase.custody.api.InvitationAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/coinbase.custody.api.InvitationRole"
        },
        "vehicle_id": {
          "type": "string"
        },
        "vehicle_name": {
          "type": "string"
        },
        "secondary_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.InvitationSecondaryRole"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.InvitationRole"
          }
        }
      },
      "required": [
        "id",
        "email",
        "role",
        "vehicle_id",
        "vehicle_name",
        "secondary_roles"
      ]
    },
    "coinbase.custody.api.InvitationRole": {
      "type": "string",
      "enum": [
        "INVITATION_ROLE_UNKNOWN",
        "INVITATION_ROLE_AUDITOR",
        "INVITATION_ROLE_SIGNATORY",
        "INVITATION_ROLE_INITIATOR",
        "INVITATION_ROLE_REVIEWER",
        "INVITATION_ROLE_ADMIN",
        "INVITATION_ROLE_TRADER",
        "INVITATION_ROLE_INTERNAL_TRADER",
        "INVITATION_ROLE_TEAM_MANAGER",
        "INVITATION_ROLE_FULL_TRADER"
      ],
      "default": "INVITATION_ROLE_UNKNOWN",
      "title": "Invitation"
    },
    "coinbase.custody.api.InvitationSecondaryRole": {
      "type": "string",
      "enum": [
        "INVITATION_SECONDARY_ROLE_UNKNOWN",
        "INVITATION_SECONDARY_ROLE_VIDEO_APPROVER"
      ],
      "default": "INVITATION_SECONDARY_ROLE_UNKNOWN"
    },
    "coinbase.custody.api.InvitationState": {
      "type": "string",
      "enum": [
        "INVITATION_STATE_UNKNOWN",
        "INVITATION_STATE_CREATED",
        "INVITATION_STATE_APPROVED",
        "INVITATION_STATE_REJECTED",
        "INVITATION_STATE_ACCEPTED",
        "INVITATION_STATE_ADMIN_CREATED",
        "INVITATION_STATE_EXPIRED",
        "INVITATION_STATE_REQUESTED",
        "INVITATION_STATE_USER_REJECTED"
      ],
      "default": "INVITATION_STATE_UNKNOWN"
    },
    "coinbase.custody.api.Invoice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "invoice_number": {
          "type": "string"
        },
        "billing_month": {
          "type": "integer",
          "format": "int32"
        },
        "billing_year": {
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.InvoiceState"
        },
        "presigned_url": {
          "type": "string"
        },
        "report_id": {
          "type": "string"
        },
        "due_date": {
          "type": "string"
        },
        "usd_amount_owed": {
          "type": "string"
        },
        "usd_amount_paid": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "invoice_number",
        "billing_month",
        "billing_year",
        "state",
        "presigned_url",
        "report_id",
        "due_date",
        "usd_amount_owed",
        "usd_amount_paid"
      ]
    },
    "coinbase.custody.api.InvoiceState": {
      "type": "string",
      "enum": [
        "INVOICE_STATE_UNKNOWN",
        "INVOICE_STATE_IMPORTED",
        "INVOICE_STATE_BILLED",
        "INVOICE_STATE_PARTIALLY_PAID",
        "INVOICE_STATE_PAID"
      ],
      "default": "INVOICE_STATE_UNKNOWN"
    },
    "coinbase.custody.api.KeyRegistrationOptions": {
      "type": "object",
      "properties": {
        "vote_first": {
          "type": "string",
          "format": "int64"
        },
        "vote_last": {
          "type": "string",
          "format": "int64"
        },
        "vote_key_dilution": {
          "type": "string",
          "format": "int64"
        },
        "part_pubkey": {
          "type": "string"
        },
        "selection_pubkey": {
          "type": "string"
        },
        "state_proof_pubkey": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.ListVideoUploadsResponse": {
      "type": "object",
      "properties": {
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.VideoUpload"
          }
        }
      }
    },
    "coinbase.custody.api.MacbethAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "address": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "active",
        "address",
        "vehicle_id"
      ]
    },
    "coinbase.custody.api.MaxWithdrawalLimitValue": {
      "type": "object",
      "properties": {
        "max_withdrawal_limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit for withdrawals"
        }
      },
      "required": [
        "max_withdrawal_limit"
      ]
    },
    "coinbase.custody.api.Memo": {
      "type": "object",
      "properties": {
        "memo_value": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.MiddleOfficeOptions": {
      "type": "object",
      "properties": {
        "middle_office_initiated": {
          "type": "boolean"
        }
      }
    },
    "coinbase.custody.api.Notification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "criteria": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "end_date": {
          "type": "string"
        },
        "start_date": {
          "type": "string"
        },
        "dismissible": {
          "type": "boolean"
        },
        "category": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "cta_label": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "secondary_cta_label": {
          "type": "string"
        },
        "secondary_cta_url": {
          "type": "string"
        },
        "show_once": {
          "type": "boolean"
        },
        "content_title": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "title"
      ]
    },
    "coinbase.custody.api.Organization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "prime_enabled": {
          "type": "boolean"
        },
        "private_client": {
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "coinbase.custody.api.OrganizationAULStatus": {
      "type": "object",
      "properties": {
        "organization_aul_status": {
          "type": "string",
          "description": "Whether authorized users are captured in-product or via PDF"
        }
      },
      "required": [
        "organization_aul_status"
      ]
    },
    "coinbase.custody.api.Outcome": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "consensus_setting": {
          "$ref": "#/definitions/coinbase.custody.api.ConsensusSetting"
        },
        "video_call_setting": {
          "$ref": "#/definitions/coinbase.custody.api.VideoCallSetting"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.OutcomeDetail"
          }
        }
      }
    },
    "coinbase.custody.api.OutcomeDetail": {
      "type": "object",
      "properties": {
        "web3_signers": {
          "$ref": "#/definitions/coinbase.custody.api.Web3Signers"
        }
      }
    },
    "coinbase.custody.api.PaymentMethodChangeAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "initiator_id": {
          "type": "string"
        },
        "payment_method_id": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.PaymentMethodChangeAuditValue": {
      "type": "object",
      "properties": {
        "num_all_approvers": {
          "type": "integer",
          "format": "int32"
        },
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.PaymentMethodChangeCategory"
        },
        "all_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "approved_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rejected_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "num_approvals_required": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "coinbase.custody.api.PaymentMethodChangeCategory": {
      "type": "string",
      "enum": [
        "PAYMENT_METHOD_CHANGE_CATEGORY_UNKNOWN",
        "PAYMENT_METHOD_CHANGE_CATEGORY_REMOVE"
      ],
      "default": "PAYMENT_METHOD_CHANGE_CATEGORY_UNKNOWN"
    },
    "coinbase.custody.api.PaymentMethodChangeState": {
      "type": "string",
      "enum": [
        "PAYMENT_METHOD_CHANGE_STATE_UNKNOWN",
        "PAYMENT_METHOD_CHANGE_STATE_CREATED",
        "PAYMENT_METHOD_CHANGE_STATE_APPROVED",
        "PAYMENT_METHOD_CHANGE_STATE_REJECTED",
        "PAYMENT_METHOD_CHANGE_STATE_EXPIRED"
      ],
      "default": "PAYMENT_METHOD_CHANGE_STATE_UNKNOWN"
    },
    "coinbase.custody.api.PaymentMethodSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "payment_method_type": {
          "$ref": "#/definitions/coinbase.custody.api.PaymentMethodType"
        },
        "currency": {
          "type": "string"
        },
        "obfuscated_account_number": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "bank_name": {
          "type": "string"
        },
        "icon_id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "payment_method_type",
        "currency",
        "obfuscated_account_number",
        "created_at",
        "bank_name",
        "icon_id"
      ]
    },
    "coinbase.custody.api.PaymentMethodType": {
      "type": "string",
      "enum": [
        "PAYMENT_METHOD_TYPE_UNKNOWN",
        "PAYMENT_METHOD_FEDWIRE",
        "PAYMENT_METHOD_SWIFT",
        "PAYMENT_METHOD_SEN",
        "PAYMENT_METHOD_SEPA",
        "PAYMENT_METHOD_CBIT"
      ],
      "default": "PAYMENT_METHOD_TYPE_UNKNOWN"
    },
    "coinbase.custody.api.Permission": {
      "type": "string",
      "enum": [
        "PERMISSION_UNKNOWN",
        "PERMISSION_READ",
        "PERMISSION_INITIATE",
        "PERMISSION_REVIEW",
        "PERMISSION_ADMIN",
        "PERMISSION_TRADE",
        "PERMISSION_VIDEO_APPROVE",
        "PERMISSION_TEAM_APPROVE",
        "PERMISSION_WEB3_SIGN"
      ],
      "default": "PERMISSION_UNKNOWN"
    },
    "coinbase.custody.api.Portfolio": {
      "type": "object",
      "properties": {
        "vehicle_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "vehicle_name": {
          "type": "string"
        },
        "portfolio_type": {
          "$ref": "#/definitions/coinbase.custody.api.PortfolioType"
        }
      }
    },
    "coinbase.custody.api.PortfolioBalance": {
      "type": "object",
      "properties": {
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Balance"
          }
        },
        "vehicle_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "balances",
        "vehicle_id",
        "id",
        "name"
      ]
    },
    "coinbase.custody.api.PortfolioType": {
      "type": "string",
      "enum": [
        "PORTFOLIO_TYPE_UNKNOWN",
        "CLIENT_LIABILITY_ACCOUNT",
        "INTERNAL_ASSET_ACCOUNT"
      ],
      "default": "PORTFOLIO_TYPE_UNKNOWN"
    },
    "coinbase.custody.api.PropertiesEnabled": {
      "type": "object",
      "properties": {
        "auto_sweep_approval": {
          "type": "boolean"
        },
        "deposit": {
          "type": "boolean"
        },
        "withdrawal": {
          "type": "boolean"
        },
        "prevent_wallet_creation": {
          "type": "boolean"
        },
        "governance": {
          "type": "boolean"
        },
        "staking": {
          "type": "boolean"
        },
        "unstaking": {
          "type": "boolean"
        },
        "partial_stake": {
          "type": "boolean"
        },
        "vesting": {
          "type": "boolean"
        },
        "voting": {
          "type": "boolean"
        },
        "restaking": {
          "type": "boolean"
        },
        "change_validator": {
          "type": "boolean"
        },
        "cold_storage": {
          "type": "boolean"
        },
        "trading_deposit": {
          "type": "boolean"
        },
        "trading_withdrawal": {
          "type": "boolean"
        },
        "trading_conversion": {
          "type": "boolean"
        },
        "qc_deposit": {
          "type": "boolean"
        },
        "qc_withdrawal": {
          "type": "boolean"
        },
        "claim_rewards": {
          "type": "boolean"
        }
      },
      "required": [
        "auto_sweep_approval",
        "deposit",
        "withdrawal",
        "prevent_wallet_creation",
        "governance",
        "staking",
        "unstaking",
        "partial_stake",
        "vesting",
        "voting",
        "restaking",
        "change_validator",
        "cold_storage",
        "trading_deposit",
        "trading_withdrawal",
        "trading_conversion",
        "qc_deposit",
        "qc_withdrawal",
        "claim_rewards"
      ]
    },
    "coinbase.custody.api.QueryLevel": {
      "type": "string",
      "enum": [
        "PORTFOLIO",
        "ENTITY",
        "ORGANIZATION",
        "USER"
      ],
      "default": "PORTFOLIO"
    },
    "coinbase.custody.api.RedeemRequestStatus": {
      "type": "object",
      "properties": {
        "activity_id": {
          "type": "string"
        },
        "estimated_seconds_remaining": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.RedoPlanAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.RedoPlanState"
        },
        "redo_transaction_id": {
          "type": "string"
        },
        "sweep_transaction_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.RedoPlanAuditValue": {
      "type": "object",
      "properties": {
        "redo_transaction_id": {
          "type": "string"
        },
        "sweep_transaction_id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.RedoPlanState"
        }
      }
    },
    "coinbase.custody.api.RedoPlanState": {
      "type": "string",
      "enum": [
        "REDO_PLAN_STATE_UNKNOWN",
        "REDO_PLAN_STATE_CREATED",
        "REDO_PLAN_STATE_PLANNED",
        "REDO_PLAN_STATE_DONE"
      ],
      "default": "REDO_PLAN_STATE_UNKNOWN",
      "title": "RedoPlan"
    },
    "coinbase.custody.api.RequiredApprovalValue": {
      "type": "object",
      "properties": {
        "approval_thresholds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.RequiredApprovalValue.ApprovalThreshold"
          }
        }
      },
      "required": [
        "approval_thresholds"
      ]
    },
    "coinbase.custody.api.RequiredApprovalValue.ApprovalThreshold": {
      "type": "object",
      "properties": {
        "threshold": {
          "type": "number",
          "format": "float"
        },
        "user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "coinbase.custody.api.RequiredWithdrawalOptions": {
      "type": "object",
      "properties": {
        "destination_tag": {
          "type": "boolean"
        },
        "memo_value": {
          "type": "boolean"
        },
        "min_withdrawal_amount": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "coinbase.custody.api.RewardOptions": {
      "type": "object",
      "properties": {
        "is_consensus_reward": {
          "type": "boolean"
        }
      }
    },
    "coinbase.custody.api.RewardsBalance": {
      "type": "object",
      "properties": {
        "pending": {
          "type": "string"
        }
      },
      "required": [
        "pending"
      ]
    },
    "coinbase.custody.api.Role": {
      "type": "string",
      "enum": [
        "ROLE_UNKNOWN",
        "ROLE_AUTHORIZED_SIGNATORY",
        "ROLE_INITIATOR",
        "ROLE_APPROVER",
        "ROLE_AUDITOR",
        "ROLE_ADMINISTRATOR",
        "ROLE_TRADER",
        "ROLE_INTERNAL_TRADER",
        "ROLE_TEAM_MANAGER",
        "ROLE_FULL_TRADER",
        "ROLE_INTERNAL_AUDITOR"
      ],
      "default": "ROLE_UNKNOWN"
    },
    "coinbase.custody.api.SaturationLevel": {
      "type": "string",
      "enum": [
        "SATURATION_LEVEL_UNKNOWN",
        "SATURATION_LEVEL_IDEAL",
        "SATURATION_LEVEL_LOW",
        "SATURATION_LEVEL_HIGH"
      ],
      "default": "SATURATION_LEVEL_UNKNOWN"
    },
    "coinbase.custody.api.SecondaryAuditableType": {
      "type": "string",
      "enum": [
        "SECONDARY_AUDITABLE_TYPE_UNKNOWN",
        "SECONDARY_AUDITABLE_TYPE_WITHDRAWAL",
        "SECONDARY_AUDITABLE_TYPE_SWEEP_WITHDRAWAL",
        "SECONDARY_AUDITABLE_TYPE_BILLING_WITHDRAWAL",
        "SECONDARY_AUDITABLE_TYPE_DEPOSIT",
        "SECONDARY_AUDITABLE_TYPE_COINBASE_DEPOSIT",
        "SECONDARY_AUDITABLE_TYPE_SWEEP_DEPOSIT",
        "SECONDARY_AUDITABLE_TYPE_REWARD",
        "SECONDARY_AUDITABLE_TYPE_PROXY_DEPOSIT",
        "SECONDARY_AUDITABLE_TYPE_PROXY_WITHDRAWAL",
        "SECONDARY_AUDITABLE_TYPE_KEY_REGISTRATION",
        "SECONDARY_AUDITABLE_TYPE_DELEGATION",
        "SECONDARY_AUDITABLE_TYPE_UNDELEGATION_DEPRECATED",
        "SECONDARY_AUDITABLE_TYPE_RESTAKE",
        "SECONDARY_AUDITABLE_TYPE_COMPLETE_UNBONDING",
        "SECONDARY_AUDITABLE_TYPE_COINBASE_REFUND",
        "SECONDARY_AUDITABLE_TYPE_WITHDRAW_UNBONDED",
        "SECONDARY_AUDITABLE_TYPE_STAKE_ACCOUNT_CREATE",
        "SECONDARY_AUDITABLE_TYPE_CHANGE_VALIDATOR",
        "SECONDARY_AUDITABLE_TYPE_STAKE",
        "SECONDARY_AUDITABLE_TYPE_UNSTAKE",
        "SECONDARY_AUDITABLE_TYPE_TRANSFER_WITHDRAWAL",
        "SECONDARY_AUDITABLE_TYPE_TRANSFER_DEPOSIT",
        "SECONDARY_AUDITABLE_TYPE_SIGNATURE",
        "SECONDARY_AUDITABLE_TYPE_DISABLE",
        "SECONDARY_AUDITABLE_TYPE_UPDATE",
        "SECONDARY_AUDITABLE_TYPE_CREATE_ACCESS_KEY",
        "SECONDARY_AUDITABLE_TYPE_REVOKE_ACCESS_KEY",
        "SECONDARY_AUDITABLE_TYPE_ADDRESS_BOOK_ADDRESS_ADDED",
        "SECONDARY_AUDITABLE_TYPE_ADDRESS_BOOK_ADDRESS_DELETED",
        "SECONDARY_AUDITABLE_TYPE_CONSENSUS_WITHDRAWAL",
        "SECONDARY_AUDITABLE_TYPE_UPDATE_CONSENSUS_WITHDRAWAL",
        "SECONDARY_AUDITABLE_TYPE_MAX_WITHDRAWAL_AMOUNT",
        "SECONDARY_AUDITABLE_TYPE_ADDRESS_WHITELISTING",
        "SECONDARY_AUDITABLE_TYPE_MULTI_WALLET",
        "SECONDARY_AUDITABLE_TYPE_API_KEY_GENERATION",
        "SECONDARY_AUDITABLE_TYPE_CONSENSUS_ONE",
        "SECONDARY_AUDITABLE_TYPE_SIGN_STAKING_ADDENDUM",
        "SECONDARY_AUDITABLE_TYPE_GOVERNANCE_VOTE_CONSENSUS",
        "SECONDARY_AUDITABLE_TYPE_UPDATE_USER_ROLE",
        "SECONDARY_AUDITABLE_TYPE_REMOVE_USER",
        "SECONDARY_AUDITABLE_TYPE_REMOVE_PAYMENT_METHOD",
        "SECONDARY_AUDITABLE_TYPE_REQUIRED_APPROVAL",
        "SECONDARY_AUDITABLE_TYPE_VIDEO_CONSENSUS"
      ],
      "default": "SECONDARY_AUDITABLE_TYPE_UNKNOWN",
      "title": "- SECONDARY_AUDITABLE_TYPE_WITHDRAWAL: Transaction\n - SECONDARY_AUDITABLE_TYPE_SIGNATURE: DocumentSignature\n - SECONDARY_AUDITABLE_TYPE_DISABLE: BillingPreferenceChange\n - SECONDARY_AUDITABLE_TYPE_CREATE_ACCESS_KEY: ApiKeyChange\n - SECONDARY_AUDITABLE_TYPE_ADDRESS_BOOK_ADDRESS_ADDED: WithdrawalAddressChange\n - SECONDARY_AUDITABLE_TYPE_CONSENSUS_WITHDRAWAL: SettingsChange\n - SECONDARY_AUDITABLE_TYPE_UPDATE_USER_ROLE: UserChange\n - SECONDARY_AUDITABLE_TYPE_REMOVE_PAYMENT_METHOD: PaymentMethod"
    },
    "coinbase.custody.api.SecondaryRole": {
      "type": "string",
      "enum": [
        "SECONDARY_ROLE_UNKNOWN",
        "SECONDARY_ROLE_VIDEO_APPROVER",
        "SECONDARY_ROLE_TEAM_APPROVER",
        "SECONDARY_ROLE_WEB3_SIGNER"
      ],
      "default": "SECONDARY_ROLE_UNKNOWN"
    },
    "coinbase.custody.api.Settings": {
      "type": "object",
      "properties": {
        "consensus_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "key": {
          "$ref": "#/definitions/coinbase.custody.api.SettingsKey"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "value": {
          "$ref": "#/definitions/coinbase.custody.api.SettingsValue"
        }
      },
      "required": [
        "consensus_id",
        "created_at",
        "description",
        "id",
        "key",
        "name",
        "updated_at",
        "value"
      ]
    },
    "coinbase.custody.api.SettingsChangeAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "key": {
          "$ref": "#/definitions/coinbase.custody.api.SettingsSpecKey"
        },
        "value_from": {
          "type": "object",
          "title": "TODO this is unstructured JSON"
        },
        "value_to": {
          "type": "object",
          "title": "TODO this is unstructured JSON"
        },
        "vehicle_id": {
          "type": "string"
        },
        "vehicle_name": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.SettingsChangeAuditValue": {
      "type": "object",
      "properties": {
        "num_all_approvers": {
          "type": "integer",
          "format": "int32"
        },
        "settings_name": {
          "type": "string"
        },
        "all_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "approved_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rejected_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "num_approvals_required": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "coinbase.custody.api.SettingsChangeState": {
      "type": "string",
      "enum": [
        "SETTINGS_CHANGE_STATE_UNKNOWN",
        "SETTINGS_CHANGE_STATE_CREATED",
        "SETTINGS_CHANGE_STATE_APPROVED",
        "SETTINGS_CHANGE_STATE_REJECTED",
        "SETTINGS_CHANGE_STATE_ADMIN_CREATED",
        "SETTINGS_CHANGE_STATE_EXPIRED"
      ],
      "default": "SETTINGS_CHANGE_STATE_UNKNOWN"
    },
    "coinbase.custody.api.SettingsKey": {
      "type": "string",
      "enum": [
        "SETTINGS_KEY_UNKNOWN",
        "SETTINGS_KEY_CONSENSUS_WITHDRAWAL",
        "SETTINGS_KEY_MAX_WITHDRAWAL_AMOUNT",
        "SETTINGS_KEY_TRUSTED_ADDRESS_PROTECTION",
        "SETTINGS_KEY_MULTI_WALLETS",
        "SETTINGS_KEY_API_KEY_GENERATION",
        "SETTINGS_KEY_CONSENSUS_ONE",
        "SETTINGS_KEY_SIGN_STAKING_ADDENDUM",
        "SETTINGS_KEY_GOVERNANCE_VOTE_CONSENSUS",
        "SETTINGS_KEY_REQUIRED_APPROVAL",
        "SETTINGS_KEY_VIDEO_CONSENSUS",
        "SETTINGS_KEY_ORGANIZATION_AUL_STATUS"
      ],
      "default": "SETTINGS_KEY_UNKNOWN",
      "title": "Supported keys for Settings"
    },
    "coinbase.custody.api.SettingsSpecKey": {
      "type": "string",
      "enum": [
        "SETTINGS_SPEC_UNKNOWN",
        "SETTINGS_SPEC_CONSENSUS_WITHDRAWAL",
        "SETTINGS_SPEC_UPDATE_CONSENSUS_WITHDRAWAL",
        "SETTINGS_SPEC_MAX_WITHDRAWAL_AMOUNT",
        "SETTINGS_SPEC_ADDRESS_WHITELISTING",
        "SETTINGS_SPEC_MULTI_WALLET",
        "SETTINGS_SPEC_API_KEY_GENERATION",
        "SETTINGS_SPEC_CONSENSUS_ONE",
        "SETTINGS_SPEC_SIGN_STAKING_ADDENDUM",
        "SETTINGS_SPEC_GOVERNANCE_VOTE_CONSENSUS",
        "SETTINGS_SPEC_REQUIRED_APPROVAL",
        "SETTINGS_SPEC_ORGANIZATION_AUL_STATUS",
        "SETTINGS_SPEC_VIDEO_CONSENSUS",
        "SETTINGS_SPEC_CLIENT_NOTES"
      ],
      "default": "SETTINGS_SPEC_UNKNOWN",
      "title": "SettingsChange"
    },
    "coinbase.custody.api.SettingsValue": {
      "type": "object",
      "properties": {
        "consensus_withdrawal": {
          "$ref": "#/definitions/coinbase.custody.api.ConsensusWithdrawalValue"
        },
        "governance_vote_consensus": {
          "$ref": "#/definitions/coinbase.custody.api.EnabledValue"
        },
        "max_withdrawal_amount": {
          "$ref": "#/definitions/coinbase.custody.api.MaxWithdrawalLimitValue"
        },
        "trusted_address_protection": {
          "$ref": "#/definitions/coinbase.custody.api.EnabledValue"
        },
        "required_approval": {
          "$ref": "#/definitions/coinbase.custody.api.RequiredApprovalValue"
        },
        "video_consensus": {
          "$ref": "#/definitions/coinbase.custody.api.ConsensusWithdrawalValue"
        },
        "organization_aul_status": {
          "$ref": "#/definitions/coinbase.custody.api.OrganizationAULStatus"
        }
      }
    },
    "coinbase.custody.api.SmartContract": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.SmartContractState"
        },
        "balance": {
          "type": "string",
          "title": "Whole amount"
        },
        "address": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "disabling": {
          "type": "boolean"
        },
        "deploying": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.SmartContractRelease": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.SmartContractReleaseState"
        },
        "created_at": {
          "type": "string"
        },
        "destination_address": {
          "type": "string"
        },
        "approval_time_remaining": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.SmartContractReleaseAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "smart_contract_type": {
          "$ref": "#/definitions/coinbase.custody.api.SmartContractReleaseType"
        },
        "vehicle_id": {
          "type": "string"
        },
        "vehicle_name": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.SmartContractReleaseState": {
      "type": "string",
      "enum": [
        "SMART_CONTRACT_RELEASE_STATE_UNKNOWN",
        "SMART_CONTRACT_RELEASE_STATE_CREATED",
        "SMART_CONTRACT_RELEASE_STATE_APPROVED",
        "SMART_CONTRACT_RELEASE_STATE_REJECTED",
        "SMART_CONTRACT_RELEASE_STATE_EXPIRED",
        "SMART_CONTRACT_RELEASE_STATE_PENDING",
        "SMART_CONTRACT_RELEASE_STATE_SYNCED",
        "SMART_CONTRACT_RELEASE_STATE_FAILED"
      ],
      "default": "SMART_CONTRACT_RELEASE_STATE_UNKNOWN"
    },
    "coinbase.custody.api.SmartContractReleaseType": {
      "type": "string",
      "enum": [
        "SMART_CONTRACT_RELEASE_TYPE_UNKNOWN",
        "SMART_CONTRACT_RELEASE_TYPE_SIGNALLING_PROXY",
        "SMART_CONTRACT_RELEASE_TYPE_VOTE_PROXY"
      ],
      "default": "SMART_CONTRACT_RELEASE_TYPE_UNKNOWN",
      "title": "SmartContractRelease"
    },
    "coinbase.custody.api.SmartContractState": {
      "type": "string",
      "enum": [
        "SMART_CONTRACT_STATE_UNKNOWN",
        "SMART_CONTRACT_STATE_PENDING",
        "SMART_CONTRACT_STATE_SYNCED",
        "SMART_CONTRACT_STATE_FAILED",
        "SMART_CONTRACT_STATE_DEACTIVATED"
      ],
      "default": "SMART_CONTRACT_STATE_UNKNOWN"
    },
    "coinbase.custody.api.StakingBalance": {
      "type": "object",
      "properties": {
        "bonded": {
          "type": "string"
        },
        "bondable": {
          "type": "string"
        },
        "unbonding": {
          "type": "string"
        }
      },
      "required": [
        "bonded",
        "bondable",
        "unbonding"
      ]
    },
    "coinbase.custody.api.StakingOptions": {
      "type": "object",
      "properties": {
        "end_date": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.StakingValidator": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.ValidatorCategory"
        },
        "saturation_ratio": {
          "type": "string"
        },
        "remaining_capacity": {
          "type": "string"
        },
        "explorer_url": {
          "type": "string"
        },
        "saturation_level": {
          "$ref": "#/definitions/coinbase.custody.api.SaturationLevel"
        },
        "total_capacity": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "address",
        "public",
        "category"
      ]
    },
    "coinbase.custody.api.StandardAuditValue": {
      "type": "object",
      "properties": {
        "num_all_approvers": {
          "type": "integer",
          "format": "int32"
        },
        "all_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "approved_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rejected_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "num_approvals_required": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "num_all_approvers",
        "all_user_ids",
        "approved_user_ids",
        "rejected_user_ids",
        "num_approvals_required"
      ]
    },
    "coinbase.custody.api.TestTransaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "currency_symbol": {
          "type": "string"
        },
        "destination_address": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.TestTransactionState"
        },
        "vehicle_id": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "transaction_hash": {
          "type": "string"
        },
        "explorer_link": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "currency_symbol",
        "destination_address",
        "state",
        "vehicle_id",
        "portfolio_id",
        "created_at",
        "updated_at"
      ]
    },
    "coinbase.custody.api.TestTransactionState": {
      "type": "string",
      "enum": [
        "TEST_TRANSACTION_STATE_UNKNOWN",
        "TEST_TRANSACTION_STATE_CREATED",
        "TEST_TRANSACTION_STATE_CONSTRUCTED",
        "TEST_TRANSACTION_STATE_BROADCASTING",
        "TEST_TRANSACTION_STATE_DONE",
        "TEST_TRANSACTION_STATE_FAILED"
      ],
      "default": "TEST_TRANSACTION_STATE_UNKNOWN"
    },
    "coinbase.custody.api.Token": {
      "type": "object",
      "properties": {
        "currency_symbol": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        },
        "image_url": {
          "type": "string"
        },
        "image_thumbnail_url": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "assigned_value_amount": {
          "type": "string"
        },
        "assigned_value_currency_symbol": {
          "type": "string"
        },
        "assigned_value_strategy": {
          "$ref": "#/definitions/coinbase.custody.api.AssignedValueStrategy"
        }
      }
    },
    "coinbase.custody.api.TotalFiatBalance": {
      "type": "object",
      "example": {
        "fiat_symbol": "usd",
        "total_tradable_fiat_value": "60.00",
        "total_fiat_value": "100.00",
        "total_vault_fiat_value": "40.00",
        "available_tradable_fiat_value": "40.00",
        "hold_tradable_fiat_value": "20.00",
        "available_vault_fiat_value": "20.00",
        "total_omnibus_qc_fiat_value": "100.00",
        "available_omnibus_qc_fiat_value": "80.00",
        "hold_omnibus_qc_fiat_value": "20.00"
      },
      "properties": {
        "fiat_symbol": {
          "type": "string",
          "description": "Fiat symbol"
        },
        "scope": {
          "$ref": "#/definitions/coinbase.custody.api.BalanceScope",
          "description": "Balance scope"
        },
        "total_tradable_fiat_value": {
          "type": "string",
          "description": "Total portfolio Trading Balance wallets funds in fiat currency"
        },
        "total_fiat_value": {
          "type": "string",
          "description": "Total portfolio funds in fiat currency"
        },
        "total_vault_fiat_value": {
          "type": "string",
          "description": "Total portfolio Vault wallets funds in fiat currency"
        },
        "available_tradable_fiat_value": {
          "type": "string",
          "description": "Available (i.e. withdrawable) portfolio Trading Balance wallets funds in fiat currency"
        },
        "available_vault_fiat_value": {
          "type": "string",
          "description": "Available (i.e. withdrawable) portfolio Vault wallets funds in fiat currency"
        },
        "hold_tradable_fiat_value": {
          "type": "string",
          "description": "Hold balance for portfolio Trading Balance wallets funds in fiat currency"
        },
        "total_omnibus_qc_fiat_value": {
          "type": "string",
          "description": "Total portfolio Omnibus QC wallets funds in fiat currency"
        },
        "available_omnibus_qc_fiat_value": {
          "type": "string",
          "description": "Available (i.e. withdrawable) portfolio Omnibus QC wallets funds in fiat currency"
        },
        "hold_omnibus_qc_fiat_value": {
          "type": "string",
          "description": "Hold balance for portfolio Omnibus QC wallets funds in fiat currency"
        }
      },
      "required": [
        "fiat_symbol",
        "scope",
        "total_tradable_fiat_value",
        "total_fiat_value",
        "total_vault_fiat_value",
        "available_tradable_fiat_value",
        "available_vault_fiat_value",
        "hold_tradable_fiat_value",
        "total_omnibus_qc_fiat_value",
        "available_omnibus_qc_fiat_value",
        "hold_omnibus_qc_fiat_value"
      ]
    },
    "coinbase.custody.api.TransactionAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "staking_amount": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "staking_value": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coinbase.custody.api.TransactionType"
        },
        "human_id": {
          "type": "string"
        },
        "customer_fees": {
          "type": "string"
        },
        "custody_fees": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "source_address": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "vehicle_name": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "wallet_id": {
          "type": "string"
        },
        "fee_refund_state": {
          "type": "string"
        },
        "test_withdrawal": {
          "$ref": "#/definitions/coinbase.custody.api.TransactionAuditData.TestWithdrawal"
        },
        "redo_tx_info": {
          "$ref": "#/definitions/coinbase.custody.api.TransactionAuditData.RedoTxInfo"
        },
        "options": {
          "$ref": "#/definitions/coinbase.custody.api.DestinationOptions"
        },
        "key_registration_options": {
          "$ref": "#/definitions/coinbase.custody.api.KeyRegistrationOptions"
        },
        "conversion_options": {
          "$ref": "#/definitions/coinbase.custody.api.ConversionOptions"
        },
        "vote_authorize_options": {
          "$ref": "#/definitions/coinbase.custody.api.VoteAuthorizeOptions"
        },
        "middle_office_options": {
          "$ref": "#/definitions/coinbase.custody.api.MiddleOfficeOptions"
        },
        "staking_options": {
          "$ref": "#/definitions/coinbase.custody.api.StakingOptions"
        },
        "reward_options": {
          "$ref": "#/definitions/coinbase.custody.api.RewardOptions"
        },
        "summary": {
          "$ref": "#/definitions/coinbase.custody.api.TransferSummary"
        },
        "usd_amount_at_creation": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "amount",
        "staking_amount",
        "value",
        "staking_value",
        "type",
        "human_id",
        "customer_fees",
        "custody_fees",
        "currency",
        "source_address",
        "destination",
        "vehicle_id",
        "vehicle_name",
        "wallet_id",
        "fee_refund_state"
      ]
    },
    "coinbase.custody.api.TransactionAuditData.CoinbaseTransactionType": {
      "type": "string",
      "enum": [
        "COINBASE_TRANSACTION_TYPE_UNKNOWN",
        "COINBASE_TRANSACTION_TYPE_TEST_WITHDRAWAL",
        "COINBASE_TRANSACTION_TYPE_GASSING_WITHDRAWAL",
        "COINBASE_TRANSACTION_TYPE_ADDRESS_VERIFICATION",
        "COINBASE_TRANSACTION_TYPE_CPFP_WITHDRAWAL",
        "COINBASE_TRANSACTION_TYPE_FEE_REFUND"
      ],
      "default": "COINBASE_TRANSACTION_TYPE_UNKNOWN"
    },
    "coinbase.custody.api.TransactionAuditData.RedoTxInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "human_id": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.TransactionAuditData.TestWithdrawal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "tx_link": {
          "type": "string"
        },
        "address_link": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coinbase.custody.api.TransactionAuditData.CoinbaseTransactionType"
        }
      }
    },
    "coinbase.custody.api.TransactionAuditValue": {
      "type": "object",
      "properties": {
        "currency_symbol": {
          "type": "string"
        },
        "humanized_tx_type": {
          "type": "string"
        },
        "retried": {
          "type": "boolean"
        },
        "num_all_approvers": {
          "type": "integer",
          "format": "int32"
        },
        "all_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "approved_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rejected_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "num_approvals_required": {
          "type": "integer",
          "format": "int32"
        },
        "wallet_name": {
          "type": "string"
        },
        "required_approvers_for_amount": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.DisplayUser"
          }
        }
      },
      "required": [
        "currency_symbol",
        "humanized_tx_type",
        "retried",
        "num_all_approvers",
        "all_user_ids",
        "approved_user_ids",
        "rejected_user_ids",
        "num_approvals_required"
      ]
    },
    "coinbase.custody.api.TransactionState": {
      "type": "string",
      "enum": [
        "TRANSACTION_STATE_UNKNOWN",
        "TRANSACTION_STATE_CREATED",
        "TRANSACTION_STATE_REQUESTED",
        "TRANSACTION_STATE_APPROVED",
        "TRANSACTION_STATE_RESTORED",
        "TRANSACTION_STATE_DONE",
        "TRANSACTION_STATE_IMPORTED",
        "TRANSACTION_STATE_CANCELLED",
        "TRANSACTION_STATE_REJECTED",
        "TRANSACTION_STATE_ETC_PENDING",
        "TRANSACTION_STATE_ETC_APPROVED",
        "TRANSACTION_STATE_ETC_REJECTED",
        "TRANSACTION_STATE_USER_REJECTED",
        "TRANSACTION_STATE_FAILED",
        "TRANSACTION_STATE_EXPIRED",
        "TRANSACTION_STATE_PROVISIONED",
        "TRANSACTION_STATE_PLANNED",
        "TRANSACTION_STATE_GASSING",
        "TRANSACTION_STATE_GASSED",
        "TRANSACTION_STATE_DRAFTED",
        "TRANSACTION_STATE_DELAYED",
        "TRANSACTION_STATE_RETRIED",
        "TRANSACTION_STATE_PROCESSING",
        "TRANSACTION_STATE_DELETED",
        "TRANSACTION_STATE_IMPORT_PENDING",
        "TRANSACTION_STATE_CONSTRUCTED",
        "TRANSACTION_STATE_BROADCASTING"
      ],
      "default": "TRANSACTION_STATE_UNKNOWN"
    },
    "coinbase.custody.api.TransactionType": {
      "type": "string",
      "enum": [
        "TRANSACTION_TYPE_UNKNOWN",
        "TRANSACTION_TYPE_DEPOSIT",
        "TRANSACTION_TYPE_WITHDRAWAL",
        "TRANSACTION_TYPE_REWARD",
        "TRANSACTION_TYPE_SWEEP_WITHDRAWAL",
        "TRANSACTION_TYPE_SWEEP_DEPOSIT",
        "TRANSACTION_TYPE_TRANSFER_WITHDRAWAL",
        "TRANSACTION_TYPE_TRANSFER_DEPOSIT",
        "TRANSACTION_TYPE_PROXY_WITHDRAWAL",
        "TRANSACTION_TYPE_PROXY_DEPOSIT",
        "TRANSACTION_TYPE_COINBASE_DEPOSIT",
        "TRANSACTION_TYPE_KEY_REGISTRATION",
        "TRANSACTION_TYPE_BILLING_WITHDRAWAL",
        "TRANSACTION_TYPE_DELEGATION",
        "TRANSACTION_TYPE_UNDELEGATION",
        "TRANSACTION_TYPE_RESTAKE",
        "TRANSACTION_TYPE_COMPLETE_UNBONDING",
        "TRANSACTION_TYPE_COINBASE_REFUND",
        "TRANSACTION_TYPE_WITHDRAW_UNBONDED",
        "TRANSACTION_TYPE_STAKE_ACCOUNT_CREATE",
        "TRANSACTION_TYPE_CHANGE_VALIDATOR",
        "TRANSACTION_TYPE_STAKE",
        "TRANSACTION_TYPE_UNSTAKE",
        "TRANSACTION_TYPE_INTERNAL_DEPOSIT",
        "TRANSACTION_TYPE_INTERNAL_WITHDRAWAL",
        "TRANSACTION_TYPE_STAKE_AUTHORIZE_WITH_SEED",
        "TRANSACTION_TYPE_REMOVE_AUTHORIZED_PARTY",
        "TRANSACTION_TYPE_SLASH",
        "TRANSACTION_TYPE_CLAIM_REWARDS",
        "TRANSACTION_TYPE_VOTE_AUTHORIZE"
      ],
      "default": "TRANSACTION_TYPE_UNKNOWN",
      "title": "Transaction"
    },
    "coinbase.custody.api.TransferCurrencyType": {
      "type": "string",
      "enum": [
        "UNKNOWN_CURRENCY_TYPE",
        "CRYPTO",
        "FIAT"
      ],
      "default": "UNKNOWN_CURRENCY_TYPE"
    },
    "coinbase.custody.api.TransferMetadata": {
      "type": "object",
      "properties": {
        "resolved_name": {
          "type": "string"
        },
        "transfer_type": {
          "$ref": "#/definitions/coinbase.custody.api.TransferType"
        }
      }
    },
    "coinbase.custody.api.TransferMethod": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "icon_id": {
          "type": "string"
        },
        "processing_time": {
          "type": "string"
        },
        "transaction_type": {
          "$ref": "#/definitions/coinbase.custody.api.TransactionType"
        },
        "type": {
          "$ref": "#/definitions/coinbase.custody.api.TransferMethodType"
        },
        "currency_type": {
          "$ref": "#/definitions/coinbase.custody.api.TransferCurrencyType"
        }
      }
    },
    "coinbase.custody.api.TransferMethodType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TRANSFER_METHOD_TYPE",
        "BLOCKCHAIN_ADDRESS",
        "VAULT",
        "TRADING_BALANCE",
        "WIRE",
        "SWIFT",
        "INTRA_BANK",
        "INTERNAL_FIAT",
        "INTERNAL_TRANSFER",
        "SEPA",
        "CBIT"
      ],
      "default": "UNKNOWN_TRANSFER_METHOD_TYPE"
    },
    "coinbase.custody.api.TransferSummary": {
      "type": "object",
      "properties": {
        "transfer_summary": {
          "type": "string"
        },
        "source_location": {
          "$ref": "#/definitions/coinbase.custody.api.TransferMetadata"
        },
        "target_location": {
          "$ref": "#/definitions/coinbase.custody.api.TransferMetadata"
        }
      }
    },
    "coinbase.custody.api.TransferType": {
      "type": "string",
      "enum": [
        "TRANSFER_TYPE_UNSPECIFIED",
        "TRANSFER_TYPE_EXTERNAL_PAYMENT",
        "TRANSFER_TYPE_VAULT_WALLET",
        "TRANSFER_TYPE_BLOCKCHAIN",
        "TRANSFER_TYPE_TRADING",
        "TRANSFER_TYPE_BLOCKCHAIN_REWARD",
        "TRANSFER_TYPE_OMNIBUS_QC",
        "TRANSFER_TYPE_COINBASE_TRANSFER_NETWORK_DESTINATION"
      ],
      "default": "TRANSFER_TYPE_UNSPECIFIED"
    },
    "coinbase.custody.api.UnbondingStatus": {
      "type": "object",
      "properties": {
        "in_progress": {
          "type": "boolean"
        },
        "seconds_remaining": {
          "type": "string"
        }
      },
      "required": [
        "in_progress",
        "seconds_remaining"
      ]
    },
    "coinbase.custody.api.User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_activity": {
          "$ref": "#/definitions/coinbase.custody.api.User.LastActivity"
        },
        "invited_at": {
          "type": "string",
          "format": "date-time"
        },
        "invited_by": {
          "type": "string"
        },
        "accepted": {
          "type": "boolean"
        },
        "user_role": {
          "$ref": "#/definitions/coinbase.custody.api.Role"
        },
        "user_secondary_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.SecondaryRole"
          }
        },
        "user_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Role"
          }
        },
        "access_level": {
          "$ref": "#/definitions/coinbase.custody.api.QueryLevel"
        },
        "portfolio_user_roles": {
          "$ref": "#/definitions/coinbase.custody.api.User.PortfolioRoles"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "avatar_url",
        "invited_by",
        "accepted",
        "user_role",
        "user_secondary_roles"
      ]
    },
    "coinbase.custody.api.User.LastActivity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "auditable_type": {
          "$ref": "#/definitions/coinbase.custody.api.AuditableType"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.ActivityState"
        },
        "created_at": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "last_update": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "auditable_type",
        "state",
        "created_at",
        "title",
        "last_update"
      ]
    },
    "coinbase.custody.api.User.PortfolioRole": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "portfolio_name": {
          "type": "string"
        },
        "role_names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secondary_roles_names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "coinbase.custody.api.User.PortfolioRoles": {
      "type": "object",
      "properties": {
        "portfolio_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.User.PortfolioRole"
          }
        }
      }
    },
    "coinbase.custody.api.UserChangeAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeCategory"
        },
        "change_user_id": {
          "type": "string"
        },
        "change_user_name": {
          "type": "string"
        },
        "change_user_avatar_url": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeRole"
        },
        "vehicle_id": {
          "type": "string"
        },
        "vehicle_name": {
          "type": "string"
        },
        "change_user_email": {
          "type": "string"
        },
        "secondary_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserChangeSecondaryRole"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserChangeRole"
          }
        },
        "reference_activity_id": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.UserChangeAuditValue": {
      "type": "object",
      "properties": {
        "num_all_approvers": {
          "type": "integer",
          "format": "int32"
        },
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeCategory"
        },
        "all_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "approved_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rejected_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "num_approvals_required": {
          "type": "integer",
          "format": "int32"
        },
        "role_from": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeRole"
        },
        "role_to": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeRole"
        },
        "roles_from": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserChangeRole"
          }
        },
        "roles_to": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserChangeRole"
          }
        }
      }
    },
    "coinbase.custody.api.UserChangeCategory": {
      "type": "string",
      "enum": [
        "USER_CHANGE_CATEGORY_UNKNOWN",
        "USER_CHANGE_CATEGORY_TO_UPDATE_ROLE",
        "USER_CHANGE_CATEGORY_TO_REMOVE"
      ],
      "default": "USER_CHANGE_CATEGORY_UNKNOWN"
    },
    "coinbase.custody.api.UserChangeRequestAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeRequestState"
        },
        "task": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeRequestTask"
        },
        "from_properties": {
          "type": "object"
        },
        "to_properties": {
          "type": "object"
        },
        "pas_reference_id": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.UserChangeRequestState": {
      "type": "string",
      "enum": [
        "USER_CHANGE_REQUEST_STATE_UNKNOWN",
        "USER_CHANGE_REQUEST_STATE_CREATED",
        "USER_CHANGE_REQUEST_STATE_APPROVED",
        "USER_CHANGE_REQUEST_STATE_REJECTED",
        "USER_CHANGE_REQUEST_STATE_EXPIRED",
        "USER_CHANGE_REQUEST_STATE_PROCESSING",
        "USER_CHANGE_REQUEST_STATE_PROCESSING_FAILED",
        "USER_CHANGE_REQUEST_STATE_PROCESSING_COMPLETED",
        "USER_CHANGE_REQUEST_STATE_REQUESTED"
      ],
      "default": "USER_CHANGE_REQUEST_STATE_UNKNOWN",
      "title": "UserChangeRequest"
    },
    "coinbase.custody.api.UserChangeRequestTask": {
      "type": "string",
      "enum": [
        "USER_CHANGE_REQUEST_TASK_UNKNOWN",
        "USER_CHANGE_REQUEST_TASK_UPDATE_POLICY",
        "USER_CHANGE_REQUEST_TASK_EXAMPLE_NO_PAS",
        "USER_CHANGE_REQUEST_TASK_CREATE_WEB3_TRANSACTION",
        "USER_CHANGE_REQUEST_TASK_UPDATE_WALLET",
        "USER_CHANGE_REQUEST_TASK_SIGN_WEB3_MESSAGE"
      ],
      "default": "USER_CHANGE_REQUEST_TASK_UNKNOWN"
    },
    "coinbase.custody.api.UserChangeRole": {
      "type": "string",
      "enum": [
        "USER_CHANGE_ROLE_UNKNOWN",
        "USER_CHANGE_ROLE_AUDITOR",
        "USER_CHANGE_ROLE_SIGNATORY",
        "USER_CHANGE_ROLE_ADMIN",
        "USER_CHANGE_ROLE_INITIATOR",
        "USER_CHANGE_ROLE_REVIEWER",
        "USER_CHANGE_ROLE_TRADER",
        "USER_CHANGE_ROLE_TEAM_MANAGER",
        "USER_CHANGE_ROLE_FULL_TRADER"
      ],
      "default": "USER_CHANGE_ROLE_UNKNOWN"
    },
    "coinbase.custody.api.UserChangeSecondaryRole": {
      "type": "string",
      "enum": [
        "USER_CHANGE_SECONDARY_ROLE_UNKNOWN",
        "USER_CHANGE_SECONDARY_ROLE_VIDEO_APPROVER",
        "USER_CHANGE_SECONDARY_ROLE_WEB3_SIGNER"
      ],
      "default": "USER_CHANGE_SECONDARY_ROLE_UNKNOWN"
    },
    "coinbase.custody.api.UserChangeState": {
      "type": "string",
      "enum": [
        "USER_CHANGE_STATE_UNKNOWN",
        "USER_CHANGE_STATE_CREATED",
        "USER_CHANGE_STATE_APPROVED",
        "USER_CHANGE_STATE_REJECTED",
        "USER_CHANGE_STATE_ADMIN_CREATED",
        "USER_CHANGE_STATE_EXPIRED",
        "USER_CHANGE_STATE_FAILED",
        "USER_CHANGE_STATE_REQUESTED",
        "USER_CHANGE_STATE_USER_REJECTED"
      ],
      "default": "USER_CHANGE_STATE_UNKNOWN",
      "title": "UserChange"
    },
    "coinbase.custody.api.UserInformation": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "email",
        "name",
        "avatar_url",
        "id"
      ]
    },
    "coinbase.custody.api.UserRole": {
      "type": "object",
      "properties": {
        "role_name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Permission"
          }
        },
        "role": {
          "$ref": "#/definitions/coinbase.custody.api.Role"
        },
        "secondary_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.SecondaryRole"
          }
        }
      }
    },
    "coinbase.custody.api.ValidationError": {
      "type": "object",
      "properties": {
        "field_name": {
          "type": "string"
        },
        "error_message": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.ValidatorCategory": {
      "type": "string",
      "enum": [
        "VALIDATOR_UNKNOWN",
        "VALIDATOR_COINBASE",
        "VALIDATOR_BISON_TRAILS",
        "VALIDATOR_PUBLIC"
      ],
      "default": "VALIDATOR_UNKNOWN"
    },
    "coinbase.custody.api.ValidatorStatus": {
      "type": "string",
      "enum": [
        "VALIDATOR_STATUS_UNKNOWN",
        "VALIDATOR_STATUS_ACTIVATING",
        "VALIDATOR_STATUS_STAKED",
        "VALIDATOR_STATUS_UNSTAKING",
        "VALIDATOR_STATUS_UNSTAKED"
      ],
      "default": "VALIDATOR_STATUS_UNKNOWN"
    },
    "coinbase.custody.api.VestingBalance": {
      "type": "object",
      "properties": {
        "unvested": {
          "type": "string"
        }
      },
      "title": "@NOTE Likely exported to Custody",
      "required": [
        "unvested"
      ]
    },
    "coinbase.custody.api.VideoCallSetting": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "percentage": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "VideoCallSetting represents the Video Call setting for a policy"
    },
    "coinbase.custody.api.VideoUpload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Upload uuid"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.VideoUploadState",
          "description": "Upload status"
        },
        "transaction_id": {
          "type": "string"
        },
        "uploaded_by_user": {
          "$ref": "#/definitions/coinbase.custody.api.DisplayUser"
        },
        "uploaded_at": {
          "type": "string",
          "format": "date-time",
          "description": "Time when the upload finished"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "security_code": {
          "type": "string",
          "description": "Used for verifying the authenticity of the video"
        },
        "signed_upload_url": {
          "type": "string",
          "description": "Returned by CreateVideoUpload"
        }
      }
    },
    "coinbase.custody.api.VideoUploadState": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "PENDING_UPLOAD",
        "UPLOADED",
        "URL_EXPIRED"
      ],
      "default": "UNKNOWN"
    },
    "coinbase.custody.api.VoteAuthorizeOptions": {
      "type": "object",
      "properties": {
        "vote_address": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.Wallet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.WalletState"
        },
        "type": {
          "$ref": "#/definitions/coinbase.custody.api.WalletType"
        },
        "currency_symbol": {
          "type": "string"
        },
        "cold_address": {
          "$ref": "#/definitions/coinbase.custody.api.Address"
        },
        "value": {
          "type": "string"
        },
        "withdrawable_value": {
          "type": "string"
        },
        "available_actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.WalletAction"
          }
        },
        "delegated_to_address": {
          "type": "string"
        },
        "minimum_rewards_requirement": {
          "type": "string"
        },
        "minimum_withdrawal_value": {
          "type": "string"
        },
        "parent_address": {
          "$ref": "#/definitions/coinbase.custody.api.Address"
        },
        "unbonding_time_remaining": {
          "type": "string"
        },
        "currency_decimals": {
          "type": "integer",
          "format": "int32"
        },
        "created_at": {
          "type": "string"
        },
        "reward_wallet_id": {
          "type": "string"
        },
        "is_vesting": {
          "type": "boolean"
        },
        "validator_count": {
          "type": "integer",
          "format": "int32"
        },
        "validator_providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "portfolio_id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "state",
        "type",
        "currency_symbol",
        "value",
        "withdrawable_value",
        "available_actions"
      ]
    },
    "coinbase.custody.api.WalletAction": {
      "type": "string",
      "enum": [
        "WALLET_ACTION_UNKNOWN",
        "DEPOSIT",
        "WITHDRAW",
        "DELEGATE",
        "UNDELEGATE",
        "UNSTAKE",
        "RESTAKE",
        "CHANGE_VALIDATOR",
        "ENABLE_GOVERNANCE",
        "DISABLE_GOVERNANCE",
        "STAKE",
        "VOTE",
        "PARTIAL_STAKE",
        "CONVERSION",
        "CLAIM_REWARDS"
      ],
      "default": "WALLET_ACTION_UNKNOWN"
    },
    "coinbase.custody.api.WalletChangeAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.WalletChangeCategory"
        },
        "currency_symbol": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "wallet_id": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "vehicle_name": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "portfolio_name": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.WalletChangeAuditValue": {
      "type": "object",
      "properties": {
        "num_all_approvers": {
          "type": "integer",
          "format": "int32"
        },
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.WalletChangeCategory"
        },
        "all_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "approved_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rejected_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "num_approvals_required": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "coinbase.custody.api.WalletChangeCategory": {
      "type": "string",
      "enum": [
        "WALLET_CHANGE_CATEGORY_UNKNOWN",
        "WALLET_CHANGE_CATEGORY_TO_ADD",
        "WALLET_CHANGE_CATEGORY_TO_REMOVE",
        "WALLET_CHANGE_CATEGORY_TO_UPDATE"
      ],
      "default": "WALLET_CHANGE_CATEGORY_UNKNOWN",
      "title": "WalletChange"
    },
    "coinbase.custody.api.WalletChangeState": {
      "type": "string",
      "enum": [
        "WALLET_CHANGE_STATE_UNKNOWN",
        "WALLET_CHANGE_STATE_CREATED",
        "WALLET_CHANGE_STATE_APPROVED",
        "WALLET_CHANGE_STATE_REJECTED",
        "WALLET_CHANGE_STATE_ADMIN_CREATED",
        "WALLET_CHANGE_STATE_EXPIRED"
      ],
      "default": "WALLET_CHANGE_STATE_UNKNOWN"
    },
    "coinbase.custody.api.WalletRewardsStatus": {
      "type": "object",
      "properties": {
        "rewards_accruing": {
          "type": "boolean"
        },
        "balance": {
          "$ref": "#/definitions/coinbase.custody.api.RewardsBalance"
        }
      },
      "required": [
        "rewards_accruing",
        "balance"
      ]
    },
    "coinbase.custody.api.WalletStakingStatus": {
      "type": "object",
      "properties": {
        "staking_enabled": {
          "type": "boolean"
        },
        "balance": {
          "$ref": "#/definitions/coinbase.custody.api.StakingBalance"
        },
        "unbonding": {
          "$ref": "#/definitions/coinbase.custody.api.UnbondingStatus"
        },
        "validators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.StakingValidator"
          }
        },
        "currency_conversion_destination_address": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.custody.api.WalletStakingStatusState"
        },
        "staking_address": {
          "type": "string"
        },
        "staking_end_date": {
          "type": "string"
        },
        "currency_conversion_wallet_id": {
          "type": "string"
        },
        "redeem_request_statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.RedeemRequestStatus"
          }
        }
      },
      "required": [
        "staking_enabled",
        "balance",
        "states"
      ]
    },
    "coinbase.custody.api.WalletStakingStatusState": {
      "type": "string",
      "enum": [
        "WALLET_STAKING_STATUS_UNKNOWN",
        "WALLET_STAKING_STATUS_ACTIVATING",
        "WALLET_STAKING_STATUS_STAKED",
        "WALLET_STAKING_STATUS_UNSTAKING",
        "WALLET_STAKING_STATUS_UNSTAKED"
      ],
      "default": "WALLET_STAKING_STATUS_UNKNOWN"
    },
    "coinbase.custody.api.WalletState": {
      "type": "string",
      "enum": [
        "WALLET_STATE_UNKNOWN",
        "IN_USE",
        "REMOVED",
        "PENDING"
      ],
      "default": "WALLET_STATE_UNKNOWN"
    },
    "coinbase.custody.api.WalletType": {
      "type": "string",
      "enum": [
        "WALLET_TYPE_UNKNOWN",
        "STANDARD",
        "STAKING",
        "VOTING",
        "SECONDARY",
        "SIGNALLING",
        "TRADABLE",
        "CONTRACT",
        "PRIME_OMNIBUS_QC"
      ],
      "default": "WALLET_TYPE_UNKNOWN"
    },
    "coinbase.custody.api.WalletVestingStatus": {
      "type": "object",
      "properties": {
        "vesting_enabled": {
          "type": "boolean"
        },
        "balance": {
          "$ref": "#/definitions/coinbase.custody.api.VestingBalance"
        }
      },
      "required": [
        "vesting_enabled",
        "balance"
      ]
    },
    "coinbase.custody.api.Web3Signers": {
      "type": "object",
      "properties": {
        "user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "coinbase.custody.api.WithdrawalAddressChangeAuditData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.WithdrawalAddressChangeCategory"
        },
        "address": {
          "type": "string"
        },
        "currency_symbol": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "withdrawal_address_id": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "vehicle_name": {
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/coinbase.custody.api.DestinationOptions"
        },
        "counterparty_id": {
          "type": "string"
        }
      }
    },
    "coinbase.custody.api.WithdrawalAddressChangeAuditValue": {
      "type": "object",
      "properties": {
        "num_all_approvers": {
          "type": "integer",
          "format": "int32"
        },
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.WithdrawalAddressChangeCategory"
        },
        "all_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "approved_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rejected_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "num_approvals_required": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "coinbase.custody.api.WithdrawalAddressChangeCategory": {
      "type": "string",
      "enum": [
        "WITHDRAWAL_ADDRESS_CHANGE_CATEGORY_UNKNOWN",
        "WITHDRAWAL_ADDRESS_CHANGE_CATEGORY_TO_ADD",
        "WITHDRAWAL_ADDRESS_CHANGE_CATEGORY_TO_REMOVE",
        "WITHDRAWAL_ADDRESS_CHANGE_CATEGORY_TO_UPDATE"
      ],
      "default": "WITHDRAWAL_ADDRESS_CHANGE_CATEGORY_UNKNOWN"
    },
    "coinbase.custody.api.WithdrawalAddressChangeState": {
      "type": "string",
      "enum": [
        "WITHDRAWAL_ADDRESS_CHANGE_STATE_UNKNOWN",
        "WITHDRAWAL_ADDRESS_CHANGE_STATE_CREATED",
        "WITHDRAWAL_ADDRESS_CHANGE_STATE_APPROVED",
        "WITHDRAWAL_ADDRESS_CHANGE_STATE_REJECTED",
        "WITHDRAWAL_ADDRESS_CHANGE_STATE_ADMIN_CREATED",
        "WITHDRAWAL_ADDRESS_CHANGE_STATE_EXPIRED"
      ],
      "default": "WITHDRAWAL_ADDRESS_CHANGE_STATE_UNKNOWN",
      "title": "WithdrawalAddressChange"
    },
    "coinbase.document.api.v1.ReportType": {
      "type": "string",
      "enum": [
        "REPORT_TYPE_UNSPECIFIED",
        "REPORT_TYPE_BALANCE",
        "REPORT_TYPE_ADDRESS",
        "REPORT_TYPE_TRANSACTION",
        "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_SHORT_ACCRUALS",
        "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_SHORT_COLLATERAL_ACCRUALS",
        "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_MARGIN_DETAIL",
        "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_MARGIN_SUMMARY",
        "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_CONVERSIONS",
        "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_MARGIN_SUMMARY_DOD",
        "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_MARGIN_SHORT_COLLATERAL_SUMMARY",
        "REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_MARGIN_SHORT_COLLATERAL_DETAIL",
        "REPORT_TYPE_FINANCING_TRADE_FINANCE_ACCRUALS",
        "REPORT_TYPE_FINANCING_TRADE_FINANCE_USAGE",
        "REPORT_TYPE_FINANCING_DIGITAL_AGENCY_LENDING_ACCRUALS",
        "REPORT_TYPE_FINANCING_DIGITAL_AGENCY_LENDING_COLLATERAL",
        "REPORT_TYPE_FINANCING_DIGITAL_AGENCY_LENDING_POSITION",
        "REPORT_TYPE_FINANCING_BILATERAL_LENDING_ACCRUALS",
        "REPORT_TYPE_FINANCING_BILATERAL_LENDING_COLLATERAL",
        "REPORT_TYPE_STAKING",
        "REPORT_TYPE_STAKING_SUMMARY_CSV",
        "REPORT_TYPE_STAKING_WALLET_REWARDS_SUMMARY_CSV",
        "REPORT_TYPE_STAKING_WALLET_TRANSACTIONS_CSV",
        "REPORT_TYPE_WEB3_TRANSACTIONS_CSV",
        "REPORT_TYPE_WEB3_BALANCES_CSV"
      ],
      "default": "REPORT_TYPE_UNSPECIFIED",
      "title": "- REPORT_TYPE_FINANCING_PORTFOLIO_MARGIN_SHORT_ACCRUALS: Financing portfolio margin report types\n - REPORT_TYPE_FINANCING_TRADE_FINANCE_ACCRUALS: Financing trade finance report types\n - REPORT_TYPE_FINANCING_DIGITAL_AGENCY_LENDING_ACCRUALS: Financing digital agency lending report types\n - REPORT_TYPE_FINANCING_BILATERAL_LENDING_ACCRUALS: Financing bilateral lending report types\n - REPORT_TYPE_STAKING: Staking report type\n - REPORT_TYPE_WEB3_TRANSACTIONS_CSV: Web3 report type"
    },
    "coinbase.eng.prime.activity.api.AccountMetadata": {
      "type": "object",
      "properties": {
        "consensus_metadata": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ConsensusMetadata"
        },
        "withdrawal_address": {
          "type": "string"
        },
        "settings_change_value_from": {
          "type": "string"
        },
        "settings_change_value_to": {
          "type": "string"
        },
        "wallet_create_name": {
          "type": "string"
        },
        "address_book_type": {
          "$ref": "#/definitions/coinbase.custody.api.AddressBookType"
        }
      },
      "title": "AccountMetadata is an Activity metadata type for custody related metadata",
      "required": [
        "consensus_metadata"
      ]
    },
    "coinbase.eng.prime.activity.api.Action": {
      "type": "string",
      "enum": [
        "ACTION_UNSPECIFIED",
        "ACTION_INITIATE",
        "ACTION_CANCEL",
        "ACTION_APPROVE",
        "ACTION_REJECT"
      ],
      "default": "ACTION_UNSPECIFIED",
      "title": "Action is the available user action types"
    },
    "coinbase.eng.prime.activity.api.Activity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Activity ID."
        },
        "reference_id": {
          "type": "string",
          "description": "ID of the model the Activity was generated for."
        },
        "category": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityCategory",
          "description": "Activity Category."
        },
        "type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType",
          "description": "Activity Type."
        },
        "secondary_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivitySecondaryType",
          "description": "Type used specifically for trades indicating buy or sell."
        },
        "status": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityStatus",
          "description": "Activity Status."
        },
        "created_by_user_id": {
          "type": "string",
          "description": "@deprecated ID of the user who created the Activity."
        },
        "title": {
          "type": "string",
          "description": "Title of the Activity."
        },
        "description": {
          "type": "string",
          "description": "Description of the Activity."
        },
        "currency_symbols": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Currency symbols related to the Activity."
        },
        "internal": {
          "type": "boolean",
          "description": "Whether the Activity is an internal activity."
        },
        "created_at": {
          "type": "string",
          "description": "Timestamp for when the Activity was created."
        },
        "user_actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.activity.api.UserAction"
          },
          "description": "Actions related to the Activity."
        },
        "order_execution_metadata": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.OrderExecutionMetadata",
          "description": "Trade related metadata."
        },
        "consensus_metadata": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ConsensusMetadata",
          "description": "Consensus related metadata."
        },
        "transaction_metadata": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.TransactionMetadata",
          "description": "Transaction activity related metadata."
        },
        "account_metadata": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.AccountMetadata",
          "description": "Account activity related metadata."
        },
        "allocation_metadata": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.AllocationMetadata",
          "description": "Allocation activity related metadata."
        },
        "user_change_metadata": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.UserChangeMetadata",
          "description": "User change activity related metadata."
        },
        "organization_id": {
          "type": "string",
          "description": "Organization ID of the Activity."
        },
        "portfolio_id": {
          "type": "string",
          "description": "Portfolio ID of the Activity."
        },
        "reference_type": {
          "type": "string",
          "description": "The model class for the Activity"
        },
        "status_updated_at": {
          "type": "string",
          "description": "Timestamp for when the ActivityStatus has changed."
        },
        "created_by_user_info": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.UserInformation",
          "description": "Info for the user who created the activity"
        },
        "timelines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.activity.api.Timeline"
          },
          "description": "Timelines related to the Activity."
        },
        "hierarchy_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.HierarchyType",
          "description": "Hierarchy type for an Activity."
        }
      },
      "title": "Activity is the main activity type",
      "required": [
        "id",
        "reference_id",
        "category",
        "type",
        "status",
        "created_by_user_id",
        "title",
        "description",
        "currency_symbols",
        "created_at",
        "user_actions",
        "reference_type",
        "status_updated_at"
      ]
    },
    "coinbase.eng.prime.activity.api.ActivityCategory": {
      "type": "string",
      "enum": [
        "ACTIVITY_CATEGORY_UNSPECIFIED",
        "ACTIVITY_CATEGORY_ORDER",
        "ACTIVITY_CATEGORY_TRANSACTION",
        "ACTIVITY_CATEGORY_ACCOUNT",
        "ACTIVITY_CATEGORY_ADMIN",
        "ACTIVITY_CATEGORY_LENDING",
        "ACTIVITY_CATEGORY_ALLOCATION",
        "ACTIVITY_CATEGORY_USER_CHANGE_REQUEST_NO_PAS",
        "ACTIVITY_CATEGORY_WEB3_SIGNING_PAYLOAD"
      ],
      "default": "ACTIVITY_CATEGORY_UNSPECIFIED",
      "title": "ActivityCategory is the category of activity"
    },
    "coinbase.eng.prime.activity.api.ActivitySecondaryType": {
      "type": "string",
      "enum": [
        "ACTIVITY_SECONDARY_TYPE_UNSPECIFIED",
        "ACTIVITY_SECONDARY_TYPE_BUY",
        "ACTIVITY_SECONDARY_TYPE_SELL",
        "ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER",
        "ACTIVITY_SECONDARY_TYPE_SWEEP_TRANSFER",
        "ACTIVITY_SECONDARY_TYPE_CB_LENDS",
        "ACTIVITY_SECONDARY_TYPE_CB_BORROWS",
        "ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER",
        "ACTIVITY_SECONDARY_TYPE_WEB3_WALLET",
        "ACTIVITY_SECONDARY_TYPE_QUALIFIED_CUSTODIAN_WALLET",
        "ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER"
      ],
      "default": "ACTIVITY_SECONDARY_TYPE_UNSPECIFIED",
      "description": "- ACTIVITY_SECONDARY_TYPE_UNSPECIFIED: Order \u0026 Allocation secondary types\n - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types\n - ACTIVITY_SECONDARY_TYPE_CB_LENDS: Lending secondary types\n - ACTIVITY_SECONDARY_TYPE_INVITE_TEAM_MEMBER: User Invite secondary types\n - ACTIVITY_SECONDARY_TYPE_WEB3_WALLET: Wallet Create secondary types\n - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Web3 Signer role secondary type",
      "title": "ActivitySecondaryType is the secondary type of activity"
    },
    "coinbase.eng.prime.activity.api.ActivityStatus": {
      "type": "string",
      "enum": [
        "ACTIVITY_STATUS_UNSPECIFIED",
        "ACTIVITY_STATUS_OPEN",
        "ACTIVITY_STATUS_CANCELLED",
        "ACTIVITY_STATUS_PROCESSING",
        "ACTIVITY_STATUS_COMPLETED",
        "ACTIVITY_STATUS_EXPIRED",
        "ACTIVITY_STATUS_REJECTED",
        "ACTIVITY_STATUS_FAILED"
      ],
      "default": "ACTIVITY_STATUS_UNSPECIFIED",
      "title": "ActivityStatus is the status of activity"
    },
    "coinbase.eng.prime.activity.api.ActivityType": {
      "type": "string",
      "enum": [
        "ACTIVITY_TYPE_UNSPECIFIED",
        "ACTIVITY_TYPE_LIMIT_ORDER",
        "ACTIVITY_TYPE_MARKET_ORDER",
        "ACTIVITY_TYPE_TWAP_ORDER",
        "ACTIVITY_TYPE_VWAP_ORDER",
        "ACTIVITY_TYPE_STOP_LIMIT_ORDER",
        "ACTIVITY_TYPE_DEPOSIT",
        "ACTIVITY_TYPE_WITHDRAWAL",
        "ACTIVITY_TYPE_CREATE_WALLET",
        "ACTIVITY_TYPE_REMOVE_WALLET",
        "ACTIVITY_TYPE_UPDATE_WALLET",
        "ACTIVITY_TYPE_CAST_VOTE",
        "ACTIVITY_TYPE_ENABLE_VOTING",
        "ACTIVITY_TYPE_STAKE",
        "ACTIVITY_TYPE_UNSTAKE",
        "ACTIVITY_TYPE_CHANGE_VALIDATOR",
        "ACTIVITY_TYPE_RESTAKE",
        "ACTIVITY_TYPE_ADDRESS_BOOK",
        "ACTIVITY_TYPE_TEAM_MEMBERS",
        "ACTIVITY_TYPE_BILLING",
        "ACTIVITY_TYPE_SECURITY",
        "ACTIVITY_TYPE_API",
        "ACTIVITY_TYPE_SETTINGS",
        "ACTIVITY_TYPE_SMART_CONTRACT",
        "ACTIVITY_TYPE_PRINCIPAL_OUT",
        "ACTIVITY_TYPE_PRINCIPAL_IN",
        "ACTIVITY_TYPE_COLLATERAL_OUT",
        "ACTIVITY_TYPE_COLLATERAL_IN",
        "ACTIVITY_TYPE_INTEREST_OUT",
        "ACTIVITY_TYPE_INTEREST_IN",
        "ACTIVITY_TYPE_ALLOCATION_IN",
        "ACTIVITY_TYPE_ALLOCATION_OUT",
        "ACTIVITY_TYPE_ALLOCATION_IN_REVERSAL",
        "ACTIVITY_TYPE_ALLOCATION_OUT_REVERSAL",
        "ACTIVITY_TYPE_CONVERSION",
        "ACTIVITY_TYPE_BLOCK_TRADE",
        "ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS",
        "ACTIVITY_TYPE_WEB3_TRANSACTION",
        "ACTIVITY_TYPE_REWARD",
        "ACTIVITY_TYPE_WEB3_MESSAGE",
        "ACTIVITY_TYPE_WEB3_ADD_SIGNER",
        "ACTIVITY_TYPE_WEB3_CLONE_KEYS",
        "ACTIVITY_TYPE_WEB3_ONBOARDING",
        "ACTIVITY_TYPE_WEB3_RECREATE_BACKUP",
        "ACTIVITY_TYPE_MATCH_TRANSFER_DEPOSIT",
        "ACTIVITY_TYPE_MATCH_TRANSFER_WITHDRAWAL",
        "ACTIVITY_TYPE_WEB3_DEVICE_RECOVERY",
        "ACTIVITY_TYPE_STAKING_CRYPTO_REBATE",
        "ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL",
        "ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_RETURN",
        "ACTIVITY_TYPE_WEB3_DEPOSIT_TRANSACTION",
        "ACTIVITY_TYPE_ADVANCED_TRANSFER",
        "ACTIVITY_TYPE_WEB3_UPLOAD_SECURITY_KEY",
        "ACTIVITY_TYPE_WEB3_KEY_EXPORT",
        "ACTIVITY_TYPE_WEB3_ARCHIVE_SECURITY_KEY"
      ],
      "default": "ACTIVITY_TYPE_UNSPECIFIED",
      "description": "- ACTIVITY_TYPE_PRINCIPAL_OUT: Lending specific activity types\n - ACTIVITY_TYPE_BLOCK_TRADE: Block trades\n - ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS: No pas integration for user change request\n - ACTIVITY_TYPE_SHORT_COLLATERAL_TRANSFER_WITHDRAWAL: Short Collateral Transfer Types",
      "title": "ActivityType is the type of activity"
    },
    "coinbase.eng.prime.activity.api.AllocationMetadata": {
      "type": "object",
      "properties": {
        "total_base_size": {
          "type": "string",
          "description": "The total base size of order being allocated"
        },
        "total_quote_size": {
          "type": "string",
          "description": "The total quote size of order being allocated"
        },
        "average_price": {
          "type": "string",
          "description": "The average price of the allocations"
        },
        "root_id": {
          "type": "string",
          "description": "The root id of the allocation"
        },
        "order_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The order ids of the allocation"
        },
        "portfolio_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The portfolios ids of the allocation"
        },
        "self_allocated_base_size": {
          "type": "string",
          "description": "The self allocated or remainder base size of the allocation"
        },
        "self_allocated_quote_size": {
          "type": "string",
          "description": "The self allocated or remainder quote size of the allocation"
        },
        "self_allocated_percentage": {
          "type": "string",
          "description": "The self allocated or remainder percentage size of the allocation"
        },
        "allocated_base_size": {
          "type": "string",
          "description": "Total amount of base currency allocated. For allocation out, this is a sum across all legs. For allocation in, this is the total amount in base allocated to/from the current portfolio."
        },
        "allocated_quote_size": {
          "type": "string",
          "description": "Amount of quote currency allocated excluding fees. For allocation out, this is a sum across all allocation legs. For allocation in, this is the amount in quote allocated to/from the current portfolio."
        },
        "allocated_commission": {
          "type": "string",
          "description": "Total commision paid by destination portfolio, in quote. For allocation out, this is a sum of fees paid by each destination portfolio."
        },
        "source_portfolio_id": {
          "type": "string",
          "description": "The source portfolio id for the allocation."
        },
        "allocation_leg_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The allocation leg ids of the allocation"
        },
        "reversed_allocation_id": {
          "type": "string",
          "description": "The reversed allocation id for reference"
        },
        "source_portfolio_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The source portfolio ids for the allocation."
        },
        "destination_portfolio_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The destination portfolio id for the allocation."
        },
        "allocation_netting_id": {
          "type": "string",
          "description": "The netting id for the allocation."
        },
        "client_netting_id": {
          "type": "string",
          "description": "The client netting id for the allocation."
        }
      },
      "title": "AllocationMetadata is an Activity metadata type that returns details regarding allocations, including in/out and reversals",
      "required": [
        "allocated_base_size",
        "allocated_quote_size",
        "allocated_commission",
        "total_base_size",
        "total_quote_size",
        "average_price",
        "root_id",
        "order_ids",
        "source_portfolio_id",
        "allocation_leg_ids"
      ]
    },
    "coinbase.eng.prime.activity.api.BillingWithdrawalMetadata": {
      "type": "object",
      "properties": {
        "invoice_id": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.activity.api.ConsensusMetadata": {
      "type": "object",
      "properties": {
        "approval_deadline": {
          "type": "string"
        },
        "has_passed_consensus": {
          "type": "boolean"
        }
      },
      "title": "ConsensusMetadata is an Activity metadata type to find approval time remaining on approvables",
      "required": [
        "approval_deadline",
        "has_passed_consensus"
      ]
    },
    "coinbase.eng.prime.activity.api.ConversionMetadata": {
      "type": "object",
      "properties": {
        "source_currency_symbol": {
          "type": "string"
        },
        "target_currency_symbol": {
          "type": "string"
        },
        "source_amount": {
          "type": "string"
        },
        "target_amount": {
          "type": "string"
        }
      },
      "title": "ConversionMetadata is an Activity metadata type that returns details regarding conversion",
      "required": [
        "source_currency_symbol",
        "target_currency_symbol",
        "source_amount",
        "target_amount"
      ]
    },
    "coinbase.eng.prime.activity.api.Hierarchy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.HierarchyType"
        }
      },
      "required": [
        "id",
        "type"
      ]
    },
    "coinbase.eng.prime.activity.api.HierarchyType": {
      "type": "string",
      "enum": [
        "HIERARCHY_TYPE_UNSPECIFIED",
        "HIERARCHY_TYPE_PORTFOLIO",
        "HIERARCHY_TYPE_ENTITY",
        "HIERARCHY_TYPE_ADMIN"
      ],
      "default": "HIERARCHY_TYPE_UNSPECIFIED",
      "title": "HierarchyType are the enums for various hierarchies within Prime, ex Entity, Organization, Portfolio"
    },
    "coinbase.eng.prime.activity.api.OrderExecutionMetadata": {
      "type": "object",
      "properties": {
        "completion_percentage": {
          "type": "string"
        },
        "entry_order_configuration": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.EntryOrderConfiguration"
        },
        "limit_price": {
          "type": "string"
        },
        "total_order_quantity": {
          "type": "string"
        },
        "order_currency": {
          "type": "string"
        },
        "filled_base_quantity": {
          "type": "string"
        },
        "filled_quote_quantity": {
          "type": "string"
        },
        "average_fill_price": {
          "type": "string"
        },
        "total_commission": {
          "type": "string"
        },
        "cancel_reason": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.events.materialized.api.CancelReason"
        },
        "is_allocated": {
          "type": "boolean"
        }
      },
      "title": "OrderExecutionMetadata is an Activity metadata type to for Trade execution information",
      "required": [
        "completion_percentage",
        "entry_order_configuration",
        "total_order_quantity",
        "order_currency",
        "filled_base_quantity",
        "filled_quote_quantity",
        "average_fill_price",
        "total_commission"
      ]
    },
    "coinbase.eng.prime.activity.api.RoleChangeTypes": {
      "type": "string",
      "enum": [
        "RoleChangeType_UNSPECIFIED",
        "RoleChangeType_PORTFOLIO_TO_PORTFOLIO",
        "RoleChangeType_PORTFOLIO_TO_ENTITY",
        "RoleChangeType_ENTITY_TO_PORTFOLIO",
        "RoleChangeType_ENTITY_TO_ENTITY"
      ],
      "default": "RoleChangeType_UNSPECIFIED"
    },
    "coinbase.eng.prime.activity.api.Timeline": {
      "type": "object",
      "properties": {
        "reference_id": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "event": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.TimelineEvent"
        },
        "user_id": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "event_pending": {
          "type": "boolean"
        },
        "user_name": {
          "type": "string"
        }
      },
      "title": "Timeline is the main timeline type"
    },
    "coinbase.eng.prime.activity.api.TimelineEvent": {
      "type": "string",
      "enum": [
        "TIMELINE_EVENT_UNSPECIFIED",
        "TIMELINE_EVENT_INITIALIZE",
        "TIMELINE_EVENT_ADMIN_INITIALIZE",
        "TIMELINE_EVENT_CONSENSUS",
        "TIMELINE_EVENT_APPROVE",
        "TIMELINE_EVENT_REJECT",
        "TIMELINE_EVENT_ADMIN_REVIEW",
        "TIMELINE_EVENT_ADMIN_REJECT",
        "TIMELINE_EVENT_EXPIRE",
        "TIMELINE_EVENT_UPLOAD_VIDEO",
        "TIMELINE_EVENT_COMPLETE",
        "TIMELINE_EVENT_FAIL",
        "TIMELINE_EVENT_RETRIED",
        "TIMELINE_EVENT_ACCEPT",
        "TIMELINE_EVENT_GAS",
        "TIMELINE_EVENT_PROCESS",
        "TIMELINE_EVENT_CANCEL",
        "TIMELINE_EVENT_CONFIRM",
        "TIMELINE_EVENT_BROADCAST",
        "TIMELINE_EVENT_PREPARE",
        "TIMELINE_EVENT_ORIGINATE",
        "TIMELINE_EVENT_THIRD_PARTY_APPROVAL_REQUESTED",
        "TIMELINE_EVENT_THIRD_PARTY_APPROVED",
        "TIMELINE_EVENT_MESSAGE_SIGNED",
        "TIMELINE_EVENT_SIGNED",
        "TIMELINE_EVENT_ROLE_ADDED",
        "TIMELINE_EVENT_PROVIDE_CLONE_KEY",
        "TIMELINE_EVENT_PREPARE_CLONE_SEED",
        "TIMELINE_EVENT_RETRIEVE_CLONED_SEED",
        "TIMELINE_EVENT_KEY_CLONE_COMPLETE",
        "TIMELINE_EVENT_YUBIKEY_REGISTERED",
        "TIMELINE_EVENT_YUBIKEY_REGISTRATION_COMPLETE",
        "TIMELINE_EVENT_WEB3_KEYS_GENERATED",
        "TIMELINE_EVENT_WEB3_WALLET_CREATED",
        "TIMELINE_EVENT_WEB3_BACKUP_CREATED",
        "TIMELINE_EVENT_MATCH",
        "TIMELINE_EVENT_MATCH_AMEND",
        "TIMELINE_EVENT_WEB3_KEY_EXPORT_GENERATED",
        "TIMELINE_EVENT_WEB3_KEY_EXPORT_DOWNLOADED"
      ],
      "default": "TIMELINE_EVENT_UNSPECIFIED",
      "title": "TimelineEvent is catalogue of events"
    },
    "coinbase.eng.prime.activity.api.TransactionMetadata": {
      "type": "object",
      "properties": {
        "consensus_metadata": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ConsensusMetadata"
        },
        "wallet_name": {
          "type": "string"
        },
        "transaction_value": {
          "type": "string"
        },
        "customer_fees": {
          "type": "string"
        },
        "custody_fees": {
          "type": "string"
        },
        "transaction_type": {
          "$ref": "#/definitions/coinbase.custody.api.TransactionType"
        },
        "conversion_metadata": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ConversionMetadata"
        },
        "wallet_id": {
          "type": "string"
        },
        "billing_withdrawal_metadata": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.BillingWithdrawalMetadata"
        }
      },
      "title": "TransactionMetadata is an Activity metadata type to find transaction activity consensus and other details",
      "required": [
        "consensus_metadata"
      ]
    },
    "coinbase.eng.prime.activity.api.UserAction": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.Action"
        },
        "user_id": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      },
      "title": "UserAction is a user action event",
      "required": [
        "action",
        "user_id",
        "timestamp"
      ]
    },
    "coinbase.eng.prime.activity.api.UserChangeMetadata": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "user_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.activity.api.UserRoles"
          }
        },
        "portfolio_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "role_change_types": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.RoleChangeTypes"
        },
        "consensus_metadata": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ConsensusMetadata"
        },
        "description": {
          "type": "string"
        }
      },
      "title": "This is used for UserChangeRequestNoPas activity type and is used to store the meta information of the entities/portfolios that are assigned to a user\nThis information is needed on activity details page and report generation",
      "required": [
        "user_id",
        "role_change_type",
        "user_roles"
      ]
    },
    "coinbase.eng.prime.activity.api.UserInformation": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "title": "UserInformation is the information for a user",
      "required": [
        "email",
        "name",
        "avatar_url",
        "id"
      ]
    },
    "coinbase.eng.prime.activity.api.UserRoles": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secondary_roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hierarchy": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.Hierarchy"
        }
      }
    },
    "coinbase.eng.prime.api.api.AcceptInvitationRequest": {
      "type": "object",
      "properties": {
        "invitation_id": {
          "type": "string"
        }
      },
      "required": [
        "invitation_id"
      ]
    },
    "coinbase.eng.prime.api.api.AcceptInvitationResponse": {
      "type": "object",
      "properties": {
        "invitation": {
          "$ref": "#/definitions/coinbase.custody.api.Invitation"
        }
      },
      "required": [
        "invitation"
      ]
    },
    "coinbase.eng.prime.api.api.ActivateAPIKeyRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "access_key": {
          "type": "string"
        }
      },
      "required": [
        "portfolio_id",
        "access_key"
      ]
    },
    "coinbase.eng.prime.api.api.ActivateAPIKeyRequestV2": {
      "type": "object",
      "properties": {
        "group_id": {
          "type": "string"
        },
        "access_key": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coinbase.eng.prime.apikey.api.APIKeyType"
        },
        "portfolio_id": {
          "type": "string"
        }
      },
      "required": [
        "group_id",
        "access_key"
      ]
    },
    "coinbase.eng.prime.api.api.ActivateAPIKeyResponse": {
      "type": "object",
      "properties": {
        "api_key": {
          "$ref": "#/definitions/coinbase.eng.prime.apikey.api.APIKey"
        },
        "passphrase": {
          "type": "string"
        },
        "signing_key": {
          "type": "string"
        }
      },
      "required": [
        "api_key",
        "passphrase",
        "signing_key"
      ]
    },
    "coinbase.eng.prime.api.api.ActivityAction": {
      "type": "string",
      "enum": [
        "ACTION_TYPE_UNSPECIFIED",
        "ACTION_TYPE_APPROVE",
        "ACTION_TYPE_REJECT"
      ],
      "default": "ACTION_TYPE_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.ActivityActionId": {
      "type": "object",
      "properties": {
        "activity_id": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.ActivityAction"
        }
      }
    },
    "coinbase.eng.prime.api.api.ActivityConsensusAuditResult": {
      "type": "string",
      "enum": [
        "CONSENSUS_UNSPECIFIED",
        "CONSENSUS_VALID",
        "CONSENSUS_BROKEN_FIXABLE",
        "CONSENSUS_BROKEN_UNFIXABLE",
        "CONSENSUS_WILL_BREAK"
      ],
      "default": "CONSENSUS_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.Address": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Crypto address",
          "required": [
            "address"
          ]
        },
        "blockchain_balance": {
          "type": "string",
          "description": "Crypto address balance",
          "required": [
            "blockchain_balance"
          ]
        },
        "explorer_link": {
          "type": "string",
          "description": "Crypto explorer url",
          "required": [
            "explorer_link"
          ]
        },
        "state": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AddressState",
          "description": "Crypto address state",
          "required": [
            "state"
          ]
        }
      },
      "required": [
        "address",
        "blockchain_balance",
        "explorer_link",
        "state"
      ]
    },
    "coinbase.eng.prime.api.api.AddressBookResponse": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.AddressBookEntry"
          },
          "description": "List of addresses added to Address Book",
          "required": [
            "addresses"
          ]
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PaginatedResponse"
        }
      },
      "required": [
        "addresses",
        "pagination"
      ]
    },
    "coinbase.eng.prime.api.api.AddressBookType": {
      "type": "string",
      "enum": [
        "ADDRESS_BOOK_TYPE_UNSPECIFIED",
        "ADDRESS_BOOK_TYPE_ADDRESS",
        "ADDRESS_BOOK_TYPE_COUNTERPARTY_ID"
      ],
      "default": "ADDRESS_BOOK_TYPE_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.AddressState": {
      "type": "string",
      "enum": [
        "ADDRESS_STATE_UNKNOWN",
        "ADDRESS_STATE_COLD",
        "ADDRESS_STATE_WARM",
        "ADDRESS_STATE_RESTORE_IN_PROGRESS",
        "ADDRESS_STATE_RESTORED",
        "ADDRESS_STATE_FOREIGN",
        "ADDRESS_STATE_INVALIDATED"
      ],
      "default": "ADDRESS_STATE_UNKNOWN"
    },
    "coinbase.eng.prime.api.api.AdvancedTransferActivityDetails": {
      "type": "object",
      "properties": {
        "match_transfer_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.MatchTransferActivityDetails"
        }
      },
      "required": [
        "advanced_transfer_details"
      ]
    },
    "coinbase.eng.prime.api.api.Allocation": {
      "type": "object",
      "properties": {
        "allocation_id": {
          "type": "string",
          "description": "The ID of the allocation",
          "required": [
            "allocation_id"
          ]
        },
        "order_id": {
          "type": "string",
          "description": "The ID of the allocation order",
          "required": [
            "order_id"
          ]
        },
        "source_portfolio_id": {
          "type": "string",
          "description": "The ID of the portfolio of the allocation",
          "required": [
            "source_portfolio_id"
          ]
        },
        "product_id": {
          "type": "string",
          "description": "The product ID of the allocation",
          "required": [
            "product_id"
          ]
        },
        "side": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderSide",
          "description": "The side of the allocation",
          "required": [
            "side"
          ]
        },
        "base_size": {
          "type": "string",
          "description": "The base size of the allocation",
          "required": [
            "base_size"
          ]
        },
        "quote_size": {
          "type": "string",
          "description": "The quote size of the allocation",
          "required": [
            "quote_size"
          ]
        },
        "status": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AllocationStatus",
          "description": "The status of the allocation",
          "required": [
            "status"
          ]
        },
        "avg_price": {
          "type": "string",
          "description": "The avg price of the allocation",
          "required": [
            "avg_price"
          ]
        },
        "commission": {
          "type": "string",
          "description": "The commission of the allocation",
          "required": [
            "commission"
          ]
        },
        "user_id": {
          "type": "string",
          "description": "The user id of the allocation",
          "required": [
            "user_id"
          ]
        },
        "reverse_allocation_id": {
          "type": "string",
          "description": "The ID of the allocation",
          "required": [
            "reverse_allocation_id"
          ]
        },
        "allocation_legs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.AllocationLeg"
          },
          "description": "The ID of the allocation",
          "required": [
            "allocation_legs"
          ]
        },
        "order_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ID of the allocation",
          "required": [
            "orders"
          ]
        },
        "allocation_netting_id": {
          "type": "string",
          "description": "The ID of the net allocation"
        },
        "reverse_allocation_netting_id": {
          "type": "string",
          "description": "The ID of the reverse net allocation"
        },
        "contra_allocation_id": {
          "type": "string",
          "description": "The ID of the contra allocation"
        }
      },
      "required": [
        "allocation_id",
        "order_id",
        "source_portfolio_id",
        "product_id"
      ]
    },
    "coinbase.eng.prime.api.api.AllocationAmount": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string",
          "description": "The base size for the amount field",
          "required": [
            "base_size"
          ]
        },
        "base_side": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderSide",
          "description": "The side of the base amount field (used for net allocation)",
          "required": [
            "base_side"
          ]
        },
        "quote_size": {
          "type": "string",
          "description": "The quote size for the amount field",
          "required": [
            "quote_size"
          ]
        },
        "quote_side": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderSide",
          "description": "The side of the quote amount field (used for net allocation)",
          "required": [
            "quote_side"
          ]
        },
        "quote_size_fee_inclusive": {
          "type": "string",
          "description": "The quote size for the amount field, inclusive of fees",
          "required": [
            "quote_size_fee_inclusive"
          ]
        },
        "percent_of_total": {
          "type": "string",
          "description": "The percent of total for the amount field",
          "required": [
            "percent_of_total"
          ]
        },
        "commission": {
          "type": "string",
          "description": "The commission for the amount field in quote",
          "required": [
            "commission"
          ]
        }
      },
      "required": [
        "base_size",
        "quote_size",
        "percent_of_total",
        "commission"
      ]
    },
    "coinbase.eng.prime.api.api.AllocationLeg": {
      "type": "object",
      "properties": {
        "allocation_leg_id": {
          "type": "string",
          "description": "The ID of the portfolio of the allocation leg",
          "required": [
            "allocation_leg_id"
          ]
        },
        "allocation_id": {
          "type": "string",
          "description": "The ID of the portfolio of the allocation leg",
          "required": [
            "allocation_id"
          ]
        },
        "source_portfolio_id": {
          "type": "string",
          "description": "The ID of the target portfolio of the allocation leg",
          "required": [
            "source_portfolio_id"
          ]
        },
        "target_portfolio_id": {
          "type": "string",
          "description": "The ID of the target portfolio of the allocation leg",
          "required": [
            "target_portfolio_id"
          ]
        },
        "quote_size": {
          "type": "string",
          "description": "The total quote size for the allocation leg",
          "required": [
            "quote_size"
          ]
        },
        "base_size": {
          "type": "string",
          "description": "The total base size for the allocation leg",
          "required": [
            "base_size"
          ]
        },
        "commission": {
          "type": "string",
          "description": "The total commission for the allocation leg",
          "required": [
            "commission"
          ]
        },
        "avg_price": {
          "type": "string",
          "description": "The total average price for the allocation leg",
          "required": [
            "avg_price"
          ]
        },
        "order_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The total order ids for the allocation leg",
          "required": [
            "order_ids"
          ]
        },
        "side": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderSide",
          "description": "The total side for the allocation leg",
          "required": [
            "side"
          ]
        },
        "product_id": {
          "type": "string",
          "description": "The total product id for the allocation leg",
          "required": [
            "product_id"
          ]
        }
      },
      "required": [
        "allocation_leg_id",
        "allocation_id",
        "source_portfolio_id",
        "target_portfolio_id",
        "quote_size",
        "base_size",
        "commission",
        "avg_price",
        "order_ids",
        "side",
        "product_id"
      ]
    },
    "coinbase.eng.prime.api.api.AllocationPreviewLeg": {
      "type": "object",
      "properties": {
        "destination_portfolio_id": {
          "type": "string",
          "description": "The destination portfolio id",
          "required": [
            "destination_portfolio_id"
          ]
        },
        "destination_portfolio_base_balance": {
          "type": "string",
          "description": "The destination portfolio's base account available balance",
          "required": [
            "destination_portfolio_base_balance"
          ]
        },
        "destination_portfolio_quote_balance": {
          "type": "string",
          "description": "The destination portfolio's quote account available balance",
          "required": [
            "destination_portfolio_quote_balance"
          ]
        },
        "destination_portfolio_credit": {
          "type": "string",
          "description": "The destination portfolio's available credit",
          "required": [
            "destination_portfolio_credit "
          ]
        },
        "amount": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AllocationAmount",
          "description": "The allocation amount values",
          "required": [
            "amount"
          ]
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.PreviewAllocationLegFailureReason"
          },
          "description": "The allocation error values on leg"
        }
      },
      "required": [
        "destination_portfolio_id",
        "amount"
      ]
    },
    "coinbase.eng.prime.api.api.AllocationStatus": {
      "type": "string",
      "enum": [
        "ALLOCATION_UNSPECIFIED",
        "ALLOCATION_PENDING",
        "ALLOCATION_ACCEPTED",
        "ALLOCATION_ALLOCATED",
        "ALLOCATION_REJECTED"
      ],
      "default": "ALLOCATION_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.AmountDue": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "description": "The currency this loan is due in"
        },
        "amount": {
          "type": "string",
          "description": "The amount due"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date this settlement is due, expressed in UTC"
        }
      }
    },
    "coinbase.eng.prime.api.api.AmountField": {
      "type": "object",
      "properties": {
        "destination_portfolio_id": {
          "type": "string",
          "description": "The ID of the destination portfolio id of amount field",
          "required": [
            "destination_portfolio_id"
          ]
        },
        "amount": {
          "type": "string",
          "description": "The amount of the amount field to be allocated. This value is determined by PreviewSizeType sent in the request",
          "required": [
            "amount"
          ]
        }
      },
      "required": [
        "destination_portfolio_id",
        "amount",
        "destination_base_account_buying_power",
        "destination_quote_account_buying_power"
      ]
    },
    "coinbase.eng.prime.api.api.ArchiveSecurityKey": {
      "type": "object",
      "properties": {
        "security_key_id": {
          "type": "string"
        },
        "web3_security_key": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3SecurityKey"
        }
      }
    },
    "coinbase.eng.prime.api.api.AssetVisibilityStatus": {
      "type": "string",
      "enum": [
        "VISIBILITY_STATUS_UNSPECIFIED",
        "VISIBILITY_STATUS_VISIBLE",
        "VISIBILITY_STATUS_HIDDEN",
        "VISIBILITY_STATUS_SPAM"
      ],
      "default": "VISIBILITY_STATUS_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.Association": {
      "type": "object",
      "properties": {
        "association_type": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AssociationType"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.AssociationType": {
      "type": "string",
      "enum": [
        "AssociationTypeUnknown",
        "AssociationTypePortfolio",
        "AssociationTypeUser",
        "AssociationTypeDeviceGroup",
        "AssociationTypeOrganization"
      ],
      "default": "AssociationTypeUnknown"
    },
    "coinbase.eng.prime.api.api.AuthenticationExtensionsClientInputs": {
      "type": "object",
      "properties": {
        "appid": {
          "type": "string"
        },
        "exts": {
          "type": "boolean"
        }
      },
      "title": "https://www.w3.org/TR/webauthn/#dictdef-authenticationextensionsclientinputs"
    },
    "coinbase.eng.prime.api.api.AuthenticationExtensionsClientOutputs": {
      "type": "object",
      "properties": {
        "appid": {
          "type": "boolean"
        },
        "exts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "https://www.w3.org/TR/webauthn/#dictdef-authenticationextensionsclientoutputs"
    },
    "coinbase.eng.prime.api.api.AuthenticatorSelectionCriteria": {
      "type": "object",
      "properties": {
        "authenticator_attachment": {
          "type": "string"
        },
        "requires_resident_key": {
          "type": "boolean"
        },
        "user_verification_requirement": {
          "type": "string"
        }
      },
      "title": "https://www.w3.org/TR/webauthn/#dictdef-authenticatorselectioncriteria"
    },
    "coinbase.eng.prime.api.api.AutoBillingPreference": {
      "type": "object",
      "properties": {
        "vehicle_id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.BillingPreferenceState"
        },
        "wallet": {
          "$ref": "#/definitions/coinbase.custody.api.Wallet"
        },
        "currency": {
          "$ref": "#/definitions/coinbase.custody.api.Currency"
        }
      },
      "required": [
        "vehicle_id",
        "state"
      ]
    },
    "coinbase.eng.prime.api.api.Balance": {
      "type": "object",
      "properties": {
        "currency": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.BalanceCurrency"
        },
        "visibility": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AssetVisibilityStatus"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.BalanceCurrency": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string"
        },
        "network": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.CryptoNetwork"
        },
        "ams_uuid": {
          "type": "string"
        },
        "contract_address": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.BalanceOwner": {
      "type": "object",
      "properties": {
        "reference_id": {
          "type": "string"
        },
        "prime_wallet": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PrimeWalletBalanceType"
        }
      },
      "title": "inspired from institutional/balance"
    },
    "coinbase.eng.prime.api.api.BillingPreferenceState": {
      "type": "string",
      "enum": [
        "BILLING_PREFERENCE_STATE_UNSPECIFIED",
        "BILLING_PREFERENCE_STATE_ENABLED",
        "BILLING_PREFERENCE_STATE_DISABLED"
      ],
      "default": "BILLING_PREFERENCE_STATE_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.BlockchainAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "account_identifier": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.BlockchainNetwork": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "description": "Currency symbol"
        },
        "network_name": {
          "type": "string",
          "description": "Network name"
        }
      },
      "required": [
        "currency",
        "network_name"
      ]
    },
    "coinbase.eng.prime.api.api.BlockchainNetworks": {
      "type": "object",
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.BlockchainNetwork"
          }
        }
      },
      "required": [
        "networks"
      ]
    },
    "coinbase.eng.prime.api.api.BollingerBands": {
      "type": "object",
      "properties": {
        "period": {
          "type": "string"
        },
        "standard_deviations": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "moving_average_type": {
          "type": "string"
        },
        "channel_fill": {
          "type": "boolean"
        }
      },
      "required": [
        "period",
        "standard_deviations",
        "field",
        "moving_average_type",
        "channel_fill"
      ]
    },
    "coinbase.eng.prime.api.api.BulkUserRolesUpdateRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "role_updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.UserRolesUpdate"
          }
        },
        "role_change_type": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.RoleChangeType"
        }
      },
      "required": [
        "user_id",
        "updates",
        "role_change_type"
      ]
    },
    "coinbase.eng.prime.api.api.BulkUserRolesUpdateResponse": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.UserRolesUpdateResponseItem"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.CancelOrderFailureReason": {
      "type": "string",
      "enum": [
        "UNKNOWN_CANCEL_FAILURE_REASON",
        "INVALID_CANCEL_REQUEST",
        "UNKNOWN_CANCEL_ORDER",
        "COMMANDER_REJECTED",
        "DUPLICATE_CANCEL_REQUEST"
      ],
      "default": "UNKNOWN_CANCEL_FAILURE_REASON"
    },
    "coinbase.eng.prime.api.api.CancelOrderResult": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "failure_reason": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.CancelOrderFailureReason"
        },
        "order_id": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.CancelTransactionRequest": {
      "type": "object",
      "properties": {
        "transaction_id": {
          "type": "string",
          "description": "Id of the transaction to cancel",
          "required": [
            "transaction_id"
          ]
        },
        "portfolio_id": {
          "type": "string",
          "description": "Portfolio id of the transaction",
          "required": [
            "portfolio_id"
          ]
        }
      },
      "required": [
        "transaction_id",
        "portfolio_id"
      ]
    },
    "coinbase.eng.prime.api.api.CancelTransactionResponse": {
      "type": "object"
    },
    "coinbase.eng.prime.api.api.ChartConfiguration": {
      "type": "object",
      "properties": {
        "granularity": {
          "type": "string"
        },
        "enabled_studies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "chart_type": {
          "type": "string"
        },
        "overlays_enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "granularity",
        "enabled_studies",
        "chart_type",
        "overlays_enabled"
      ]
    },
    "coinbase.eng.prime.api.api.Config": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.ConfigType"
        },
        "blockchain_networks": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.BlockchainNetworks"
        }
      },
      "required": [
        "name",
        "type",
        "value"
      ]
    },
    "coinbase.eng.prime.api.api.ConfigType": {
      "type": "string",
      "enum": [
        "CONFIG_TYPE_UNSPECIFIED",
        "CONFIG_TYPE_BLOCKCHAIN_NETWORKS"
      ],
      "default": "CONFIG_TYPE_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.ConversionActivityDetails": {
      "type": "object",
      "properties": {
        "source_wallet_balance_pre_conversion": {
          "type": "string"
        },
        "source_wallet_balance_post_conversion": {
          "type": "string"
        },
        "target_wallet_balance_pre_conversion": {
          "type": "string"
        },
        "target_wallet_balance_post_conversion": {
          "type": "string"
        }
      },
      "required": [
        "source_wallet_balance_pre_conversion",
        "source_wallet_balance_post_conversion",
        "target_wallet_balance_pre_conversion",
        "target_wallet_balance_post_conversion"
      ]
    },
    "coinbase.eng.prime.api.api.ConversionSummary": {
      "type": "object",
      "properties": {
        "conversion_id": {
          "type": "string"
        },
        "conversion_datetime": {
          "type": "string"
        },
        "margin_summary": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.MarginSummary"
        }
      }
    },
    "coinbase.eng.prime.api.api.Counterparty": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "counterparty id"
        }
      }
    },
    "coinbase.eng.prime.api.api.CreateAPIKeyRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.APIKeyPermission"
          }
        },
        "expiration_date": {
          "type": "string"
        }
      },
      "required": [
        "portfolio_id",
        "name",
        "permissions"
      ]
    },
    "coinbase.eng.prime.api.api.CreateAPIKeyRequestV2": {
      "type": "object",
      "properties": {
        "group_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.APIKeyPermission"
          }
        },
        "expiration_date": {
          "type": "string"
        }
      },
      "required": [
        "group_id",
        "name",
        "permissions"
      ]
    },
    "coinbase.eng.prime.api.api.CreateAPIKeyResponse": {
      "type": "object",
      "properties": {
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "activity_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.CreateInvitationRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/coinbase.custody.api.InvitationRole"
        },
        "secondary_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.InvitationSecondaryRole"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.InvitationRole"
          }
        }
      },
      "required": [
        "portfolio_id",
        "email",
        "role"
      ]
    },
    "coinbase.eng.prime.api.api.CreateOrUpdatePreferenceRequest": {
      "type": "object",
      "properties": {
        "vehicle_id": {
          "type": "string"
        },
        "preference": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.Preference"
        }
      },
      "required": [
        "vehicle_id",
        "preference"
      ]
    },
    "coinbase.eng.prime.api.api.CreateOrUpdatePreferenceResponse": {
      "type": "object",
      "properties": {
        "preference": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.Preference"
        }
      },
      "required": [
        "preference"
      ]
    },
    "coinbase.eng.prime.api.api.CreateOrderFillsDocumentRequest": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "document_id": {
          "type": "string"
        }
      },
      "required": [
        "document_id",
        "order_id",
        "portfolio_id"
      ]
    },
    "coinbase.eng.prime.api.api.CreateOrderFillsDocumentResponse": {
      "type": "object",
      "properties": {
        "document": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Document"
        }
      },
      "required": [
        "document"
      ]
    },
    "coinbase.eng.prime.api.api.CreateTestTransactionRequest": {
      "type": "object",
      "properties": {
        "currency_symbol": {
          "type": "string"
        },
        "destination_address": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "account_identifier": {
          "type": "string"
        }
      },
      "required": [
        "currency_symbol",
        "destination_address",
        "portfolio_id"
      ]
    },
    "coinbase.eng.prime.api.api.CreateTestTransactionResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/coinbase.custody.api.TestTransaction"
        }
      },
      "required": [
        "transaction"
      ]
    },
    "coinbase.eng.prime.api.api.CreateTransactionRequest": {
      "type": "object",
      "properties": {
        "idem": {
          "type": "string",
          "description": "An idempotent key for the client to pass in",
          "required": [
            "idem"
          ]
        },
        "transaction_type": {
          "$ref": "#/definitions/coinbase.custody.api.TransactionType",
          "description": "The type of transaction you want to initiate",
          "required": [
            "transaction_type"
          ]
        },
        "currency_symbol": {
          "type": "string",
          "description": "The symbol of the currency you want to transfer",
          "required": [
            "currency_symbol"
          ]
        },
        "source": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.PaymentMethod",
          "description": "Where the funds are coming from",
          "required": [
            "source"
          ]
        },
        "target": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.PaymentMethod",
          "description": "Where the funds are going to ",
          "required": [
            "target"
          ]
        },
        "amount": {
          "type": "string",
          "description": "How much you want to move",
          "required": [
            "amount"
          ]
        },
        "portfolio_id": {
          "type": "string",
          "description": "The portfolio you want to transact with",
          "required": [
            "portfolio_id"
          ]
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Txn options"
        },
        "token_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.CreateTransactionV2Request": {
      "type": "object",
      "properties": {
        "idempotency_key": {
          "type": "string",
          "description": "An idempotent key for the client to pass in",
          "required": [
            "idempotency_key"
          ]
        },
        "wallet_id": {
          "type": "string",
          "description": "The wallet to perform transact action with",
          "required": [
            "wallet_id"
          ]
        },
        "portfolio_id": {
          "type": "string",
          "description": "The portfolio to perform transaction action with",
          "required": [
            "portfolio_id"
          ]
        },
        "action": {
          "$ref": "#/definitions/coinbase.tws.ActionVerb",
          "description": "Transaction action to perform on the wallet",
          "required": [
            "action"
          ]
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Extra options for transaction creation"
        }
      },
      "required": [
        "idempotency_key",
        "wallet_id",
        "portfolio_id",
        "action"
      ]
    },
    "coinbase.eng.prime.api.api.CreateWalletRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "currency_symbol": {
          "type": "string"
        },
        "wallet_type": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.WalletType"
        }
      },
      "required": [
        "portfolio_id",
        "name",
        "currency_symbol",
        "wallet_type"
      ]
    },
    "coinbase.eng.prime.api.api.CreateWalletResponse": {
      "type": "object",
      "properties": {
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "activity_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.CreateWalletV2Request": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "currency_symbols": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "wallet_type": {
          "$ref": "#/definitions/coinbase.tws.WalletType",
          "title": "TODO: rm TWS here"
        },
        "idempotency_key": {
          "type": "string"
        },
        "option": {
          "$ref": "#/definitions/coinbase.tws.CreateWalletOption"
        },
        "organization_id": {
          "type": "string"
        }
      },
      "required": [
        "portfolio_id",
        "name",
        "wallet_type",
        "idempotency_key"
      ]
    },
    "coinbase.eng.prime.api.api.CreateWeb3ActionRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "web3_action": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3Action"
        }
      }
    },
    "coinbase.eng.prime.api.api.CryptoNetwork": {
      "type": "object",
      "properties": {
        "blockchain": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.Currency": {
      "type": "object",
      "properties": {
        "minimum_withdrawal_value": {
          "type": "string"
        },
        "currency_symbol": {
          "type": "string"
        },
        "currency_decimals": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "coinbase.eng.prime.api.api.CurrencyInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "ams_uuid": {
          "type": "string"
        },
        "contract_address": {
          "type": "string"
        },
        "crypto_network": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.CryptoNetwork"
        },
        "icon": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "price_change_pct": {
          "type": "string"
        },
        "overrides": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.CurrencyInfoOverrides"
        },
        "network_display_name": {
          "type": "string"
        },
        "market_cap": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.CurrencyInfoOverrides": {
      "type": "object",
      "properties": {
        "web3": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.CurrencyInfoWeb3Overrides"
        }
      }
    },
    "coinbase.eng.prime.api.api.CurrencyInfoQueryLevel": {
      "type": "string",
      "enum": [
        "CURRENCY_INFO_QUERY_LEVEL_UNSPECIFIED",
        "CURRENCY_INFO_QUERY_LEVEL_PORTFOLIO"
      ],
      "default": "CURRENCY_INFO_QUERY_LEVEL_UNSPECIFIED",
      "description": "The level for which currencies info will be fetched."
    },
    "coinbase.eng.prime.api.api.CurrencyInfoWeb3Overrides": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.DeactivateAPIKeyRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "access_key": {
          "type": "string"
        }
      },
      "required": [
        "portfolio_id",
        "access_key"
      ]
    },
    "coinbase.eng.prime.api.api.DeactivateAPIKeyRequestV2": {
      "type": "object",
      "properties": {
        "group_id": {
          "type": "string"
        },
        "access_key": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coinbase.eng.prime.apikey.api.APIKeyType"
        },
        "portfolio_id": {
          "type": "string"
        }
      },
      "required": [
        "group_id",
        "access_key"
      ]
    },
    "coinbase.eng.prime.api.api.DeactivateAPIKeyResponse": {
      "type": "object",
      "properties": {
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "activity_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.DefaultPortfolioUpdate": {
      "type": "object",
      "properties": {
        "default_portfolio_id": {
          "type": "string"
        }
      },
      "required": [
        "default_portfolio_id"
      ]
    },
    "coinbase.eng.prime.api.api.DeleteAddressBookEntryResponse": {
      "type": "object",
      "properties": {
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType",
          "description": "Activity Type of change request"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32",
          "description": "Number of approvals remaining for the change request"
        },
        "activity_id": {
          "type": "string",
          "description": "Activity ID of change request"
        }
      },
      "required": [
        "activity_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.DeletePaymentMethodRequest": {
      "type": "object",
      "properties": {
        "payment_method_id": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        }
      },
      "required": [
        "vehicle_id",
        "payment_method_id"
      ]
    },
    "coinbase.eng.prime.api.api.DeletePaymentMethodResponse": {
      "type": "object",
      "properties": {
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "activity_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.Device": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "last_used_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "coinbase.eng.prime.api.api.DeviceGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3Device"
          }
        },
        "associations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Association"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.DeviceOsName": {
      "type": "string",
      "enum": [
        "DEVICE_OS_NAME_UNSPECIFIED",
        "DEVICE_OS_NAME_IOS",
        "DEVICE_OS_NAME_ANDROID"
      ],
      "default": "DEVICE_OS_NAME_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.DeviceState": {
      "type": "string",
      "enum": [
        "DEVICE_STATE_UNSPECIFIED",
        "DEVICE_STATE_ACTIVE",
        "DEVICE_STATE_DELETED",
        "DEVICE_STATE_PENDING",
        "DEVICE_STATE_INACTIVE"
      ],
      "default": "DEVICE_STATE_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.Document": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/coinbase.eng.prime.reporting.api.DocumentType"
        },
        "format": {
          "$ref": "#/definitions/coinbase.eng.prime.reporting.api.DocumentFormat"
        },
        "state": {
          "$ref": "#/definitions/coinbase.eng.prime.reporting.api.DocumentState"
        },
        "user_id": {
          "type": "string"
        },
        "order_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "format",
        "state",
        "user_id",
        "id",
        "order_id"
      ]
    },
    "coinbase.eng.prime.api.api.DocumentDownloadBundle": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "download_link": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.DownloadActivityReportResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "required": [
            "url"
          ]
        }
      },
      "required": [
        "url"
      ]
    },
    "coinbase.eng.prime.api.api.EnrollInStablecoinRewardsRequest": {
      "type": "object",
      "properties": {
        "vehicle_id": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "document_key": {
          "$ref": "#/definitions/coinbase.custody.api.DocumentType"
        },
        "portfolio_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "vehicle_id",
        "currency",
        "document_key",
        "prime_asset_in_scope"
      ]
    },
    "coinbase.eng.prime.api.api.EnrollInStablecoinRewardsResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "coinbase.eng.prime.api.api.FavoriteProductsUpdate": {
      "type": "object",
      "properties": {
        "favorite_products": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of productIds that the user has favorited"
        }
      },
      "required": [
        "favorite_products"
      ]
    },
    "coinbase.eng.prime.api.api.FetchInviteeAccessByEmailRequest": {
      "type": "object",
      "properties": {
        "invitee_email": {
          "type": "string",
          "description": "The invitee email",
          "required": [
            "invitee_email"
          ]
        },
        "entity_id": {
          "type": "string",
          "description": "The entity ID",
          "required": [
            "entity_id"
          ]
        }
      },
      "required": [
        "invitee_email",
        "entity_id"
      ]
    },
    "coinbase.eng.prime.api.api.FetchInviteeAccessByEmailResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/coinbase.custody.api.User"
        }
      },
      "required": [
        "user"
      ]
    },
    "coinbase.eng.prime.api.api.FetchWalletOption": {
      "type": "object",
      "properties": {
        "resolve_balances": {
          "type": "boolean"
        },
        "resolve_currency": {
          "type": "boolean"
        },
        "resolve_staking_info": {
          "type": "boolean"
        },
        "resolve_vesting_info": {
          "type": "boolean"
        },
        "resolve_available_actions": {
          "type": "boolean"
        }
      }
    },
    "coinbase.eng.prime.api.api.GenerateDALReportResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.GenerateFinancingReportResponse": {
      "type": "object",
      "properties": {
        "download_links": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "failed_reports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.document.api.v1.ReportType"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.GenerateReportingCenterDocumentResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.GenerateStakingReportArgs": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "start_unix": {
          "type": "string",
          "format": "int64"
        },
        "end_unix": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "coinbase.eng.prime.api.api.GenerateStatementResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      },
      "required": [
        "status"
      ]
    },
    "coinbase.eng.prime.api.api.GenerateWeb3ReportResponse": {
      "type": "object",
      "properties": {
        "document_id": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetAPIKeyCountResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "count"
      ]
    },
    "coinbase.eng.prime.api.api.GetAPIKeyResponse": {
      "type": "object",
      "properties": {
        "api_key": {
          "$ref": "#/definitions/coinbase.eng.prime.apikey.api.APIKey"
        }
      },
      "required": [
        "api_key"
      ]
    },
    "coinbase.eng.prime.api.api.GetActivityFiltersResponse": {
      "type": "object",
      "properties": {
        "currencies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "required": [
            "currencies"
          ]
        },
        "states": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.ActivityState"
          },
          "required": [
            "states"
          ]
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.ActivityType"
          },
          "required": [
            "types"
          ]
        }
      },
      "required": [
        "currencies",
        "states",
        "types"
      ]
    },
    "coinbase.eng.prime.api.api.GetAllocationByOrderResponse": {
      "type": "object",
      "properties": {
        "allocation": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Allocation",
          "description": "The allocation returned",
          "required": [
            "allocation"
          ]
        }
      },
      "required": [
        "allocation"
      ]
    },
    "coinbase.eng.prime.api.api.GetAllocationLegResponse": {
      "type": "object",
      "properties": {
        "allocation_leg": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AllocationLeg",
          "description": "The allocation leg returned",
          "required": [
            "allocation_leg"
          ]
        }
      },
      "required": [
        "allocation_leg"
      ]
    },
    "coinbase.eng.prime.api.api.GetAllocationsResponse": {
      "type": "object",
      "properties": {
        "allocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Allocation"
          },
          "description": "The allocations returned",
          "required": [
            "allocations"
          ]
        }
      },
      "required": [
        "allocations"
      ]
    },
    "coinbase.eng.prime.api.api.GetBalancesResponse": {
      "type": "object",
      "properties": {
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Balance"
          }
        }
      },
      "required": [
        "balances"
      ]
    },
    "coinbase.eng.prime.api.api.GetBalancesStreamBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.custody.api.GetBalanceResponse"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Heartbeat"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetBalancesStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetBalancesStreamBody"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetBillingEmailListResponse": {
      "type": "object",
      "properties": {
        "email_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.EmailList"
          }
        },
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "email_list",
        "emails"
      ]
    },
    "coinbase.eng.prime.api.api.GetBillingPreferenceResponse": {
      "type": "object",
      "properties": {
        "billing_preference": {
          "$ref": "#/definitions/coinbase.custody.api.BillingPreference"
        },
        "auto_billing_preference": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AutoBillingPreference"
        }
      },
      "required": [
        "billing_preference",
        "auto_billing_preference"
      ]
    },
    "coinbase.eng.prime.api.api.GetConversionSummariesV2Response": {
      "type": "object",
      "properties": {
        "conversion_summaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.ConversionSummary"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.GetCounterpartyResponse": {
      "type": "object",
      "properties": {
        "counterparty": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Counterparty",
          "description": "counterparty"
        }
      },
      "required": [
        "counterparty"
      ]
    },
    "coinbase.eng.prime.api.api.GetCurrenciesInfoResponse": {
      "type": "object",
      "properties": {
        "currencies_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.CurrencyInfo"
          }
        }
      },
      "title": "Response for GetCurrenciesInfo: Returns currencies_info"
    },
    "coinbase.eng.prime.api.api.GetDepositInstructionsResponse": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "fields"
      ]
    },
    "coinbase.eng.prime.api.api.GetDeviceGroupResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3Device"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.GetDocumentDownloadLinksResponse": {
      "type": "object",
      "properties": {
        "download_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.DocumentDownloadBundle"
          }
        }
      },
      "required": [
        "download_links"
      ]
    },
    "coinbase.eng.prime.api.api.GetDocumentResponse": {
      "type": "object",
      "properties": {
        "pdf_url": {
          "type": "string"
        }
      },
      "required": [
        "pdf_url"
      ]
    },
    "coinbase.eng.prime.api.api.GetDocumentSignatureStatusResponse": {
      "type": "object",
      "properties": {
        "is_latest_signed": {
          "type": "boolean"
        },
        "is_any_signed": {
          "type": "boolean"
        }
      },
      "required": [
        "is_latest_signed",
        "is_any_signed"
      ]
    },
    "coinbase.eng.prime.api.api.GetEntitySettingsResponse": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Settings"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.GetEvaluationResultResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/eng.prime.policy.api.EvaluationResult"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetExchangeRateResponse": {
      "type": "object",
      "properties": {
        "rate": {
          "type": "string"
        }
      },
      "required": [
        "rate"
      ]
    },
    "coinbase.eng.prime.api.api.GetFidoRegistrationResponse": {
      "type": "object",
      "properties": {
        "rp": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.RpEntity"
        },
        "user": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.UserEntity"
        },
        "challenge": {
          "type": "string",
          "format": "byte"
        },
        "pub_key_cred_params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.PublicKeyCredentialParameters"
          }
        },
        "exclude_credentials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.PublicKeyCredentialDescriptor"
          }
        },
        "authenticator_selection": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AuthenticatorSelectionCriteria"
        },
        "attestation": {
          "type": "string"
        },
        "extensions": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AuthenticationExtensionsClientInputs"
        }
      },
      "description": "Follows PublicKeyCredentialCreationOptions\nhttps://www.w3.org/TR/webauthn/#dictdef-publickeycredentialcreationoptions\nThe timeout is left for the client to control.",
      "required": [
        "rp",
        "user",
        "challenge",
        "pub_key_cred_params",
        "attestation"
      ]
    },
    "coinbase.eng.prime.api.api.GetFinancingProductPermisionsResponse": {
      "type": "object",
      "properties": {
        "cdal_enabled": {
          "type": "boolean"
        },
        "portfolio_margin_enabled": {
          "type": "boolean"
        },
        "trade_finance_enabled": {
          "type": "boolean"
        },
        "bilateral_lending_enabled": {
          "type": "boolean"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetGovernanceStatusResponse": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "coinbase.eng.prime.api.api.GetGovernanceTopicResponse": {
      "type": "object",
      "properties": {
        "topic": {
          "$ref": "#/definitions/coinbase.custody.api.GovernanceTopic"
        }
      },
      "required": [
        "topic"
      ]
    },
    "coinbase.eng.prime.api.api.GetGovernanceTopicsResponse": {
      "type": "object",
      "properties": {
        "topics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.GovernanceTopic"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PaginatedResponse"
        }
      },
      "required": [
        "topics",
        "pagination"
      ]
    },
    "coinbase.eng.prime.api.api.GetGovernanceVotesResponse": {
      "type": "object",
      "properties": {
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.GovernanceVote"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PaginatedResponse"
        }
      },
      "required": [
        "votes",
        "pagination"
      ]
    },
    "coinbase.eng.prime.api.api.GetIVPortfolioBalancesResponse": {
      "type": "object",
      "properties": {
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.PortfolioBalance"
          }
        }
      },
      "required": [
        "balances"
      ]
    },
    "coinbase.eng.prime.api.api.GetIVRestrictionsResponse": {
      "type": "object",
      "properties": {
        "has_trading_restrictions": {
          "type": "boolean"
        }
      },
      "required": [
        "has_trading_restrictions"
      ]
    },
    "coinbase.eng.prime.api.api.GetIntrospectResponse": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "csrf_token": {
          "type": "string"
        }
      },
      "required": [
        "user_id",
        "csrf_token"
      ]
    },
    "coinbase.eng.prime.api.api.GetInvestmentVehiclePortfoliosResponse": {
      "type": "object",
      "properties": {
        "investment_vehicle": {
          "$ref": "#/definitions/coinbase.custody.api.InvestmentVehicle"
        },
        "portfolios": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Portfolio"
          }
        },
        "user_roles": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.UserRole"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.LimitOffsetPaginatedResponse"
        }
      },
      "required": [
        "portfolios",
        "pagination"
      ]
    },
    "coinbase.eng.prime.api.api.GetInvestmentVehicleResponse": {
      "type": "object",
      "properties": {
        "investment_vehicle": {
          "$ref": "#/definitions/coinbase.custody.api.InvestmentVehicle"
        }
      },
      "required": [
        "investment_vehicle"
      ]
    },
    "coinbase.eng.prime.api.api.GetInvitationsResponse": {
      "type": "object",
      "properties": {
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Invitation"
          }
        }
      },
      "required": [
        "invitations"
      ]
    },
    "coinbase.eng.prime.api.api.GetInvoiceDownloadLinkResponse": {
      "type": "object",
      "properties": {
        "download_link": {
          "type": "string"
        }
      },
      "required": [
        "download_link"
      ]
    },
    "coinbase.eng.prime.api.api.GetInvoicesRemainingBalanceResponse": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "string"
        }
      },
      "required": [
        "balance"
      ]
    },
    "coinbase.eng.prime.api.api.GetInvoicesResponse": {
      "type": "object",
      "properties": {
        "invoices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Invoice"
          }
        }
      },
      "required": [
        "invoices"
      ]
    },
    "coinbase.eng.prime.api.api.GetIsPrimeEnabledForUserResponse": {
      "type": "object",
      "properties": {
        "has_prime_access": {
          "type": "boolean"
        }
      },
      "required": [
        "has_prime_access"
      ]
    },
    "coinbase.eng.prime.api.api.GetIvDomicileCategoryRequest": {
      "type": "object",
      "properties": {
        "vehicle_id": {
          "type": "string"
        }
      },
      "required": [
        "vehicle_id"
      ]
    },
    "coinbase.eng.prime.api.api.GetIvDomicileCategoryResponse": {
      "type": "object",
      "properties": {
        "domicile_category": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrganizationDomicileCategory"
        }
      },
      "required": [
        "domicile_category"
      ]
    },
    "coinbase.eng.prime.api.api.GetLatestTestTransactionRequest": {
      "type": "object",
      "properties": {
        "currency_symbol": {
          "type": "string"
        },
        "destination_address": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "account_identifier": {
          "type": "string"
        }
      },
      "required": [
        "currency_symbol",
        "destination_address",
        "portfolio_id"
      ]
    },
    "coinbase.eng.prime.api.api.GetLatestTestTransactionResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/coinbase.custody.api.TestTransaction"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetOrderResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Order"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/coinbase.custody.api.Organization"
        }
      },
      "required": [
        "organization"
      ]
    },
    "coinbase.eng.prime.api.api.GetPendingConsensusResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.PendingConsensusItem"
          }
        }
      },
      "required": [
        "items"
      ]
    },
    "coinbase.eng.prime.api.api.GetPortfolioActivitiesResponse": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Activity"
          },
          "required": [
            "activities"
          ]
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PaginatedResponse"
        }
      },
      "required": [
        "activities",
        "pagination"
      ]
    },
    "coinbase.eng.prime.api.api.GetPortfolioActivitiesStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPortfolioActivitiesStreamResponseBody"
        }
      },
      "required": [
        "body"
      ]
    },
    "coinbase.eng.prime.api.api.GetPortfolioActivitiesStreamResponseBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPortfolioActivitiesResponse"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Heartbeat"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetPortfolioActivityResponse": {
      "type": "object",
      "properties": {
        "activity": {
          "$ref": "#/definitions/coinbase.custody.api.Activity",
          "required": [
            "activity"
          ]
        }
      },
      "required": [
        "activity"
      ]
    },
    "coinbase.eng.prime.api.api.GetPortfolioActivityStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPortfolioActivityStreamResponseBody"
        }
      },
      "required": [
        "body"
      ]
    },
    "coinbase.eng.prime.api.api.GetPortfolioActivityStreamResponseBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPortfolioActivityResponse"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Heartbeat"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetPortfolioCommissionResponse": {
      "type": "object",
      "properties": {
        "commission_rate": {
          "$ref": "#/definitions/coinbase.brokerage.types.Decimal",
          "description": "Commission rate (in whole percentage. Commission of 15bps is \"0.0015\")"
        },
        "commission_fee_model": {
          "$ref": "#/definitions/coinbase.eng.prime.fees.api.FeeModel",
          "description": "Commission model (As of q1 2022 we support all_in model, adding support for cost_plus by the end of q1)"
        },
        "ces_commission_rate": {
          "$ref": "#/definitions/coinbase.brokerage.types.Decimal",
          "description": "CES Commission rate (in whole percentage. CES Commission of 15bps is \"0.0015\")"
        }
      },
      "required": [
        "id"
      ]
    },
    "coinbase.eng.prime.api.api.GetPostTradeCreditResponse": {
      "type": "object",
      "properties": {
        "post_trade_credit": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PostTradeCreditInformation",
          "description": "The portfolio financing object",
          "required": [
            "post_trade_credit"
          ]
        }
      },
      "required": [
        "post_trade_credit"
      ]
    },
    "coinbase.eng.prime.api.api.GetPreferenceResponse": {
      "type": "object",
      "properties": {
        "preference": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.Preference"
        }
      },
      "required": [
        "preference"
      ]
    },
    "coinbase.eng.prime.api.api.GetPrimeActivitiesResponse": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.activity.api.Activity"
          },
          "required": [
            "activities"
          ]
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PaginatedResponse"
        }
      },
      "required": [
        "activities",
        "pagination"
      ]
    },
    "coinbase.eng.prime.api.api.GetPrimeActivitiesStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPrimeActivitiesStreamResponseBody"
        }
      },
      "required": [
        "body"
      ]
    },
    "coinbase.eng.prime.api.api.GetPrimeActivitiesStreamResponseBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPrimeActivitiesResponse"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Heartbeat"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetPrimeActivityConsensusAuditResponse": {
      "type": "object",
      "properties": {
        "audit_result": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.ActivityConsensusAuditResult"
        }
      },
      "required": [
        "audit_result"
      ]
    },
    "coinbase.eng.prime.api.api.GetPrimeActivityDetailsResponse": {
      "type": "object",
      "properties": {
        "activity": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.Activity"
        },
        "activity_details": {
          "$ref": "#/definitions/coinbase.custody.api.ActivityDetails"
        },
        "completed_evaluation": {
          "$ref": "#/definitions/coinbase.custody.api.CompletedEvaluation"
        }
      },
      "required": [
        "activity",
        "activity_details"
      ]
    },
    "coinbase.eng.prime.api.api.GetPrimeActivityDetailsStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPrimeActivityDetailsStreamResponseBody"
        }
      },
      "required": [
        "body"
      ]
    },
    "coinbase.eng.prime.api.api.GetPrimeActivityDetailsStreamResponseBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPrimeActivityDetailsResponse"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Heartbeat"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetPrimeActivityDetailsV2Response": {
      "type": "object",
      "properties": {
        "activity": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.Activity"
        },
        "activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PrimeActivityDetails"
        },
        "completed_evaluation": {
          "$ref": "#/definitions/coinbase.custody.api.CompletedEvaluation"
        }
      },
      "required": [
        "activity",
        "activity_details"
      ]
    },
    "coinbase.eng.prime.api.api.GetPrimeActivityDetailsV2StreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPrimeActivityDetailsV2StreamResponseBody"
        }
      },
      "required": [
        "body"
      ]
    },
    "coinbase.eng.prime.api.api.GetPrimeActivityDetailsV2StreamResponseBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetPrimeActivityDetailsV2Response"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Heartbeat"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetPrimeActivityFiltersResponse": {
      "type": "object",
      "properties": {
        "currencies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "required": [
            "currencies"
          ]
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityStatus"
          },
          "required": [
            "statuses"
          ]
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
          },
          "required": [
            "types"
          ]
        },
        "secondary_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivitySecondaryType"
          }
        }
      },
      "required": [
        "currencies",
        "statuses",
        "types"
      ]
    },
    "coinbase.eng.prime.api.api.GetPrimeInvoicesResponse": {
      "type": "object",
      "properties": {
        "invoices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Invoice"
          }
        }
      },
      "required": [
        "invoices"
      ]
    },
    "coinbase.eng.prime.api.api.GetProductsResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Products"
        }
      },
      "title": "Rest"
    },
    "coinbase.eng.prime.api.api.GetProductsStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetProductsStreamResponseBody"
        }
      },
      "title": "Streaming"
    },
    "coinbase.eng.prime.api.api.GetProductsStreamResponseBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Products"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Heartbeat"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetRateCardResponse": {
      "type": "object",
      "properties": {
        "rate_card": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.RateCard"
        }
      },
      "required": [
        "rate_card"
      ]
    },
    "coinbase.eng.prime.api.api.GetReportingCenterDownloadLinkResponse": {
      "type": "object",
      "properties": {
        "download_link": {
          "type": "string"
        }
      },
      "required": [
        "download_link"
      ]
    },
    "coinbase.eng.prime.api.api.GetReportingCenterFiltersResponse": {
      "type": "object",
      "properties": {
        "start_year": {
          "type": "string",
          "format": "int64"
        },
        "end_year": {
          "type": "string",
          "format": "int64"
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.reporting.api.reporting_center.ReportType"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.GetReportingDocumentByOrderIdResponse": {
      "type": "object",
      "properties": {
        "document": {
          "$ref": "#/definitions/coinbase.eng.prime.reporting.api.Document"
        }
      },
      "required": [
        "document"
      ]
    },
    "coinbase.eng.prime.api.api.GetReverseAllocationResponse": {
      "type": "object",
      "properties": {
        "reverse_allocation": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Allocation",
          "description": "The reversed allocations returned",
          "required": [
            "reverse_allocation"
          ]
        }
      },
      "required": [
        "reverse_allocation"
      ]
    },
    "coinbase.eng.prime.api.api.GetSettingsResponse": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Settings"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.GetSignedDocumentResponse": {
      "type": "object",
      "properties": {
        "pdf_url": {
          "type": "string"
        }
      },
      "required": [
        "pdf_url"
      ]
    },
    "coinbase.eng.prime.api.api.GetStablecoinRewardsEarningsResponse": {
      "type": "object",
      "properties": {
        "rewards_earnings": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.PrimeRewardsEarnings"
        }
      },
      "required": [
        "rewards_earnings"
      ]
    },
    "coinbase.eng.prime.api.api.GetStablecoinRewardsEnrollmentResponse": {
      "type": "object",
      "properties": {
        "enrollment": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.Enrollment"
        },
        "domicile_category": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrganizationDomicileCategory"
        },
        "actual_rate": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "domicile_category"
      ]
    },
    "coinbase.eng.prime.api.api.GetStatementResponse": {
      "type": "object",
      "properties": {
        "statement": {
          "$ref": "#/definitions/coinbase.eng.prime.reporting.api.Statement"
        }
      },
      "required": [
        "statement"
      ]
    },
    "coinbase.eng.prime.api.api.GetStatementsResponse": {
      "type": "object",
      "properties": {
        "statements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.reporting.api.Statement"
          }
        }
      },
      "required": [
        "statements"
      ]
    },
    "coinbase.eng.prime.api.api.GetTeamMemberDetailResponse": {
      "type": "object",
      "properties": {
        "latest_activity": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.Activity"
        },
        "invited_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetTeamMembersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.User"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PaginatedResponse"
        }
      },
      "required": [
        "users",
        "pagination"
      ]
    },
    "coinbase.eng.prime.api.api.GetTransferMethodsResponse": {
      "type": "object",
      "properties": {
        "transfer_methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.TransferMethod"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.GetUserEntityLevelPermissionResponse": {
      "type": "object",
      "properties": {
        "has_permission": {
          "type": "boolean"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetUserHierarchyResponse": {
      "type": "object",
      "properties": {
        "organizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Organization"
          }
        },
        "investment_vehicles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.InvestmentVehicle"
          }
        },
        "portfolios": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Portfolio"
          }
        },
        "user_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.UserRole"
          }
        },
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Balance"
          }
        }
      },
      "required": [
        "organizations",
        "investment_vehicles",
        "portfolios",
        "user_roles",
        "balances"
      ]
    },
    "coinbase.eng.prime.api.api.GetUserInAppNotificationsResponse": {
      "type": "object",
      "properties": {
        "in_app_notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.notification.api.InAppNotification"
          }
        }
      },
      "title": "response for getting in app notifications",
      "required": [
        "in_app_notifications"
      ]
    },
    "coinbase.eng.prime.api.api.GetUserInAppNotificationsStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetUserInAppNotificationsStreamResponseBody"
        }
      },
      "title": "stream response for getting in-app notifications"
    },
    "coinbase.eng.prime.api.api.GetUserInAppNotificationsStreamResponseBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetUserInAppNotificationsResponse"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Heartbeat"
        }
      },
      "title": "stream response body for getting in-app notifications"
    },
    "coinbase.eng.prime.api.api.GetUserInfoResponse": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "email",
        "avatar_url",
        "name"
      ]
    },
    "coinbase.eng.prime.api.api.GetUserPortfoliosResponse": {
      "type": "object",
      "properties": {
        "portfolios": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Portfolio"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.LimitOffsetPaginatedResponse"
        }
      },
      "required": [
        "portfolios",
        "pagination"
      ]
    },
    "coinbase.eng.prime.api.api.GetUserPreferencesForChannelResponse": {
      "type": "object",
      "properties": {
        "user_preferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.notification.api.UserPreferenceForChannel"
          }
        }
      },
      "required": [
        "user_preferences"
      ]
    },
    "coinbase.eng.prime.api.api.GetUserPreferencesResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.UserPreferences"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetUserRolesResponse": {
      "type": "object",
      "properties": {
        "user_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.UserRole"
          }
        }
      },
      "required": [
        "user_roles"
      ]
    },
    "coinbase.eng.prime.api.api.GetVehicleBillingPermissionResponse": {
      "type": "object",
      "properties": {
        "can_view_billing": {
          "type": "boolean"
        }
      },
      "required": [
        "can_view_billing"
      ]
    },
    "coinbase.eng.prime.api.api.GetVehicleCurrenciesResponse": {
      "type": "object",
      "properties": {
        "currencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Currency"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.GetVehicleCurrenciesStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetVehicleCurrenciesStreamResponseBody"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetVehicleCurrenciesStreamResponseBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetVehicleCurrenciesResponse"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Heartbeat"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetVehicleSpotPricesResponse": {
      "type": "object",
      "properties": {
        "body": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.SpotPrice"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.GetVehicleSpotPricesStreamBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetVehicleSpotPricesResponse"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Heartbeat"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetVehicleSpotPricesStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.GetVehicleSpotPricesStreamBody"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetVehicleValidatorsResponse": {
      "type": "object",
      "properties": {
        "validators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.StakingValidator"
          }
        }
      },
      "required": [
        "validators"
      ]
    },
    "coinbase.eng.prime.api.api.GetWalletAssetSettingsResponse": {
      "type": "object",
      "properties": {
        "collectible_settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.WalletCollectibleSetting"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.GetWalletDefiBalancesResponse": {
      "type": "object",
      "properties": {
        "lending": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SupplyAndBorrow"
        },
        "liquidity_pools": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SupplyAndBorrow"
        },
        "yield_farming": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.YieldFarm"
        },
        "staked": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Stake"
        },
        "rewards": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Reward"
        },
        "deposits": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Stake"
        }
      }
    },
    "coinbase.eng.prime.api.api.GetWalletResponse": {
      "type": "object",
      "properties": {
        "wallet": {
          "$ref": "#/definitions/coinbase.custody.api.Wallet"
        }
      },
      "required": [
        "wallet"
      ]
    },
    "coinbase.eng.prime.api.api.GetWalletRewardsStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/coinbase.custody.api.WalletRewardsStatus"
        }
      },
      "required": [
        "status"
      ]
    },
    "coinbase.eng.prime.api.api.GetWalletStakingStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/coinbase.custody.api.WalletStakingStatus"
        }
      },
      "required": [
        "status"
      ]
    },
    "coinbase.eng.prime.api.api.GetWalletVestingStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/coinbase.custody.api.WalletVestingStatus"
        }
      },
      "required": [
        "status"
      ]
    },
    "coinbase.eng.prime.api.api.Heartbeat": {
      "type": "object",
      "properties": {
        "server_time": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "TODO: CI-1066 Move to shared location"
    },
    "coinbase.eng.prime.api.api.Hierarchy": {
      "type": "object",
      "properties": {
        "hierarchy_type": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.HierarchyType"
        },
        "hierarchy_id": {
          "type": "string"
        }
      },
      "required": [
        "hierarchy_type",
        "hierarchy_id"
      ]
    },
    "coinbase.eng.prime.api.api.HierarchyType": {
      "type": "string",
      "enum": [
        "HIERARCHY_TYPE_UNKNOWN",
        "HIERARCHY_TYPE_PORTFOLIO",
        "HIERARCHY_TYPE_ENTITY"
      ],
      "default": "HIERARCHY_TYPE_UNKNOWN"
    },
    "coinbase.eng.prime.api.api.InitiateTransactionSigningRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "transaction_id": {
          "type": "string"
        }
      },
      "required": [
        "portfolio_id",
        "transaction_id"
      ]
    },
    "coinbase.eng.prime.api.api.InitiateTransactionSigningResponse": {
      "type": "object",
      "properties": {
        "operation_name": {
          "type": "string"
        },
        "blocking_activity_id": {
          "type": "string"
        }
      },
      "required": [
        "operation_name"
      ]
    },
    "coinbase.eng.prime.api.api.Invitation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "vehicle_name": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.InvitationRole"
          }
        },
        "secondary_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.InvitationSecondaryRole"
          }
        },
        "hierarchy_type": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.HierarchyType"
        },
        "created_at": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.InvitationStatus"
        }
      },
      "required": [
        "id",
        "email",
        "vehicle_id",
        "vehicle_name",
        "roles",
        "portfolio_id",
        "hierarchy_type",
        "created_at"
      ]
    },
    "coinbase.eng.prime.api.api.InvitationRole": {
      "type": "string",
      "enum": [
        "INVITATION_ROLE_UNKNOWN",
        "INVITATION_ROLE_AUDITOR",
        "INVITATION_ROLE_SIGNATORY",
        "INVITATION_ROLE_INITIATOR",
        "INVITATION_ROLE_REVIEWER",
        "INVITATION_ROLE_ADMIN",
        "INVITATION_ROLE_TRADER",
        "INVITATION_ROLE_INTERNAL_TRADER",
        "INVITATION_ROLE_TEAM_MANAGER",
        "INVITATION_ROLE_FULL_TRADER"
      ],
      "default": "INVITATION_ROLE_UNKNOWN"
    },
    "coinbase.eng.prime.api.api.InvitationSecondaryRole": {
      "type": "string",
      "enum": [
        "INVITATION_SECONDARY_ROLE_UNKNOWN",
        "INVITATION_SECONDARY_ROLE_VIDEO_APPROVER"
      ],
      "default": "INVITATION_SECONDARY_ROLE_UNKNOWN"
    },
    "coinbase.eng.prime.api.api.InvitationStatus": {
      "type": "string",
      "enum": [
        "Invitation_STATUS_UNSPECIFIED",
        "Invitation_STATUS_CREATED",
        "Invitation_STATUS_APPROVED",
        "Invitation_STATUS_REJECTED",
        "Invitation_STATUS_EXPIRED",
        "Invitation_STATUS_USER_APPROVED",
        "Invitation_STATUS_ADMIN_APPROVED"
      ],
      "default": "Invitation_STATUS_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.Invoice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "invoice_number": {
          "type": "string"
        },
        "billing_month": {
          "type": "integer",
          "format": "int32"
        },
        "billing_year": {
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.InvoiceState"
        },
        "report_id": {
          "type": "string"
        },
        "due_date": {
          "type": "string"
        },
        "usd_amount_owed": {
          "type": "string"
        },
        "usd_amount_paid": {
          "type": "string"
        },
        "download_url": {
          "type": "string"
        },
        "is_prime_invoice": {
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "invoice_number",
        "billing_month",
        "billing_year",
        "state",
        "report_id",
        "due_date",
        "usd_amount_owed",
        "usd_amount_paid"
      ]
    },
    "coinbase.eng.prime.api.api.InvoiceState": {
      "type": "string",
      "enum": [
        "INVOICE_STATE_UNKNOWN",
        "INVOICE_STATE_IMPORTED",
        "INVOICE_STATE_BILLED",
        "INVOICE_STATE_PARTIALLY_PAID",
        "INVOICE_STATE_PAID"
      ],
      "default": "INVOICE_STATE_UNKNOWN"
    },
    "coinbase.eng.prime.api.api.JsonPatch": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.JsonPatchOperation"
          }
        }
      },
      "title": "TODO: CI-1066 Move to shared location",
      "required": [
        "operations"
      ]
    },
    "coinbase.eng.prime.api.api.JsonPatchOperation": {
      "type": "object",
      "example": {
        "op": "replace",
        "path": "/buys/0/size",
        "value": "1234.5678"
      },
      "properties": {
        "op": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      },
      "title": "TODO: CI-1066 Move to shared location",
      "required": [
        "op",
        "path"
      ]
    },
    "coinbase.eng.prime.api.api.KeyboardShortcutsToggleUpdate": {
      "type": "object",
      "properties": {
        "keyboard_shortcuts_toggle": {
          "type": "boolean"
        }
      },
      "required": [
        "keyboard_shortcuts_toggle"
      ]
    },
    "coinbase.eng.prime.api.api.LadderIcebergToggleUpdate": {
      "type": "object",
      "properties": {
        "ladder_iceberg_toggle": {
          "type": "boolean"
        }
      },
      "required": [
        "ladder_iceberg_toggle"
      ]
    },
    "coinbase.eng.prime.api.api.LadderLevelDoubleclickOrderingUpdate": {
      "type": "object",
      "properties": {
        "ladder_level_doubleclick_ordering": {
          "type": "boolean"
        }
      },
      "required": [
        "ladder_level_doubleclick_ordering"
      ]
    },
    "coinbase.eng.prime.api.api.LimitLimitGtc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "display_quote_size": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.LimitLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "display_quote_size": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.LimitOffsetPaginatedRequest": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "coinbase.eng.prime.api.api.LimitOffsetPaginatedResponse": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "result_count": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "limit",
        "offset"
      ]
    },
    "coinbase.eng.prime.api.api.ListAPIKeysResponse": {
      "type": "object",
      "properties": {
        "api_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.apikey.api.APIKey"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PaginatedResponse"
        }
      },
      "required": [
        "api_keys",
        "pagination"
      ]
    },
    "coinbase.eng.prime.api.api.ListActiveValidatorsResponse": {
      "type": "object",
      "properties": {
        "validators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.ActiveValidator"
          }
        }
      },
      "required": [
        "validators"
      ]
    },
    "coinbase.eng.prime.api.api.ListBulkPoliciesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.ListPolicyResponseItem"
          }
        }
      },
      "required": [
        "items"
      ]
    },
    "coinbase.eng.prime.api.api.ListDeviceGroupsResponse": {
      "type": "object",
      "properties": {
        "device_groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.DeviceGroup"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.ListLevel": {
      "type": "string",
      "enum": [
        "LIST_LEVEL_UNSPECIFIED",
        "LIST_LEVEL_PORTFOLIO",
        "LIST_LEVEL_ENTITY",
        "LIST_LEVEL_ORGANIZATION"
      ],
      "default": "LIST_LEVEL_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.ListPaymentMethodsResponse": {
      "type": "object",
      "properties": {
        "payment_methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.PaymentMethodSummary"
          }
        }
      },
      "required": [
        "payment_methods"
      ]
    },
    "coinbase.eng.prime.api.api.ListPolicyResponseItem": {
      "type": "object",
      "properties": {
        "hierarchy": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Hierarchy"
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eng.prime.policy.api.Policy"
          }
        },
        "approver_count": {
          "type": "integer",
          "format": "int32"
        },
        "video_approver_count": {
          "type": "integer",
          "format": "int32"
        },
        "web3_signer_count": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "hierarchy",
        "policies",
        "approver_count",
        "video_approver_count"
      ]
    },
    "coinbase.eng.prime.api.api.ListPortfolioConciseUsersResponse": {
      "type": "object",
      "properties": {
        "users_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserInformation"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PaginatedResponse"
        }
      },
      "required": [
        "users_info",
        "pagination"
      ]
    },
    "coinbase.eng.prime.api.api.ListPortfolioUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.User"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PaginatedResponse"
        }
      },
      "required": [
        "users",
        "pagination"
      ]
    },
    "coinbase.eng.prime.api.api.ListReportingCenterDataResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.reporting.api.reporting_center.ReportingCenterData"
          }
        },
        "last_cursor": {
          "type": "string"
        },
        "result_count": {
          "type": "string",
          "format": "int64"
        }
      },
      "required": [
        "data"
      ]
    },
    "coinbase.eng.prime.api.api.ListSignerIdsForActivityResponse": {
      "type": "object",
      "properties": {
        "signerIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.ListTradingWalletCryptoDepositAddressesResponse": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.CryptoDepositAddress"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PaginatedResponse"
        }
      },
      "required": [
        "addresses",
        "pagination"
      ]
    },
    "coinbase.eng.prime.api.api.ListUserInvitationResponse": {
      "type": "object",
      "properties": {
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Invitation"
          }
        }
      },
      "required": [
        "invitations"
      ]
    },
    "coinbase.eng.prime.api.api.ListWalletTokensResponse": {
      "type": "object",
      "properties": {
        "tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Token"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.ListWalletsResponse": {
      "type": "object",
      "properties": {
        "wallets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Wallet"
          }
        },
        "tradable_wallets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Wallet"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PaginatedResponse"
        }
      },
      "required": [
        "wallets",
        "pagination",
        "tradable_wallets"
      ]
    },
    "coinbase.eng.prime.api.api.ListWalletsV2Request.SortBy": {
      "type": "string",
      "enum": [
        "LIST_WALLETS_SORT_BY_UNSPECIFIED",
        "LIST_WALLETS_SORT_BY_CREATED_AT",
        "LIST_WALLETS_SORT_BY_BALANCE"
      ],
      "default": "LIST_WALLETS_SORT_BY_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.ListWalletsV2Response": {
      "type": "object",
      "properties": {
        "wallets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.WalletV2"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PaginatedResponse"
        },
        "total_result_count": {
          "type": "string",
          "format": "int64"
        }
      },
      "required": [
        "wallets",
        "pagination"
      ]
    },
    "coinbase.eng.prime.api.api.ListWeb3SecurityKeysResponse": {
      "type": "object",
      "properties": {
        "web3_security_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3SecurityKey"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.LlcRolloutResponse": {
      "type": "object",
      "properties": {
        "percent": {
          "type": "string",
          "format": "int64"
        }
      },
      "required": [
        "percent"
      ]
    },
    "coinbase.eng.prime.api.api.LoginUser": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "second_factor": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SecondFactor"
        }
      },
      "required": [
        "second_factor"
      ]
    },
    "coinbase.eng.prime.api.api.Macd": {
      "type": "object",
      "properties": {
        "fast_period": {
          "type": "string"
        },
        "slow_period": {
          "type": "string"
        },
        "signal_period": {
          "type": "string"
        }
      },
      "required": [
        "fast_period",
        "slow_period",
        "signal_period"
      ]
    },
    "coinbase.eng.prime.api.api.MarginCallHistoryRecord": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "margin_call_amount_notional": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "status": {
          "$ref": "#/definitions/coinbase.financing.MarginCallStatus"
        },
        "due_at": {
          "type": "string",
          "format": "date-time"
        },
        "margin_call_id": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.MarginSummary": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "margin_equity": {
          "$ref": "#/definitions/coinbase.financing.Amount",
          "title": "total equity value across all portfolios (USD)"
        },
        "margin_requirement": {
          "$ref": "#/definitions/coinbase.financing.Amount",
          "title": "required equity value across all portfolios (USD)"
        },
        "excess_deficit": {
          "$ref": "#/definitions/coinbase.financing.Amount",
          "title": "calculated from held_equity - required_equity"
        },
        "tf_credit_limit": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "tf_credit_consumed": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "tf_adjusted_credit_consumed": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "margin_call_records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.MarginCallHistoryRecord"
          }
        },
        "tf_loans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.LoanInfo"
          }
        },
        "asset_balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.PortfolioAsset"
          }
        },
        "gross_market_value": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "net_market_value": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "long_market_value": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "non_marginable_long_market_value": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "short_market_value": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "gross_leverage": {
          "type": "string"
        },
        "net_exposure": {
          "type": "string"
        },
        "portfolio_stress_triggered": {
          "$ref": "#/definitions/coinbase.financing.MarginAddOn"
        },
        "all_margin_add_ons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.MarginAddOn"
          }
        },
        "pm_asset_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.PMAssetInfo"
          }
        },
        "tf_asset_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.TFAssetInfo"
          }
        },
        "short_collateral_balance": {
          "type": "string"
        },
        "cash_value": {
          "type": "string"
        },
        "total_settlement_due": {
          "type": "string"
        },
        "total_settlement_past_due": {
          "type": "string"
        },
        "total_settlement_due_next": {
          "type": "string"
        },
        "asset_long_short_positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.AssetLongShortPosition"
          }
        }
      },
      "title": "Subset of fields in financing.MarginInformation"
    },
    "coinbase.eng.prime.api.api.MarginSummaryContext": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "CREDIT_USAGE"
      ],
      "default": "UNSPECIFIED",
      "title": "used to query for subset of MarginSummary data"
    },
    "coinbase.eng.prime.api.api.MarketMarketIoc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.MatchTransferActivityDetails": {
      "type": "object",
      "properties": {
        "match_transfer_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.MatchTransferDetail"
          }
        },
        "reference_id": {
          "type": "string"
        },
        "settle_at": {
          "type": "string"
        },
        "trade_date": {
          "type": "string"
        },
        "human_id": {
          "type": "string"
        }
      },
      "required": [
        "match_transfer_details"
      ]
    },
    "coinbase.eng.prime.api.api.MatchTransferDetail": {
      "type": "object",
      "properties": {
        "source_ctn_id": {
          "type": "string"
        },
        "destination_ctn_id": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "notional_usd_amount": {
          "type": "string"
        },
        "source_wallet_name": {
          "type": "string"
        },
        "destination_wallet_name": {
          "type": "string"
        },
        "human_id": {
          "type": "string"
        }
      },
      "required": [
        "source_ctn_id",
        "destination_ctn_id",
        "amount",
        "currency",
        "notional_usd_amount"
      ]
    },
    "coinbase.eng.prime.api.api.MovingAverage": {
      "type": "object",
      "properties": {
        "period": {
          "type": "string"
        },
        "offset": {
          "type": "string"
        },
        "field": {
          "type": "string"
        }
      },
      "required": [
        "period",
        "offset",
        "field"
      ]
    },
    "coinbase.eng.prime.api.api.NetworkFamily": {
      "type": "string",
      "enum": [
        "NETWORK_FAMILY_UNKNOWN",
        "NETWORK_FAMILY_EVM"
      ],
      "default": "NETWORK_FAMILY_UNKNOWN"
    },
    "coinbase.eng.prime.api.api.NewConsensusActivityResponse": {
      "type": "object",
      "properties": {
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        },
        "completed_evaluation": {
          "$ref": "#/definitions/coinbase.custody.api.CompletedEvaluation"
        }
      },
      "required": [
        "activity_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.OrderCancelConfirmationWindowToggleUpdate": {
      "type": "object",
      "properties": {
        "order_cancel_confirmation_window_toggle": {
          "type": "boolean"
        }
      },
      "required": [
        "order_cancel_confirmation_window_toggle"
      ]
    },
    "coinbase.eng.prime.api.api.OrderConfiguration": {
      "type": "object",
      "properties": {
        "market_market_ioc": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.MarketMarketIoc"
        },
        "sor_limit_ioc": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SorLimitIoc"
        },
        "limit_limit_gtc": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.LimitLimitGtc"
        },
        "limit_limit_gtd": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.LimitLimitGtd"
        },
        "twap_limit_gtd": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.TwapLimitGtd"
        },
        "vwap_limit_gtd": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.VwapLimitGtd"
        },
        "sor_limit_fok": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SorLimitFok"
        },
        "trigger_stop_limit_gtc": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.TriggerStopLimitGtc"
        },
        "trigger_stop_limit_gtd": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.TriggerStopLimitGtd"
        }
      }
    },
    "coinbase.eng.prime.api.api.OrderConfirmationWindowToggleUpdate": {
      "type": "object",
      "properties": {
        "order_confirmation_window_toggle": {
          "type": "boolean"
        }
      },
      "required": [
        "order_confirmation_window_toggle"
      ]
    },
    "coinbase.eng.prime.api.api.OrderFormPersistToggleUpdate": {
      "type": "object",
      "properties": {
        "order_form_persist_toggle": {
          "type": "boolean"
        }
      },
      "required": [
        "order_form_persist_toggle"
      ]
    },
    "coinbase.eng.prime.api.api.OrderFormSizeWarningsToggleUpdate": {
      "type": "object",
      "properties": {
        "order_form_size_warnings_toggle": {
          "type": "boolean"
        }
      },
      "required": [
        "order_form_size_warnings_toggle"
      ]
    },
    "coinbase.eng.prime.api.api.OrderPreviewResponseBody": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "string"
        },
        "side": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderSide"
        },
        "order_configuration": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderConfiguration"
        },
        "commission_total": {
          "type": "string"
        },
        "order_total": {
          "type": "string"
        },
        "errs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.PreviewFailureReason"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.WarningMsg"
          }
        },
        "base_size": {
          "type": "string"
        },
        "quote_size": {
          "type": "string"
        },
        "best_bid": {
          "type": "string"
        },
        "best_ask": {
          "type": "string"
        },
        "average_filled_price": {
          "type": "string"
        },
        "slippage": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.OrderRaiseExactToggleUpdate": {
      "type": "object",
      "properties": {
        "order_raise_exact_toggle": {
          "type": "boolean"
        }
      },
      "required": [
        "order_raise_exact_toggle"
      ]
    },
    "coinbase.eng.prime.api.api.OrderSide": {
      "type": "string",
      "enum": [
        "UNKNOWN_ORDER_SIDE",
        "BUY",
        "SELL"
      ],
      "default": "UNKNOWN_ORDER_SIDE"
    },
    "coinbase.eng.prime.api.api.OrderTableColumn": {
      "type": "object",
      "properties": {
        "uniqueKey": {
          "type": "string",
          "description": "Unique name of the column."
        },
        "sticky": {
          "type": "boolean",
          "description": "If true, the column will bisplay sticky"
        },
        "hidden": {
          "type": "boolean",
          "description": "If true, the column will bisplay hidden"
        }
      },
      "required": [
        "uniqueKey",
        "sticky",
        "hidden"
      ]
    },
    "coinbase.eng.prime.api.api.OrderTableColumnUpdate": {
      "type": "object",
      "properties": {
        "order_table_columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderTableColumn"
          }
        }
      },
      "required": [
        ""
      ]
    },
    "coinbase.eng.prime.api.api.OrganizationDomicileCategory": {
      "type": "string",
      "enum": [
        "ORGANIZATION_DOMICILE_CATEGORY_UNSPECIFIED",
        "ORGANIZATION_DOMICILE_CATEGORY_US_US",
        "ORGANIZATION_DOMICILE_CATEGORY_INTL_INTL",
        "ORGANIZATION_DOMICILE_CATEGORY_INTL_US",
        "ORGANIZATION_DOMICILE_CATEGORY_UNCATEGORIZED"
      ],
      "default": "ORGANIZATION_DOMICILE_CATEGORY_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.PMAssetInfo": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string"
        },
        "balance": {
          "type": "string"
        },
        "market_value": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "market_price": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "base_requirement": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "total_long": {
          "type": "string"
        },
        "total_short": {
          "type": "string"
        },
        "margin_requirement": {
          "type": "string"
        },
        "adv_30d": {
          "type": "string"
        },
        "vol_5d": {
          "type": "string"
        },
        "vol_30d": {
          "type": "string"
        },
        "vol_90d": {
          "type": "string"
        },
        "margin_eligible": {
          "type": "boolean"
        },
        "liquidity_addon": {
          "type": "string"
        },
        "volatility_addon": {
          "type": "string"
        },
        "total_position_margin": {
          "type": "string"
        },
        "asset_tier": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.PaginatedResponse": {
      "type": "object",
      "properties": {
        "next_cursor": {
          "type": "string"
        },
        "sort_direction": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SortDirection"
        },
        "result_count": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "next_cursor",
        "sort_direction",
        "result_count"
      ]
    },
    "coinbase.eng.prime.api.api.PendingConsensusItem": {
      "type": "object",
      "properties": {
        "hierarchy": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Hierarchy"
        },
        "reference_type": {
          "type": "string"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "hierarchy",
        "reference_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.Permission": {
      "type": "string",
      "enum": [
        "PERMISSION_UNKNOWN",
        "PERMISSION_READ",
        "PERMISSION_INITIATE",
        "PERMISSION_REVIEW",
        "PERMISSION_TRADE",
        "PERMISSION_ADMIN",
        "PERMISSION_ANALYTICS_DOWNLOAD_CHART_CSV_FEATURE_FLAG",
        "PERMISSION_TRADE_EMAILS_FEATURE_FLAG",
        "PERMISSION_USE_PRIME_ASSETS_DB",
        "PERMISSION_PROXY_BALANCES_VALIDATION_FEATURE_FLAG",
        "PERMISSION_SHOW_ETH_IN_PST_TRADE_CREDIT_PORTFOLIOS",
        "PERMISSION_ALLOCATIONS_FEATURE_FLAG",
        "PERMISSION_IN_APP_NOTIFICATIONS_FEATURE_FLAG",
        "PERMISSION_INTERACTIVE_BLOTTER_FEATURE_FLAG",
        "PERMISSION_SHOW_COST_PLUS_FEES_FEATURE_FLAG",
        "PERMISSION_ICEBERG_ORDER_SUBMIT_FEATURE_FLAG",
        "PERMISSION_CAN_HAVE_COST_PLUS_COMMISSION_CONFIG_FEATURE_FLAG",
        "PERMISSION_VIEW_FRONTIER_STYLES_FEATURE_FLAG",
        "PERMISSION_USE_GQL_DATA_LAYER_FEATURE_FLAG",
        "PERMISSION_MULTIPLE_DEPOSIT_ADDRESSES_FEATURE_FLAG",
        "PERMISSION_CROSS_ORG_ALLOCATIONS_FEATURE_FLAG",
        "PERMISSION_USE_V2_MODAL_ENDPOINTS_FEATURE_FLAG",
        "PERMISSION_CAN_SEE_FEE_ADJUSTED_AVG_PRICE_ON_EMAIL_FEATURE_FLAG",
        "PERMISSION_SIDE_NAV_FEATURE_FLAG",
        "PERMISSION_GRAPH_QL_SETTINGS_PAGE_FEATURE_FLAG",
        "PERMISSION_CAN_ALLOCATE_OVER_72_HOURS_FLAG",
        "PERMISSION_CAN_DOWNLOAD_ORDER_FILLS_FEATURE_FLAG",
        "PERMISSION_GRAPHQL_SUBSCRIPTIONS_FEATURE_FLAG",
        "PERMISSION_CAN_VIEW_WEB3_WALLET_FEATURE_FLAG",
        "PERMISSION_CAN_VIEW_CONTENTFUL_IMAGES_FEATURE_FLAG",
        "PERMISSION_USE_V2_GET_CHART_DATA_FEATURE_FLAG",
        "PERMISSION_USE_PORTFOLIO_SETTLEMENT_REDESIGN",
        "PERMISSION_USE_GEOLOCATION_RESTRICTIONS",
        "PERMISSION_ENABLE_LSETH_STAKING_UI_FEATURE_FLAG",
        "PERMISSION_CAN_VIEW_CES_FEE_FEATURE_FLAG",
        "PERMISSION_CAN_VIEW_PRIME_ORDER_PERSISTENCE_FEATURE_FLAG",
        "PERMISSION_CAN_USE_CUSTODY_WARM_WALLETS_FEATURE_FLAG",
        "PERMISSION_USE_CORE_KMS_FEATURE_FLAG",
        "PERMISSION_CAN_USE_PRIME_CONSENSUS_FEATURE_FLAG",
        "PERMISSION_DISPLAY_FIAT_DEPOSIT_WARNING",
        "PERMISSION_CAN_VIEW_REPORTING_CENTER_FEATURE_FLAG",
        "PERMISSION_CAN_HAVE_CES_FEE_FEATURE_FLAG",
        "PERMISSION_USE_TWAP_VALIDATION_FEATURE_FLAG",
        "PERMISSION_CAN_DISPLAY_ALLOCATIONS_COMPLETION_TIME_FILTERS",
        "PERMISSION_CAN_VIEW_ENTITY_FORWARD_MILESTONE_ONE",
        "PERMISSION_USE_TWS_WALLETS_FEATURE_FLAG",
        "PERMISSION_CAN_VIEW_TRADING_UI_IMPROVEMENTS_FEATURE_FLAG",
        "PERMISSION_CAN_CREATE_DATETIME_CUSTOM_STATEMENTS_FEATURE_FLAG",
        "PERMISSION_CAN_VIEW_NOTIFICATION_PREFERENCES_SETTINGS_FEATURE_FLAG",
        "PERMISSION_CAN_USE_TRUNCATED_AMOUNT_COMPONENT_FEATURE_FLAG",
        "PERMISSION_USE_WEB3_EVALUATE_POLICY_FEATURE_FLAG",
        "PERMISSION_ENABLE_EARN_USDC_REWARDS_FEATURE_FLAG",
        "PERMISSION_CAN_VIEW_COMMISSION_RENAMED_TO_TOTAL_FEES_REPORT_FEATURE_FLAG",
        "PERMISSION_CAN_USE_CTN_FEATURE_FLAG",
        "PERMISSION_ENABLE_ETH2_UNSTAKING_UI_FEATURE_FLAG",
        "PERMISSION_CAN_VIEW_ENTITY_ACTIVITIES",
        "PERMISSION_CAN_USE_MULTIPLE_ROLES_FEATURE_FLAG",
        "PERMISSION_CAN_VIEW_VWAP_FEATURE_FLAG",
        "PERMISSION_USE_V2_WALLET_ENDPOINTS_FEATURE_FLAG",
        "PERMISSION_AAC_CAN_USE_PCS_FEATURE_FLAG",
        "PERMISSION_ENABLE_DYNAMIC_NONCE",
        "PERMISSION_USE_V2_WALLET_CREATION_FEATURE_FLAG",
        "PERMISSION_ENABLE_LSETH_UNSTAKING_UI_FEATURE_FLAG",
        "PERMISSION_CAN_USE_NEW_PTR_API",
        "PERMISSION_ENABLE_DAL_REPORTS_FEATURE_FLAG",
        "PERMISSION_CAN_USE_ENTITY_ROLES_FEATURE_FLAG",
        "PERMISSION_CAN_USE_PREVIEW_V2",
        "PERMISSION_ENABLE_AUTO_BILLING_FROM_TRADING_WALLET",
        "PERMISSION_USE_POLICY_ENGINE_M4_FLAG",
        "PERMISSION_CAN_VIEW_LOCATES_TAB",
        "PERMISSION_CAN_VIEW_TRADE_FINANCE_TAB",
        "PERMISSION_CAN_VIEW_PORTFOLIO_MARGIN_TAB",
        "PERMISSION_CAN_VIEW_FINANCING_DETAILS_PAGE",
        "PERMISSION_CAN_VIEW_VIRTUAL_PORTFOLIO_TABLE",
        "PERMISSION_CAN_USE_BULK_ACTION_ACTIVITIES",
        "PERMISSION_USE_ENHANCED_INACTIVITY_LOGOUT",
        "PERMISSION_CAN_VIEW_FINANCING_REPORTS",
        "PERMISSION_ENABLE_STAKING_REPORTS_FEATURE_FLAG",
        "PERMISSION_NET_ALLOCATIONS_FEATURE_FLAG",
        "PERMISSION_CAN_VIEW_HISTORICAL_POV",
        "PERMISSION_USE_SIMULTANEOUS_LOGOUT",
        "PERMISSION_ENABLE_ETH2_DEPRECATION_UI_FEATURE_FLAG",
        "PERMISSION_ENABLE_IOC_GTD_PARITY",
        "PERMISSION_CAN_VIEW_ENTITY_SETTINGS",
        "PERMISSION_CAN_USE_STOP_LIMIT",
        "PERMISSION_CAN_VIEW_WEB3_BALANCES",
        "PERMISSION_ENABLE_WALLET_ACTION_UI_FEATURE_FLAG",
        "PERMISSION_CAN_VIEW_WEB3_ASSET_BALANCES",
        "PERMISSION_VIDEO_APPROVE",
        "PERMISSION_WEB3_SIGN",
        "PERMISSION_ENABLE_ADVANCED_TRANFERS_FEATURE_FLAG",
        "PERMISSION_ENABLE_CBIT_FEATURE_FLAG",
        "PERMISSION_CAN_USE_PRICE_INCREMENT",
        "PERMISSION_CAN_VIEW_DAL_M3",
        "PERMISSION_ENABLE_POLICY_AUDIT",
        "PERMISSION_CAN_VIEW_ORGANIZATIONAL_LEVEL_TASKS",
        "PERMISSION_CAN_VIEW_STAKING_DISCOVERBILITY_PAGE",
        "PERMISSION_CAN_USE_FOK",
        "PERMISSION_CAN_VIEW_APP_SWITCHER",
        "PERMISSION_CAN_VIEW_WEB3_DEVICE_KEY_ACCESS",
        "PERMISSION_ENABLE_CTN_PHASE_3",
        "PERMISSION_CAN_VIEW_WEB3_INTERNAL_TRANSFER_OPTION",
        "PERMISSION_CAN_USE_AWAP_SECOND_PRECISION",
        "PERMISSION_CAN_VIEW_WEB3_REPORTS",
        "PERMISSION_CAN_USE_IDENTITY_NAVIGATION",
        "PERMISSION_KEY_EXPORT_ENABLED",
        "PERMISSION_CAN_VIEW_PRIME_BETA_TOGGLE",
        "PERMISSION_ENABLE_MOBILE_SESSION_MIGRATION",
        "PERMISSION_CAN_USE_ORG_NAV_MVP",
        "PERMISSION_CAN_USE_WEB3_OVERLAPPING_BACKUP"
      ],
      "default": "PERMISSION_UNKNOWN",
      "title": "- PERMISSION_READ: Role based permissions"
    },
    "coinbase.eng.prime.api.api.PinnedOrdersUpdate": {
      "type": "object",
      "properties": {
        "pinned_orders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of orderIds the user has pinned to the trade orders table"
        }
      },
      "required": [
        "pinned_orders"
      ]
    },
    "coinbase.eng.prime.api.api.Portfolio": {
      "type": "object",
      "properties": {
        "vehicle_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "allow_listing_enabled": {
          "type": "boolean",
          "description": "Security feature that requires that any external withdrawals are sent to an address in the address book.",
          "required": [
            "allow_listing_enabled"
          ]
        }
      },
      "required": [
        "id",
        "vehicle_id",
        "name",
        "allow_listing_enabled"
      ]
    },
    "coinbase.eng.prime.api.api.PortfolioFinancing": {
      "type": "object",
      "properties": {
        "post_trade_credit": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PostTradeCredit"
        },
        "credit_utilized": {
          "type": "string",
          "description": "How much credit is currently being used",
          "required": [
            "credit_utilized"
          ]
        },
        "credit_available": {
          "type": "string",
          "description": "How much credit is still available to be used",
          "required": [
            "credit_available"
          ]
        },
        "credit_currency": {
          "type": "string",
          "description": "The currency that the credit is expressed in",
          "required": [
            "credit_currency"
          ]
        },
        "is_frozen": {
          "type": "boolean",
          "description": "A boolean indicating whether or not the portfolios credit priviliges are frozen or not",
          "required": [
            "is_frozen"
          ]
        },
        "frozen_message": {
          "type": "string",
          "description": "An optional message explaining why the portfolios credit priviliges are frozen"
        },
        "credit_utilized_per_currency": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "How much credit is currently being used per currency"
        },
        "total_due": {
          "type": "string",
          "description": "Total amount due"
        },
        "open_orders": {
          "type": "string",
          "description": "Number of open orders"
        },
        "adjusted_credit_utilized": {
          "type": "string",
          "description": "How much credit is currently being used with CUF adjusted"
        },
        "adjusted_credit_available": {
          "type": "string",
          "description": "How much credit is still available to be used with CUF adjusted"
        },
        "adjusted_portfolio_equity": {
          "type": "string",
          "description": "How much equity does it have with CUF adjusted"
        },
        "is_entity_pm_enabled": {
          "type": "boolean",
          "description": "A boolean indicating whether or not entity is enabled for portfolio margin"
        },
        "is_portfolio_pm_enabled": {
          "type": "boolean",
          "description": "A boolean indicating whether or not portfolio is enabled for portfolio margin"
        }
      },
      "required": [
        "post_trade_credit",
        "credit_utilized",
        "credit_available",
        "credit_currencyis_frozen"
      ]
    },
    "coinbase.eng.prime.api.api.PortfolioFinancingProduct": {
      "type": "object",
      "properties": {
        "base_buying_power": {
          "type": "string",
          "description": "Total amount of buying power for the base currency.",
          "required": [
            "base_buying_power"
          ]
        },
        "quote_buying_power": {
          "type": "string",
          "description": "Total amount of buying power for the quote currency.",
          "required": [
            "quote_buying_power"
          ]
        },
        "base_available_balance": {
          "type": "string",
          "description": "Available balance for the base currency",
          "required": [
            "base_available_balance"
          ]
        },
        "quote_available_balance": {
          "type": "string",
          "description": "Available balance for the quote currency",
          "required": [
            "quote_available_balance"
          ]
        },
        "base_borrow_power": {
          "type": "string",
          "description": "Available credit denoted in the base currency"
        },
        "quote_borrow_power": {
          "type": "string",
          "description": "Available credit denoted in the quote currency"
        },
        "base_currency": {
          "type": "string",
          "description": "What the base currency is (e.g USD, BTC)",
          "required": [
            "base_currency"
          ]
        },
        "quote_currency": {
          "type": "string",
          "description": "What the quote currency is (e.g USD, BTC)",
          "required": [
            "quote_currency"
          ]
        },
        "base_credit_eligibility": {
          "type": "boolean",
          "description": "Is the base currency is eligible for credit in this trading pair",
          "required": [
            "base_credit_eligibility"
          ]
        },
        "quote_credit_eligibility": {
          "type": "boolean",
          "description": "Is the quote currency is eligible for credit in this trading pair",
          "required": [
            "quote_credit_eligibility"
          ]
        }
      },
      "required": [
        "base_buying_power",
        "quote_buying_power",
        "base_available_balance",
        "quote_available_balance",
        "base_currency",
        "quote_currency"
      ]
    },
    "coinbase.eng.prime.api.api.PortfolioFinancingProductStreamBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PortfolioFinancingProduct"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Heartbeat"
        }
      }
    },
    "coinbase.eng.prime.api.api.PortfolioFinancingProductStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PortfolioFinancingProductStreamBody"
        }
      }
    },
    "coinbase.eng.prime.api.api.PortfolioFinancingStreamBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PortfolioFinancing"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Heartbeat"
        }
      }
    },
    "coinbase.eng.prime.api.api.PortfolioFinancingStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PortfolioFinancingStreamBody"
        }
      }
    },
    "coinbase.eng.prime.api.api.PortfolioInfo": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "portfolio_name": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.PostAddressBookEntryRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Crypto address to add",
          "required": [
            "address"
          ]
        },
        "currency_symbol": {
          "type": "string",
          "description": "Crypto symbol of address to add",
          "required": [
            "currency_symbol"
          ]
        },
        "name": {
          "type": "string",
          "description": "Name of address book entry",
          "required": [
            "name"
          ]
        },
        "account_identifier": {
          "type": "string",
          "description": "Account Identifier (memo/destination tag)",
          "required": [
            "account_identifier"
          ]
        },
        "portfolio_id": {
          "type": "string",
          "description": "Portfolio id",
          "required": [
            "portfolio_id"
          ]
        },
        "counterparty_id": {
          "type": "string",
          "description": "counterparty id"
        },
        "type": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AddressBookType",
          "description": "Type of address book entry"
        }
      },
      "required": [
        "name",
        "portfolio_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostAddressBookEntryResponse": {
      "type": "object",
      "properties": {
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType",
          "description": "Activity Type of change request"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32",
          "description": "Number of approvals remaining for the change request"
        },
        "activity_id": {
          "type": "string",
          "description": "Activity ID of change request"
        }
      },
      "required": [
        "activity_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostAllocationPreviewRequest": {
      "type": "object",
      "properties": {
        "source_portfolio_id": {
          "type": "string",
          "description": "The ID of the source portfolio id",
          "required": [
            "source_portfolio_id"
          ]
        },
        "order_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of the order ids",
          "required": [
            "order_ids"
          ]
        },
        "size_type": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PreviewSizeType",
          "description": "User request for the size type",
          "required": [
            "size_type"
          ]
        },
        "divide_evenly": {
          "type": "boolean",
          "description": "Boolean for divide evenly should be false unless user clicks divide evenly",
          "required": [
            "divide_evenly"
          ]
        },
        "amount_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.AmountField"
          },
          "description": "An array for the amount fields",
          "required": [
            "amount_fields"
          ]
        },
        "product_id": {
          "type": "string",
          "description": "The product id of the call field",
          "required": [
            "product_id"
          ]
        },
        "remainder_destination_portfolio_id": {
          "type": "string",
          "description": "Optional destination portfolio to assign remainder to"
        }
      },
      "required": [
        "source_portfolio_id",
        "user_id",
        "order_ids",
        "size_type",
        "divide_evenly",
        "amount_fields",
        "source_base_account_buying_power",
        "source_quote_account_buying_power",
        "product_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostAllocationPreviewResponse": {
      "type": "object",
      "properties": {
        "source_portfolio_id": {
          "type": "string",
          "description": "The source portfolio id for the allocation preview",
          "required": [
            "source_portfolio_id"
          ]
        },
        "base_order_total": {
          "type": "string",
          "description": "The base order total the orders selected",
          "required": [
            "base_order_total"
          ]
        },
        "quote_order_total": {
          "type": "string",
          "description": "The quote order total the orders selected",
          "required": [
            "quote_order_total"
          ]
        },
        "order_avg_price": {
          "type": "string",
          "description": "The average price for the orders selected",
          "required": [
            "order_avg_price"
          ]
        },
        "total_commission": {
          "type": "string",
          "description": "The total commission for the orders selected",
          "required": [
            "total_commission"
          ]
        },
        "remainder": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AllocationAmount",
          "description": "The remainder amount values for the allocations",
          "required": [
            "remainder"
          ]
        },
        "allocation_legs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.AllocationPreviewLeg"
          },
          "description": "The amount fields for the allocation preview",
          "required": [
            "allocation_legs"
          ]
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.PreviewAllocationFailureReason"
          },
          "description": "The allocation error values on response"
        }
      },
      "required": [
        "source_portfolio_id",
        "base_order_total",
        "quote_order_total",
        "order_avg_price",
        "total_commission",
        "remainder",
        "allocation_legs"
      ]
    },
    "coinbase.eng.prime.api.api.PostAllocationRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string",
          "description": "The ID of the portfolio of the allocation",
          "required": [
            "portfolio_id"
          ]
        },
        "allocation_id": {
          "type": "string",
          "description": "The ID of the allocation",
          "required": [
            "allocation_id"
          ]
        },
        "source_portfolio_id": {
          "type": "string",
          "description": "The source portfolio id for the allocation"
        },
        "product_id": {
          "type": "string",
          "description": "The side for the allocation"
        },
        "side": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderSide",
          "description": "The order side for the allocation (BUY / SELL)"
        },
        "base_size": {
          "type": "string",
          "description": "The total base size for the allocation"
        },
        "quote_size": {
          "type": "string",
          "description": "The total quote size for the allocation"
        },
        "commission": {
          "type": "string",
          "description": "The total commission for the allocation"
        },
        "order_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of order ids in the allocation"
        },
        "allocation_legs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.AllocationLeg"
          },
          "description": "The list of allocation_legs for the allocation"
        },
        "client_netting_id": {
          "type": "string",
          "description": "The user id of the net allocation"
        }
      },
      "required": [
        "portfolio_id",
        "allocation_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostAllocationResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PostAllocationResponseBody"
        }
      }
    },
    "coinbase.eng.prime.api.api.PostAllocationResponseBody": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "The success boolean for the post allocation",
          "required": [
            "success"
          ]
        },
        "allocation_id": {
          "type": "string",
          "description": "The allocation id for the post allocation",
          "required": [
            "allocation_id"
          ]
        }
      },
      "required": [
        "success",
        "allocation_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostApprovePortfolioActivityRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "activity_id": {
          "type": "string"
        },
        "platform": {
          "$ref": "#/definitions/coinbase.custody.api.ApprovalPlatform"
        }
      },
      "required": [
        "portfolio_id",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostApprovePortfolioActivityResponse": {
      "type": "object",
      "properties": {
        "activity": {
          "$ref": "#/definitions/coinbase.custody.api.Activity",
          "description": "@deprecated Audit Item activity used for consensus information"
        },
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "activity",
        "activity_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostApproveVehicleActivityRequest": {
      "type": "object",
      "properties": {
        "vehicle_id": {
          "type": "string"
        },
        "activity_id": {
          "type": "string"
        },
        "platform": {
          "$ref": "#/definitions/coinbase.custody.api.ApprovalPlatform"
        }
      },
      "title": "Approve",
      "required": [
        "vehicle_id",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostApproveVehicleActivityResponse": {
      "type": "object",
      "properties": {
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "activity_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostBulkActionActivitiesRequest": {
      "type": "object",
      "properties": {
        "activity_action_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.ActivityActionId"
          }
        },
        "platform": {
          "$ref": "#/definitions/coinbase.custody.api.ApprovalPlatform"
        }
      },
      "required": [
        "activity_action_ids"
      ]
    },
    "coinbase.eng.prime.api.api.PostBulkActionActivitiesResponse": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.PostBulkActionActivityResponse"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.PostBulkActionActivityError": {
      "type": "object",
      "properties": {
        "activity_id": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      },
      "required": [
        "activity_id",
        "error"
      ]
    },
    "coinbase.eng.prime.api.api.PostBulkActionActivityResponse": {
      "type": "object",
      "properties": {
        "success_activity": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PostBulkActionActivitySuccess"
        },
        "error_activity": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PostBulkActionActivityError"
        }
      }
    },
    "coinbase.eng.prime.api.api.PostBulkActionActivitySuccess": {
      "type": "object",
      "properties": {
        "activity_id": {
          "type": "string"
        },
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "activity_id",
        "activity_type",
        "num_approvals_remaining"
      ]
    },
    "coinbase.eng.prime.api.api.PostBulkActionSettingsRequest": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "is_enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "entity_id",
        "is_enabled"
      ]
    },
    "coinbase.eng.prime.api.api.PostBulkActionSettingsResponse": {
      "type": "object",
      "properties": {
        "activity_id": {
          "type": "string"
        },
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "activity"
      ]
    },
    "coinbase.eng.prime.api.api.PostBulkUserInvitationRequest": {
      "type": "object",
      "properties": {
        "invites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.UserInvite"
          }
        },
        "email": {
          "type": "string"
        }
      },
      "required": [
        "invites"
      ]
    },
    "coinbase.eng.prime.api.api.PostBulkUserInvitationResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.UserInvitationResponseItem"
          }
        }
      },
      "required": [
        "items"
      ]
    },
    "coinbase.eng.prime.api.api.PostCancelOrderRequest": {
      "type": "object",
      "properties": {
        "order_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "portfolio_id": {
          "type": "string"
        }
      },
      "required": [
        "order_ids",
        "portfolio_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostCancelOrderResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PostCancelOrderResponseBody"
        }
      }
    },
    "coinbase.eng.prime.api.api.PostCancelOrderResponseBody": {
      "type": "object",
      "properties": {
        "cancel_result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.CancelOrderResult"
          }
        },
        "next_cursor": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.PostDelegationAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/coinbase.custody.api.MacbethAccount"
        }
      },
      "required": [
        "account"
      ]
    },
    "coinbase.eng.prime.api.api.PostDocumentSignatureRequest": {
      "type": "object",
      "properties": {
        "vehicle_id": {
          "type": "string"
        },
        "document_key": {
          "$ref": "#/definitions/coinbase.custody.api.DocumentType"
        }
      },
      "required": [
        "vehicle_id",
        "document_key"
      ]
    },
    "coinbase.eng.prime.api.api.PostDocumentSignatureResponse": {
      "type": "object",
      "properties": {
        "signature": {
          "$ref": "#/definitions/coinbase.custody.api.DocumentSignature"
        }
      },
      "required": [
        "signature"
      ]
    },
    "coinbase.eng.prime.api.api.PostEntitySettingsRequest": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "key": {
          "$ref": "#/definitions/coinbase.custody.api.SettingsKey"
        },
        "value_to": {
          "$ref": "#/definitions/coinbase.custody.api.SettingsValue"
        }
      },
      "required": [
        "key",
        "value_to",
        "entity_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostEntitySettingsResponse": {
      "type": "object",
      "properties": {
        "setting": {
          "$ref": "#/definitions/coinbase.custody.api.Settings"
        },
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "setting",
        "activity_type",
        "num_approvals_remaining"
      ]
    },
    "coinbase.eng.prime.api.api.PostFidoChallengeCreateResponse": {
      "type": "object",
      "properties": {
        "challenge": {
          "type": "string",
          "format": "byte"
        },
        "rp_id": {
          "type": "string"
        },
        "allow_credentials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.PublicKeyCredentialDescriptor"
          }
        },
        "user_verification": {
          "type": "string"
        },
        "extensions": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AuthenticationExtensionsClientInputs"
        }
      },
      "description": "Follows PublicKeyCredentialRequestOptions:\nhttps://www.w3.org/TR/webauthn/#dictdef-publickeycredentialrequestoptions\nThe timeout is left for the client to control.",
      "required": [
        "challenge",
        "rp_id",
        "user_verification"
      ]
    },
    "coinbase.eng.prime.api.api.PostFidoChallengeRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User UUID."
        },
        "id": {
          "type": "string",
          "format": "byte"
        },
        "client_data_json": {
          "type": "string",
          "format": "byte",
          "title": "JSON serialized to bytes:\nhttps://infra.spec.whatwg.org/#serialize-json-to-bytes"
        },
        "authenticator_data": {
          "type": "string",
          "format": "byte"
        },
        "signature": {
          "type": "string",
          "format": "byte"
        },
        "user_handle": {
          "type": "string",
          "format": "byte"
        },
        "extension_results": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AuthenticationExtensionsClientOutputs"
        }
      },
      "title": "Follows PublicKeyCredential, flattens AuthenticatorResponse which in this\ncase is AuthenticatorAssertionResponse.\nhttps://www.w3.org/TR/webauthn/#publickeycredential"
    },
    "coinbase.eng.prime.api.api.PostFidoChallengeResponse": {
      "type": "object",
      "properties": {
        "second_factor_proof_token": {
          "type": "string"
        }
      },
      "required": [
        "second_factor_proof_token"
      ]
    },
    "coinbase.eng.prime.api.api.PostFidoRegistrationRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User UUID."
        },
        "device_name": {
          "type": "string",
          "description": "The user entered device name."
        },
        "id": {
          "type": "string",
          "format": "byte"
        },
        "client_data_json": {
          "type": "string",
          "format": "byte",
          "title": "JSON serialized to bytes:\nhttps://infra.spec.whatwg.org/#serialize-json-to-bytes"
        },
        "attestation_object": {
          "type": "string",
          "format": "byte"
        },
        "extension_results": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AuthenticationExtensionsClientOutputs"
        }
      },
      "title": "Follows PublicKeyCredential, flattens AuthenticatorResponse which in this\ncase is AuthenticatorAttestationResponse.\nhttps://www.w3.org/TR/webauthn/#publickeycredential"
    },
    "coinbase.eng.prime.api.api.PostFidoRegistrationResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Device",
          "description": "The newly registered device."
        }
      }
    },
    "coinbase.eng.prime.api.api.PostGovernanceStatusRequest": {
      "type": "object",
      "properties": {
        "wallet_id": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "portfolio_id",
        "wallet_id",
        "enabled"
      ]
    },
    "coinbase.eng.prime.api.api.PostGovernanceStatusResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PostGovernanceStatusResponseBody"
        }
      },
      "required": [
        "body"
      ]
    },
    "coinbase.eng.prime.api.api.PostGovernanceStatusResponseBody": {
      "type": "object",
      "properties": {
        "contract": {
          "$ref": "#/definitions/coinbase.custody.api.SmartContract"
        },
        "release": {
          "$ref": "#/definitions/coinbase.custody.api.SmartContractRelease"
        }
      }
    },
    "coinbase.eng.prime.api.api.PostGovernanceVoteRequest": {
      "type": "object",
      "properties": {
        "wallet_id": {
          "type": "string"
        },
        "proposal_id": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        }
      },
      "required": [
        "wallet_id",
        "proposal_id",
        "portfolio_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostGovernanceVoteResponse": {
      "type": "object",
      "properties": {
        "activity": {
          "$ref": "#/definitions/coinbase.custody.api.Activity",
          "description": "@deprecated Audit Item activity used for consensus information"
        },
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "activity",
        "activity_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostNetAllocationPreviewRequest": {
      "type": "object",
      "properties": {
        "source_portfolio_id": {
          "type": "string",
          "description": "The ID of the source portfolio id",
          "required": [
            "source_portfolio_id"
          ]
        },
        "order_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of the order ids",
          "required": [
            "order_ids"
          ]
        },
        "size_type": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PreviewSizeType",
          "description": "User request for the size type",
          "required": [
            "size_type"
          ]
        },
        "divide_evenly": {
          "type": "boolean",
          "description": "Boolean for divide evenly should be false unless user clicks divide evenly",
          "required": [
            "divide_evenly"
          ]
        },
        "amount_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.AmountField"
          },
          "description": "An array for the amount fields",
          "required": [
            "amount_fields"
          ]
        },
        "product_id": {
          "type": "string",
          "description": "The product id of the call field",
          "required": [
            "product_id"
          ]
        },
        "remainder_destination_portfolio_id": {
          "type": "string",
          "description": "Optional destination portfolio to assign remainder to"
        }
      },
      "required": [
        "source_portfolio_id",
        "user_id",
        "order_ids",
        "size_type",
        "divide_evenly",
        "amount_fields",
        "source_base_account_buying_power",
        "source_quote_account_buying_power",
        "product_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostNetAllocationPreviewResponse": {
      "type": "object",
      "properties": {
        "source_portfolio_id": {
          "type": "string",
          "description": "The source portfolio id for the net allocation preview",
          "required": [
            "source_portfolio_id"
          ]
        },
        "buy_order_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The buy order ids for the net allocation preview",
          "required": [
            "buy_order_ids"
          ]
        },
        "base_order_buy_total": {
          "type": "string",
          "description": "The base order total the buy orders selected",
          "required": [
            "base_order_buy_total"
          ]
        },
        "quote_order_buy_total": {
          "type": "string",
          "description": "The quote order total the buy orders selected",
          "required": [
            "quote_order_buy_total"
          ]
        },
        "order_avg_buy_price": {
          "type": "string",
          "description": "The average price for the buy orders selected",
          "required": [
            "order_avg_buy_price"
          ]
        },
        "total_buy_commission": {
          "type": "string",
          "description": "The total commission for the buy orders selected",
          "required": [
            "total_buy_commission"
          ]
        },
        "sell_order_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The sell order ids for the net allocation preview",
          "required": [
            "sell_order_ids"
          ]
        },
        "base_order_sell_total": {
          "type": "string",
          "description": "The base order total the sell orders selected",
          "required": [
            "base_order_sell_total"
          ]
        },
        "quote_order_sell_total": {
          "type": "string",
          "description": "The quote order total the sell orders selected",
          "required": [
            "quote_order_sell_total"
          ]
        },
        "order_avg_sell_price": {
          "type": "string",
          "description": "The average price for the sell orders selected",
          "required": [
            "order_avg_sell_price"
          ]
        },
        "total_sell_commission": {
          "type": "string",
          "description": "The total commission for the sell orders selected",
          "required": [
            "total_sell_commission"
          ]
        },
        "base_order_net_total": {
          "type": "string",
          "description": "The base order net total for the allocation preview",
          "required": [
            "base_order_net_total"
          ]
        },
        "base_side": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderSide",
          "description": "The side of base order net total for the allocation preview",
          "required": [
            "base_side"
          ]
        },
        "quote_order_net_total": {
          "type": "string",
          "description": "The quote order net total for the allocation preview",
          "required": [
            "quote_order_net_total"
          ]
        },
        "quote_side": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderSide",
          "description": "The side of quote order net total for the allocation preview",
          "required": [
            "quote_side"
          ]
        },
        "total_net_commission": {
          "type": "string",
          "description": "The total net commission for the allocation preview",
          "required": [
            "total_net_commission"
          ]
        },
        "net_remainder": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AllocationAmount",
          "description": "The remainder net amount values for the net allocations",
          "required": [
            "net_remainder"
          ]
        },
        "net_allocation_legs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.AllocationPreviewLeg"
          },
          "description": "The net amount fields for the net allocation preview",
          "required": [
            "net_allocation_legs"
          ]
        },
        "buy_remainder": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AllocationAmount",
          "description": "The remainder buy amount values for the net allocations",
          "required": [
            "buy_remainder"
          ]
        },
        "buy_allocation_legs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.AllocationPreviewLeg"
          },
          "description": "The buy amount fields for the net allocation preview",
          "required": [
            "buy_allocation_legs"
          ]
        },
        "sell_remainder": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AllocationAmount",
          "description": "The remainder sell amount values for the net allocations",
          "required": [
            "sell_remainder"
          ]
        },
        "sell_allocation_legs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.AllocationPreviewLeg"
          },
          "description": "The sell amount fields for the net allocation preview",
          "required": [
            "sell_allocation_legs"
          ]
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.PreviewAllocationFailureReason"
          },
          "description": "The net allocation error values on response"
        }
      },
      "required": [
        "source_portfolio_id",
        "base_order_buy_total",
        "quote_order_buy_total",
        "order_avg_buy_price",
        "total_buy_commission",
        "base_order_sell_total",
        "quote_order_sell_total",
        "order_avg_sell_price",
        "total_sell_commission",
        "base_order_net_total",
        "quote_order_net_total",
        "order_avg_net_price",
        "total_net_commission",
        "net_remainder",
        "net_allocation_legs",
        "buy_remainder",
        "buy_allocation_legs",
        "sell_remainder",
        "sell_allocation_legs"
      ]
    },
    "coinbase.eng.prime.api.api.PostOrderPreviewRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "side": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderSide"
        },
        "order_configuration": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderConfiguration"
        },
        "is_raise_exact": {
          "type": "boolean"
        }
      }
    },
    "coinbase.eng.prime.api.api.PostOrderPreviewResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderPreviewResponseBody"
        }
      }
    },
    "coinbase.eng.prime.api.api.PostOrderRequest": {
      "type": "object",
      "properties": {
        "client_order_id": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "side": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderSide"
        },
        "order_configuration": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderConfiguration"
        },
        "is_raise_exact": {
          "type": "boolean"
        }
      }
    },
    "coinbase.eng.prime.api.api.PostOrderResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PostOrderResponseBody"
        }
      }
    },
    "coinbase.eng.prime.api.api.PostOrderResponseBody": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "order_id": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.PostPortfolioSettingsRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "key": {
          "$ref": "#/definitions/coinbase.custody.api.SettingsKey"
        },
        "value_to": {
          "$ref": "#/definitions/coinbase.custody.api.SettingsValue"
        }
      },
      "required": [
        "key",
        "value_to",
        "portfolio_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostPortfolioSettingsResponse": {
      "type": "object",
      "properties": {
        "setting": {
          "$ref": "#/definitions/coinbase.custody.api.Settings"
        },
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "setting",
        "activity_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostPreviewUserChangeRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeCategory"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserChangeRole"
          }
        }
      },
      "required": [
        "portfolio_id",
        "user_id",
        "category",
        "roles"
      ]
    },
    "coinbase.eng.prime.api.api.PostPreviewUserChangeResponse": {
      "type": "object",
      "properties": {
        "will_break_policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eng.prime.policy.api.Policy"
          }
        }
      },
      "required": [
        "will_break_policies"
      ]
    },
    "coinbase.eng.prime.api.api.PostPushNotificationDeviceDeregistrationRequest": {
      "type": "object",
      "properties": {
        "bundle_id": {
          "type": "string"
        },
        "device_id": {
          "type": "string"
        }
      },
      "required": [
        "bundle_id",
        "device_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostPushNotificationDeviceRegistrationRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "bundle_id": {
          "type": "string"
        },
        "device_id": {
          "type": "string"
        },
        "device_model": {
          "type": "string"
        },
        "device_brand": {
          "type": "string"
        },
        "device_manufacturer": {
          "type": "string"
        },
        "os_version": {
          "type": "string"
        },
        "app_version": {
          "type": "string"
        },
        "app_build_number": {
          "type": "string"
        }
      },
      "required": [
        "token",
        "bundle_id",
        "device_id",
        "device_model",
        "device_brand",
        "device_manufacturer",
        "os_version",
        "app_version",
        "app_build_number"
      ]
    },
    "coinbase.eng.prime.api.api.PostRejectPortfolioActivityRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "activity_id": {
          "type": "string"
        },
        "platform": {
          "$ref": "#/definitions/coinbase.custody.api.ApprovalPlatform"
        }
      },
      "required": [
        "portfolio_id",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostRejectPortfolioActivityResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "coinbase.eng.prime.api.api.PostRejectVehicleActivityRequest": {
      "type": "object",
      "properties": {
        "vehicle_id": {
          "type": "string"
        },
        "activity_id": {
          "type": "string"
        },
        "platform": {
          "$ref": "#/definitions/coinbase.custody.api.ApprovalPlatform"
        }
      },
      "title": "Reject",
      "required": [
        "vehicle_id",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostRejectVehicleActivityResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "coinbase.eng.prime.api.api.PostReverseAllocationRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string",
          "description": "The ID of the portfolio of the allocation",
          "required": [
            "portfolio_id"
          ]
        },
        "client_allocation_id": {
          "type": "string",
          "description": "The ID of the the reversal allocation id. This is a unique id to the reversal",
          "required": [
            "client_allocation_id"
          ]
        },
        "reverse_allocation_id": {
          "type": "string",
          "description": "The reversed allocation id for the allocation.",
          "required": [
            "reverse_allocation_id"
          ]
        },
        "client_netting_id": {
          "type": "string",
          "description": "The ID of the the reversal net allocation id."
        },
        "reverse_allocation_netting_id": {
          "type": "string",
          "description": "The reversed allocation id for the net allocation."
        }
      },
      "required": [
        "portfolio_id",
        "client_allocation_id",
        "reverse_allocation_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostTradeCredit": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "A boolean indicating whether or not credit is enabled for this portfolio",
          "required": [
            "enabled"
          ]
        },
        "limit": {
          "type": "string",
          "description": "The global credit limit for the portfolio",
          "required": [
            "limit"
          ]
        },
        "settlements_due_next": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.SettlementDue"
          },
          "description": "How much credit that is currently in use that must be repaid for next due date (will be depreciated after the new field be tested)",
          "title": "add a note on settlements_due_next"
        },
        "total_notional_settlement_due_next": {
          "type": "string",
          "description": "How much credit that is currently in usd that must be repaid for next due date"
        },
        "settlement_due_date": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the earliest active settlement is due"
        },
        "grace_period_due_date": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the grace period ends. Typically 1 hour after the settlement due date"
        },
        "settlement_due_date_next": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the settlement is due next"
        },
        "settlement_status": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SettlementStatus",
          "description": "Status of earliest non zero settlement"
        },
        "time_remaining": {
          "type": "integer",
          "format": "int32",
          "description": "Time remaining until closest settlement or grace period due date"
        },
        "settlements_due": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.SettlementDue"
          },
          "description": "How much credit that is currently in use that must be repaid for next due date"
        },
        "settlement_past_due": {
          "type": "string",
          "description": "How much credit that is currently in use that must be repaid for past due date"
        },
        "settlement_current_due": {
          "type": "string",
          "description": "How much credit that is currently in use that must be repaid for current due date"
        },
        "settlement_upcoming_due": {
          "type": "string",
          "description": "How much credit that is currently in use that must be repaid for upcoming due date"
        }
      }
    },
    "coinbase.eng.prime.api.api.PostTradeCreditInformation": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string",
          "description": "The unique ID of the portfolio"
        },
        "currency": {
          "type": "string",
          "description": "The currency symbol credit is denoted in"
        },
        "limit": {
          "type": "string",
          "description": "The maximum credit limit"
        },
        "utilized": {
          "type": "string",
          "description": "The amount of credit used"
        },
        "available": {
          "type": "string",
          "description": "The amount of credit available"
        },
        "frozen": {
          "type": "boolean",
          "description": "Whether or not a portfolio is frozen due to balance outstanding or other reason"
        },
        "frozen_reason": {
          "type": "string",
          "description": "The reason why the portfolio is frozen"
        },
        "amounts_due": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.AmountDue"
          }
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether the portfolio has credit enabled"
        }
      }
    },
    "coinbase.eng.prime.api.api.PostUpdateBillingAddressRequest": {
      "type": "object",
      "properties": {
        "vehicle_id": {
          "type": "string"
        },
        "address_1": {
          "type": "string"
        },
        "address_2": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "address_state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        }
      },
      "required": [
        "vehicle_id",
        "address_1",
        "postal_code",
        "city",
        "address_state",
        "country"
      ]
    },
    "coinbase.eng.prime.api.api.PostUpdateBillingAddressResponse": {
      "type": "object",
      "properties": {
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "activity_type",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostUpdateBillingEmailListRequest": {
      "type": "object",
      "properties": {
        "vehicle_id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/coinbase.custody.api.EmailListAction"
        },
        "portfolio_id": {
          "type": "string"
        }
      },
      "required": [
        "vehicle_id",
        "email",
        "action"
      ]
    },
    "coinbase.eng.prime.api.api.PostUpdateBillingEmailListResponse": {
      "type": "object",
      "properties": {
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "activity_type",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostUpdateBillingPreferenceRequest": {
      "type": "object",
      "properties": {
        "vehicle_id": {
          "type": "string"
        },
        "wallet_id": {
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.BillingPreferenceChangeCategory"
        },
        "portfolio_id": {
          "type": "string"
        }
      },
      "required": [
        "vehicle_id",
        "wallet_id",
        "category"
      ]
    },
    "coinbase.eng.prime.api.api.PostUserInAppNotificationStatusesRequest": {
      "type": "object",
      "properties": {
        "in_app_notification_status_updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.notification.api.InAppNotificationStatusUpdate"
          }
        }
      },
      "title": "request for Prime Frontend to change In-App Notification status",
      "required": [
        "in_app_notification_status_updates"
      ]
    },
    "coinbase.eng.prime.api.api.PostUserPreferencesRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "favorite_products": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.FavoriteProductsUpdate"
        },
        "order_confirmation_window_toggle": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderConfirmationWindowToggleUpdate"
        },
        "study_inputs": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.StudyInputs"
        },
        "ladder_level_doubleclick_ordering": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.LadderLevelDoubleclickOrderingUpdate"
        },
        "chart_configuration": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.ChartConfiguration"
        },
        "default_portfolio": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.DefaultPortfolioUpdate"
        },
        "show_new_user_trade_experience": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.ShowNewUserTradeExperienceUpdate"
        },
        "order_cancel_confirmation_window_toggle": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderCancelConfirmationWindowToggleUpdate"
        },
        "order_table_columns": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderTableColumnUpdate"
        },
        "pinned_orders": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PinnedOrdersUpdate"
        },
        "keyboard_shortcuts_toggle": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.KeyboardShortcutsToggleUpdate"
        },
        "order_raise_exact_toggle": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderRaiseExactToggleUpdate"
        },
        "order_form_persist_toggle": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderFormPersistToggleUpdate"
        },
        "order_form_size_warnings_toggle": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderFormSizeWarningsToggleUpdate"
        },
        "ladder_iceberg_toggle": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.LadderIcebergToggleUpdate"
        },
        "prime_beta_toggle": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.PrimeBetaToggleUpdate"
        }
      },
      "required": [
        "user_id"
      ]
    },
    "coinbase.eng.prime.api.api.PostUserPreferencesResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.UserPreferences"
        }
      }
    },
    "coinbase.eng.prime.api.api.PostUserUpdateRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeRole"
        },
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeCategory"
        },
        "secondary_role": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserChangeSecondaryRole"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserChangeRole"
          }
        }
      },
      "required": [
        "portfolio_id",
        "user_id",
        "category"
      ]
    },
    "coinbase.eng.prime.api.api.PreviewAllocationFailureReason": {
      "type": "string",
      "enum": [
        "PREVIEW_ALLOCATION_FAILURE_REASON_UNSPECIFIED",
        "PREVIEW_ALLOCATION_FAILURE_REASON_OVERALLOCATED",
        "PREVIEW_ALLOCATION_FAILURE_REASON_SOURCE_BUYING_POWER"
      ],
      "default": "PREVIEW_ALLOCATION_FAILURE_REASON_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.PreviewAllocationLegFailureReason": {
      "type": "string",
      "enum": [
        "PREVIEW_ALLOCATION_LEG_FAILURE_REASON_UNSPECIFIED",
        "PREVIEW_ALLOCATION_LEG_FAILURE_REASON_LEG_BUYING_POWER"
      ],
      "default": "PREVIEW_ALLOCATION_LEG_FAILURE_REASON_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.PreviewFailureReason": {
      "type": "string",
      "enum": [
        "UNKNOWN_PREVIEW_FAILURE_REASON",
        "INVALID_PORTFOLIO_ID",
        "INVALID_SIDE",
        "INVALID_ORDER_CONFIG",
        "INVALID_PRODUCT_ID",
        "INVALID_SIZE_PERCISION",
        "INVALID_PRICE_PRECISION",
        "INSUFFICIENT_FUND",
        "INVALID_LEDGER_BALANCE",
        "MISSING_COMMISSION_RATE",
        "MISSING_PRODUCT_PRICE_BOOK",
        "INVALID_COMMISSION_CONFIGURATION",
        "INVALID_LIMIT_PRICE_POST_ONLY",
        "INVALID_STOP_PRICE",
        "INVALID_NO_LIQUIDITY",
        "INVALID_LIMIT_PRICE",
        "INSUFFICIENT_LEDGER_BALANCE",
        "INSUFFICIENT_FUNDS_FOR_LIMIT_PRICE",
        "INVALID_BASE_SIZE_TOO_LARGE",
        "INVALID_BASE_SIZE_TOO_SMALL",
        "INVALID_QUOTE_SIZE_PRECISION",
        "INVALID_QUOTE_SIZE_TOO_LARGE",
        "INVALID_PRICE_TOO_LARGE",
        "INVALID_QUOTE_SIZE_TOO_SMALL",
        "INVALID_DISPLAY_QUOTE_SIZE_TOO_SMALL",
        "INVALID_DISPLAY_QUOTE_SIZE_TOO_LARGE",
        "INVALID_DISPLAY_QUOTE_SIZE_PRECISION",
        "INVALID_DISPLAY_BASE_SIZE_TOO_SMALL",
        "INVALID_DISPLAY_BASE_SIZE_TOO_LARGE",
        "INVALID_DISPLAY_BASE_SIZE_PRECISION",
        "INVALID_DISPLAY_SIZE_LEDGER_PRECISION",
        "INVALID_BLOCK_TRADE_PRICE",
        "BELOW_MIN_SIZE_FOR_DURATION",
        "INVALID_END_TIME",
        "COINBASE_VENUE_DESELECTED"
      ],
      "default": "UNKNOWN_PREVIEW_FAILURE_REASON"
    },
    "coinbase.eng.prime.api.api.PreviewSizeType": {
      "type": "string",
      "enum": [
        "PREVIEW_SIZE_TYPE_BASE",
        "PREVIEW_SIZE_TYPE_QUOTE",
        "PREVIEW_SIZE_TYPE_QUOTE_FEE_INCLUSIVE",
        "PREVIEW_SIZE_TYPE_PERCENT"
      ],
      "default": "PREVIEW_SIZE_TYPE_BASE"
    },
    "coinbase.eng.prime.api.api.PreviewTransactionRequest": {
      "type": "object",
      "properties": {
        "idem": {
          "type": "string",
          "description": "An idempotent key for the client to pass in",
          "required": [
            "idem"
          ]
        },
        "transaction_type": {
          "$ref": "#/definitions/coinbase.custody.api.TransactionType",
          "description": "The type of transaction you want to initiate",
          "required": [
            "transaction_type"
          ]
        },
        "currency_symbol": {
          "type": "string",
          "description": "The symbol of the currency you want to transfer",
          "required": [
            "currency_symbol"
          ]
        },
        "source": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.PaymentMethod",
          "description": "Where the funds are coming from",
          "required": [
            "source"
          ]
        },
        "target": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.PaymentMethod",
          "description": "Where the funds are going to ",
          "required": [
            "target"
          ]
        },
        "amount": {
          "type": "string",
          "description": "How much you want to move",
          "required": [
            "amount"
          ]
        },
        "portfolio_id": {
          "type": "string",
          "description": "The portfolio you want to transact with",
          "required": [
            "portfolio_id"
          ]
        },
        "network": {
          "type": "string",
          "description": "Network",
          "required": [
            "network"
          ]
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Preview txn options"
        },
        "token_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.PreviewTransactionResponse": {
      "type": "object",
      "properties": {
        "validation_errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.ValidationError"
          }
        },
        "fee_estimate": {
          "$ref": "#/definitions/coinbase.custody.api.FeeEstimate"
        },
        "completed_evaluation": {
          "$ref": "#/definitions/coinbase.custody.api.CompletedEvaluation"
        }
      }
    },
    "coinbase.eng.prime.api.api.PrimeActivityDetails": {
      "type": "object",
      "properties": {
        "custody_activity_details": {
          "$ref": "#/definitions/coinbase.custody.api.ActivityDetails"
        },
        "conversion_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.ConversionActivityDetails"
        },
        "web3_transaction_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3TransactionActivityDetails"
        },
        "tws_wallet_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.TwsWalletActivityDetails"
        },
        "web3_message_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3MessageActivityDetails"
        },
        "reward_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.RewardActivityDetails"
        },
        "web3_add_signer_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3AddSignerActivityDetails"
        },
        "web3_action_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3ActionActivityDetails"
        },
        "match_transfer_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.MatchTransferActivityDetails"
        },
        "staking_crypto_rebate_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.StakingCryptoRebateActivityDetails"
        },
        "short_collateral_transfer_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.ShortCollateralTransferActivityDetails"
        },
        "web3_deposit_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3DepositActivityDetails"
        },
        "tws_transaction_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.TWSTransactionActivityDetails"
        },
        "advanced_transfer_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AdvancedTransferActivityDetails"
        },
        "user_changes_activity_details": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.UserChangesActivityDetails"
        }
      }
    },
    "coinbase.eng.prime.api.api.PrimeBetaToggleUpdate": {
      "type": "object",
      "properties": {
        "prime_beta_toggle": {
          "type": "boolean"
        }
      },
      "required": [
        "prime_beta_toggle"
      ]
    },
    "coinbase.eng.prime.api.api.PrimeWalletBalanceType": {
      "type": "string",
      "enum": [
        "PRIME_WALLET_BALANCE_TYPE_UNSPECIFIED",
        "PRIME_WALLET_BALANCE_TYPE_WEB3_WALLET"
      ],
      "default": "PRIME_WALLET_BALANCE_TYPE_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.Product": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "string",
          "description": "The id for the product pair, written as base-quote"
        },
        "price": {
          "type": "string",
          "description": "The quote price for one unit of base asset"
        },
        "volume_24h": {
          "type": "string",
          "description": "How much base currency has been used for trading current product in the last 24 hours"
        },
        "volume_percentage_change_24h": {
          "type": "string",
          "description": "Compare previous 24 hour window (48-24 hours ago) with current 24 hour window (24 hours ago-current), expressed in percent"
        },
        "base_increment": {
          "type": "string",
          "description": "The smallest possible unit of base currency *relative to current product* - if product is ETH-DAI, base increment is .0001, if product is ETH-USD, base increment is .00000001"
        },
        "quote_increment": {
          "type": "string",
          "description": "The smallest possible unit of quote currency *relative to current product* - if product is ALGO-USD, quote increment is .001, if product is ETH-USD, quote increment is .01"
        },
        "base_min_size": {
          "type": "string",
          "description": "The minimum size (base asset) for which an order can be placed"
        },
        "base_max_size": {
          "type": "string",
          "description": "The maximum size (base asset) for which an order can be placed"
        },
        "quote_min_size": {
          "type": "string",
          "description": "The minimum size (quote asset) for which an order can be placed"
        },
        "quote_max_size": {
          "type": "string",
          "description": "The maximum size (quote asset) for which an order can be placed"
        },
        "price_percentage_change_24h": {
          "type": "string",
          "description": "Compare price of one unit of base asset at beginning \u0026 end of 24 hour window: (currentPrice - previousPrice) / currentPrice"
        },
        "high_24h": {
          "type": "string",
          "description": "Highest price value in the last 24 hours"
        },
        "low_24h": {
          "type": "string",
          "description": "Lowest price value in the last 24 hours"
        },
        "high_52w": {
          "type": "string",
          "description": "Highest price value in the last 52 weeks"
        },
        "low_52w": {
          "type": "string",
          "description": "Lowest price value in the last 52 weeks"
        },
        "market_cap": {
          "type": "string",
          "description": "Total market valuation of the asset pair in quote"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.ProductPermissions"
          },
          "description": "Permissions given to user for product"
        },
        "price_percentage_change_mtd": {
          "type": "string",
          "description": "Compare price of one unit of base asset at beginning of the month vs now: (currentPrice - previousPrice) / currentPrice"
        },
        "price_percentage_change_ytd": {
          "type": "string",
          "description": "Compare price of one unit of base asset at beginning of the year vs now: (currentPrice - previousPrice) / currentPrice"
        },
        "usd_volume_24h": {
          "type": "string",
          "description": "How much base currency, converted to USD, has been used for trading current product in the last 24 hours"
        },
        "price_increment": {
          "type": "string",
          "description": "The smallest possible unit of price in quote currency *relative to current product*"
        }
      },
      "required": [
        "product_id",
        "price",
        "volume_24h",
        "volume_percentage_change_24h",
        "base_increment",
        "quote_increment",
        "base_min_size",
        "base_max_size",
        "quote_min_size",
        "quote_max_size"
      ]
    },
    "coinbase.eng.prime.api.api.ProductPermissions": {
      "type": "string",
      "enum": [
        "PRODUCT_PERMISSION_UNKNOWN",
        "PRODUCT_PERMISSION_READ",
        "PRODUCT_PERMISSION_TRADE",
        "PRODUCT_PERMISSION_LENDING"
      ],
      "default": "PRODUCT_PERMISSION_UNKNOWN"
    },
    "coinbase.eng.prime.api.api.Products": {
      "type": "object",
      "properties": {
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Product"
          }
        }
      },
      "required": [
        "products"
      ]
    },
    "coinbase.eng.prime.api.api.PublicKeyCredentialDescriptor": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "byte"
        },
        "transports": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialdescriptor",
      "required": [
        "type",
        "id",
        "transports"
      ]
    },
    "coinbase.eng.prime.api.api.PublicKeyCredentialParameters": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "alg": {
          "type": "string",
          "format": "int64",
          "description": "Required supported algorithms for servers are:\n- RS1 (temp value -65535)\n- RS256 (temp value -257)\n- ES256 (-7) - the only stable option at this point\nServer required values listed at:\nhttps://fidoalliance.org/specs/fido-v2.0-rd-20180702/fido-server-v2.0-rd-20180702.html#other",
          "title": "Cryptographic Algorithm Identifier (COSE Algorithm Identifier).\nValues registered in the IANA COSE Algorithms registry:\nhttps://www.iana.org/assignments/cose/cose.xhtml#algorithms"
        }
      },
      "title": "https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialparameters",
      "required": [
        "type",
        "alg"
      ]
    },
    "coinbase.eng.prime.api.api.QueryLevel": {
      "type": "string",
      "enum": [
        "PORTFOLIO",
        "ENTITY",
        "ORGANIZATION",
        "USER"
      ],
      "default": "PORTFOLIO"
    },
    "coinbase.eng.prime.api.api.ReferenceType": {
      "type": "string",
      "enum": [
        "REFERENCE_TYPE_INVITATION",
        "REFERENCE_TYPE_USER_CHANGE",
        "REFERENCE_TYPE_USER_CHANGES"
      ],
      "default": "REFERENCE_TYPE_INVITATION"
    },
    "coinbase.eng.prime.api.api.Reward": {
      "type": "object",
      "properties": {
        "claimable": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Token"
          }
        },
        "vesting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Token"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.RewardActivityDetails": {
      "type": "object",
      "properties": {
        "balance_pre_reward": {
          "type": "string"
        },
        "balance_post_reward": {
          "type": "string"
        },
        "reward_amount": {
          "type": "string"
        },
        "reward_date_range": {
          "type": "string"
        },
        "tws_transaction_id": {
          "type": "string"
        }
      },
      "required": [
        "balance_pre_reward",
        "balance_post_reward"
      ]
    },
    "coinbase.eng.prime.api.api.Role": {
      "type": "string",
      "enum": [
        "ROLE_UNKNOWN",
        "ROLE_AUTHORIZED_SIGNATORY",
        "ROLE_INITIATOR",
        "ROLE_APPROVER",
        "ROLE_AUDITOR",
        "ROLE_ADMINISTRATOR",
        "ROLE_TRADER",
        "ROLE_INTERNAL_TRADER",
        "ROLE_TEAM_MANAGER",
        "ROLE_FULL_TRADER",
        "ROLE_INTERNAL_AUDITOR"
      ],
      "default": "ROLE_UNKNOWN"
    },
    "coinbase.eng.prime.api.api.RoleChangeType": {
      "type": "string",
      "enum": [
        "RoleChangeType_UNSPECIFIED",
        "RoleChangeType_PORTFOLIO_TO_PORTFOLIO",
        "RoleChangeType_PORTFOLIO_TO_ENTITY",
        "RoleChangeType_ENTITY_TO_PORTFOLIO",
        "RoleChangeType_ENTITY_TO_ENTITY"
      ],
      "default": "RoleChangeType_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.RpEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "title": "https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialrpentity",
      "required": [
        "name",
        "icon",
        "id"
      ]
    },
    "coinbase.eng.prime.api.api.Rsi": {
      "type": "object",
      "properties": {
        "period": {
          "type": "string"
        }
      },
      "required": [
        "period"
      ]
    },
    "coinbase.eng.prime.api.api.SecondFactor": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.SettlementDue": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "notional_balance": {
          "type": "string"
        },
        "settlement_status": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SettlementStatus"
        },
        "settlement_due_date": {
          "type": "string",
          "format": "date-time"
        },
        "grace_period_due_date": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "coinbase.eng.prime.api.api.SettlementStatus": {
      "type": "string",
      "enum": [
        "OK",
        "OVERDUE",
        "PRE_PAST_DUE",
        "GRACE_PERIOD"
      ],
      "default": "OK",
      "title": "- OK: amount owing is 0, or amount owing is positive but we are prior to two hours to settlement due date\n - OVERDUE: amount owing is positive, we are after grace period due date\n - PRE_PAST_DUE: amount owing is positive, but we are within two hours before the settlement due date\n - GRACE_PERIOD: amount owing is positive, we are after settlement due date but before grace period due date"
    },
    "coinbase.eng.prime.api.api.ShortCollateralTransferActivityDetails": {
      "type": "object",
      "properties": {
        "transaction_id": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "destination_wallet_id": {
          "type": "string"
        },
        "source_wallet_id": {
          "type": "string"
        }
      },
      "required": [
        "transaction_id",
        "amount",
        "currency",
        "destination_wallet_id",
        "source_wallet_id"
      ]
    },
    "coinbase.eng.prime.api.api.ShowNewUserTradeExperienceUpdate": {
      "type": "object",
      "properties": {
        "show_new_user_trade_experience": {
          "type": "boolean"
        }
      },
      "required": [
        "show_new_user_trade_experience"
      ]
    },
    "coinbase.eng.prime.api.api.SignalWeb3ActionRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "web3_action_id": {
          "type": "string"
        },
        "signal": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SignalWeb3ActionRequest.Signal"
        }
      }
    },
    "coinbase.eng.prime.api.api.SignalWeb3ActionRequest.Signal": {
      "type": "object",
      "properties": {
        "passcode_confirmed": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SignalWeb3ActionRequest.Signal.PasscodeConfirmedSignal"
        },
        "execute_backup": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SignalWeb3ActionRequest.Signal.ExecuteBackupSignal"
        },
        "execute_device_recovery": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SignalWeb3ActionRequest.Signal.ExecuteDeviceRecoverySignal"
        },
        "generate_keys_signal": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SignalWeb3ActionRequest.Signal.GenerateKeysSignal"
        },
        "execute_signer_addition": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SignalWeb3ActionRequest.Signal.ExecuteSignerAdditionSignal"
        },
        "execute_key_export": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SignalWeb3ActionRequest.Signal.ExecuteKeyExportSignal"
        }
      }
    },
    "coinbase.eng.prime.api.api.SignalWeb3ActionRequest.Signal.ExecuteBackupSignal": {
      "type": "object"
    },
    "coinbase.eng.prime.api.api.SignalWeb3ActionRequest.Signal.ExecuteDeviceRecoverySignal": {
      "type": "object",
      "properties": {
        "trustable_data": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.SignalWeb3ActionRequest.Signal.ExecuteKeyExportSignal": {
      "type": "object"
    },
    "coinbase.eng.prime.api.api.SignalWeb3ActionRequest.Signal.ExecuteSignerAdditionSignal": {
      "type": "object",
      "properties": {
        "trustable_data": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.SignalWeb3ActionRequest.Signal.GenerateKeysSignal": {
      "type": "object",
      "properties": {
        "trustable_data": {
          "type": "string"
        },
        "request_id": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.SignalWeb3ActionRequest.Signal.PasscodeConfirmedSignal": {
      "type": "object"
    },
    "coinbase.eng.prime.api.api.SignalWeb3ActionResponse": {
      "type": "object",
      "properties": {
        "web3_action": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3Action"
        }
      }
    },
    "coinbase.eng.prime.api.api.SigningBackend": {
      "type": "string",
      "enum": [
        "SIGNING_BACKEND_UNKNOWN",
        "SIGNING_BACKEND_TEX",
        "SIGNING_BACKEND_CORE_KMS"
      ],
      "default": "SIGNING_BACKEND_UNKNOWN"
    },
    "coinbase.eng.prime.api.api.SorLimitFok": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.SorLimitIoc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.SortDirection": {
      "type": "string",
      "enum": [
        "DESC",
        "ASC"
      ],
      "default": "DESC"
    },
    "coinbase.eng.prime.api.api.SpotPrice": {
      "type": "object",
      "properties": {
        "price": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.Stake": {
      "type": "object",
      "properties": {
        "staked": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Token"
          }
        },
        "locked": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Token"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.StakingCryptoRebateActivityDetails": {
      "type": "object",
      "properties": {
        "balance_pre_rebate": {
          "type": "string"
        },
        "balance_post_rebate": {
          "type": "string"
        },
        "rebate_amount": {
          "type": "string"
        },
        "rebate_date_range": {
          "type": "string"
        },
        "tws_transaction_id": {
          "type": "string"
        }
      },
      "required": [
        "balance_pre_rebate",
        "balance_post_rebate"
      ]
    },
    "coinbase.eng.prime.api.api.StakingInfo": {
      "type": "object",
      "properties": {
        "parent_wallet_id": {
          "type": "string"
        },
        "reward_wallet_id": {
          "type": "string"
        },
        "validator_count": {
          "type": "integer",
          "format": "int32"
        },
        "delegated_to_address": {
          "type": "string"
        },
        "unbonding_time_remaining": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.StopPriceDirection": {
      "type": "string",
      "enum": [
        "UNKNOWN_STOP_DIRECTION",
        "STOP_DIRECTION_STOP_UP",
        "STOP_DIRECTION_STOP_DOWN"
      ],
      "default": "UNKNOWN_STOP_DIRECTION"
    },
    "coinbase.eng.prime.api.api.StudyInputs": {
      "type": "object",
      "properties": {
        "ema": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.MovingAverage"
        },
        "sma": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.MovingAverage"
        },
        "bollinger_bands": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.BollingerBands"
        },
        "macd": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Macd"
        },
        "rsi": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Rsi"
        }
      },
      "required": [
        "ema",
        "sma",
        "bollinger_bands",
        "macd",
        "rsi"
      ]
    },
    "coinbase.eng.prime.api.api.SupplyAndBorrow": {
      "type": "object",
      "properties": {
        "supply": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Token"
          }
        },
        "borrow": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Token"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.SystemStatus": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SystemStatusType"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "status"
      ]
    },
    "coinbase.eng.prime.api.api.SystemStatusResponse": {
      "type": "object",
      "properties": {
        "overall_status": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SystemStatus"
        },
        "analytics_status": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SystemStatus"
        },
        "trade_status": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SystemStatus"
        },
        "cancel_only_mode_status": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SystemStatus"
        }
      },
      "required": [
        "overall_status",
        "analytics_status",
        "trade_status",
        "cancel_only_mode_status"
      ]
    },
    "coinbase.eng.prime.api.api.SystemStatusType": {
      "type": "string",
      "enum": [
        "SYSTEM_STATUS_TYPE_UNKNOWN",
        "SYSTEM_STATUS_TYPE_RUNNING",
        "SYSTEM_STATUS_TYPE_MAINTENANCE",
        "SYSTEM_STATUS_TYPE_OUTAGE"
      ],
      "default": "SYSTEM_STATUS_TYPE_UNKNOWN"
    },
    "coinbase.eng.prime.api.api.TWSTransactionActivityDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "source_wallet_id": {
          "type": "string"
        },
        "target_wallet_id": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "usd_amount_at_creation": {
          "type": "string"
        },
        "source_portfolio_id": {
          "type": "string"
        },
        "target_portfolio_id": {
          "type": "string"
        },
        "source_address": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.BlockchainAddress"
        },
        "target_address": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.BlockchainAddress"
        },
        "middle_office_initiated": {
          "type": "boolean"
        },
        "human_id": {
          "type": "string"
        },
        "fees": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.TransactionFee"
        },
        "source_counterparty_id": {
          "type": "string"
        },
        "target_counterparty_id": {
          "type": "string"
        },
        "source_payment_method_id": {
          "type": "string"
        },
        "target_payment_method_id": {
          "type": "string"
        },
        "is_ctn_transfer": {
          "type": "boolean"
        }
      }
    },
    "coinbase.eng.prime.api.api.Token": {
      "type": "object",
      "properties": {
        "contract_address": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "protocol_name": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "site_url": {
          "type": "string"
        },
        "icon_url": {
          "type": "string"
        },
        "protocol_logo_url": {
          "type": "string"
        },
        "network_display_name": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.TransactionFee": {
      "type": "object",
      "properties": {
        "coinbase_obligation": {
          "type": "string"
        },
        "customer_obligation": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.TriggerStopLimitGtc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "stop_price": {
          "type": "string"
        },
        "stop_direction": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.StopPriceDirection"
        },
        "display_quote_size": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.TriggerStopLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "limit_price": {
          "type": "string"
        },
        "stop_price": {
          "type": "string"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "stop_direction": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.StopPriceDirection"
        },
        "display_quote_size": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.TwapLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "limit_price": {
          "type": "string"
        },
        "display_quote_size": {
          "type": "string"
        },
        "display_base_size": {
          "type": "string"
        },
        "historical_pov": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.TwsWalletActivityDetails": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "coinbase.eng.prime.api.api.UpdateIntervalPortfolioFinancing": {
      "type": "string",
      "enum": [
        "TWO_HUNDRED_FIFTY_MS_FINANCING"
      ],
      "default": "TWO_HUNDRED_FIFTY_MS_FINANCING"
    },
    "coinbase.eng.prime.api.api.UpdateIntervalProducts": {
      "type": "string",
      "enum": [
        "TWO_HUNDRED_FIFTY_MS_PRODUCTS",
        "THREE_SECOND_PRODUCTS"
      ],
      "default": "TWO_HUNDRED_FIFTY_MS_PRODUCTS"
    },
    "coinbase.eng.prime.api.api.UpdateLevel": {
      "type": "string",
      "enum": [
        "UPDATE_LEVEL_UNSPECIFIED",
        "UPDATE_LEVEL_PORTFOLIO",
        "UPDATE_LEVEL_ENTITY",
        "UPDATE_LEVEL_ORGANIZATION"
      ],
      "default": "UPDATE_LEVEL_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.UpdateUserPreferencesForChannelRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "channel": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.Channel"
        },
        "user_preferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.notification.api.UserPreferenceForChannel"
          }
        }
      },
      "required": [
        "user_id",
        "channel",
        "user_preferences"
      ]
    },
    "coinbase.eng.prime.api.api.UpdateUserPreferencesForChannelResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean"
        }
      },
      "required": [
        "ok"
      ]
    },
    "coinbase.eng.prime.api.api.UpdateWalletAssetSettingsRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "wallet_id": {
          "type": "string"
        },
        "crypto_settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.WalletCryptoSetting"
          }
        },
        "collectible_settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.WalletCollectibleSetting"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.UpdateWalletAssetSettingsResponse": {
      "type": "object"
    },
    "coinbase.eng.prime.api.api.UpdateWalletNameRequest": {
      "type": "object",
      "properties": {
        "wallet_id": {
          "type": "string"
        },
        "name_to": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        }
      },
      "required": [
        "wallet_id",
        "name_to",
        "portfolio_id"
      ]
    },
    "coinbase.eng.prime.api.api.UpdateWalletNameResponse": {
      "type": "object",
      "properties": {
        "wallet": {
          "$ref": "#/definitions/coinbase.custody.api.Wallet"
        },
        "activity": {
          "$ref": "#/definitions/coinbase.custody.api.Activity",
          "description": "@deprecated Audit Item activity used for consensus information"
        },
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "wallet",
        "activity",
        "activity_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.eng.prime.api.api.UpdateWeb3DeviceRequest": {
      "type": "object",
      "properties": {
        "update_level": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.UpdateLevel"
        },
        "update_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "waas_device_id": {
          "type": "string"
        },
        "idfv": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "make": {
          "type": "string"
        },
        "os_name": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.DeviceOsName"
        },
        "os_version": {
          "type": "string"
        }
      },
      "required": [
        "update_level",
        "update_ids",
        "waas_device_id",
        "idfv",
        "model",
        "make",
        "os_name",
        "os_version"
      ]
    },
    "coinbase.eng.prime.api.api.UpdateWeb3DeviceResponse": {
      "type": "object",
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.UpdatedDevice"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.UpdatedDevice": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3Device"
        },
        "associations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Association"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.UploadSecurityKey": {
      "type": "object",
      "properties": {
        "web3_security_key": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3SecurityKey"
        }
      }
    },
    "coinbase.eng.prime.api.api.UpsertPolicyChangeRequest": {
      "type": "object",
      "properties": {
        "new_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eng.prime.policy.api.Rule"
          }
        },
        "old_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eng.prime.policy.api.Rule"
          }
        },
        "policy_type": {
          "type": "string"
        },
        "admin_review_required": {
          "type": "boolean"
        },
        "portfolio_id": {
          "type": "string"
        }
      },
      "required": [
        "policy_type",
        "hierarchy"
      ]
    },
    "coinbase.eng.prime.api.api.UpsertPolicyChangeResponse": {
      "type": "object",
      "properties": {
        "activity": {
          "$ref": "#/definitions/coinbase.custody.api.Activity",
          "description": "activity used for change information"
        },
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "activity"
      ]
    },
    "coinbase.eng.prime.api.api.UserChangeDetails": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeCategory"
        },
        "hierarchy_id": {
          "type": "string"
        },
        "hierarchy_type": {
          "type": "string"
        },
        "roles_from": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserChangeRole"
          }
        },
        "roles_to": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserChangeRole"
          }
        },
        "secondary_roles_from": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserChangeSecondaryRole"
          }
        },
        "secondary_roles_to": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserChangeSecondaryRole"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.UserChangesActivityDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "change_user_id": {
          "type": "string"
        },
        "change_user_name": {
          "type": "string"
        },
        "change_user_email": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "vehicle_name": {
          "type": "string"
        },
        "reference_activity_id": {
          "type": "string"
        },
        "role_change_type": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.RoleChangeType"
        },
        "user_change_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.UserChangeDetails"
          }
        },
        "portfolios": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.PortfolioInfo"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.UserEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        }
      },
      "title": "https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialuserentity",
      "required": [
        "name",
        "icon",
        "id",
        "display_name"
      ]
    },
    "coinbase.eng.prime.api.api.UserInvitationResponseItem": {
      "type": "object",
      "properties": {
        "hierarchy": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Hierarchy"
        },
        "consensus_activity": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.NewConsensusActivityResponse"
        },
        "error_message": {
          "type": "string"
        }
      },
      "required": [
        "hierarchy",
        "consensus_activity"
      ]
    },
    "coinbase.eng.prime.api.api.UserInvite": {
      "type": "object",
      "properties": {
        "hierarchy": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Hierarchy"
        },
        "secondary_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.InvitationSecondaryRole"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.InvitationRole"
          }
        }
      },
      "required": [
        "hierarchy",
        "email",
        "roles"
      ]
    },
    "coinbase.eng.prime.api.api.UserPreferences": {
      "type": "object",
      "properties": {
        "favorite_products": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of productIds that the user has favorited"
        },
        "order_confirmation_window_toggle": {
          "type": "boolean",
          "description": "If true, will enable two-step confirmation for order placement"
        },
        "study_inputs": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.StudyInputs"
        },
        "ladder_level_doubleclick_ordering": {
          "type": "boolean",
          "description": "If true, will enable ladder doucble-click execution"
        },
        "chart_configuration": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.ChartConfiguration"
        },
        "default_portfolio_id": {
          "type": "string",
          "description": "The users default portfolioId"
        },
        "show_new_user_trade_experience": {
          "type": "boolean",
          "description": "If true, the new user expirence will be enabled on the trade page"
        },
        "order_cancel_confirmation_window_toggle": {
          "type": "boolean",
          "description": "If true, will enable two-step confirmation for order cancellation"
        },
        "order_table_columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.OrderTableColumn"
          }
        },
        "pinned_orders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of orderIds the user has pinned to the trade orders table"
        },
        "keyboard_shortcuts_toggle": {
          "type": "boolean",
          "description": "If true, will enable keyboard shortcuts on the trade page"
        },
        "order_raise_exact_toggle": {
          "type": "boolean",
          "description": "If true, will return size inclusive of fees for SELL+sizeInQuote orders"
        },
        "order_form_persist_toggle": {
          "type": "boolean",
          "description": "If true, will enable order form persistence on the trade page"
        },
        "order_form_size_warnings_toggle": {
          "type": "boolean",
          "description": "If true, will enable order form size warnings on the trade page"
        },
        "ladder_iceberg_toggle": {
          "type": "boolean",
          "description": "If true, will enable iceberg orders in the price ladder on the trade page"
        },
        "prime_beta_toggle": {
          "type": "boolean",
          "description": "If true, will enable beta features for prime user"
        }
      },
      "required": [
        "favorite_products",
        "order_confirmation_window_toggle",
        "ladder_level_doubleclick_ordering",
        "order_cancel_confirmation_window_toggle",
        "order_table_columns",
        "pinned_orders",
        "keyboard_shortcuts_toggle",
        "order_raise_exact_toggle",
        "order_form_persist_toggle",
        "order_form_size_warnings_toggle",
        "ladder_iceberg_toggle"
      ]
    },
    "coinbase.eng.prime.api.api.UserRole": {
      "type": "object",
      "properties": {
        "role_name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Permission"
          }
        },
        "role": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Role"
        },
        "feature_flags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "role_name"
      ]
    },
    "coinbase.eng.prime.api.api.UserRolesUpdate": {
      "type": "object",
      "properties": {
        "hierarchy": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Hierarchy"
        },
        "category": {
          "$ref": "#/definitions/coinbase.custody.api.UserChangeCategory"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserChangeRole"
          }
        },
        "secondary_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserChangeSecondaryRole"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.UserRolesUpdateResponseItem": {
      "type": "object",
      "properties": {
        "hierarchy": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Hierarchy"
        },
        "activity_type": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        },
        "completed_evaluation": {
          "$ref": "#/definitions/coinbase.custody.api.CompletedEvaluation"
        },
        "error_message": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.ValidateAddressRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Crypto address",
          "required": [
            "address"
          ]
        },
        "currency_symbol": {
          "type": "string",
          "description": "Crypto currency symbol",
          "required": [
            "currency_symbol"
          ]
        },
        "account_identifier": {
          "type": "string",
          "description": "Additional identifier, such as memo value or destination tag value"
        }
      },
      "required": [
        "address",
        "currency_symbol"
      ]
    },
    "coinbase.eng.prime.api.api.ValidateAddressResponse": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Crypto address"
        },
        "requires_memo": {
          "type": "boolean",
          "description": "Address requires account identifier"
        },
        "suggestion": {
          "type": "string",
          "description": "Suggested alternative format"
        },
        "valid": {
          "type": "boolean",
          "description": "Are all fields supplied valid"
        },
        "valid_address": {
          "type": "boolean",
          "description": "Was a valid crypto address provided"
        },
        "valid_account_identifier": {
          "type": "boolean",
          "description": "Was account identifier value valid"
        },
        "account_identifier_name": {
          "type": "string",
          "description": "Name of account identifier, e.g. Destination Tag or Memo Value"
        }
      },
      "required": [
        "address",
        "requires_memo",
        "valid",
        "valid_address"
      ]
    },
    "coinbase.eng.prime.api.api.ValidateCounterpartyRequest": {
      "type": "object",
      "properties": {
        "counterparty_id": {
          "type": "string",
          "description": "counterparty_id"
        }
      },
      "required": [
        "counterparty_id"
      ]
    },
    "coinbase.eng.prime.api.api.ValidateCounterpartyResponse": {
      "type": "object",
      "properties": {
        "counterparty": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Counterparty",
          "description": "counterparty"
        },
        "valid": {
          "type": "boolean",
          "description": "is the provided counterparty valid"
        }
      },
      "required": [
        "counterparty",
        "valid"
      ]
    },
    "coinbase.eng.prime.api.api.ValidateWeb3AuthorizationRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "wallets_with_addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.WalletWithAddress"
          }
        }
      },
      "required": [
        "portfolio_id",
        "wallets_with_addresses"
      ]
    },
    "coinbase.eng.prime.api.api.ValidateWeb3AuthorizationResponse": {
      "type": "object"
    },
    "coinbase.eng.prime.api.api.ValidateWeb3SecurityKeyRequest": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "certificate": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "coinbase.eng.prime.api.api.ValidateWeb3SecurityKeyResponse": {
      "type": "object",
      "properties": {
        "web3_security_key": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3SecurityKey"
        }
      }
    },
    "coinbase.eng.prime.api.api.VehicleFinancing": {
      "type": "object",
      "properties": {
        "cdal_enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "cdal_enabled"
      ]
    },
    "coinbase.eng.prime.api.api.VehicleFinancingStreamBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.VehicleFinancing"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Heartbeat"
        }
      }
    },
    "coinbase.eng.prime.api.api.VehicleFinancingStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.VehicleFinancingStreamBody"
        }
      }
    },
    "coinbase.eng.prime.api.api.VehiclePortfolioMargin": {
      "type": "object",
      "properties": {
        "margin_information": {
          "$ref": "#/definitions/coinbase.financing.MarginInformation"
        }
      },
      "required": [
        "margin_information"
      ]
    },
    "coinbase.eng.prime.api.api.VehiclePortfolioMarginStreamBody": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.VehiclePortfolioMargin"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Heartbeat"
        }
      }
    },
    "coinbase.eng.prime.api.api.VehiclePortfolioMarginStreamBodyV2": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.VehiclePortfolioMarginV2"
        },
        "patch": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.JsonPatch"
        },
        "heartbeat": {
          "$ref": "#/definitions/coinbase.brokerage.proxy.common.Heartbeat"
        }
      }
    },
    "coinbase.eng.prime.api.api.VehiclePortfolioMarginStreamResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.VehiclePortfolioMarginStreamBody"
        }
      }
    },
    "coinbase.eng.prime.api.api.VehiclePortfolioMarginStreamResponseV2": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.VehiclePortfolioMarginStreamBodyV2"
        }
      }
    },
    "coinbase.eng.prime.api.api.VehiclePortfolioMarginV2": {
      "type": "object",
      "properties": {
        "margin_summary": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.MarginSummary"
        }
      },
      "required": [
        "margin_summary"
      ]
    },
    "coinbase.eng.prime.api.api.VestingInfo": {
      "type": "object",
      "properties": {
        "is_vesting": {
          "type": "boolean"
        }
      }
    },
    "coinbase.eng.prime.api.api.VwapLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string"
        },
        "base_size": {
          "type": "string"
        },
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "limit_price": {
          "type": "string"
        },
        "historical_pov": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.WalletAction": {
      "type": "string",
      "enum": [
        "WALLET_ACTION_UNKNOWN",
        "WALLET_ACTION_WITHDRAWAL",
        "WALLET_ACTION_DEPOSIT",
        "WALLET_ACTION_STAKE",
        "WALLET_ACTION_UNSTAKE",
        "WALLET_ACTION_GOVERNANCE",
        "WALLET_ACTION_PARTIAL_STAKE",
        "WALLET_ACTION_VESTING",
        "WALLET_ACTION_VOTING",
        "WALLET_ACTION_RESTAKING",
        "WALLET_ACTION_CHANGE_VALIDATOR",
        "WALLET_ACTION_DELEGATE",
        "WALLET_ACTION_CONVERSION"
      ],
      "default": "WALLET_ACTION_UNKNOWN",
      "title": "The available action types that wallets can take"
    },
    "coinbase.eng.prime.api.api.WalletBalance": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Total balance"
        },
        "usd_value": {
          "type": "string",
          "description": "Total balance in fiat"
        },
        "withdrawable_value": {
          "type": "string",
          "description": "Withdrawable (i.e. available) balance for vault + trading balance"
        },
        "withdrawable_usd_value": {
          "type": "string",
          "description": "Withdrawable (i.e. available) balance for vault + trading balance in fiat"
        },
        "bonded_value": {
          "type": "string",
          "description": "Balance which has been locked due to bonding/staking, potentially subject to an unbonding period"
        },
        "reserved_value": {
          "type": "string",
          "description": "Balance which must remain in the wallet untouched due to the protocol"
        },
        "unbonding_value": {
          "type": "string",
          "description": "Balance which is currently in the process of unbonding"
        },
        "unvested_value": {
          "type": "string",
          "description": "Unrealized balance subject to a vesting schedule"
        },
        "vested_value": {
          "type": "string",
          "description": "Realized vested balance (balance - unvested balance)"
        },
        "pending_rewards_value": {
          "type": "string",
          "description": "Pending bonding/staking rewards that have not yet been realized"
        },
        "lifetime_rewards_value": {
          "type": "string",
          "description": "Previously realized bonding/staking rewards"
        },
        "bondable_value": {
          "type": "string",
          "description": "Balance available for bonding/staking"
        }
      }
    },
    "coinbase.eng.prime.api.api.WalletCollectibleSetting": {
      "type": "object",
      "properties": {
        "wallet_api_network": {
          "type": "string"
        },
        "contract_address": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AssetVisibilityStatus"
        }
      }
    },
    "coinbase.eng.prime.api.api.WalletCryptoSetting": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "contract_address": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.AssetVisibilityStatus"
        }
      }
    },
    "coinbase.eng.prime.api.api.WalletState": {
      "type": "string",
      "enum": [
        "WALLET_STATE_UNKNOWN",
        "WALLET_STATE_PENDING",
        "WALLET_STATE_IN_USE",
        "WALLET_STATE_REMOVED"
      ],
      "default": "WALLET_STATE_UNKNOWN"
    },
    "coinbase.eng.prime.api.api.WalletType": {
      "type": "string",
      "enum": [
        "WALLET_TYPE_UNKNOWN",
        "WALLET_TYPE_COLD",
        "WALLET_TYPE_TRADING",
        "WALLET_TYPE_WEB3",
        "WALLET_TYPE_PRIME_OMNIBUS_QC"
      ],
      "default": "WALLET_TYPE_UNKNOWN"
    },
    "coinbase.eng.prime.api.api.WalletV2": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "backend_id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.WalletType"
        },
        "state": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.WalletState"
        },
        "portfolio_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "available_actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.WalletAction"
          }
        },
        "created_at": {
          "type": "string"
        },
        "balance": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.WalletBalance"
        },
        "currency": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Currency"
        },
        "staking_info": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.StakingInfo"
        },
        "vesting_info": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.VestingInfo"
        },
        "blockchain_address": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Address"
        },
        "web3_info": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3Info"
        }
      },
      "required": [
        "id",
        "type",
        "state",
        "portfolio_id"
      ]
    },
    "coinbase.eng.prime.api.api.WalletWithAddress": {
      "type": "object",
      "properties": {
        "wallet_id": {
          "type": "string"
        },
        "address": {
          "type": "string"
        }
      },
      "required": [
        "wallet_id",
        "address"
      ]
    },
    "coinbase.eng.prime.api.api.WarningMsg": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "BIG_ORDER",
        "SMALL_ORDER",
        "LIMIT_PRICE_THROUGH_MARKET",
        "LIMIT_PRICE_AWAY_FROM_MARKET",
        "LARGE_USD_ORDER_SIZE",
        "HISTORICAL_POV_NOT_FOUND"
      ],
      "default": "UNKNOWN"
    },
    "coinbase.eng.prime.api.api.Web3Action": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "action_type": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3ActionType"
        },
        "associations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Association"
          }
        },
        "action": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3Action.Action"
        },
        "assigned_user_id": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.Web3Action.Action": {
      "type": "object",
      "properties": {
        "web3_backup": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3Backup"
        },
        "web3_recovery": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3Recovery"
        },
        "web3_onboarding": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3Onboarding"
        },
        "web3_signer_addition": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3SignerAddition"
        },
        "upload_security_key": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.UploadSecurityKey"
        },
        "web3_key_export": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3KeyExport"
        },
        "archive_security_key": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.ArchiveSecurityKey"
        }
      }
    },
    "coinbase.eng.prime.api.api.Web3ActionActivityDetails": {
      "type": "object",
      "properties": {
        "web3_action": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3Action"
        },
        "signer_info": {
          "$ref": "#/definitions/coinbase.custody.api.GetUserInformationResponse"
        },
        "portfolio": {
          "$ref": "#/definitions/coinbase.custody.api.Portfolio"
        },
        "signer_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.UserRole"
          }
        }
      },
      "required": [
        "web3_action"
      ]
    },
    "coinbase.eng.prime.api.api.Web3ActionType": {
      "type": "string",
      "enum": [
        "WEB3_ACTION_TYPE_UNSPECIFIED",
        "WEB3_ACTION_TYPE_BACKUP",
        "WEB3_ACTION_TYPE_RECOVERY",
        "WEB3_ACTION_TYPE_ONBOARDING",
        "WEB3_ACTION_TYPE_SIGNER_ADDITION",
        "WEB3_ACTION_TYPE_UPLOAD_SECURITY_KEY",
        "WEB3_ACTION_TYPE_KEY_EXPORT",
        "WEB3_ACTION_TYPE_ARCHIVE_SECURITY_KEY"
      ],
      "default": "WEB3_ACTION_TYPE_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.Web3AddSignerActivityDetails": {
      "type": "object",
      "properties": {
        "portfolio_name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.custody.api.Role"
          }
        },
        "user_info": {
          "$ref": "#/definitions/coinbase.custody.api.GetUserInformationResponse"
        },
        "reference_activity_id": {
          "type": "string"
        },
        "mpc_operation_name": {
          "type": "string"
        }
      },
      "required": [
        "portfolio_name",
        "roles",
        "user_info"
      ]
    },
    "coinbase.eng.prime.api.api.Web3Backup": {
      "type": "object",
      "properties": {
        "initiate_backup_operation_name": {
          "type": "string"
        },
        "backup_user_id": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.Web3DepositActivityDetails": {
      "type": "object",
      "properties": {
        "network_name": {
          "type": "string"
        },
        "transaction_hash": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3DepositActivityMetadata"
        },
        "source_address": {
          "type": "string"
        },
        "destination_address": {
          "type": "string"
        },
        "destination_wallet_id": {
          "type": "string"
        },
        "chain_id": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.Web3DepositActivityMetadata": {
      "type": "object",
      "properties": {
        "transfers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3DepositActivityMetadata.AssetTransfer"
          }
        }
      },
      "description": "Field on web3 deposit transactions."
    },
    "coinbase.eng.prime.api.api.Web3DepositActivityMetadata.AssetTransfer": {
      "type": "object",
      "properties": {
        "asset_symbol": {
          "type": "string",
          "title": "asset symbol for the currency being transferred"
        },
        "asset_quantity": {
          "type": "string",
          "title": "amount being transferred, denominated in atomic units of the crypto asset"
        },
        "asset_contract_address": {
          "type": "string",
          "title": "asset contract address"
        },
        "asset_token_id": {
          "type": "string",
          "title": "asset token id in case of Nfts"
        }
      },
      "title": "Asset tranfser details"
    },
    "coinbase.eng.prime.api.api.Web3Device": {
      "type": "object",
      "properties": {
        "device_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "complete": {
          "type": "boolean"
        },
        "state": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.DeviceState"
        },
        "idfv": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "make": {
          "type": "string"
        },
        "os_name": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.DeviceOsName"
        },
        "os_version": {
          "type": "string"
        },
        "enrolled_at": {
          "type": "string"
        },
        "last_active_at": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.Web3Info": {
      "type": "object",
      "properties": {
        "network_family": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.NetworkFamily"
        },
        "operation_name": {
          "type": "string"
        },
        "signing_backend": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.SigningBackend"
        }
      }
    },
    "coinbase.eng.prime.api.api.Web3KeyExport": {
      "type": "object",
      "properties": {
        "key_exporter_id": {
          "type": "string"
        },
        "security_key_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "quorum_threshold": {
          "type": "integer",
          "format": "int32"
        },
        "key_export_operation_name": {
          "type": "string"
        },
        "web3_security_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3SecurityKey"
          }
        }
      }
    },
    "coinbase.eng.prime.api.api.Web3MessageActivityDetails": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "signed_message": {
          "type": "string"
        },
        "network_name": {
          "type": "string"
        },
        "dapp_name": {
          "type": "string"
        },
        "dapp_url": {
          "type": "string"
        },
        "operation_name": {
          "type": "string"
        },
        "source_wallet_id": {
          "type": "string"
        },
        "ready_for_signing": {
          "type": "boolean"
        },
        "signing_initiated_timestamp": {
          "type": "string"
        },
        "evaluation_result": {
          "$ref": "#/definitions/eng.prime.policy.api.EvaluationResult"
        },
        "message_scanner_result": {
          "$ref": "#/definitions/scanner.ScanMessageResponse"
        },
        "source_address": {
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "coinbase.eng.prime.api.api.Web3Onboarding": {
      "type": "object",
      "properties": {
        "signing_user_id": {
          "type": "string"
        },
        "keygen_operation_name": {
          "type": "string"
        },
        "initiate_backup_operation_name": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.Web3Recovery": {
      "type": "object",
      "properties": {
        "initiate_recovery_operation_name": {
          "type": "string"
        },
        "recovering_user_id": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.Web3RiskScore": {
      "type": "object",
      "properties": {
        "risk_status": {
          "type": "string"
        },
        "naughty_list_risk_score": {
          "type": "string"
        },
        "kyt_risk_score": {
          "type": "string"
        },
        "ofac_check_score": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.Web3SecurityKey": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "issued_date": {
          "type": "string"
        },
        "fingerprint": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3SecurityKeyStatus"
        },
        "associations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Association"
          }
        },
        "certificate": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "coinbase.eng.prime.api.api.Web3SecurityKeyStatus": {
      "type": "string",
      "enum": [
        "SECURITY_KEY_STATUS_UNSPECIFIED",
        "SECURITY_KEY_STATUS_ACTIVE",
        "SECURITY_KEY_STATUS_ARCHIVED"
      ],
      "default": "SECURITY_KEY_STATUS_UNSPECIFIED"
    },
    "coinbase.eng.prime.api.api.Web3SignerAddition": {
      "type": "object",
      "properties": {
        "signer_addition_operation_name": {
          "type": "string"
        },
        "signer_id": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.api.api.Web3TransactionActivityDetails": {
      "type": "object",
      "properties": {
        "raw_unsigned_tx": {
          "type": "string"
        },
        "network_name": {
          "type": "string"
        },
        "transaction_hash": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3TransactionActivityMetadata"
        },
        "source_address": {
          "type": "string"
        },
        "dapp_name": {
          "type": "string"
        },
        "dapp_url": {
          "type": "string"
        },
        "destination_address": {
          "type": "string"
        },
        "risk_score": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3RiskScore"
        },
        "operation_name": {
          "type": "string"
        },
        "chain_id": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "replaced_transaction_id": {
          "type": "string",
          "description": "Id of transaction being replaced (speedup or cancel). This is also the activity id for the transaction."
        },
        "idempotency_key": {
          "type": "string"
        },
        "tx_scanner_result": {
          "$ref": "#/definitions/scanner.ScanResponse"
        },
        "source_wallet_id": {
          "type": "string"
        },
        "ready_for_signing": {
          "type": "boolean"
        },
        "signing_initiated_timestamp": {
          "type": "string"
        },
        "evaluation_result": {
          "$ref": "#/definitions/eng.prime.policy.api.EvaluationResult"
        }
      },
      "required": [
        "raw_unsigned_tx",
        "network_name"
      ]
    },
    "coinbase.eng.prime.api.api.Web3TransactionActivityMetadata": {
      "type": "object",
      "properties": {
        "total_usd_value_lower_bound": {
          "type": "string",
          "title": "lower bound of the amount being transferred by the transaction, denominated in USD"
        },
        "total_usd_value_upper_bound": {
          "type": "string",
          "title": "upper bound of the amount being transferred by the transaction, denominated in USD"
        },
        "fees": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3TransactionActivityMetadata.Fees"
        },
        "transfers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3TransactionActivityMetadata.AssetTransfer"
          }
        },
        "contract_call_data": {
          "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3TransactionActivityMetadata.ContractCallData",
          "description": "Information about the contract call this transaction makes. Empty if the transaction does not make a contract call."
        }
      },
      "description": "Field on web3 transactions for specifying transaction amounts."
    },
    "coinbase.eng.prime.api.api.Web3TransactionActivityMetadata.AssetTransfer": {
      "type": "object",
      "properties": {
        "asset_symbol": {
          "type": "string",
          "title": "asset symbol for the currency being transferred"
        },
        "asset_quantity": {
          "type": "string",
          "title": "amount being transferred, denominated in atomic units of the crypto asset"
        },
        "usd_value": {
          "type": "string",
          "title": "amount being transferred, denominated in USD"
        }
      },
      "title": "Asset tranfser details"
    },
    "coinbase.eng.prime.api.api.Web3TransactionActivityMetadata.ContractCallData": {
      "type": "object",
      "properties": {
        "function_name": {
          "type": "string"
        },
        "arguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Web3TransactionActivityMetadata.ContractCallData.Argument"
          }
        }
      },
      "title": "ContractCallData contains information about the contract call the transaction will make (if any)"
    },
    "coinbase.eng.prime.api.api.Web3TransactionActivityMetadata.ContractCallData.Argument": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "description": "Argument contains information about a single argument passed to the contract function."
    },
    "coinbase.eng.prime.api.api.Web3TransactionActivityMetadata.Fees": {
      "type": "object",
      "properties": {
        "asset_symbol": {
          "type": "string",
          "title": "asset symbol for the fee currency"
        },
        "asset_quantity_lower_bound": {
          "type": "string",
          "title": "lower bound for fees, denominated in atomic units of the crypto asset"
        },
        "asset_quantity_upper_bound": {
          "type": "string",
          "title": "upper bound for fees, denominated in atomic units of the crypto asset"
        },
        "usd_value_lower_bound": {
          "type": "string",
          "title": "lower bound for fees, denominated in USD"
        },
        "usd_value_upper_bound": {
          "type": "string",
          "title": "upper bound for fees, denominated in USD"
        }
      },
      "title": "Transaction fee details"
    },
    "coinbase.eng.prime.api.api.YieldFarm": {
      "type": "object",
      "properties": {
        "farming": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Token"
          }
        },
        "leveraged_farming": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Token"
          }
        },
        "yield": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.api.api.Token"
          }
        }
      }
    },
    "coinbase.eng.prime.apikey.api.APIKey": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "access_key": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "expiration_date": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.apikey.api.APIKeyPermission"
          }
        },
        "last_used_date": {
          "type": "string"
        },
        "activated_by": {
          "$ref": "#/definitions/coinbase.eng.prime.apikey.api.User"
        },
        "state": {
          "$ref": "#/definitions/coinbase.eng.prime.apikey.api.APIKeyState"
        },
        "created_at": {
          "type": "string"
        },
        "activated_at": {
          "type": "string"
        },
        "deactivated_at": {
          "type": "string"
        },
        "service_account_id": {
          "type": "string"
        },
        "created_by": {
          "$ref": "#/definitions/coinbase.eng.prime.apikey.api.User"
        },
        "group_id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coinbase.eng.prime.apikey.api.APIKeyType"
        }
      },
      "required": [
        "name",
        "access_key",
        "portfolio_id",
        "permissions",
        "state",
        "created_at",
        "service_account_id",
        "created_by"
      ]
    },
    "coinbase.eng.prime.apikey.api.APIKeyPermission": {
      "type": "string",
      "enum": [
        "API_KEY_PERMISSION_UNKNOWN",
        "API_KEY_PERMISSION_READ",
        "API_KEY_PERMISSION_TRANSFER",
        "API_KEY_PERMISSION_TRADE",
        "API_KEY_PERMISSION_ALLOCATE"
      ],
      "default": "API_KEY_PERMISSION_UNKNOWN"
    },
    "coinbase.eng.prime.apikey.api.APIKeyState": {
      "type": "string",
      "enum": [
        "API_KEY_STATE_UNKNOWN",
        "API_KEY_STATE_PENDING",
        "API_KEY_STATE_ACTIVATED",
        "API_KEY_STATE_DEACTIVATED",
        "API_KEY_STATE_EXPIRED",
        "API_KEY_STATE_DORMANT"
      ],
      "default": "API_KEY_STATE_UNKNOWN"
    },
    "coinbase.eng.prime.apikey.api.APIKeyType": {
      "type": "string",
      "enum": [
        "PORTFOLIO",
        "ENTITY",
        "ORGANIZATION"
      ],
      "default": "PORTFOLIO"
    },
    "coinbase.eng.prime.apikey.api.User": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        }
      },
      "required": [
        "user_id",
        "username",
        "avatar"
      ]
    },
    "coinbase.eng.prime.fees.api.FeeModel": {
      "type": "string",
      "enum": [
        "FEE_MODEL_UNKNOWN",
        "FEE_MODEL_ALL_IN",
        "FEE_MODEL_COST_PLUS"
      ],
      "default": "FEE_MODEL_UNKNOWN"
    },
    "coinbase.eng.prime.fees.api.FeeTier": {
      "type": "string",
      "enum": [
        "FEE_TIER_UNKNOWN",
        "FEE_TIER_HIGH",
        "FEE_TIER_LOW"
      ],
      "default": "FEE_TIER_UNKNOWN"
    },
    "coinbase.eng.prime.fees.api.GetFeeInfoResponse": {
      "type": "object",
      "properties": {
        "fee_model": {
          "$ref": "#/definitions/coinbase.eng.prime.fees.api.FeeModel"
        },
        "fee_tier": {
          "$ref": "#/definitions/coinbase.eng.prime.fees.api.FeeTier"
        },
        "fee_rate": {
          "type": "string"
        },
        "high_tier_rate": {
          "type": "string"
        },
        "low_tier_rate": {
          "type": "string"
        },
        "total_auc": {
          "type": "string"
        },
        "avg_volume": {
          "type": "string"
        },
        "ces_high_liquidity_rate": {
          "type": "string"
        },
        "ces_low_liquidity_rate": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.notification.api.AssociateObject": {
      "type": "object",
      "properties": {
        "associate_object_id": {
          "type": "string"
        },
        "activity_category": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityCategory"
        }
      },
      "title": "represents associated order or activity"
    },
    "coinbase.eng.prime.notification.api.Channel": {
      "type": "string",
      "enum": [
        "CHANNEL_UNSPECIFIED",
        "CHANNEL_EMAIL",
        "CHANNEL_PUSH",
        "CHANNEL_IN_APP",
        "CHANNEL_SMS"
      ],
      "default": "CHANNEL_UNSPECIFIED",
      "title": "notification type"
    },
    "coinbase.eng.prime.notification.api.ConvertedInAppTemplate": {
      "type": "object",
      "properties": {
        "task_in_app_template": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.TaskConvertedInAppTemplate"
        },
        "warning_in_app_template": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.WarningConvertedInAppTemplate"
        },
        "information_in_app_template": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.InformationConvertedInAppTemplate"
        },
        "status_update_in_app_template": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.StatusUpdateConvertedInAppTemplate"
        }
      },
      "title": "specifies converted type of in-app notification template returned to FE"
    },
    "coinbase.eng.prime.notification.api.CurrencyAndTradeInfo": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "trading_pair": {
          "type": "string"
        },
        "trading_algorithm": {
          "type": "string"
        }
      },
      "title": "currency and trade info for in-app notification templates"
    },
    "coinbase.eng.prime.notification.api.InAppNotification": {
      "type": "object",
      "properties": {
        "converted_in_app_template": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.ConvertedInAppTemplate"
        },
        "in_app_metadata": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.InAppResponseMetadata"
        }
      },
      "title": "InAppNotification object to be used in ListInAppNotifications endpoint"
    },
    "coinbase.eng.prime.notification.api.InAppNotificationStatusUpdate": {
      "type": "object",
      "properties": {
        "notification_id": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.InAppStatus"
        }
      },
      "title": "Update InAppNotification Status"
    },
    "coinbase.eng.prime.notification.api.InAppResponseMetadata": {
      "type": "object",
      "properties": {
        "in_app_notification_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.InAppStatus"
        },
        "associate_object": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.AssociateObject"
        },
        "in_app_type": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.InAppType"
        }
      },
      "title": "metadata object for get in-app response notifications"
    },
    "coinbase.eng.prime.notification.api.InAppStatus": {
      "type": "string",
      "enum": [
        "IN_APP_STATUS_UNSPECIFIED",
        "IN_APP_STATUS_UNREAD",
        "IN_APP_STATUS_REVIEWED",
        "IN_APP_STATUS_READ"
      ],
      "default": "IN_APP_STATUS_UNSPECIFIED",
      "title": "represents status of in-app notification"
    },
    "coinbase.eng.prime.notification.api.InAppType": {
      "type": "string",
      "enum": [
        "IN_APP_TYPE_UNSPECIFIED",
        "IN_APP_TYPE_TASK",
        "IN_APP_TYPE_WARNING",
        "IN_APP_TYPE_INFORMATION",
        "IN_APP_TYPE_STATUS_UPDATE"
      ],
      "default": "IN_APP_TYPE_UNSPECIFIED",
      "title": "specifies type of notification"
    },
    "coinbase.eng.prime.notification.api.InformationConvertedInAppTemplate": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "main_label": {
          "type": "string"
        },
        "sub_label": {
          "type": "string"
        },
        "action_url": {
          "type": "string"
        },
        "currency_and_trade_info": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.CurrencyAndTradeInfo"
        },
        "additional_text": {
          "type": "string"
        }
      },
      "title": "template for in-app information notifications when returned to FE"
    },
    "coinbase.eng.prime.notification.api.NotificationCategory": {
      "type": "string",
      "enum": [
        "NOTIFICATION_CATEGORY_UNSPECIFIED",
        "NOTIFICATION_CATEGORY_TRANSACTIONS",
        "NOTIFICATION_CATEGORY_ORDERS",
        "NOTIFICATION_CATEGORY_FINANCING",
        "NOTIFICATION_CATEGORY_BILLING",
        "NOTIFICATION_CATEGORY_REPORTING",
        "NOTIFICATION_CATEGORY_ALLOCATIONS",
        "NOTIFICATION_CATEGORY_ACCOUNTS",
        "NOTIFICATION_CATEGORY_GOVERNANCE",
        "NOTIFICATION_CATEGORY_BANKING",
        "NOTIFICATION_CATEGORY_WALLET",
        "NOTIFICATION_CATEGORY_STAKING"
      ],
      "default": "NOTIFICATION_CATEGORY_UNSPECIFIED",
      "title": "notification template categories"
    },
    "coinbase.eng.prime.notification.api.PortfolioFilter": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        }
      },
      "title": "Filter for portfolio when requesting in-app Notification"
    },
    "coinbase.eng.prime.notification.api.StatusUpdateConvertedInAppTemplate": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "main_label": {
          "type": "string"
        },
        "sub_label": {
          "type": "string"
        },
        "currency_and_trade_info": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.CurrencyAndTradeInfo"
        },
        "associate_object_status": {
          "$ref": "#/definitions/coinbase.eng.prime.activity.api.ActivityStatus"
        },
        "additional_text": {
          "type": "string"
        }
      },
      "title": "template for in-app status update notifications when returned to FE"
    },
    "coinbase.eng.prime.notification.api.TaskConvertedInAppTemplate": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "main_label": {
          "type": "string"
        },
        "sub_label": {
          "type": "string"
        },
        "action_instruction": {
          "type": "string"
        },
        "currency_and_trade_info": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.CurrencyAndTradeInfo"
        },
        "additional_text": {
          "type": "string"
        }
      },
      "title": "template for in-app task notifications when returned to FE"
    },
    "coinbase.eng.prime.notification.api.UserPreferenceForChannel": {
      "type": "object",
      "properties": {
        "notification_category": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.NotificationCategory"
        },
        "follow": {
          "type": "boolean"
        }
      },
      "title": "return type for GetUserPreferenceResponse prop"
    },
    "coinbase.eng.prime.notification.api.WarningConvertedInAppTemplate": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "main_label": {
          "type": "string"
        },
        "sub_label": {
          "type": "string"
        },
        "error_message": {
          "type": "string"
        },
        "currency_and_trade_info": {
          "$ref": "#/definitions/coinbase.eng.prime.notification.api.CurrencyAndTradeInfo"
        },
        "additional_text": {
          "type": "string"
        }
      },
      "title": "template for in-app task notifications when returned to FE"
    },
    "coinbase.eng.prime.reporting.api.Document": {
      "type": "object",
      "properties": {
        "idem": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coinbase.eng.prime.reporting.api.DocumentType"
        },
        "format": {
          "$ref": "#/definitions/coinbase.eng.prime.reporting.api.DocumentFormat"
        },
        "state": {
          "$ref": "#/definitions/coinbase.eng.prime.reporting.api.DocumentState"
        },
        "download_link": {
          "type": "string"
        }
      }
    },
    "coinbase.eng.prime.reporting.api.DocumentFormat": {
      "type": "string",
      "enum": [
        "DOCUMENT_FILE_FORMAT_UNKNOWN",
        "DOCUMENT_FILE_FORMAT_CSV",
        "DOCUMENT_FILE_FORMAT_PDF"
      ],
      "default": "DOCUMENT_FILE_FORMAT_UNKNOWN"
    },
    "coinbase.eng.prime.reporting.api.DocumentState": {
      "type": "string",
      "enum": [
        "DOCUMENT_STATE_UNKNOWN",
        "DOCUMENT_STATE_PROCESSING",
        "DOCUMENT_STATE_DONE",
        "DOCUMENT_STATE_FAILED"
      ],
      "default": "DOCUMENT_STATE_UNKNOWN"
    },
    "coinbase.eng.prime.reporting.api.DocumentType": {
      "type": "string",
      "enum": [
        "DOCUMENT_TYPE_UNKNOWN",
        "DOCUMENT_TYPE_VENUE_BALANCE",
        "DOCUMENT_TYPE_ALERT",
        "DOCUMENT_TYPE_ORDER_FILLS",
        "DOCUMENT_TYPE_INVOICE"
      ],
      "default": "DOCUMENT_TYPE_UNKNOWN"
    },
    "coinbase.eng.prime.reporting.api.Report": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "format": {
          "$ref": "#/definitions/coinbase.eng.prime.reporting.api.ReportFormat"
        },
        "bucket": {
          "type": "string",
          "title": "for migration purposes only"
        },
        "key": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "link",
        "format"
      ]
    },
    "coinbase.eng.prime.reporting.api.ReportFormat": {
      "type": "string",
      "enum": [
        "REPORT_FORMAT_UNKNOWN",
        "REPORT_FORMAT_PDF",
        "REPORT_FORMAT_CSV"
      ],
      "default": "REPORT_FORMAT_UNKNOWN"
    },
    "coinbase.eng.prime.reporting.api.Statement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coinbase.eng.prime.reporting.api.StatementType"
        },
        "state": {
          "$ref": "#/definitions/coinbase.eng.prime.reporting.api.StatementState"
        },
        "vehicle_id": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "range_start": {
          "type": "string"
        },
        "range_end": {
          "type": "string"
        },
        "start_usd_balance": {
          "type": "string"
        },
        "end_usd_balance": {
          "type": "string"
        },
        "reports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.reporting.api.Report"
          }
        },
        "range_start_rfc3339": {
          "type": "string"
        },
        "range_end_rfc3339": {
          "type": "string"
        },
        "generated_at": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "type",
        "state",
        "vehicle_id",
        "range_start",
        "range_end",
        "start_usd_balance",
        "end_usd_balance",
        "reports"
      ]
    },
    "coinbase.eng.prime.reporting.api.StatementState": {
      "type": "string",
      "enum": [
        "STATEMENT_STATE_UNKNOWN",
        "STATEMENT_STATE_PROCESSING",
        "STATEMENT_STATE_COMPLETED",
        "STATEMENT_STATE_FAILED"
      ],
      "default": "STATEMENT_STATE_UNKNOWN"
    },
    "coinbase.eng.prime.reporting.api.StatementType": {
      "type": "string",
      "enum": [
        "STATEMENT_TYPE_UNKNOWN",
        "STATEMENT_TYPE_CUSTODY_EOM",
        "STATEMENT_TYPE_PRIME_ENTITY_LEVEL"
      ],
      "default": "STATEMENT_TYPE_UNKNOWN",
      "title": "- STATEMENT_TYPE_CUSTODY_EOM: This type correspond to portfolio level statement\n - STATEMENT_TYPE_PRIME_ENTITY_LEVEL: This type correspond to entity level statement"
    },
    "coinbase.eng.prime.reporting.api.reporting_center.GenerateReportType": {
      "type": "string",
      "enum": [
        "GENERATE_REPORT_TYPE_UNSPECIFIED",
        "GENERATE_REPORT_TYPE_DAL_REPORT",
        "GENERATE_REPORT_TYPE_STAKING_REPORT"
      ],
      "default": "GENERATE_REPORT_TYPE_UNSPECIFIED",
      "title": "the different report types that can be generated"
    },
    "coinbase.eng.prime.reporting.api.reporting_center.InitiatorType": {
      "type": "string",
      "enum": [
        "INITIATOR_TYPE_UNSPECIFIED",
        "INITIATOR_TYPE_CLIENT",
        "INITIATOR_TYPE_SYSTEM_GENERATED"
      ],
      "default": "INITIATOR_TYPE_UNSPECIFIED",
      "title": "the different initiator types for reports"
    },
    "coinbase.eng.prime.reporting.api.reporting_center.ReportType": {
      "type": "string",
      "enum": [
        "REPORT_TYPE_UNSPECIFIED",
        "REPORT_TYPE_MONTHLY_STATEMENT"
      ],
      "default": "REPORT_TYPE_UNSPECIFIED",
      "title": "the different report types"
    },
    "coinbase.eng.prime.reporting.api.reporting_center.ReportingCenterData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "vehicle_id": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "initiated_by": {
          "type": "string"
        },
        "initiator_type": {
          "$ref": "#/definitions/coinbase.eng.prime.reporting.api.reporting_center.InitiatorType"
        },
        "type": {
          "$ref": "#/definitions/coinbase.eng.prime.reporting.api.reporting_center.ReportType"
        },
        "reports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.eng.prime.reporting.api.Report"
          }
        },
        "idem": {
          "type": "string"
        },
        "reference_id": {
          "type": "string"
        },
        "initiated_by_user_info": {
          "$ref": "#/definitions/coinbase.eng.prime.reporting.api.reporting_center.UserInformation"
        },
        "portfolio_name": {
          "type": "string"
        },
        "period_start": {
          "type": "string"
        },
        "period_end": {
          "type": "string"
        }
      },
      "title": "ReportingCenterData declaration, to be stored in mongo",
      "required": [
        "id",
        "vehicle_id",
        "created_at",
        "type",
        "reports",
        "display_name"
      ]
    },
    "coinbase.eng.prime.reporting.api.reporting_center.UserInformation": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "title": "UserInformation is the information for a user",
      "required": [
        "email",
        "name",
        "avatar_url",
        "id"
      ]
    },
    "coinbase.financing.Amount": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.AssetLongShortPosition": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string"
        },
        "long_amount": {
          "type": "string"
        },
        "long_notional_amount": {
          "type": "string"
        },
        "short_amount": {
          "type": "string"
        },
        "short_notional_amount": {
          "type": "string"
        },
        "conversion_rate": {
          "type": "string"
        },
        "net_position": {
          "type": "string"
        },
        "net_notional_position": {
          "type": "string"
        },
        "market_rate": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.Collateral": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "balance": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "notional_balance": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "collateral_type": {
          "$ref": "#/definitions/coinbase.financing.CollateralType"
        },
        "percentage": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.CollateralSnapshot": {
      "type": "object",
      "properties": {
        "borrower_name": {
          "type": "string"
        },
        "margin_status": {
          "$ref": "#/definitions/coinbase.financing.MarginCallStatus"
        },
        "required_collateral": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "excess_shortfall": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "held_collateral": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "held_collateral_post_haircut": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "snapshot_time": {
          "type": "string",
          "format": "date-time"
        },
        "excess_shortfall_percentage": {
          "type": "string"
        },
        "held_collateral_breakdown": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.Collateral"
          }
        },
        "held_collateral_post_haircut_breakdown": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.Collateral"
          }
        }
      }
    },
    "coinbase.financing.CollateralType": {
      "type": "string",
      "enum": [
        "COLLATERAL_TYPE_UNSET",
        "COLLATERAL_TYPE_LEND",
        "COLLATERAL_TYPE_BORROW"
      ],
      "default": "COLLATERAL_TYPE_UNSET"
    },
    "coinbase.financing.ConversionSummaryV2": {
      "type": "object",
      "properties": {
        "conversion_id": {
          "type": "string"
        },
        "conversion_datetime": {
          "type": "string"
        },
        "margin_information": {
          "$ref": "#/definitions/coinbase.financing.MarginInformation"
        }
      }
    },
    "coinbase.financing.GetAllLocatesByPortfolioResponse": {
      "type": "object",
      "properties": {
        "locates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.PMLocate"
          }
        },
        "result_count": {
          "type": "integer",
          "format": "int32"
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.financing.PaginationResponse"
        }
      }
    },
    "coinbase.financing.GetConversionSummariesV2Response": {
      "type": "object",
      "properties": {
        "conversion_summaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.ConversionSummaryV2"
          }
        }
      }
    },
    "coinbase.financing.GetCurrentLocatesResponse": {
      "type": "object",
      "properties": {
        "current_locates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.PMLocate"
          }
        }
      }
    },
    "coinbase.financing.GetDalCollateralSnapshotsResponse": {
      "type": "object",
      "properties": {
        "collateral_snapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.CollateralSnapshot"
          }
        }
      }
    },
    "coinbase.financing.GetLocateAssetsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.LocateAsset"
          }
        }
      }
    },
    "coinbase.financing.LoanInfo": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "notional_amount": {
          "type": "string"
        },
        "due_date": {
          "type": "string",
          "format": "date-time"
        },
        "loan_id": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.LocateAsset": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "current_price": {
          "type": "string"
        },
        "interest_rate": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.LocateError": {
      "type": "object",
      "properties": {
        "new_locate": {
          "$ref": "#/definitions/coinbase.financing.NewLocate"
        },
        "error_message": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.LocateFiltersWithDate": {
      "type": "object",
      "properties": {
        "statuses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "start_conversion_date": {
          "type": "string"
        },
        "end_conversion_date": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.MarginAddOn": {
      "type": "object",
      "properties": {
        "amount": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "add_on_type": {
          "$ref": "#/definitions/coinbase.financing.MarginAddOnType"
        }
      }
    },
    "coinbase.financing.MarginAddOnType": {
      "type": "string",
      "enum": [
        "MARGIN_ADD_ON_TYPE_UNSPECIFIED",
        "SINGLE_COIN_STRESS",
        "CONCENTRATION_STRESS",
        "MACRO_STRESS",
        "SHORT_BIASED_STRESS"
      ],
      "default": "MARGIN_ADD_ON_TYPE_UNSPECIFIED"
    },
    "coinbase.financing.MarginCallHistoryRecord": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "required_collateral_notional": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "held_collateral_notional": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "held_collateral_breakdown": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.Amount"
          }
        },
        "excess_collateral_notional": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "held_collateral_percentage": {
          "type": "string"
        },
        "margin_call_amount_notional": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "outstanding_margin_call_amount_notional": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "status": {
          "$ref": "#/definitions/coinbase.financing.MarginCallStatus"
        },
        "due_at": {
          "type": "string",
          "format": "date-time"
        },
        "margin_call_id": {
          "type": "string"
        },
        "adjusted_held_collateral_notional": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "entity_id": {
          "type": "string"
        },
        "entity_name": {
          "type": "string"
        },
        "paid": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "excess_shortfall_percentage": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.MarginCallStatus": {
      "type": "string",
      "enum": [
        "UNSET",
        "CURRENT",
        "AGED",
        "REMEDIATED",
        "CANCELLED"
      ],
      "default": "UNSET"
    },
    "coinbase.financing.MarginInformation": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "margin_equity": {
          "$ref": "#/definitions/coinbase.financing.Amount",
          "title": "total equity value across all portfolios (USD)"
        },
        "margin_requirement": {
          "$ref": "#/definitions/coinbase.financing.Amount",
          "title": "required equity value across all portfolios (USD)"
        },
        "excess_deficit": {
          "$ref": "#/definitions/coinbase.financing.Amount",
          "title": "calculated from held_equity - required_equity"
        },
        "pm_credit_limit": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "pm_credit_consumed": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "tf_credit_limit": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "tf_credit_consumed": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "tf_adjusted_credit_consumed": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "tf_adjusted_equity": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "tf_adjusted_asset_value": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "tf_adjusted_liability_value": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "frozen": {
          "type": "boolean"
        },
        "frozen_reason": {
          "type": "string"
        },
        "tf_enabled": {
          "type": "boolean"
        },
        "pm_enabled": {
          "type": "boolean"
        },
        "amounts_due": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.SettlementDue"
          }
        },
        "margin_call_records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.MarginCallHistoryRecord"
          }
        },
        "tf_loans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.LoanInfo"
          }
        },
        "pm_loans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.LoanInfo"
          }
        },
        "short_collateral": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.LoanInfo"
          }
        },
        "asset_balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.PortfolioAsset"
          }
        },
        "market_rates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.MarketRate"
          },
          "title": "asset balances symbol and rate"
        },
        "gross_market_value": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "net_market_value": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "long_market_value": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "non_marginable_long_market_value": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "short_market_value": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "gross_leverage": {
          "type": "string"
        },
        "net_exposure": {
          "type": "string"
        },
        "portfolio_stress_triggered": {
          "$ref": "#/definitions/coinbase.financing.MarginAddOn"
        },
        "all_margin_add_ons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.MarginAddOn"
          }
        },
        "pm_asset_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.PMAssetInfo"
          }
        },
        "tf_asset_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.TFAssetInfo"
          }
        },
        "equity_percentage": {
          "type": "string"
        },
        "short_collateral_balance": {
          "type": "string"
        },
        "cash_value": {
          "type": "string"
        },
        "total_settlement_due": {
          "type": "string"
        },
        "total_settlement_past_due": {
          "type": "string"
        },
        "total_settlement_due_next": {
          "type": "string"
        },
        "net_leverage": {
          "type": "string"
        },
        "base_margin_short": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "base_margin_long": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "base_margin_total": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "asset_long_short_positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.AssetLongShortPosition"
          }
        }
      }
    },
    "coinbase.financing.MarketRate": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string"
        },
        "rate": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.NewLocate": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "conversion_date": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.PMAssetInfo": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string"
        },
        "balance": {
          "type": "string"
        },
        "sector": {
          "type": "string"
        },
        "market_cap": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "market_value": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "market_price": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "base_requirement": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "margin_requirement": {
          "type": "string"
        },
        "adv_30d": {
          "type": "string"
        },
        "hist_5d_vol": {
          "type": "string"
        },
        "hist_30d_vol": {
          "type": "string"
        },
        "hist_90d_vol": {
          "type": "string"
        },
        "liq_longs": {
          "type": "string"
        },
        "liq_shorts": {
          "type": "string"
        },
        "vol_longs": {
          "type": "string"
        },
        "vol_shorts": {
          "type": "string"
        },
        "total_long": {
          "type": "string"
        },
        "total_short": {
          "type": "string"
        },
        "vol_5d": {
          "type": "string"
        },
        "vol_30d": {
          "type": "string"
        },
        "vol_90d": {
          "type": "string"
        },
        "margin_eligible": {
          "type": "boolean"
        },
        "liquidity_addon": {
          "type": "string"
        },
        "volatility_addon": {
          "type": "string"
        },
        "total_position_margin": {
          "type": "string"
        },
        "asset_tier": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.PMLocate": {
      "type": "object",
      "properties": {
        "locate_id": {
          "type": "string"
        },
        "entity_id": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "requested_amount": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "interest_rate": {
          "type": "string"
        },
        "approved_amount": {
          "type": "string"
        },
        "conversion_date": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "requested_notional_amount": {
          "type": "string"
        },
        "approved_notional_amount": {
          "type": "string"
        },
        "asset_current_price": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "rate_type": {
          "$ref": "#/definitions/coinbase.financing.RateType"
        }
      }
    },
    "coinbase.financing.PaginationDirection": {
      "type": "string",
      "enum": [
        "DESC",
        "ASC"
      ],
      "default": "DESC"
    },
    "coinbase.financing.PaginationOptions": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "cursor": {
          "type": "string"
        },
        "direction": {
          "$ref": "#/definitions/coinbase.financing.PaginationDirection"
        }
      }
    },
    "coinbase.financing.PaginationResponse": {
      "type": "object",
      "properties": {
        "next_cursor": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.PortfolioAsset": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "notional_amount": {
          "type": "string"
        },
        "conversion_rate": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.PortfolioFinancingOverview": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "cdal_enabled": {
          "type": "boolean"
        },
        "pm_enabled": {
          "type": "boolean"
        },
        "tf_enabled": {
          "type": "boolean"
        },
        "bl_enabled": {
          "type": "boolean"
        }
      }
    },
    "coinbase.financing.PortfolioOverviewResponse": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string"
        },
        "cdal_enabled": {
          "type": "boolean"
        },
        "pm_enabled": {
          "type": "boolean"
        },
        "tf_enabled": {
          "type": "boolean"
        },
        "bl_enabled": {
          "type": "boolean"
        },
        "portfolios": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.PortfolioFinancingOverview"
          }
        }
      }
    },
    "coinbase.financing.RateType": {
      "type": "string",
      "enum": [
        "BPS",
        "APR_360",
        "APR_365",
        "APR"
      ],
      "default": "BPS"
    },
    "coinbase.financing.SettlementDue": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "notional_balance": {
          "type": "string"
        },
        "settlement_status": {
          "$ref": "#/definitions/coinbase.financing.SettlementStatus"
        },
        "settlement_due_date": {
          "type": "string",
          "format": "date-time"
        },
        "grace_period_due_date": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "coinbase.financing.SettlementStatus": {
      "type": "string",
      "enum": [
        "OK",
        "OVERDUE",
        "PRE_PAST_DUE",
        "GRACE_PERIOD"
      ],
      "default": "OK",
      "title": "- OK: amount owing is 0, or amount owing is positive but we are prior to two hours to settlement due date\n - OVERDUE: amount owing is positive, we are after grace period due date\n - PRE_PAST_DUE: amount owing is positive, but we are within two hours before the settlement due date\n - GRACE_PERIOD: amount owing is positive, we are after settlement due date but before grace period due date"
    },
    "coinbase.financing.SubmitDALRecallRequest": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "asset": {
          "type": "string"
        },
        "quantity": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.SubmitDALRecallResponse": {
      "type": "object",
      "properties": {
        "confirmation_code": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.SubmitLocatesRequest": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "conversion_date": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.SubmitLocatesResponse": {
      "type": "object",
      "properties": {
        "locate_id": {
          "type": "string"
        }
      }
    },
    "coinbase.financing.SubmitMultipleLocatesRequest": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "new_locates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.NewLocate"
          }
        }
      }
    },
    "coinbase.financing.SubmitMultipleLocatesResponse": {
      "type": "object",
      "properties": {
        "locate_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locate_errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.financing.LocateError"
          }
        }
      }
    },
    "coinbase.financing.TFAssetInfo": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string"
        },
        "balance": {
          "type": "string"
        },
        "balance_notional": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "market_price": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        },
        "asset_tier": {
          "type": "string"
        },
        "adjusted_balance": {
          "type": "string"
        },
        "adjusted_balance_notional": {
          "$ref": "#/definitions/coinbase.financing.Amount"
        }
      }
    },
    "coinbase.payments.common.Address": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.DigitalWalletDetails": {
      "type": "object",
      "properties": {
        "nonce": {
          "type": "string"
        },
        "correlation_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.Money": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        }
      },
      "description": "A quantity of money.\n\nThis is a clone of\nhttps://github.cbhq.net/mono/repo/blob/master/payments/shared/protos/coinbase/payments/shared/money.proto\n\nPlease refer to that file for format and convention, especially for the unit of amount."
    },
    "coinbase.payments.common.payment_methods.Address": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Allocation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "legs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.payments.common.payment_methods.AllocationLeg"
          }
        },
        "is_netted": {
          "type": "boolean"
        }
      }
    },
    "coinbase.payments.common.payment_methods.AllocationLeg": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "movements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.payments.common.payment_methods.FundMovement"
          }
        },
        "is_netted": {
          "type": "boolean"
        }
      }
    },
    "coinbase.payments.common.payment_methods.ApplePay": {
      "type": "object",
      "properties": {
        "braintree": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ApplePay.BraintreeData"
        },
        "apple_pay": {
          "$ref": "#/definitions/coinbase.payments.common.DigitalWalletDetails"
        },
        "user_id": {
          "type": "string"
        },
        "postal_code": {
          "type": "string",
          "title": "The following fields can be populated on the PM after an order\nis submitted in the InstructionResponse. They should not be filled in\na normal order Instruction though"
        },
        "customer_name": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Address"
        },
        "six_digit_bin": {
          "type": "string"
        },
        "last_four": {
          "type": "string"
        },
        "issuing_country": {
          "type": "string"
        },
        "issuing_bank": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "scheme": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ApplePay.Scheme"
        },
        "prepaid": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ApplePay.Result"
        },
        "debit": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ApplePay.Result"
        }
      },
      "title": "uniquely identifies a user's Coinbase account"
    },
    "coinbase.payments.common.payment_methods.ApplePay.BraintreeData": {
      "type": "object",
      "properties": {
        "nonce": {
          "type": "string"
        },
        "correlation_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.ApplePay.Result": {
      "type": "string",
      "enum": [
        "UNCERTAIN",
        "TRUE",
        "FALSE"
      ],
      "default": "UNCERTAIN"
    },
    "coinbase.payments.common.payment_methods.ApplePay.Scheme": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "VISA",
        "MASTERCARD"
      ],
      "default": "UNKNOWN"
    },
    "coinbase.payments.common.payment_methods.BancomatPay": {
      "type": "object",
      "properties": {
        "customer_name": {
          "type": "string"
        },
        "account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.BancomatPayAccount"
        }
      }
    },
    "coinbase.payments.common.payment_methods.BancomatPayAccount": {
      "type": "object",
      "properties": {
        "phone_number": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.BankAccount": {
      "type": "object",
      "properties": {
        "customer_account_type": {
          "type": "string"
        },
        "customer_account_number": {
          "type": "string"
        },
        "customer_routing_number": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.BlockchainAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "destination_tag": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.BlockchainTransaction": {
      "type": "object",
      "properties": {
        "hsh": {
          "type": "string"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "coinbase.payments.common.payment_methods.CTN": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Card": {
      "type": "object",
      "properties": {
        "first_data_token": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.FirstDataToken",
          "title": "set by payment initiator (monorail)"
        },
        "expiry_date": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ExpiryDate"
        },
        "postal_code": {
          "type": "string"
        },
        "merchant": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Merchant",
          "title": "set by satellite after processing"
        },
        "vault_token": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.VaultToken"
        },
        "worldpay_params": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.WorldpayParams"
        },
        "previous_scheme_tx_id": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Address"
        },
        "phone_number": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "customer_first_name": {
          "type": "string"
        },
        "customer_last_name": {
          "type": "string"
        },
        "six_digit_bin": {
          "type": "string"
        },
        "last_four": {
          "type": "string"
        },
        "customer_dob": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Card.Dob"
        },
        "scheme": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Card.Scheme"
        }
      },
      "title": "The card as a payment method source or target"
    },
    "coinbase.payments.common.payment_methods.Card.Dob": {
      "type": "object",
      "properties": {
        "month": {
          "type": "string"
        },
        "day": {
          "type": "string"
        },
        "year": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Card.Scheme": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "VISA",
        "MASTERCARD"
      ],
      "default": "UNKNOWN"
    },
    "coinbase.payments.common.payment_methods.Cbit": {
      "type": "object",
      "properties": {
        "cbit_wallet_address": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.CheckoutPaymentLink": {
      "type": "object",
      "properties": {
        "payment_link_id": {
          "type": "string"
        }
      },
      "title": "unique identifier for a checkout.com payment link"
    },
    "coinbase.payments.common.payment_methods.CoinbaseAccount": {
      "type": "object",
      "properties": {
        "account_id": {
          "type": "string"
        }
      },
      "title": "uniquely identifies a user's Coinbase account"
    },
    "coinbase.payments.common.payment_methods.CustodialPool": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "fiat_id": {
          "type": "string"
        }
      },
      "title": "note this is to support transaction logs where everything is expected to be a pm for a transfers source and target"
    },
    "coinbase.payments.common.payment_methods.DAppWalletAccount": {
      "type": "object",
      "properties": {
        "user_uuid": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "cohort_id": {
          "type": "string"
        }
      },
      "title": "uniquely identifies a user's dapp wallet account/address"
    },
    "coinbase.payments.common.payment_methods.DAppWalletBlockchainAddress": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "cohort_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.DefaultAccount": {
      "type": "object",
      "properties": {
        "user_uuid": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.DenebIMPS": {
      "type": "object",
      "properties": {
        "ifsc_code": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "customer_first_name": {
          "type": "string"
        },
        "customer_last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "pan": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Address"
        }
      }
    },
    "coinbase.payments.common.payment_methods.DenebUPI": {
      "type": "object",
      "properties": {
        "vpa_id": {
          "type": "string"
        },
        "customer_first_name": {
          "type": "string"
        },
        "customer_last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "pan": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Address"
        }
      }
    },
    "coinbase.payments.common.payment_methods.DerivativeSettlement": {
      "type": "object",
      "properties": {
        "account_settlements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.payments.common.payment_methods.DerivativeSettlement.AccountSettlement"
          },
          "title": "derivative EOD settlement can involve one or more fund movements"
        },
        "equity_reset": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.DerivativeSettlement.EquityReset",
          "title": "optionally reset CFM equity account"
        }
      }
    },
    "coinbase.payments.common.payment_methods.DerivativeSettlement.AccountSettlement": {
      "type": "object",
      "properties": {
        "amount": {
          "$ref": "#/definitions/coinbase.payments.common.Money"
        },
        "source_ledger_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerAccount"
        },
        "source_ledger_named_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerNamedAccount"
        },
        "target_ledger_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerAccount"
        },
        "target_ledger_named_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerNamedAccount"
        },
        "hold_id_to_replace": {
          "type": "string",
          "title": "Deprecated, use existing_hold_id instead"
        },
        "new_hold_id": {
          "type": "string",
          "title": "account settlement can optionally replace an existing hold with\n`hold_id_to_replace` to a new hold with `new_hold_id` and amount\nof `new_hold_amount`"
        },
        "new_hold_amount": {
          "$ref": "#/definitions/coinbase.payments.common.Money"
        },
        "existing_hold_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.DerivativeSettlement.EquityReset": {
      "type": "object",
      "properties": {
        "amount": {
          "$ref": "#/definitions/coinbase.payments.common.Money"
        },
        "equity_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerAccount"
        }
      }
    },
    "coinbase.payments.common.payment_methods.DirectDeposit": {
      "type": "object",
      "properties": {
        "direct_deposit_account": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.EmailAddress": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.ExpiryDate": {
      "type": "object",
      "properties": {
        "month": {
          "type": "string"
        },
        "year": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.ExternalPaymentMethod": {
      "type": "object",
      "properties": {
        "payment_method_id": {
          "type": "string"
        }
      },
      "title": "uniquely identifies am external payment method in the Payment Method Service"
    },
    "coinbase.payments.common.payment_methods.Fedwire": {
      "type": "object",
      "properties": {
        "routing_number": {
          "type": "string",
          "title": "sender_payment_instruction_id -- ask Gian about this"
        },
        "account_holder": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.FedwireAccount"
        },
        "bank": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.FedwireInstitution"
        },
        "intermediary_bank": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.FedwireInstitution"
        }
      },
      "title": "Fedwire contains all information necessary to initiate a payment to/from a fedwire eligible bank account.\nFormat based on the Fedwire Format Reference Guide Nov 2014"
    },
    "coinbase.payments.common.payment_methods.FedwireAccount": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.FedwireAddress"
        }
      },
      "title": "FedwireAccount represents an account at a financial insitition eligible for Fedwire"
    },
    "coinbase.payments.common.payment_methods.FedwireAddress": {
      "type": "object",
      "properties": {
        "lines": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "country_code": {
          "type": "string"
        }
      },
      "description": "FedwireAddress in an address ... no more, no less."
    },
    "coinbase.payments.common.payment_methods.FedwireInstitution": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.FedwireAddress"
        },
        "identifier": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.FedwireInstitution.Type"
        },
        "identifier_code": {
          "type": "string"
        }
      },
      "description": "FedwireInstitution is usually a bank, but can also be credit unions or other financial institutions."
    },
    "coinbase.payments.common.payment_methods.FedwireInstitution.Type": {
      "type": "string",
      "enum": [
        "CHIPS_IDENTIFIER",
        "CHIPS_PARTICIPANT",
        "DDA",
        "FEDWIRE",
        "SWIFT_BIC",
        "SWIFT_BIC_OR_BEI_AND_ACCOUNT",
        "PASSPORT_NUMBER",
        "TAX_IDENTIFICATION_NUMBER",
        "DRIVERS_LICENSE_NUMBER",
        "ALIEN_REGISTRATION_NUMBER",
        "CORPORATE_IDENTIFICATION_NUMBER",
        "OTHER_IDENTIFICATION",
        "UNKNOWN"
      ],
      "default": "CHIPS_IDENTIFIER"
    },
    "coinbase.payments.common.payment_methods.FirstDataToken": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "store_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.FundMovement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "source_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerAccount"
        },
        "destination_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerAccount"
        },
        "amount": {
          "$ref": "#/definitions/coinbase.payments.common.Money"
        }
      }
    },
    "coinbase.payments.common.payment_methods.GooglePay": {
      "type": "object",
      "properties": {
        "braintree": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.GooglePay.BraintreeData"
        },
        "google_pay": {
          "$ref": "#/definitions/coinbase.payments.common.DigitalWalletDetails"
        },
        "user_id": {
          "type": "string"
        },
        "postal_code": {
          "type": "string",
          "title": "The following fields can be populated on the PM after an order\nis submitted in the InstructionResponse. They should not be filled in\na normal order Instruction though"
        },
        "customer_name": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Address"
        },
        "six_digit_bin": {
          "type": "string"
        },
        "last_four": {
          "type": "string"
        },
        "issuing_country": {
          "type": "string"
        },
        "issuing_bank": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "scheme": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.GooglePay.Scheme"
        },
        "prepaid": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.GooglePay.Result"
        },
        "debit": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.GooglePay.Result"
        }
      },
      "title": "uniquely identifies a user's Coinbase account"
    },
    "coinbase.payments.common.payment_methods.GooglePay.BraintreeData": {
      "type": "object",
      "properties": {
        "nonce": {
          "type": "string"
        },
        "correlation_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.GooglePay.Result": {
      "type": "string",
      "enum": [
        "UNCERTAIN",
        "TRUE",
        "FALSE"
      ],
      "default": "UNCERTAIN"
    },
    "coinbase.payments.common.payment_methods.GooglePay.Scheme": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "VISA",
        "MASTERCARD"
      ],
      "default": "UNKNOWN"
    },
    "coinbase.payments.common.payment_methods.HotWallet": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "address": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Ideal": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "iban": {
          "type": "string"
        },
        "bic": {
          "type": "string"
        },
        "bank_name": {
          "type": "string"
        },
        "customer_payment_name": {
          "type": "string"
        },
        "customer_country_code": {
          "type": "string"
        }
      },
      "title": "Matches PMSvc IdealDetails\nhttps://github.cbhq.net/payments/payment-method-service/blob/07a0a07/protos/coinbase/payment_method_service/api.proto#L1565-L1571"
    },
    "coinbase.payments.common.payment_methods.IdentityContractCall": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "address": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Interac": {
      "type": "object",
      "properties": {
        "pmsvc_id": {
          "type": "string"
        },
        "account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Interac.Account"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Interac.Account": {
      "type": "object",
      "properties": {
        "account_name": {
          "type": "string",
          "title": "Name of the account fulfilling the Request Money Transaction"
        },
        "institution_number": {
          "type": "string",
          "description": "Institution Number: a 3-digit code that tells you which bank the account belongs to — unique for every Canadian bank."
        },
        "transit_number": {
          "type": "string",
          "description": "Transit Number: a 5-digit code that tells which branch of the bank the account was created at — it is unique to each bank branch."
        },
        "account_number": {
          "type": "string",
          "description": "Account Number: a 7-digit code that identifies the account within the branch and bank entered."
        }
      }
    },
    "coinbase.payments.common.payment_methods.IntraBank": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "routing_number": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "fiat_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.LedgerAccount": {
      "type": "object",
      "properties": {
        "account_id": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Owner"
        }
      },
      "title": "uniquely identifies an account in the Ledger Service"
    },
    "coinbase.payments.common.payment_methods.LedgerNamedAccount": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "foreign_network": {
          "type": "string"
        }
      },
      "title": "uniquely identifies a named account in the Ledger Service"
    },
    "coinbase.payments.common.payment_methods.LiquidityPool": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "pool": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "account_id": {
          "type": "string"
        },
        "from_address": {
          "type": "string"
        }
      },
      "title": "For the purpose of Liquidity Management"
    },
    "coinbase.payments.common.payment_methods.MagicSpendBlockchainAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "destination_tag": {
          "type": "string"
        }
      },
      "title": "MagicSpendBlockchainAddress is specific object of type blockchain_address\nwhich is used to uniquely identifies if a user is using magic spend feature\nto send funds to a smart contract wallet"
    },
    "coinbase.payments.common.payment_methods.Merchant": {
      "type": "object",
      "properties": {
        "mid": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.NovaAccount": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "nova_account_id": {
          "type": "string"
        },
        "pool_name": {
          "type": "string"
        },
        "account_idempotency_key": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Owner": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "user_uuid": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Owner.Type"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Owner.Type": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "INVESTMENT_VEHICLE",
        "RETAIL",
        "VENUE",
        "PORTFOLIO"
      ],
      "default": "UNKNOWN"
    },
    "coinbase.payments.common.payment_methods.PaymentMethod": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.PaymentMethod.Type"
        },
        "network": {
          "type": "string"
        },
        "payment_method_id": {
          "type": "string"
        },
        "blockchain_address": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.BlockchainAddress"
        },
        "coinbase_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.CoinbaseAccount"
        },
        "blockchain_transaction": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.BlockchainTransaction"
        },
        "fedwire": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Fedwire"
        },
        "swift": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Swift"
        },
        "card": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Card"
        },
        "zengin": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Zengin"
        },
        "uk": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Uk"
        },
        "sepa": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Sepa"
        },
        "paypal": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Paypal"
        },
        "ledger_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerAccount"
        },
        "external_payment_method": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ExternalPaymentMethod"
        },
        "pro_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ProAccount"
        },
        "rtp": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Rtp"
        },
        "venue": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Venue"
        },
        "ledger_named_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerNamedAccount"
        },
        "custodial_pool": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.CustodialPool"
        },
        "apple_pay": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ApplePay"
        },
        "default_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.DefaultAccount"
        },
        "remitly": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Remitly"
        },
        "pro_internal_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ProInternalAccount"
        },
        "dapp_wallet_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.DAppWalletAccount"
        },
        "google_pay": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.GooglePay"
        },
        "dapp_wallet_blockchain_address": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.DAppWalletBlockchainAddress"
        },
        "zaakpay_mobikwik": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ZaakpayMobikwik"
        },
        "deneb_upi": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.DenebUPI"
        },
        "bank_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.BankAccount"
        },
        "identity_contract_call": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.IdentityContractCall"
        },
        "deneb_imps": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.DenebIMPS"
        },
        "allocation": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Allocation"
        },
        "liquidity_pool": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.LiquidityPool"
        },
        "zengin_v2": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ZenginV2"
        },
        "direct_deposit": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.DirectDeposit"
        },
        "sepa_v2": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.SepaV2"
        },
        "zepto": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Zepto"
        },
        "pix_ebanx": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.PixEbanx"
        },
        "signet": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Signet"
        },
        "derivative_settlement": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.DerivativeSettlement"
        },
        "user": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.User"
        },
        "sg_fast": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.SgFast"
        },
        "interac": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Interac"
        },
        "intra_bank": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.IntraBank"
        },
        "cbit": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Cbit"
        },
        "ideal": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Ideal"
        },
        "sofort": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.Sofort"
        },
        "sg_paynow": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.SgPayNow"
        },
        "checkout_payment_link": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.CheckoutPaymentLink"
        },
        "email_address": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.EmailAddress"
        },
        "phone_number": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.PhoneNumber"
        },
        "vendor_payment": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.VendorPayment"
        },
        "ctn": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.CTN"
        },
        "bancomat_pay": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.BancomatPay"
        },
        "hot_wallet": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.HotWallet"
        },
        "nova_account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.NovaAccount"
        },
        "magic_spend_blockchain_address": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.MagicSpendBlockchainAddress"
        },
        "transfer_pointer": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.TransferPointer"
        }
      },
      "title": "PaymentMethod is a wrapper describing a specific type of payment method.\nIf you are adding support for a new type of payment this is probably the only type you need to modify (and possibly VerificationRequest/Response)"
    },
    "coinbase.payments.common.payment_methods.PaymentMethod.Type": {
      "type": "string",
      "enum": [
        "INVALID",
        "UNSET",
        "BLOCKCHAIN_ADDRESS",
        "COINBASE_ACCOUNT",
        "BLOCKCHAIN_TRANSACTION",
        "FEDWIRE",
        "SWIFT",
        "CARD",
        "ZENGIN",
        "UK",
        "SEPA",
        "PAYPAL",
        "LEDGER_ACCOUNT",
        "EXTERNAL_PAYMENT_METHOD",
        "PRO_ACCOUNT",
        "RTP",
        "CARD_REPRESENTMENT",
        "VENUE",
        "LEDGER_NAMED_ACCOUNT",
        "CUSTODIAL_POOL",
        "APPLE_PAY",
        "DEFAULT_ACCOUNT",
        "REMITLY",
        "PRO_INTERNAL_ACCOUNT",
        "DAPP_WALLET_ACCOUNT",
        "GOOGLE_PAY",
        "DAPP_WALLET_BLOCKCHAIN_ADDRESS",
        "ZAAKPAY_MOBIKWIK",
        "DENEB_UPI",
        "BANK_ACCOUNT",
        "IDENTITY_CONTRACT_CALL",
        "DENEB_IMPS",
        "ALLOCATION",
        "LIQUIDITY_POOL",
        "ZENGIN_V2",
        "DIRECT_DEPOSIT",
        "SEPA_V2",
        "ZEPTO",
        "PIX_EBANX",
        "SIGNET",
        "DERIVATIVE_SETTLEMENT",
        "USER",
        "SG_FAST",
        "INTERAC",
        "INTRA_BANK",
        "CBIT",
        "IDEAL",
        "SOFORT",
        "SG_PAYNOW",
        "CHECKOUT_PAYMENT_LINK",
        "EMAIL_ADDRESS",
        "PHONE_NUMBER",
        "VENDOR_PAYMENT",
        "CTN",
        "BANCOMAT_PAY",
        "HOT_WALLET",
        "NOVA_ACCOUNT",
        "MAGIC_SPEND_BLOCKCHAIN_ADDRESS",
        "TRANSFER_POINTER"
      ],
      "default": "INVALID"
    },
    "coinbase.payments.common.payment_methods.Paypal": {
      "type": "object",
      "properties": {
        "account_holder": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.PaypalAccount"
        },
        "merchant": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.PaypalMerchant"
        },
        "metadata": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.PaypalMetadata"
        }
      }
    },
    "coinbase.payments.common.payment_methods.PaypalAccount": {
      "type": "object",
      "properties": {
        "paypal_id": {
          "type": "string"
        },
        "paypal_pm_id": {
          "type": "string"
        }
      },
      "title": "Represents a customer's paypal account"
    },
    "coinbase.payments.common.payment_methods.PaypalMerchant": {
      "type": "object",
      "properties": {
        "merchant_account_id": {
          "type": "string"
        }
      },
      "title": "Represents coinbase's merchant account\nFor payouts, this is the source of funds"
    },
    "coinbase.payments.common.payment_methods.PaypalMetadata": {
      "type": "object",
      "properties": {
        "paypal_correlation_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.PhoneNumber": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.PixEbanx": {
      "type": "object",
      "properties": {
        "payment_method_id": {
          "type": "string"
        },
        "user_uuid": {
          "type": "string"
        },
        "deposit": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.PixEbanx.PixDeposit"
        },
        "withdrawal": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.PixEbanx.PixWithdrawal"
        }
      }
    },
    "coinbase.payments.common.payment_methods.PixEbanx.PixDeposit": {
      "type": "object",
      "properties": {
        "transaction_id": {
          "type": "string"
        },
        "account_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.PixEbanx.PixWithdrawal": {
      "type": "object",
      "properties": {
        "account_number": {
          "type": "string"
        },
        "account_type": {
          "type": "string"
        },
        "bank_code": {
          "type": "string"
        },
        "branch_number": {
          "type": "string"
        },
        "pix_key": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.ProAccount": {
      "type": "object",
      "properties": {
        "account_id": {
          "type": "string"
        },
        "coinbase_account_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        }
      },
      "title": "uniquely identifies an account on Pro"
    },
    "coinbase.payments.common.payment_methods.ProInternalAccount": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        }
      },
      "title": "uniquely identifies an internal account on Pro"
    },
    "coinbase.payments.common.payment_methods.Remitly": {
      "type": "object",
      "properties": {
        "account_holder": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.RemitlyAccount"
        }
      }
    },
    "coinbase.payments.common.payment_methods.RemitlyAccount": {
      "type": "object",
      "properties": {
        "recipient_id": {
          "type": "string"
        },
        "payout_method_type": {
          "type": "string"
        }
      },
      "title": "Represents a customer in remitly"
    },
    "coinbase.payments.common.payment_methods.Rtp": {
      "type": "object",
      "properties": {
        "account_holder": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.RtpAccount"
        },
        "institution": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.RtpInstitution"
        }
      },
      "description": "For withdrawals: contains all info to initiate payment to eligible bank account.\nFor deposits: contains info to initiate payment to a Coinbase Fiat account."
    },
    "coinbase.payments.common.payment_methods.RtpAccount": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        }
      },
      "title": "RtpAccount represents an account at a financial institution eligible for RTP network payments"
    },
    "coinbase.payments.common.payment_methods.RtpInstitution": {
      "type": "object",
      "properties": {
        "routing_number": {
          "type": "string"
        }
      },
      "title": "RtpInstitution is financial institution eligible for RTP network payments"
    },
    "coinbase.payments.common.payment_methods.Sepa": {
      "type": "object",
      "properties": {
        "account_holder": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.SepaAccount"
        },
        "institution": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.SepaInstitution"
        },
        "customer_first_name": {
          "type": "string"
        },
        "customer_last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.SepaAccount": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string"
        },
        "iban": {
          "type": "string"
        },
        "bban": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.SepaAccountDetail": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string",
          "description": "Required. Legal name of the account holder."
        },
        "iban": {
          "type": "string",
          "description": "Required. The IBAN number identifies the account."
        }
      },
      "description": "The detailed SEPA account information."
    },
    "coinbase.payments.common.payment_methods.SepaInstitution": {
      "type": "object",
      "properties": {
        "bic": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.SepaV2": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.SepaAccountDetail",
          "description": "The SEPA account details."
        },
        "customer_first_name": {
          "type": "string"
        },
        "customer_last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "customer_country": {
          "type": "string",
          "description": "Customer's country in ISO-3166-1 ALPHA-2."
        },
        "address": {
          "$ref": "#/definitions/coinbase.payments.common.Address",
          "description": "Deprecated. Address was required for Banking Circle payout but later found unused.\n\nIt will now be unpopulated.\nKeeping this field in case LHV or other banks require it in the future."
        },
        "supports_open_banking": {
          "type": "boolean",
          "description": "Meant to be used for routing in PGS."
        }
      },
      "description": "SepaV2 identifies for the payment method SEPA_V2, which supports SEPA rails in the decomp flow."
    },
    "coinbase.payments.common.payment_methods.SgFast": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.SgFastAccount"
        },
        "institution": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.SgFastInstitution"
        }
      },
      "description": "SgFast identifies the FAST Bank Transfer payment method in Singapore."
    },
    "coinbase.payments.common.payment_methods.SgFastAccount": {
      "type": "object",
      "properties": {
        "customer_name": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.SgFastInstitution": {
      "type": "object",
      "properties": {
        "bank_code": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.SgPayNow": {
      "type": "object",
      "properties": {
        "identifier_type": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.SgPayNow.IdentifierType"
        },
        "identifier": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        }
      },
      "description": "SgPayNow identifies the PayNow Transfer payment method in Singapore."
    },
    "coinbase.payments.common.payment_methods.SgPayNow.IdentifierType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_NRIC",
        "TYPE_PHONE"
      ],
      "default": "TYPE_UNSPECIFIED"
    },
    "coinbase.payments.common.payment_methods.Signet": {
      "type": "object",
      "properties": {
        "signet_wallet_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Sofort": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "iban": {
          "type": "string"
        },
        "bic": {
          "type": "string"
        },
        "bank_name": {
          "type": "string"
        },
        "customer_payment_name": {
          "type": "string"
        },
        "customer_country_code": {
          "type": "string"
        }
      },
      "title": "Matches PMSvc SofortDetails\nhttps://github.cbhq.net/payments/payment-method-service/blob/07a0a07/protos/coinbase/payment_method_service/api.proto#L1553-L1559"
    },
    "coinbase.payments.common.payment_methods.Swift": {
      "type": "object",
      "properties": {
        "account_holder": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.SwiftAccount"
        },
        "institution": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.SwiftInstitution"
        },
        "intermediary": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.SwiftInstitution"
        }
      }
    },
    "coinbase.payments.common.payment_methods.SwiftAccount": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string"
        },
        "iban": {
          "type": "string"
        },
        "bban": {
          "type": "string"
        },
        "domestic_account_id": {
          "type": "string"
        },
        "customer_payment_address1": {
          "type": "string"
        },
        "customer_payment_address2": {
          "type": "string"
        },
        "customer_payment_address3": {
          "type": "string"
        },
        "customer_payment_country_code": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.SwiftInstitution": {
      "type": "object",
      "properties": {
        "bic": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "bank_address1": {
          "type": "string"
        },
        "bank_address2": {
          "type": "string"
        },
        "bank_address3": {
          "type": "string"
        },
        "bank_country_code": {
          "type": "string"
        },
        "domestic_bank_id": {
          "type": "string"
        },
        "international_bank_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.TransferPointer": {
      "type": "object",
      "properties": {
        "idem": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Uk": {
      "type": "object",
      "properties": {
        "account_holder": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.UkAccount"
        },
        "institution": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.UkInstitution"
        },
        "customer_first_name": {
          "type": "string"
        },
        "customer_last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.UkAccount": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string"
        },
        "bban": {
          "type": "string"
        },
        "sort_code": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.UkInstitution": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.User": {
      "type": "object",
      "properties": {
        "user_uuid": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.VaultToken": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "vault_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.VendorPayment": {
      "type": "object",
      "properties": {
        "vendor_name": {
          "type": "string"
        },
        "vendor_payment_id": {
          "type": "string"
        }
      },
      "title": "vendor payment is currenly only used by coinbase pay guest checkout"
    },
    "coinbase.payments.common.payment_methods.Venue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.WorldpayParams": {
      "type": "object",
      "properties": {
        "token_value": {
          "type": "string"
        },
        "uses_merchant_token": {
          "type": "boolean"
        },
        "accept_header": {
          "type": "string"
        },
        "user_agent_header": {
          "type": "string"
        },
        "shopper_ip": {
          "type": "string"
        },
        "shopper_session_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.ZaakpayMobikwik": {
      "type": "object",
      "properties": {
        "phone_number": {
          "type": "string"
        }
      },
      "description": "Represents a customer's mobikwik account."
    },
    "coinbase.payments.common.payment_methods.Zengin": {
      "type": "object",
      "properties": {
        "account_holder": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ZenginAccount"
        },
        "institution": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ZenginInstitution"
        }
      },
      "description": "For withdrawals: contains all info to initiate payment to a Zengin eligible bank account. (MUFG-only)\nFor deposits: contains info to initiate payment to a Coinbase Fiat account."
    },
    "coinbase.payments.common.payment_methods.ZenginAccount": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "ZenginAccount represents an account at a financial institution eligible for Zengin"
    },
    "coinbase.payments.common.payment_methods.ZenginInstitution": {
      "type": "object",
      "properties": {
        "bank_code": {
          "type": "string"
        },
        "branch_code": {
          "type": "string"
        }
      },
      "title": "ZenginInstitution is financial institution eligible for Zengin"
    },
    "coinbase.payments.common.payment_methods.ZenginV2": {
      "type": "object",
      "properties": {
        "account_holder": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ZenginV2Account"
        },
        "institution": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ZenginV2Institution"
        }
      },
      "description": "For withdrawals: contains all info to initiate payment to a Zengin eligible bank account (non-MUFG).\nFor deposits: contains info to initiate payment to a Coinbase Fiat account."
    },
    "coinbase.payments.common.payment_methods.ZenginV2Account": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "ZenginV2Account represents an account at a financial institution eligible for Zengin (non-MUFG)"
    },
    "coinbase.payments.common.payment_methods.ZenginV2Institution": {
      "type": "object",
      "properties": {
        "bank_code": {
          "type": "string"
        },
        "branch_code": {
          "type": "string"
        }
      },
      "title": "ZenginV2Institution is financial institution eligible for Zengin (non-MUFG)"
    },
    "coinbase.payments.common.payment_methods.Zepto": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/coinbase.payments.common.payment_methods.ZeptoAccount"
        }
      },
      "description": "Zepto identifies for the payment method ZEPTO."
    },
    "coinbase.payments.common.payment_methods.ZeptoAccount": {
      "type": "object",
      "properties": {
        "contact_id": {
          "type": "string",
          "description": "The Zepto contact ID (UUID) of the account.\n\nIt is \"Contact.data.id\" in Zepto API (https://docs.zepto.money)."
        },
        "bank_account_id": {
          "type": "string",
          "description": "The Zepto bank account ID (UUID) of contact.\n\nIt is \"contact.data.bank_account.id\" in Zepto API (https://docs.zepto.money)."
        }
      },
      "description": "Zepto account information."
    },
    "coinbase.rewards_orchestration.Amount": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "These two values fully represent the monetary amount."
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "coinbase.rewards_orchestration.Enrollment": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "entity_type": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.EntityType"
        },
        "platform": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.Platform"
        },
        "currency": {
          "type": "string"
        },
        "prime_asset_in_scope": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.PrimeAssetInScope"
        },
        "opt_in_status": {
          "type": "string"
        },
        "opt_in_date": {
          "type": "string"
        }
      }
    },
    "coinbase.rewards_orchestration.EntityType": {
      "type": "string",
      "enum": [
        "ENTITY_TYPE_UNSPECIFIED",
        "ENTITY_TYPE_PRIME_ORG",
        "ENTITY_TYPE_PRIME_ENTITY",
        "ENTITY_TYPE_PRIME_PORTFOLIO",
        "ENTITY_TYPE_PRIME_WALLET",
        "ENTITY_TYPE_RETAIL_ACCOUNT",
        "ENTITY_TYPE_EXCHANGE_ORG",
        "ENTITY_TYPE_EXCHANGE_USER"
      ],
      "default": "ENTITY_TYPE_UNSPECIFIED",
      "title": "- ENTITY_TYPE_EXCHANGE_ORG: EXCHANGE: org --\u003e user --\u003e profile --\u003e account"
    },
    "coinbase.rewards_orchestration.MonthlyRewards": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string"
        },
        "date": {
          "type": "string"
        }
      }
    },
    "coinbase.rewards_orchestration.Platform": {
      "type": "string",
      "enum": [
        "PLATFORM_UNSPECIFIED",
        "PLATFORM_PRIME",
        "PLATFORM_RETAIL",
        "PLATFORM_EXCHANGE"
      ],
      "default": "PLATFORM_UNSPECIFIED"
    },
    "coinbase.rewards_orchestration.Preference": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "entity_type": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.EntityType"
        },
        "currency": {
          "type": "string"
        },
        "portfolio_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "wallet_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "percentages": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "coinbase.rewards_orchestration.PrimeAssetInScope": {
      "type": "string",
      "enum": [
        "PRIME_ASSET_IN_SCOPE_UNSPECIFIED",
        "PRIME_ASSET_IN_SCOPE_TRADING",
        "PRIME_ASSET_IN_SCOPE_VAULT",
        "PRIME_ASSET_IN_SCOPE_TRADING_VAULT",
        "PRIME_ASSET_IN_SCOPE_TRADING_EXCEPT_WEB3",
        "PRIME_ASSET_IN_SCOPE_TRADING_VAULT_EXCEPT_WEB3"
      ],
      "default": "PRIME_ASSET_IN_SCOPE_UNSPECIFIED"
    },
    "coinbase.rewards_orchestration.PrimeRewardsEarnings": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "entity_type": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.EntityType"
        },
        "currency": {
          "type": "string"
        },
        "prime_asset_in_scope": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.PrimeAssetInScope"
        },
        "lifetime_rewards": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.Amount"
        },
        "rate_tier": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.RateTier"
        },
        "next_pay_out_date": {
          "type": "string",
          "format": "date-time"
        },
        "pay_out_preference": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.Preference"
        },
        "effective_balance": {
          "type": "string"
        },
        "recent_rewards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.rewards_orchestration.MonthlyRewards"
          }
        }
      }
    },
    "coinbase.rewards_orchestration.Program": {
      "type": "string",
      "enum": [
        "PROGRAM_UNSPECIFIED",
        "PROGRAM_DEFAULT"
      ],
      "default": "PROGRAM_UNSPECIFIED"
    },
    "coinbase.rewards_orchestration.RateCard": {
      "type": "object",
      "properties": {
        "rate_tiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.rewards_orchestration.RateTier"
          }
        },
        "program": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.Program"
        },
        "platform": {
          "$ref": "#/definitions/coinbase.rewards_orchestration.Platform"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "coinbase.rewards_orchestration.RateTier": {
      "type": "object",
      "properties": {
        "upper_balance_limit": {
          "type": "string",
          "title": "use string to prevent incorrect precision conversion"
        },
        "lower_balance_limit": {
          "type": "string"
        },
        "reward_rate": {
          "type": "string"
        }
      }
    },
    "coinbase.tws.ActionVerb": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/coinbase.tws.ActionVerbType",
          "description": "Transaction action type",
          "required": [
            "type"
          ]
        },
        "crypto_withdrawal_action": {
          "$ref": "#/definitions/coinbase.tws.CryptoWithdrawalAction",
          "description": "Crypto withdrawal action",
          "required": [
            "crypto_withdrawal_action"
          ]
        },
        "fiat_withdrawal_action": {
          "$ref": "#/definitions/coinbase.tws.FiatWithdrawalAction",
          "description": "Fiat withdrawal action",
          "required": [
            "fiat_withdrawal_action"
          ]
        },
        "stake_action": {
          "$ref": "#/definitions/coinbase.tws.StakeAction",
          "description": "Staking withdrawal action",
          "required": [
            "stake_action"
          ]
        },
        "governance_action": {
          "$ref": "#/definitions/coinbase.tws.GovernanceAction",
          "description": "Governance withdrawal action",
          "required": [
            "governance_action"
          ]
        },
        "conversion_action": {
          "$ref": "#/definitions/coinbase.tws.ConversionAction",
          "description": "Conversion action",
          "required": [
            "conversion_action"
          ]
        },
        "derivative_settlement_action": {
          "$ref": "#/definitions/coinbase.tws.DerivativeSettlementAction",
          "description": "Derivative settlement action",
          "required": [
            "derivative_settlement_action"
          ]
        },
        "web3_transaction_action": {
          "$ref": "#/definitions/coinbase.tws.Web3TransactionAction",
          "description": "Web3 transaction action",
          "required": [
            "web3_transaction_action"
          ]
        },
        "web3_message_action": {
          "$ref": "#/definitions/coinbase.tws.Web3MessageAction",
          "description": "Web3 message action",
          "required": [
            "web3_message_action"
          ]
        },
        "nft_withdrawal_action": {
          "$ref": "#/definitions/coinbase.tws.NftWithdrawalAction",
          "description": "NFT withdrawal action",
          "required": [
            "nft_withdrawal_action"
          ]
        },
        "ledger_transfer_action": {
          "$ref": "#/definitions/coinbase.tws.LedgerTransferAction",
          "description": "Ledger transfer action",
          "required": [
            "ledger_transfer_action"
          ]
        },
        "match_transfer_action": {
          "$ref": "#/definitions/coinbase.tws.MatchTransferAction",
          "description": "Match transfer action",
          "required": [
            "match_transfer_action"
          ]
        }
      },
      "title": "ActionVerb contains Action type and transaction Action"
    },
    "coinbase.tws.ActionVerbType": {
      "type": "string",
      "enum": [
        "ACTION_VERB_TYPE_UNSPECIFIED",
        "ACTION_VERB_TYPE_CRYPTO_WITHDRAW",
        "ACTION_VERB_TYPE_FIAT_WITHDRAW",
        "ACTION_VERB_TYPE_STAKE",
        "ACTION_VERB_TYPE_GOVERNANCE",
        "ACTION_VERB_TYPE_CONVERSION",
        "ACTION_VERB_TYPE_DERIVATIVE_SETTLEMENT",
        "ACTION_VERB_TYPE_WEB3_TRANSACTION",
        "ACTION_VERB_TYPE_WEB3_MESSAGE",
        "ACTION_VERB_TYPE_NFT_WITHDRAW",
        "ACTION_VERB_TYPE_LEDGER_TRANSFER",
        "ACTION_VERB_TYPE_MATCH_TRANSFER"
      ],
      "default": "ACTION_VERB_TYPE_UNSPECIFIED",
      "title": "Action Verb Type specifies the action type for the transaction request"
    },
    "coinbase.tws.AvaxStakingOption": {
      "type": "object",
      "properties": {
        "end_date": {
          "type": "string",
          "description": "ISO formatted end date (2023-02-22)",
          "required": [
            "end_date"
          ]
        },
        "beneficiary_address": {
          "type": "string",
          "description": "P-chain address to send staking rewards and delegator fees"
        },
        "delegation_fee": {
          "type": "string",
          "description": "For direct staking nodes, set the fee for delegators"
        },
        "staking_type": {
          "$ref": "#/definitions/coinbase.tws.StakeOptionStakingType",
          "description": "Direct or delegated staking"
        }
      },
      "title": "AVAX staking option"
    },
    "coinbase.tws.BlockchainAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Blockchain address",
          "required": [
            "address"
          ]
        },
        "account_identifier": {
          "type": "string",
          "description": "Optional account identifier"
        }
      },
      "title": "Blockchain Address"
    },
    "coinbase.tws.ConversionAction": {
      "type": "object",
      "properties": {
        "source_asset": {
          "type": "string",
          "description": "Source asset for conversion",
          "required": [
            "source_asset"
          ]
        },
        "destination_asset": {
          "type": "string",
          "description": "Destination asset for conversion",
          "required": [
            "destination_asset"
          ]
        },
        "amount": {
          "type": "string",
          "description": "Conversion amount",
          "required": [
            "amount"
          ]
        },
        "destination_wallet_id": {
          "type": "string",
          "description": "Destination wallet for conversion",
          "required": [
            "destination_wallet"
          ]
        }
      },
      "title": "Conversion Action"
    },
    "coinbase.tws.CreateWalletOption": {
      "type": "object",
      "properties": {
        "web3_option": {
          "$ref": "#/definitions/coinbase.tws.Web3WalletCreationOption"
        },
        "trading_option": {
          "$ref": "#/definitions/coinbase.tws.TradingWalletCreationOption"
        },
        "omnibus_qc_option": {
          "$ref": "#/definitions/coinbase.tws.OmnibusQcWalletCreationOption"
        }
      },
      "title": "Optional params to pass in when creating a wallet"
    },
    "coinbase.tws.CryptoDestination": {
      "type": "object",
      "properties": {
        "blockchain_address": {
          "$ref": "#/definitions/coinbase.tws.BlockchainAddress",
          "description": "Crypto destination to a on-chain blockchain address"
        },
        "wallet_id": {
          "type": "string",
          "description": "Crypto destination to another prime wallet"
        },
        "trusted_address_id": {
          "type": "string",
          "description": "Crypto destination to a trusted address"
        },
        "wallet_and_blockchain_address": {
          "$ref": "#/definitions/coinbase.tws.WalletAndBlockchainAddress",
          "description": "Crypto destination to a another prime wallet using the specified address"
        },
        "ctn_id": {
          "type": "string",
          "description": "Crypto destination to a ctn id"
        }
      },
      "title": "Crypto Destination"
    },
    "coinbase.tws.CryptoWithdrawalAction": {
      "type": "object",
      "properties": {
        "asset": {
          "type": "string",
          "description": "The symbol of the currency to transfer with",
          "required": [
            "asset"
          ]
        },
        "amount": {
          "type": "string",
          "description": "Crypto transfer amount in whole unit",
          "required": [
            "amount"
          ]
        },
        "destination": {
          "$ref": "#/definitions/coinbase.tws.CryptoDestination",
          "description": "Crypto transaction destination",
          "required": [
            "destination"
          ]
        }
      },
      "title": "Crypto Withdrawal Action"
    },
    "coinbase.tws.DappContext": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the dapp to perform web3 transaction with",
          "required": [
            "name"
          ]
        },
        "url": {
          "type": "string",
          "description": "The url of the dapp to perform web3 transaction with",
          "required": [
            "url"
          ]
        }
      },
      "title": "DApp information for web3 transaction"
    },
    "coinbase.tws.DerivativeSettlementAction": {
      "type": "object",
      "properties": {
        "transfer_cfm": {
          "$ref": "#/definitions/coinbase.tws.DerivativeSettlementAction.SettlementMovement",
          "description": "transfer USD Customer A =\u003e ION XTP"
        },
        "cfm_spot": {
          "$ref": "#/definitions/coinbase.tws.DerivativeSettlementAction.SettlementMovement",
          "description": "ION XTP -\u003e SPOT USD Customer A"
        },
        "transfer_spot": {
          "$ref": "#/definitions/coinbase.tws.DerivativeSettlementAction.SettlementMovement",
          "description": "Transfer USD Customer A -\u003e SPOT USD Customer A"
        },
        "spot_cfm": {
          "$ref": "#/definitions/coinbase.tws.DerivativeSettlementAction.SettlementMovement",
          "description": "SPOT USD to ION XTP"
        },
        "excess_reset": {
          "$ref": "#/definitions/coinbase.tws.DerivativeSettlementAction.SettlementMovement"
        },
        "equity_reset": {
          "$ref": "#/definitions/coinbase.tws.DerivativeSettlementAction.SettlementMovement",
          "description": "Opposite entry on Equity USD Customer A"
        },
        "spot_hold_replacement": {
          "$ref": "#/definitions/coinbase.tws.LedgerHoldReplacement"
        },
        "cfm_transfer": {
          "$ref": "#/definitions/coinbase.tws.DerivativeSettlementAction.SettlementMovement",
          "description": "ION XTP -\u003e Transfer USD Customer A"
        },
        "spot_transfer": {
          "$ref": "#/definitions/coinbase.tws.DerivativeSettlementAction.SettlementMovement",
          "description": "SPOT USD Customer A -\u003e Transfer USD Customer A"
        }
      },
      "title": "DerivativeSettlementAction"
    },
    "coinbase.tws.DerivativeSettlementAction.SettlementMovement": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "description": "transfer amount in whole unit, i.e. 1.0 BTC",
          "required": [
            "amount"
          ]
        },
        "existing_hold_id": {
          "type": "string",
          "description": "Release a existing_hold_id if fund movement debit a user ledger account"
        },
        "new_hold_amount": {
          "type": "string",
          "description": "transfer amount in whole unit, i.e. 1.0 BTC"
        },
        "new_hold_id": {
          "type": "string",
          "description": "transfer amount in whole unit, i.e. 1.0 BTC"
        },
        "auto_sweep": {
          "type": "boolean",
          "description": "Flag to record if we should auto sweep the funds from ION XTP to SPOT USD"
        }
      },
      "title": "A settlement movement / transfer of funds between two ledger accounts"
    },
    "coinbase.tws.Eth2Option": {
      "type": "object",
      "properties": {
        "cross_stake_wallet_name": {
          "type": "string",
          "description": "Staking wallet name",
          "required": [
            "cross_stake_wallet_name"
          ]
        }
      },
      "title": "ETH2 stake option"
    },
    "coinbase.tws.EvmTransactionDetails": {
      "type": "object",
      "properties": {
        "nonce": {
          "type": "string",
          "description": "Nonce value for the transaction"
        }
      },
      "title": "EVM specific transaction details"
    },
    "coinbase.tws.FiatDestination": {
      "type": "object",
      "properties": {
        "payment_method_id": {
          "type": "string",
          "description": "Fiat destination to a payment method id"
        },
        "wallet_id": {
          "type": "string",
          "description": "Fiat destination to another prime wallet"
        },
        "ctn_id": {
          "type": "string",
          "description": "Fiat destination to a ctn id"
        }
      },
      "title": "Fiat Destination"
    },
    "coinbase.tws.FiatWithdrawalAction": {
      "type": "object",
      "properties": {
        "asset": {
          "type": "string",
          "description": "The symbol of the currency to transfer with",
          "required": [
            "asset"
          ]
        },
        "amount": {
          "type": "string",
          "description": "Fiat transfer amount in whole unit",
          "required": [
            "amount"
          ]
        },
        "destination": {
          "$ref": "#/definitions/coinbase.tws.FiatDestination",
          "description": "Fiat transaction destination",
          "required": [
            "destination"
          ]
        }
      },
      "title": "Fiat Withdrawal Action"
    },
    "coinbase.tws.GovernanceAction": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/coinbase.tws.GovernanceActionType",
          "description": "Governance action type",
          "required": [
            "type"
          ]
        },
        "asset": {
          "type": "string",
          "description": "The symbol of the currency to perform governance action with",
          "required": [
            "asset"
          ]
        },
        "amount": {
          "type": "string",
          "description": "Governance action movement amount in whole unit",
          "required": [
            "amount"
          ]
        },
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.tws.CryptoDestination"
          },
          "description": "Governance destinations",
          "required": [
            "destinations"
          ]
        }
      },
      "title": "Governance Action"
    },
    "coinbase.tws.GovernanceActionType": {
      "type": "string",
      "enum": [
        "GOVERNANCE_ACTION_TYPE_UNSPECIFIED",
        "GOVERNANCE_ACTION_TYPE_DELEGATION"
      ],
      "default": "GOVERNANCE_ACTION_TYPE_UNSPECIFIED",
      "title": "GovernanceActionType defines all governance related action types"
    },
    "coinbase.tws.LedgerDestination": {
      "type": "object",
      "properties": {
        "wallet_id": {
          "type": "string",
          "description": "Ledger transfer destination wallet"
        }
      },
      "title": "Ledger Destination"
    },
    "coinbase.tws.LedgerHoldReplacement": {
      "type": "object",
      "properties": {
        "hold_id_to_replace": {
          "type": "string"
        },
        "new_hold_amount": {
          "type": "string"
        },
        "new_hold_id": {
          "type": "string"
        }
      },
      "title": "LedgerHoldReplacement"
    },
    "coinbase.tws.LedgerTransferAction": {
      "type": "object",
      "properties": {
        "asset": {
          "type": "string",
          "description": "The symbol of the currency to transfer with",
          "required": [
            "asset"
          ]
        },
        "amount": {
          "type": "string",
          "description": "Transfer amount in whole unit",
          "required": [
            "amount"
          ]
        },
        "destination": {
          "$ref": "#/definitions/coinbase.tws.LedgerDestination",
          "description": "ledger transfer destination",
          "required": [
            "destination"
          ]
        },
        "type": {
          "$ref": "#/definitions/coinbase.tws.LedgerTransferActionType",
          "description": "ledger transfer action type",
          "required": [
            "type"
          ]
        }
      },
      "title": "Ledger Transfer Action"
    },
    "coinbase.tws.LedgerTransferActionType": {
      "type": "string",
      "enum": [
        "LEDGER_TRANSFER_ACTION_TYPE_UNSPECIFIED",
        "LEDGER_TRANSFER_ACTION_TYPE_SHORT_COLLATERAL_WITHDRAWAL",
        "LEDGER_TRANSFER_ACTION_TYPE_SHORT_COLLATERAL_RETURN",
        "LEDGER_TRANSFER_ACTION_TYPE_BILLING_WITHDRAWAL",
        "LEDGER_TRANSFER_ACTION_TYPE_CRYPTO_REBATE",
        "LEDGER_TRANSFER_ACTION_TYPE_DAL_GROSS_FEE",
        "LEDGER_TRANSFER_ACTION_TYPE_DAL_NET_FEE",
        "LEDGER_TRANSFER_ACTION_TYPE_INTERNAL_TRANSFER_LOAN",
        "LEDGER_TRANSFER_ACTION_TYPE_USDC_PLUS_PAYOUT"
      ],
      "default": "LEDGER_TRANSFER_ACTION_TYPE_UNSPECIFIED",
      "title": "LedgerTransferActionType defines all ledger transfer action types"
    },
    "coinbase.tws.LsethOption": {
      "type": "object",
      "properties": {
        "cross_stake_wallet_name": {
          "type": "string",
          "description": "Staking wallet name",
          "required": [
            "cross_stake_wallet_name"
          ]
        },
        "subtype": {
          "type": "string",
          "description": "Staking subtype",
          "required": [
            "subtype"
          ]
        }
      },
      "title": "LsETH stake option"
    },
    "coinbase.tws.MatchTransferAction": {
      "type": "object",
      "properties": {
        "transfer_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.tws.MatchTransferAction.MatchTransferDetail"
          },
          "description": "The list of transfers to take place",
          "required": [
            "transfer_details"
          ]
        },
        "trade_date": {
          "type": "string",
          "description": "The date at which the trade took place"
        },
        "reference_id": {
          "type": "string",
          "description": "The reference ID of the trade that took place"
        },
        "settle_at_date_time": {
          "type": "string",
          "description": "The date and time at which the transfer should take place"
        },
        "use_match_transfer_v2": {
          "type": "boolean",
          "description": "Flag to use the new AdvancedTransfer model or not"
        }
      },
      "title": "Match Transfer Action"
    },
    "coinbase.tws.MatchTransferAction.MatchTransferDetail": {
      "type": "object",
      "properties": {
        "asset": {
          "type": "string",
          "description": "The symbol of the currency to transfer with",
          "required": [
            "asset"
          ]
        },
        "amount": {
          "type": "string",
          "description": "Transfer amount in whole unit",
          "required": [
            "amount"
          ]
        },
        "destination_ctn_id": {
          "type": "string",
          "description": "Destination to transfer to",
          "required": [
            "destination_ctn_id"
          ]
        },
        "source_ctn_id": {
          "type": "string",
          "description": "Source to transfer from",
          "required": [
            "source_ctn_id"
          ]
        }
      },
      "title": "Match Transfer Detail"
    },
    "coinbase.tws.NamedAccountMetadata": {
      "type": "object",
      "properties": {
        "named_account_type": {
          "$ref": "#/definitions/coinbase.tws.NamedAccountType"
        }
      },
      "title": "Metadata that describes the Named Account associated to the wallet"
    },
    "coinbase.tws.NamedAccountType": {
      "type": "string",
      "enum": [
        "NAMED_ACCOUNT_TYPE_UNSPECIFIED",
        "NAMED_ACCOUNT_TYPE_FBO",
        "NAMED_ACCOUNT_TYPE_SUSPENSE",
        "NAMED_ACCOUNT_TYPE_VENUE_PRO",
        "NAMED_ACCOUNT_TYPE_INSTITUTIONAL_VENUE_FEE",
        "NAMED_ACCOUNT_TYPE_INSTITUTIONAL_COMMISSION",
        "NAMED_ACCOUNT_TYPE_VENUE_B2C2",
        "NAMED_ACCOUNT_TYPE_INSTITUTIONAL_ERROR",
        "NAMED_ACCOUNT_TYPE_VENUE_DUST",
        "NAMED_ACCOUNT_TYPE_PASSTHROUGH_FEES",
        "NAMED_ACCOUNT_TYPE_NETWORK_FEES",
        "NAMED_ACCOUNT_TYPE_IN_TRANSIT",
        "NAMED_ACCOUNT_TYPE_CENTRAL_LOAN_BOOK",
        "NAMED_ACCOUNT_TYPE_CORPORATE_OPERATING",
        "NAMED_ACCOUNT_TYPE_VENUE_BITSTAMP",
        "NAMED_ACCOUNT_TYPE_VENUE_CUMBERLAND",
        "NAMED_ACCOUNT_TYPE_LMS_CB_CREDIT_PRINCIPAL",
        "NAMED_ACCOUNT_TYPE_LMS_CB_CREDIT_COLLATERAL",
        "NAMED_ACCOUNT_TYPE_LMS_CB_CREDIT_INTEREST_REVENUE",
        "NAMED_ACCOUNT_TYPE_LMS_CB_CREDIT_INTEREST_EXPENSE",
        "NAMED_ACCOUNT_TYPE_LMS_CCI_PRINCIPAL",
        "NAMED_ACCOUNT_TYPE_LMS_CCI_COLLATERAL",
        "NAMED_ACCOUNT_TYPE_LMS_CCI_INTEREST_REVENUE",
        "NAMED_ACCOUNT_TYPE_LMS_CCI_INTEREST_EXPENSE",
        "NAMED_ACCOUNT_TYPE_VENUE_KRAKEN",
        "NAMED_ACCOUNT_TYPE_VENUE_FTX",
        "NAMED_ACCOUNT_TYPE_CENTRAL_TRADE_FINANCE_BOOK",
        "NAMED_ACCOUNT_TYPE_VENUE_JANESTREET",
        "NAMED_ACCOUNT_TYPE_PRIME_ERRORS",
        "NAMED_ACCOUNT_TYPE_STAKING_AND_INFLATION_REVENUE",
        "NAMED_ACCOUNT_TYPE_PRIME_TRADING_BALANCE",
        "NAMED_ACCOUNT_TYPE_PRIME_OPERATING_INVENTORY"
      ],
      "default": "NAMED_ACCOUNT_TYPE_UNSPECIFIED",
      "title": "The type of Named Account in the Ledger"
    },
    "coinbase.tws.NetworkFamily": {
      "type": "string",
      "enum": [
        "NETWORK_FAMILY_UNSPECIFIED",
        "NETWORK_FAMILY_EVM"
      ],
      "default": "NETWORK_FAMILY_UNSPECIFIED",
      "title": "Network family for web3 wallets"
    },
    "coinbase.tws.NetworkMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Network name used in web3 transaction",
          "required": [
            "name"
          ]
        },
        "rpc_endpoint": {
          "type": "string",
          "description": "Network rpc_endpoint used in web3 transaction",
          "required": [
            "rpc_endpoint"
          ]
        },
        "chain_id": {
          "type": "string",
          "description": "Network chain id used in the web3 transaction signature process",
          "required": [
            "chain_id"
          ]
        }
      },
      "title": "Network information for web3 transaction"
    },
    "coinbase.tws.NftWithdrawalAction": {
      "type": "object",
      "properties": {
        "asset": {
          "type": "string",
          "description": "The symbol of the currency to transfer with",
          "required": [
            "asset"
          ]
        },
        "token_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unique IDs of NFTs within a collection. Repeated field to support ERC-1155."
        },
        "destination": {
          "$ref": "#/definitions/coinbase.tws.CryptoDestination",
          "description": "Crypto transaction destination",
          "required": [
            "destination"
          ]
        }
      },
      "description": "NFT Withdrawal Action."
    },
    "coinbase.tws.OmnibusQcWalletCreationOption": {
      "type": "object",
      "properties": {
        "named_account_metadata": {
          "$ref": "#/definitions/coinbase.tws.NamedAccountMetadata"
        },
        "wallet_id": {
          "type": "string"
        }
      },
      "title": "Create wallet options for Omnibus QC Wallet"
    },
    "coinbase.tws.SigningBackend": {
      "type": "string",
      "enum": [
        "SIGNING_BACKEND_UNSPECIFIED",
        "SIGNING_BACKEND_TEX",
        "SIGNING_BACKEND_CORE_KMS"
      ],
      "default": "SIGNING_BACKEND_UNSPECIFIED",
      "title": "Signing backend for web3 wallets"
    },
    "coinbase.tws.StacksStakeOption": {
      "type": "object",
      "properties": {
        "stacking_duration": {
          "type": "string",
          "format": "uint64",
          "description": "STX stacking duration",
          "required": [
            "stacking_duration"
          ]
        }
      },
      "title": "Stacks (STX) stake option"
    },
    "coinbase.tws.StakeAction": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/coinbase.tws.StakeActionType",
          "description": "Staking action type",
          "required": [
            "type"
          ]
        },
        "asset": {
          "type": "string",
          "description": "The symbol of the currency you want to perform staking action with",
          "required": [
            "asset"
          ]
        },
        "amount": {
          "type": "string",
          "description": "Staking action amount in whole unit",
          "required": [
            "amount"
          ]
        },
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.tws.CryptoDestination"
          },
          "description": "Staking destinations",
          "required": [
            "destinations"
          ]
        },
        "stacks_stake_option": {
          "$ref": "#/definitions/coinbase.tws.StacksStakeOption",
          "description": "Stacks stake option"
        },
        "eth2_option": {
          "$ref": "#/definitions/coinbase.tws.Eth2Option",
          "description": "eth2 stake option"
        },
        "lseth_option": {
          "$ref": "#/definitions/coinbase.tws.LsethOption",
          "description": "LsETH stake option"
        },
        "avax_option": {
          "$ref": "#/definitions/coinbase.tws.AvaxStakingOption",
          "description": "AVAX stake option"
        }
      },
      "title": "Stake Action"
    },
    "coinbase.tws.StakeActionType": {
      "type": "string",
      "enum": [
        "STAKE_ACTION_TYPE_UNSPECIFIED",
        "STAKE_ACTION_TYPE_STAKE",
        "STAKE_ACTION_TYPE_UNSTAKE",
        "STAKE_ACTION_TYPE_RESTAKE",
        "STAKE_ACTION_TYPE_CHANGE_VALIDATOR"
      ],
      "default": "STAKE_ACTION_TYPE_UNSPECIFIED",
      "title": "StakeActionType defines all staking related action types"
    },
    "coinbase.tws.StakeOptionStakingType": {
      "type": "string",
      "enum": [
        "STAKE_OPTION_STAKING_TYPE_UNSPECIFIED",
        "STAKE_OPTION_STAKING_TYPE_DIRECT",
        "STAKE_OPTION_STAKING_TYPE_DELEGATE"
      ],
      "default": "STAKE_OPTION_STAKING_TYPE_UNSPECIFIED",
      "title": "Option for staking type"
    },
    "coinbase.tws.TradingWalletCreationOption": {
      "type": "object",
      "properties": {
        "named_account_metadata": {
          "$ref": "#/definitions/coinbase.tws.NamedAccountMetadata"
        },
        "wallet_id": {
          "type": "string"
        }
      },
      "title": "Create wallet options for Trading Wallet"
    },
    "coinbase.tws.WalletAndBlockchainAddress": {
      "type": "object",
      "properties": {
        "wallet_id": {
          "type": "string"
        },
        "blockchain_address": {
          "$ref": "#/definitions/coinbase.tws.BlockchainAddress"
        }
      },
      "title": "WalletAndBlockchainAddress allows a user to specify which address associated with a wallet to send funds to"
    },
    "coinbase.tws.WalletType": {
      "type": "string",
      "enum": [
        "WALLET_TYPE_UNSPECIFIED",
        "WALLET_TYPE_PRIME_TRADING",
        "WALLET_TYPE_PRIME_VAULT",
        "WALLET_TYPE_CONSUMER",
        "WALLET_TYPE_PRIME_WEB3",
        "WALLET_TYPE_PRIME_OMNIBUS_QC"
      ],
      "default": "WALLET_TYPE_UNSPECIFIED",
      "title": "Type of Wallet"
    },
    "coinbase.tws.Web3MessageAction": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Unsigned message string",
          "required": [
            "message"
          ]
        },
        "network_metadata": {
          "$ref": "#/definitions/coinbase.tws.NetworkMetadata",
          "description": "Network information for web3 transaction",
          "required": [
            "network_metadata"
          ]
        },
        "dapp_context": {
          "$ref": "#/definitions/coinbase.tws.DappContext",
          "description": "Dapp information for web3 transaction"
        },
        "original_message": {
          "type": "string",
          "description": "Original message string"
        },
        "prefix": {
          "type": "string",
          "description": "prefix string"
        }
      },
      "description": "Message in Web3 Dapp. In contrast to transaction, a signed message payload is returned to DApp (and isn’t broadcasted)."
    },
    "coinbase.tws.Web3TransactionAction": {
      "type": "object",
      "properties": {
        "raw_unsigned_tx": {
          "type": "string",
          "description": "Unsigned transaction hex string",
          "required": [
            "raw_unsigned_tx"
          ]
        },
        "network_metadata": {
          "$ref": "#/definitions/coinbase.tws.NetworkMetadata",
          "description": "Network information for web3 transaction",
          "required": [
            "network_metadata"
          ]
        },
        "dapp_context": {
          "$ref": "#/definitions/coinbase.tws.DappContext",
          "description": "Dapp information for web3 transaction"
        },
        "metadata": {
          "$ref": "#/definitions/coinbase.tws.Web3TransactionMetadata",
          "description": "Fields for specifying transaction amounts"
        },
        "destination": {
          "type": "string",
          "description": "Destination address for the transaction"
        },
        "evm_transaction_details": {
          "$ref": "#/definitions/coinbase.tws.EvmTransactionDetails"
        },
        "replaced_transaction_id": {
          "type": "string",
          "description": "Set when creating a replacement transaction. The id of transaction being replaced."
        }
      },
      "title": "Transaction in Web3 Dapp"
    },
    "coinbase.tws.Web3TransactionMetadata": {
      "type": "object",
      "properties": {
        "fees": {
          "$ref": "#/definitions/coinbase.tws.Web3TransactionMetadata.Web3TransactionFees"
        },
        "transfers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.tws.Web3TransactionMetadata.Web3TransactionAssetTransfer"
          }
        }
      },
      "description": "Field on web3 transactions for specifying transaction amounts."
    },
    "coinbase.tws.Web3TransactionMetadata.Web3TransactionAssetTransfer": {
      "type": "object",
      "properties": {
        "asset_symbol": {
          "type": "string",
          "title": "asset symbol for the currency being transferred"
        },
        "asset_quantity": {
          "type": "string",
          "title": "amount being transferred, denominated in atomic units of the crypto asset"
        },
        "usd_value": {
          "type": "string",
          "title": "amount being transferred, denominated in USD"
        }
      },
      "title": "Asset tranfser details"
    },
    "coinbase.tws.Web3TransactionMetadata.Web3TransactionFees": {
      "type": "object",
      "properties": {
        "asset_symbol": {
          "type": "string",
          "title": "asset symbol for the fee currency"
        },
        "asset_quantity_lower_bound": {
          "type": "string",
          "title": "lower bound for fees, denominated in atomic units of the crypto asset"
        },
        "asset_quantity_upper_bound": {
          "type": "string",
          "title": "upper bound for fees, denominated in atomic units of the crypto asset"
        },
        "usd_value_lower_bound": {
          "type": "string",
          "title": "lower bound for fees, denominated in USD"
        },
        "usd_value_upper_bound": {
          "type": "string",
          "title": "upper bound for fees, denominated in USD"
        }
      },
      "title": "Transaction fee details"
    },
    "coinbase.tws.Web3WalletCreationOption": {
      "type": "object",
      "properties": {
        "network_family": {
          "$ref": "#/definitions/coinbase.tws.NetworkFamily"
        },
        "signing_backend": {
          "$ref": "#/definitions/coinbase.tws.SigningBackend"
        }
      },
      "title": "Create wallet options for Web3"
    },
    "core.ContractExpiryType": {
      "type": "string",
      "enum": [
        "UNKNOWN_CONTRACT_EXPIRY_TYPE",
        "EXPIRING",
        "PERPETUAL"
      ],
      "default": "UNKNOWN_CONTRACT_EXPIRY_TYPE"
    },
    "core.OrderPlacementSource": {
      "type": "string",
      "enum": [
        "UNKNOWN_PLACEMENT_SOURCE",
        "RETAIL_PUBLIC_API",
        "RETAIL_WEB_CLIENT",
        "RETAIL_MOBILE_WEB_CLIENT",
        "RETAIL_IOS_CLIENT",
        "RETAIL_ANDROID_CLIENT",
        "RETAIL_SIMPLE",
        "RETAIL_PUBLIC_API_OAUTH2",
        "RETAIL_ADVANCED_UNKNOWN",
        "RETAIL_LIQUIDATION",
        "RETAIL_PUBLIC_API_CLOUD",
        "FIX",
        "PRIME_INTERNAL_API",
        "PRIME_PUBLIC_API",
        "PRIME_UNKNOWN",
        "NEITHER_PRIME_RETAIL"
      ],
      "default": "UNKNOWN_PLACEMENT_SOURCE",
      "title": "OrderPlacementSource reflects which source an order was placed via\ne.g. Retail Public API vs Retail iOS Client vs Prime Web Client"
    },
    "core.ProductType": {
      "type": "string",
      "enum": [
        "UNKNOWN_PRODUCT_TYPE",
        "SPOT",
        "FUTURE"
      ],
      "default": "UNKNOWN_PRODUCT_TYPE"
    },
    "core.RiskManagementType": {
      "type": "string",
      "enum": [
        "UNKNOWN_RISK_MANAGEMENT_TYPE",
        "MANAGED_BY_FCM",
        "MANAGED_BY_VENUE"
      ],
      "default": "UNKNOWN_RISK_MANAGEMENT_TYPE"
    },
    "eng.prime.billing.api.AUCContractFeeTiers": {
      "type": "object",
      "properties": {
        "contract_id": {
          "type": "string"
        },
        "fee_tiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eng.prime.billing.api.FeeTier"
          }
        }
      },
      "title": "AUCFeeTier type"
    },
    "eng.prime.billing.api.FeeTier": {
      "type": "object",
      "properties": {
        "rate": {
          "type": "integer",
          "format": "int32"
        },
        "minimum": {
          "type": "number",
          "format": "double"
        },
        "maximum": {
          "type": "number",
          "format": "double"
        },
        "tier_display": {
          "type": "string"
        },
        "fee_rate": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "FeeTier type"
    },
    "eng.prime.billing.api.GetAUCFeeTiersResponse": {
      "type": "object",
      "properties": {
        "auc_fee_tiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eng.prime.billing.api.AUCContractFeeTiers"
          }
        }
      },
      "title": "Response for GetAUCFeeTiers"
    },
    "eng.prime.policy.api.CompletedEvaluation": {
      "type": "object",
      "properties": {
        "input": {
          "$ref": "#/definitions/eng.prime.policy.api.EvaluationInput"
        },
        "evaluated_policy": {
          "$ref": "#/definitions/eng.prime.policy.api.Policy"
        },
        "evaluated_rule": {
          "$ref": "#/definitions/eng.prime.policy.api.Rule"
        },
        "priority": {
          "type": "number",
          "format": "double"
        },
        "outcome": {
          "$ref": "#/definitions/eng.prime.policy.api.Outcome"
        }
      },
      "title": "CompletedEvaluation is the results of a single evaluation"
    },
    "eng.prime.policy.api.ConditionOptions": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "ConditionOptions defines the possible options for a condition, ex. name: currency, options: fiat or crypto."
    },
    "eng.prime.policy.api.ConditionValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "ConditionValue defines the value for a particular condition, ex. CurrencyValue{ name: \"Currency\", value: \"fiat\" }"
    },
    "eng.prime.policy.api.ConsensusSetting": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "percentage": {
          "type": "string",
          "format": "int64"
        },
        "expiration_in_seconds": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "ConsensusSetting represents the Consensus setting for a policy"
    },
    "eng.prime.policy.api.EvaluationInput": {
      "type": "object",
      "properties": {
        "policy_type": {
          "type": "string"
        },
        "hierarchy": {
          "$ref": "#/definitions/eng.prime.policy.api.Hierarchy"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eng.prime.policy.api.ConditionValue"
          }
        }
      },
      "title": "EvaluationInput is the input to an evaluation request"
    },
    "eng.prime.policy.api.EvaluationResult": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "reference": {
          "$ref": "#/definitions/eng.prime.policy.api.ObjectReference"
        },
        "completed_evaluations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eng.prime.policy.api.CompletedEvaluation"
          }
        },
        "final_evaluation": {
          "$ref": "#/definitions/eng.prime.policy.api.CompletedEvaluation"
        }
      },
      "description": "EvaluationResult is the aggregate completed evaluations for an EvaluatePolicy request, as well as the final evaluation based on priority."
    },
    "eng.prime.policy.api.Hierarchy": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/eng.prime.policy.api.HierarchyType"
        },
        "id": {
          "type": "string"
        }
      },
      "title": "Hierarchy identifies a specific hierarchy with the combination HierarchyType and id"
    },
    "eng.prime.policy.api.HierarchyType": {
      "type": "string",
      "enum": [
        "HIERARCHY_TYPE_UNSPECIFIED",
        "HIERARCHY_TYPE_PORTFOLIO",
        "HIERARCHY_TYPE_ENTITY",
        "HIERARCHY_TYPE_GLOBAL"
      ],
      "default": "HIERARCHY_TYPE_UNSPECIFIED",
      "title": "HierarchyType are the enums for various hierarchies within Prime, ex Entity, Organization, Wallet, User in the future"
    },
    "eng.prime.policy.api.ListPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eng.prime.policy.api.Policy"
          }
        }
      },
      "title": "ListPoliciesResponse defines response for listing all policies"
    },
    "eng.prime.policy.api.ObjectReference": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "title": "ObjectReference is used to define the object that is"
    },
    "eng.prime.policy.api.Outcome": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "consensus_setting": {
          "$ref": "#/definitions/eng.prime.policy.api.ConsensusSetting"
        },
        "video_call_setting": {
          "$ref": "#/definitions/eng.prime.policy.api.VideoCallSetting"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eng.prime.policy.api.OutcomeDetail"
          }
        }
      },
      "title": "Outcome represents the result of a rule, that will instruct Consensus on how to seek approval"
    },
    "eng.prime.policy.api.OutcomeDetail": {
      "type": "object",
      "properties": {
        "web3_signers": {
          "$ref": "#/definitions/eng.prime.policy.api.Web3Signers"
        }
      }
    },
    "eng.prime.policy.api.Policy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "hierarchy": {
          "$ref": "#/definitions/eng.prime.policy.api.Hierarchy"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eng.prime.policy.api.Rule"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_by_user_id": {
          "type": "string"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time"
        },
        "is_default": {
          "type": "boolean"
        }
      },
      "title": "Policy defines a set of rules on a hierarchy with a resultant outcome for Consensus"
    },
    "eng.prime.policy.api.Rule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "condition_options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eng.prime.policy.api.ConditionOptions"
          }
        },
        "outcome": {
          "$ref": "#/definitions/eng.prime.policy.api.Outcome"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "Rule defines a set of conditions and the outcome generated if the conditions are satisfied"
    },
    "eng.prime.policy.api.VideoCallSetting": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "percentage": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "VideoCallSetting represents the Video Call setting for a policy"
    },
    "eng.prime.policy.api.Web3Signers": {
      "type": "object",
      "properties": {
        "user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "google.protobuf.NullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "grpc.gateway.runtime.Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    },
    "grpc.gateway.runtime.StreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    },
    "scanner.Address": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Attribute"
          }
        }
      },
      "title": "Address is a blockchain address (usually a public key hash)"
    },
    "scanner.Amount": {
      "type": "object",
      "properties": {
        "currency": {
          "$ref": "#/definitions/scanner.Currency"
        },
        "value": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Attribute"
          }
        }
      },
      "title": "Amount is an some quantity of Currency"
    },
    "scanner.AmountRange": {
      "type": "object",
      "properties": {
        "start_amount": {
          "$ref": "#/definitions/scanner.Amount"
        },
        "end_amount": {
          "$ref": "#/definitions/scanner.Amount"
        }
      }
    },
    "scanner.Attribute": {
      "type": "object",
      "properties": {
        "attribute_type": {
          "$ref": "#/definitions/scanner.AttributeType"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "Attribute is a key/value that can be appended to most types"
    },
    "scanner.AttributeType": {
      "type": "string",
      "enum": [
        "ATTRIBUTE_TYPE_UNKNOWN",
        "BLOCKED",
        "UNVERIFIED"
      ],
      "default": "ATTRIBUTE_TYPE_UNKNOWN",
      "title": "AttributeType identifies the type of an Attribute"
    },
    "scanner.BalanceApprovalOperation": {
      "type": "object",
      "properties": {
        "from_address": {
          "type": "string"
        },
        "spender_address": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/scanner.Amount"
        },
        "allowance": {
          "$ref": "#/definitions/scanner.Amount"
        },
        "current_balance": {
          "$ref": "#/definitions/scanner.Amount"
        },
        "is_spender_address_eoa": {
          "type": "boolean"
        },
        "expiry": {
          "$ref": "#/definitions/scanner.Time"
        }
      }
    },
    "scanner.BalanceTransferOperation": {
      "type": "object",
      "properties": {
        "from_address": {
          "type": "string"
        },
        "to_address": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/scanner.Amount"
        },
        "current_balance": {
          "$ref": "#/definitions/scanner.Amount"
        },
        "amount_range": {
          "$ref": "#/definitions/scanner.AmountRange"
        }
      }
    },
    "scanner.Blockchain": {
      "type": "string",
      "enum": [
        "BLOCKCHAIN_UNKNOWN",
        "BLOCKCHAIN_STELLAR",
        "BLOCKCHAIN_RIPPLE",
        "BLOCKCHAIN_SOLANA",
        "BLOCKCHAIN_BITCOIN",
        "BLOCKCHAIN_ETHEREUM",
        "BLOCKCHAIN_BITCOINCASH",
        "BLOCKCHAIN_LITECOIN",
        "BLOCKCHAIN_DOGECOIN",
        "BLOCKCHAIN_BSC",
        "BLOCKCHAIN_AVACCHAIN",
        "BLOCKCHAIN_POLYGON",
        "BLOCKCHAIN_OPTIMISM",
        "BLOCKCHAIN_ARBITRUM",
        "BLOCKCHAIN_BASE",
        "BLOCKCHAIN_BASE_SEPOLIA",
        "BLOCKCHAIN_TEST",
        "BLOCKCHAIN_HARDHAT"
      ],
      "default": "BLOCKCHAIN_UNKNOWN",
      "title": "Blockchain identifies which blockchain is being operated on."
    },
    "scanner.Contract": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "proxy_to": {
          "$ref": "#/definitions/scanner.Contract"
        },
        "deployed_in_block": {
          "type": "string",
          "format": "int64"
        },
        "code": {
          "type": "string",
          "format": "byte"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Attribute"
          }
        }
      },
      "title": "Contract is a deployed smart contract on a blockchain"
    },
    "scanner.ContractOwnershipTransferOperation": {
      "type": "object",
      "properties": {
        "contract_address": {
          "type": "string"
        },
        "from_address": {
          "type": "string"
        },
        "to_address": {
          "type": "string"
        }
      }
    },
    "scanner.Currency": {
      "type": "object",
      "properties": {
        "currency_type": {
          "$ref": "#/definitions/scanner.CurrencyType"
        },
        "symbol": {
          "type": "string"
        },
        "contract_address": {
          "type": "string"
        },
        "decimals": {
          "type": "integer",
          "format": "int32"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Attribute"
          }
        },
        "name": {
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Image"
          }
        }
      },
      "title": "Currency represents a currency on a blockchain"
    },
    "scanner.CurrencyType": {
      "type": "string",
      "enum": [
        "CURRENCY_TYPE_UNKNOWN",
        "NATIVE",
        "TOKEN"
      ],
      "default": "CURRENCY_TYPE_UNKNOWN",
      "title": "CurrencyType identifies the type of currency being represented in a Currency record"
    },
    "scanner.DecodedMessage": {
      "type": "object",
      "properties": {
        "blockchain": {
          "$ref": "#/definitions/scanner.Blockchain"
        },
        "signer": {
          "$ref": "#/definitions/scanner.Address"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Operation"
          }
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Address"
          }
        },
        "contracts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Contract"
          }
        }
      }
    },
    "scanner.Hint": {
      "type": "object",
      "properties": {
        "hint_type": {
          "$ref": "#/definitions/scanner.HintType"
        },
        "content": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Attribute"
          }
        }
      },
      "title": "Hint is an optional piece of data provided by the client which may inform a scanning operation"
    },
    "scanner.HintType": {
      "type": "string",
      "enum": [
        "HINT_TYPE_UNKNOWN",
        "BROWSER_DOMAIN",
        "BROWSER_REFERRER_DOMAIN",
        "INTENDED_METHOD_SIGNATURE"
      ],
      "default": "HINT_TYPE_UNKNOWN",
      "title": "HintType identifies the type of a Hint"
    },
    "scanner.Image": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "size": {
          "type": "string"
        }
      }
    },
    "scanner.ItemApprovalAllOperation": {
      "type": "object",
      "properties": {
        "contract_address": {
          "type": "string"
        },
        "owner_address": {
          "type": "string"
        },
        "operator_address": {
          "type": "string"
        },
        "collection": {
          "$ref": "#/definitions/scanner.NFTCollection"
        },
        "is_revoke": {
          "type": "boolean"
        },
        "is_operator_address_eoa": {
          "type": "boolean"
        }
      }
    },
    "scanner.ItemApprovalOperation": {
      "type": "object",
      "properties": {
        "contract_address": {
          "type": "string"
        },
        "from_address": {
          "type": "string"
        },
        "approved_address": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        },
        "collection": {
          "$ref": "#/definitions/scanner.NFTCollection"
        },
        "item": {
          "$ref": "#/definitions/scanner.NFTItem"
        },
        "is_approved_address_eoa": {
          "type": "boolean"
        }
      }
    },
    "scanner.ItemTransferOperation": {
      "type": "object",
      "properties": {
        "contract_address": {
          "type": "string"
        },
        "from_address": {
          "type": "string"
        },
        "to_address": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        },
        "collection": {
          "$ref": "#/definitions/scanner.NFTCollection"
        },
        "item": {
          "$ref": "#/definitions/scanner.NFTItem"
        },
        "quantity": {
          "type": "string"
        },
        "quantity_range": {
          "$ref": "#/definitions/scanner.QuantityRange"
        }
      }
    },
    "scanner.MessageValidation": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/scanner.Result"
        },
        "description": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "scanner.NFTCollection": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "image_url": {
          "type": "string"
        }
      }
    },
    "scanner.NFTItem": {
      "type": "object",
      "properties": {
        "token_id": {
          "type": "string"
        },
        "image_url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "scanner.Notice": {
      "type": "object",
      "properties": {
        "level": {
          "$ref": "#/definitions/scanner.NoticeLevel"
        },
        "i18n_key": {
          "type": "string"
        },
        "localized_message": {
          "type": "string"
        },
        "source_coordinate": {
          "$ref": "#/definitions/scanner.SourceCoordinate"
        },
        "source_coordinate_index": {
          "type": "integer",
          "format": "int32"
        },
        "notice_type": {
          "$ref": "#/definitions/scanner.NoticeType"
        }
      }
    },
    "scanner.NoticeLevel": {
      "type": "string",
      "enum": [
        "NOTICE_LEVEL_UNKNOWN",
        "ERROR",
        "WARNING",
        "INFO",
        "DEBUG"
      ],
      "default": "NOTICE_LEVEL_UNKNOWN",
      "title": "NoticeLevel if the severity level of a notice"
    },
    "scanner.NoticeType": {
      "type": "string",
      "enum": [
        "NOTICE_TYPE_0",
        "NOTICE_TYPE_1",
        "NOTICE_TYPE_2",
        "NOTICE_TYPE_3",
        "NOTICE_TYPE_4",
        "NOTICE_TYPE_5",
        "NOTICE_TYPE_6"
      ],
      "default": "NOTICE_TYPE_0",
      "title": "- NOTICE_TYPE_0: in order to not expose the reason why simulation failed and risk security, mask with an arbitrary name\nfor example, an unsupported chain will fall back to static analysis and return a notice and parsed operations"
    },
    "scanner.Operation": {
      "type": "object",
      "properties": {
        "operation_type": {
          "$ref": "#/definitions/scanner.OperationType"
        },
        "balance_transfer": {
          "$ref": "#/definitions/scanner.BalanceTransferOperation"
        },
        "balance_approval": {
          "$ref": "#/definitions/scanner.BalanceApprovalOperation"
        },
        "contract_ownership_transfer": {
          "$ref": "#/definitions/scanner.ContractOwnershipTransferOperation"
        },
        "item_transfer": {
          "$ref": "#/definitions/scanner.ItemTransferOperation"
        },
        "item_approval": {
          "$ref": "#/definitions/scanner.ItemApprovalOperation"
        },
        "item_approval_all": {
          "$ref": "#/definitions/scanner.ItemApprovalAllOperation"
        },
        "validity": {
          "$ref": "#/definitions/scanner.Validity"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Attribute"
          }
        }
      },
      "title": "Operation represents some"
    },
    "scanner.OperationType": {
      "type": "string",
      "enum": [
        "OPERATION_TYPE_UNKNOWN",
        "BALANCE_TRANSFER",
        "BALANCE_APPROVAL",
        "CONTRACT_OWNERSHIP_TRANSFER",
        "ITEM_TRANSFER",
        "ITEM_APPROVAL",
        "ITEM_APPROVAL_ALL"
      ],
      "default": "OPERATION_TYPE_UNKNOWN",
      "title": "OperationType identifies the type of an Operation"
    },
    "scanner.QuantityRange": {
      "type": "object",
      "properties": {
        "start_quantity": {
          "type": "string"
        },
        "end_quantity": {
          "type": "string"
        }
      }
    },
    "scanner.Result": {
      "type": "string",
      "enum": [
        "UNKNOWN_RESULT",
        "BENIGN",
        "MALICIOUS"
      ],
      "default": "UNKNOWN_RESULT"
    },
    "scanner.ScanMessageResponse": {
      "type": "object",
      "properties": {
        "message_validation": {
          "$ref": "#/definitions/scanner.MessageValidation"
        },
        "decoded_message": {
          "$ref": "#/definitions/scanner.DecodedMessage"
        }
      }
    },
    "scanner.ScanResponse": {
      "type": "object",
      "properties": {
        "notices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Notice"
          }
        },
        "decoded_tx": {
          "$ref": "#/definitions/scanner.TxDataBundle"
        }
      }
    },
    "scanner.SourceCoordinate": {
      "type": "string",
      "enum": [
        "SOURCE_COORDINATE_UNKNOWN",
        "OPERATION",
        "ADDRESS",
        "CONTRACT",
        "HINT",
        "ATTRIBUTE"
      ],
      "default": "SOURCE_COORDINATE_UNKNOWN"
    },
    "scanner.Time": {
      "type": "object",
      "properties": {
        "unit": {
          "$ref": "#/definitions/scanner.Unit"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "scanner.TxDataBundle": {
      "type": "object",
      "properties": {
        "blockchain": {
          "$ref": "#/definitions/scanner.Blockchain"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Operation"
          }
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Address"
          }
        },
        "contracts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Contract"
          }
        },
        "hints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Hint"
          }
        },
        "raw": {
          "type": "string",
          "format": "byte"
        },
        "from": {
          "type": "string"
        },
        "overridden_blockheight": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "entrypoint": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scanner.Attribute"
          }
        }
      }
    },
    "scanner.Unit": {
      "type": "string",
      "enum": [
        "UNKNOWN_UNIT",
        "BLOCK_TIMESTAMP",
        "UNIX_TIMESTAMP"
      ],
      "default": "UNKNOWN_UNIT"
    },
    "scanner.Validity": {
      "type": "object",
      "properties": {
        "start_time": {
          "$ref": "#/definitions/scanner.Time"
        },
        "end_time": {
          "$ref": "#/definitions/scanner.Time"
        }
      }
    }
  }
}
