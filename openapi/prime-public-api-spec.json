{
  "swagger": "2.0",
  "info": {
    "title": "REST API",
    "description": "# Welcome to Coinbase Prime API\n## Introduction\nThe Prime APIs allow for programmatic management of trading, custody, real-time market data, and account management. The following API pages detail the various REST API endpoints we offer.\n## Getting Started\nTo get started, please visit one of the following pages:\n- [Authentication](/prime/docs/rest-authentication)\n- [Pagination](/prime/docs/rest-pagination)\n- [Rate Limits](/prime/docs/rest-rate-limits)\n- [Quickstart](/prime/docs/quickstart)\n## FIX API\n- [FIX API reference](/prime/docs/fix-connectivity)\n## WebSocket API\n- [WebSocket API reference](/prime/docs/websocket-feed)",
    "version": "0.1"
  },
  "tags": [
    {
      "name": "PrimeRESTAPI"
    }
  ],
  "host": "api.prime.coinbase.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/activities/{activity_id}": {
      "get": {
        "summary": "Get Activity by Activity ID",
        "description": "Retrieve an activity by its activity ID - this endpoint can retrieve both portfolio and entity activities when passed the appropriate API key",
        "operationId": "PrimeRESTAPI_GetActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "activity_id",
            "description": "Id of the activity to retrieve",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activities"
        ]
      }
    },
    "/v1/allocations": {
      "post": {
        "summary": "Create Portfolio Allocations",
        "description": "Create allocation for a given portfolio.",
        "operationId": "PrimeRESTAPI_CreateAllocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.CreateAllocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.CreateAllocationRequest"
            }
          }
        ],
        "tags": [
          "Allocations"
        ]
      }
    },
    "/v1/allocations/net": {
      "post": {
        "summary": "Create Portfolio Net Allocations",
        "description": "Create net allocation for a given portfolio.",
        "operationId": "PrimeRESTAPI_CreateNetAllocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.CreateNetAllocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.CreateAllocationRequest"
            }
          }
        ],
        "tags": [
          "Allocations"
        ]
      }
    },
    "/v1/entities/{entity_id}/accruals": {
      "get": {
        "summary": "List Interest Accruals",
        "description": "Lists interest accruals for an entity between the specified date range given",
        "operationId": "PrimeRESTAPI_GetInterestAccruals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetInterestAccrualsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "The unique ID of the entity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio_id",
            "description": "The unique ID of the portfolio",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "The start date of the range to query for in RFC3339 format",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end_date",
            "description": "The end date of the range to query for in RFC3339 format",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Financing"
        ]
      }
    },
    "/v1/entities/{entity_id}/activities": {
      "get": {
        "summary": "List Entity Activities",
        "description": "List all activities associated with a given entity.",
        "operationId": "PrimeRESTAPI_GetEntityActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetEntityActivitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "Entity to retrieve activities for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_level",
            "description": "Activity level to retrieve activities for",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACTIVITY_LEVEL_ALL",
              "ACTIVITY_LEVEL_PORTFOLIO",
              "ACTIVITY_LEVEL_ENTITY"
            ],
            "default": "ACTIVITY_LEVEL_ALL"
          },
          {
            "name": "symbols",
            "description": "Filter by list of currencies",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "categories",
            "description": "Filter by list of activity categories [order, transaction, account, admin, allocation]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "OTHER_ACTIVITY_CATEGORY",
                "ACTIVITY_CATEGORY_ORDER",
                "ACTIVITY_CATEGORY_TRANSACTION",
                "ACTIVITY_CATEGORY_ACCOUNT",
                "ACTIVITY_CATEGORY_ADMIN",
                "ACTIVITY_CATEGORY_ALLOCATION",
                "ACTIVITY_CATEGORY_LENDING"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statuses",
            "description": "Filter by list of statuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "OTHER_ACTIVITY_STATUS",
                "ACTIVITY_STATUS_CANCELLED",
                "ACTIVITY_STATUS_PROCESSING",
                "ACTIVITY_STATUS_COMPLETED",
                "ACTIVITY_STATUS_EXPIRED",
                "ACTIVITY_STATUS_REJECTED",
                "ACTIVITY_STATUS_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start_time",
            "description": "Filter created time by start date",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end_time",
            "description": "Filter created time by end date",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "Activities"
        ]
      }
    },
    "/v1/entities/{entity_id}/aggregate_positions": {
      "get": {
        "summary": "List Aggregate Entity Positions",
        "description": "List paginated aggregate positions for a specific entity.",
        "operationId": "PrimeRESTAPI_ListAggregateEntityPositions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.ListAggregateEntityPositionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "The unique ID of the entity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Positions"
        ]
      }
    },
    "/v1/entities/{entity_id}/assets": {
      "get": {
        "summary": "List Assets",
        "description": "List all assets available for a given entity.",
        "operationId": "PrimeRESTAPI_GetEntityAssets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetEntityAssetsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "The entity ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Assets"
        ]
      }
    },
    "/v1/entities/{entity_id}/balances": {
      "get": {
        "summary": "List Entity Balances",
        "description": "List all balances for a specific entity.",
        "operationId": "PrimeRESTAPI_ListEntityBalances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.ListEntityBalancesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "The entity ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "symbols",
            "description": "A list of symbols by which to filter the response",
            "in": "query",
            "required": false,
            "type": "string",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "aggregation_type",
            "description": "A type by which to filter aggregated balances, defaults to \"TOTAL\"\n\n - UNKNOWN_BALANCE_TYPE: nil\n - TRADING_BALANCES: Trading balances\n - VAULT_BALANCES: Vault balances\n - TOTAL_BALANCES: Total balances (The sum of vault and trading + prime custody)\n - PRIME_CUSTODY_BALANCES: Prime custody balances\n - UNIFIED_TOTAL_BALANCES: Unified total balance across networks and wallet types (vault + trading + prime custody)",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_BALANCE_TYPE",
              "TRADING_BALANCES",
              "VAULT_BALANCES",
              "TOTAL_BALANCES",
              "PRIME_CUSTODY_BALANCES",
              "UNIFIED_TOTAL_BALANCES"
            ],
            "default": "UNKNOWN_BALANCE_TYPE"
          }
        ],
        "tags": [
          "Balances"
        ]
      }
    },
    "/v1/entities/{entity_id}/futures/auto_sweep": {
      "post": {
        "summary": "Set Auto Sweep",
        "description": "Set auto sweep for a given entity.",
        "operationId": "PrimeRESTAPI_SetAutoSweep",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.SetAutoSweepResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "Entity ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "auto_sweep": {
                  "type": "boolean",
                  "example": true,
                  "description": "Auto sweep status, default to false"
                }
              },
              "required": [
                "auto_sweep"
              ]
            }
          }
        ],
        "tags": [
          "Futures"
        ]
      }
    },
    "/v1/entities/{entity_id}/futures/balance_summary": {
      "get": {
        "summary": "Get Entity FCM Balance",
        "description": "Retrieve fcm balance for a given entity.",
        "operationId": "PrimeRESTAPI_GetFcmBalance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetFcmBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "Entity ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Futures"
        ]
      }
    },
    "/v1/entities/{entity_id}/futures/positions": {
      "get": {
        "summary": "Get Entity Positions",
        "description": "Retrieve all active fcm positions for a given entity.",
        "operationId": "PrimeRESTAPI_GetPositions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPositionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "Entity ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "product_id",
            "description": "Product ID. Optional",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Futures"
        ]
      }
    },
    "/v1/entities/{entity_id}/futures/sweeps": {
      "get": {
        "summary": "List Entity Futures Sweeps",
        "description": "Retrieve fcm sweeps in open status, including pending and processing sweeps.",
        "operationId": "PrimeRESTAPI_GetFuturesSweeps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetFuturesSweepsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "Entity ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Futures"
        ]
      },
      "delete": {
        "summary": "Cancel Entity Futures Sweep",
        "description": "Cancel the pending sweep for a given entity. A user will only be able to have one pending sweep at a time. If the sweep is not found, a 404 will be returned.",
        "operationId": "PrimeRESTAPI_CancelFuturesSweep",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.CancelFuturesSweepResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "Entity ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Futures"
        ]
      },
      "post": {
        "summary": "Schedule Entity Futures Sweep",
        "description": "Schedule a sweep for a given entity from FCM wallet to USD Spot wallet. Only one pending sweep is allowed at a time per entity.",
        "operationId": "PrimeRESTAPI_ScheduleFuturesSweep",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.ScheduleFuturesSweepResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "Entity ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "string",
                  "example": "1000.00",
                  "description": "Amount. Default to sweep all if not provided"
                },
                "currency": {
                  "type": "string",
                  "example": "USD",
                  "description": "Currency. Required"
                }
              },
              "required": [
                "currency"
              ]
            }
          }
        ],
        "tags": [
          "Futures"
        ]
      }
    },
    "/v1/entities/{entity_id}/invoices": {
      "get": {
        "summary": "List Invoices",
        "description": "Retrieve a list of invoices belonging to an entity.",
        "operationId": "PrimeRESTAPI_GetInvoices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetInvoicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "The entity ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "states",
            "description": "Invoice states to filter the response",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "INVOICE_STATE_UNSPECIFIED",
                "INVOICE_STATE_IMPORTED",
                "INVOICE_STATE_BILLED",
                "INVOICE_STATE_PARTIALLY_PAID",
                "INVOICE_STATE_PAID"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "billing_year",
            "description": "Filter invoices by year",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "billing_month",
            "description": "Integer representing the month to filter by, 1 for January, 12 for December",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "cursor",
            "description": "Cursor used for pagination (last consumed record)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Invoices"
        ]
      }
    },
    "/v1/entities/{entity_id}/locates_availability": {
      "get": {
        "summary": "Get Entity Locate Availabilities",
        "description": "Get currencies available to be located with their corresponding amount and rate.",
        "operationId": "PrimeRESTAPI_GetLocateAvailabilities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetLocateAvailabilitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "The unique ID of the entity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "conversion_date",
            "description": "Deprecated: Use locate_date instead",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locate_date",
            "description": "The date of the locate availability in YYYY-MM-DD format",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Financing"
        ]
      }
    },
    "/v1/entities/{entity_id}/margin": {
      "get": {
        "summary": "Get Margin Information",
        "description": "Gets real-time evaluation of the margin model based on current positions and spot rates.",
        "operationId": "PrimeRESTAPI_GetMarginInformation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetMarginInformationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "The unique ID of the entity",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Financing"
        ]
      }
    },
    "/v1/entities/{entity_id}/margin_summaries": {
      "get": {
        "summary": "List Margin Call Summaries",
        "description": "Lists the margin call history for a given entity ID.",
        "operationId": "PrimeRESTAPI_GetMarginSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetMarginSummariesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "The unique ID of the entity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "The start date of the range to query for in RFC3339 format. Must be within the last 3 months",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end_date",
            "description": "The end date of the range to query for in RFC3339 format",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Financing"
        ]
      }
    },
    "/v1/entities/{entity_id}/payment-methods": {
      "get": {
        "summary": "List Entity Payment Methods",
        "description": "Retrieve all payment methods for a given entity.",
        "operationId": "PrimeRESTAPI_GetEntityPaymentMethods",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetEntityPaymentMethodsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Payment Methods"
        ]
      }
    },
    "/v1/entities/{entity_id}/payment-methods/{payment_method_id}": {
      "get": {
        "summary": "Get Entity Payment Method",
        "description": "Get payment method details by id for a given entity.",
        "operationId": "PrimeRESTAPI_GetEntityPaymentMethodDetails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetEntityPaymentMethodDetailsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Payment Methods"
        ]
      }
    },
    "/v1/entities/{entity_id}/positions": {
      "get": {
        "summary": "List Entity Positions",
        "description": "List paginated positions for a specific entity.",
        "operationId": "PrimeRESTAPI_ListEntityPositions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.ListEntityPositionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "The unique ID of the entity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Positions"
        ]
      }
    },
    "/v1/entities/{entity_id}/tf_tiered_fees": {
      "get": {
        "summary": "Get Trade Finance Tiered Pricing Fees",
        "description": "Get trade finance tiered pricing fees for a given entity at a specific time, default to current time.",
        "operationId": "PrimeRESTAPI_GetTFTieredPricingFees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetTFTieredPricingFeesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "The unique ID of the entity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "effective_at",
            "description": "The fees on a specific effective date in RFC3339 format",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Financing"
        ]
      }
    },
    "/v1/entities/{entity_id}/users": {
      "get": {
        "summary": "List Users",
        "description": "List all users associated with a given entity.",
        "operationId": "PrimeRESTAPI_GetEntityUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetEntityUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "entity_id",
            "description": "The entity ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Cursor used for pagination (last consumed record)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/v1/portfolios": {
      "get": {
        "summary": "List Portfolios",
        "description": "List all portfolios for which the current API key has read access.",
        "operationId": "PrimeRESTAPI_GetPortfolios",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPortfoliosResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "Portfolios"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}": {
      "get": {
        "summary": "Get Portfolio by Portfolio ID",
        "description": "Retrieve a given portfolio by its portfolio ID.",
        "operationId": "PrimeRESTAPI_GetPortfolio",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPortfolioResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Portfolios"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/accept_quote": {
      "post": {
        "summary": "Accept Quote",
        "description": "Accepts the quote received by the quote request and creates an order with the provided quote ID.\n\nAlways required: portfolio_id, product_id, side, quote_id, client_quote_id.",
        "operationId": "PrimeRESTAPI_AcceptQuote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.AcceptQuoteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio that owns the order",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "product_id": {
                  "type": "string",
                  "title": "The ID of the product being traded for the order (e.g. `BTC-USD`)"
                },
                "side": {
                  "$ref": "#/definitions/coinbase.public_rest_api.OrderSide",
                  "example": "BUY",
                  "description": "The side of the order"
                },
                "client_order_id": {
                  "type": "string",
                  "example": "f69a20b1-4ac4-420e-90b5-814a12565bfa",
                  "description": "A client-generated ID used for reference purposes (note: order will be rejected if this ID is not unique among all currently active orders)"
                },
                "quote_id": {
                  "type": "string",
                  "example": "f69a20b1-4ac4-420e-90b5-814a12565bfa",
                  "description": "A quote id that was returned from the quote request"
                },
                "settl_currency": {
                  "type": "string",
                  "title": "next: 7"
                }
              },
              "required": [
                "product_id",
                "side",
                "client_order_id",
                "quote_id"
              ]
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/accruals": {
      "get": {
        "summary": "List Interest Accruals For Portfolio",
        "description": "Lists interest accruals between the specified date range for a specific portfolio ID",
        "operationId": "PrimeRESTAPI_GetPortfolioInterestAccruals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPortfolioInterestAccrualsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The unique ID of the portfolio",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "The start date of the range to query for in RFC3339 format",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end_date",
            "description": "The end date of the range to query for in RFC3339 format",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Financing"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/activities": {
      "get": {
        "summary": "List Activities",
        "description": "List all activities associated with a given portfolio.",
        "operationId": "PrimeRESTAPI_GetPortfolioActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPortfolioActivitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio to retrieve activities for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "symbols",
            "description": "Filter by list of currencies",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "categories",
            "description": "Filter by list of activity categories [order, transaction, account, admin, allocation]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "OTHER_ACTIVITY_CATEGORY",
                "ACTIVITY_CATEGORY_ORDER",
                "ACTIVITY_CATEGORY_TRANSACTION",
                "ACTIVITY_CATEGORY_ACCOUNT",
                "ACTIVITY_CATEGORY_ADMIN",
                "ACTIVITY_CATEGORY_ALLOCATION",
                "ACTIVITY_CATEGORY_LENDING"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statuses",
            "description": "Filter by list of statuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "OTHER_ACTIVITY_STATUS",
                "ACTIVITY_STATUS_CANCELLED",
                "ACTIVITY_STATUS_PROCESSING",
                "ACTIVITY_STATUS_COMPLETED",
                "ACTIVITY_STATUS_EXPIRED",
                "ACTIVITY_STATUS_REJECTED",
                "ACTIVITY_STATUS_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start_time",
            "description": "Filter created time by start date",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end_time",
            "description": "Filter created time by end date",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "Activities"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/activities/{activity_id}": {
      "get": {
        "summary": "Get Portfolio Activity by Activity ID",
        "description": "Retrieve an activity by its activity ID",
        "operationId": "PrimeRESTAPI_GetPortfolioActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPortfolioActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio to retrieve activity for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity_id",
            "description": "Id of the activity to retrieve",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activities"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/address_book": {
      "get": {
        "summary": "Get Address Book",
        "description": "Gets a list of address book addresses.",
        "operationId": "PrimeRESTAPI_GetPortfolioAddressBook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPortfolioAddressBookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_symbol",
            "description": "Cryptocurrency symbol -- if nothing is passed, all addresses are returned",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search",
            "description": "Query string that matches the address name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "ID marking the point after which additional results should be retrieved",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of addresses to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "Address Book"
        ]
      },
      "post": {
        "summary": "Create Address Book Entry",
        "description": "Creates an entry for a portfolio's trusted addresses.",
        "operationId": "PrimeRESTAPI_CreatePortfolioAddressBookEntry",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.CreatePortfolioAddressBookEntryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "Crypto address to add"
                },
                "currency_symbol": {
                  "type": "string",
                  "description": "Currency symbol of address to add"
                },
                "name": {
                  "type": "string",
                  "description": "Name of address book entry"
                },
                "account_identifier": {
                  "type": "string",
                  "description": "Account Identifier (memo/destination tag)"
                }
              },
              "required": [
                "address",
                "currency_symbol",
                "name"
              ]
            }
          }
        ],
        "tags": [
          "Address Book"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/allocations": {
      "get": {
        "summary": "Get Portfolio Allocations",
        "description": "List historical allocations for a given portfolio.",
        "operationId": "PrimeRESTAPI_GetPortfolioAllocations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPortfolioAllocationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio to retrieve allocations for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "product_ids",
            "description": "List of products by which to filter the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order_side",
            "description": "An order side to filter allocations on.\n\n - UNKNOWN_ORDER_SIDE: nil value\n - BUY: Buy order\n - SELL: Sell order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_ORDER_SIDE",
              "BUY",
              "SELL"
            ],
            "default": "UNKNOWN_ORDER_SIDE"
          },
          {
            "name": "start_date",
            "description": "A start date for the allocations to be queried from.",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "An end date for the orders to be queried from.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order: DESC or ASC",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "Allocations"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/allocations/net/{netting_id}": {
      "get": {
        "summary": "Get Net Allocations by Netting ID",
        "description": "Retrieve an allocation by netting ID.",
        "operationId": "PrimeRESTAPI_GetAllocationsByClientNettingId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetAllocationsByClientNettingIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID of the allocation",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "netting_id",
            "description": "The allocation netting ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "allocation_id",
            "description": "The ID of the allocation",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Allocations"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/allocations/{allocation_id}": {
      "get": {
        "summary": "Get Allocation by ID",
        "description": "Retrieve an allocation by allocation ID.",
        "operationId": "PrimeRESTAPI_GetAllocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetAllocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID of the allocation",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "allocation_id",
            "description": "The ID of the allocation",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "netting_id",
            "description": "The allocation netting ID",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Allocations"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/balances": {
      "get": {
        "summary": "List Portfolio Balances",
        "description": "List all balances for a specific portfolio.",
        "operationId": "PrimeRESTAPI_GetPortfolioBalances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPortfolioBalancesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "symbols",
            "description": "A list of symbols by which to filter the response",
            "in": "query",
            "required": false,
            "type": "string",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "balance_type",
            "description": "A type by which to filter balances\n\n - UNKNOWN_BALANCE_TYPE: nil\n - TRADING_BALANCES: Trading balances\n - VAULT_BALANCES: Vault balances\n - TOTAL_BALANCES: Total balances (The sum of vault and trading + prime custody)\n - PRIME_CUSTODY_BALANCES: Prime custody balances\n - UNIFIED_TOTAL_BALANCES: Unified total balance across networks and wallet types (vault + trading + prime custody)",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_BALANCE_TYPE",
              "TRADING_BALANCES",
              "VAULT_BALANCES",
              "TOTAL_BALANCES",
              "PRIME_CUSTODY_BALANCES",
              "UNIFIED_TOTAL_BALANCES"
            ],
            "default": "UNKNOWN_BALANCE_TYPE"
          }
        ],
        "tags": [
          "Balances"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/buying_power": {
      "get": {
        "summary": "Get Portfolio Buying Power",
        "description": "Returns the size of a buy trade that can be performed based on existing holdings and available credit. The result will differ for different assets due to asset specific credit configurations and caps. Note that this result is changing based on asset price fluctuations, so may be rejected when submitted.",
        "operationId": "PrimeRESTAPI_GetBuyingPower",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetBuyingPowerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The unique ID of the portfolio",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "base_currency",
            "description": "The symbol for the base currency",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "quote_currency",
            "description": "The symbol for the quote currency",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Financing"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/commission": {
      "get": {
        "summary": "Get Portfolio Commission",
        "description": "Retrieve commission associated with a given portfolio.",
        "operationId": "PrimeRESTAPI_GetPortfolioCommission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPortfolioCommissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Commission"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/credit": {
      "get": {
        "summary": "Get Portfolio Credit Information",
        "description": "Retrieve a portfolio's post-trade credit information.",
        "operationId": "PrimeRESTAPI_GetPostTradeCredit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPostTradeCreditResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Financing"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/fills": {
      "get": {
        "summary": "List Portfolio Fills",
        "description": "Retrieve fills on a given portfolio. This endpoint requires a start_date, and returns a payload with a default limit of 100 if not specified by the user. The maximum allowed limit is 3000.",
        "operationId": "PrimeRESTAPI_GetPortfolioFills",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPortfolioFillsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID associated with the order",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Cursor used for pagination (last consumed record)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "start_date",
            "description": "A start date for the fills to be queried from",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "An end date for the fills to be queried until",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/locates": {
      "get": {
        "summary": "List Existing Locates",
        "description": "List locates for the portfolio",
        "operationId": "PrimeRESTAPI_GetExistingLocates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetExistingLocatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The unique ID of the portfolio",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "locate_ids",
            "description": "The IDs of specific locates to filter for",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "conversion_date",
            "description": "Deprecated: Use locate_date instead",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locate_date",
            "description": "The date of the locates in YYYY-MM-DD format",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Financing"
        ]
      },
      "post": {
        "summary": "Create New Locates",
        "description": "Create a new locate",
        "operationId": "PrimeRESTAPI_CreateNewLocates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.CreateNewLocatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The unique ID of the portfolio",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "symbol": {
                  "type": "string",
                  "example": "BTC",
                  "description": "Currency symbol"
                },
                "amount": {
                  "type": "string",
                  "example": "100",
                  "description": "Locate Amount"
                },
                "conversion_date": {
                  "type": "string",
                  "example": "2023-11-01",
                  "description": "Deprecated: Use locate_date instead"
                },
                "locate_date": {
                  "type": "string",
                  "example": "2023-11-01",
                  "description": "The target date of the locate (YYYY-MM-DD)"
                }
              },
              "required": [
                "symbol",
                "amount"
              ]
            }
          }
        ],
        "tags": [
          "Financing"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/margin_conversions": {
      "get": {
        "summary": "List Margin Conversions",
        "description": "Lists conversions and short collateral requirement between specified date range. This endpoint is deprecated and will be removed in the future. Use /v1/entities/{entity_id}/margin_summaries instead.",
        "operationId": "PrimeRESTAPI_GetMarginConversions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetMarginConversionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The unique ID of the portfolio",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start_date",
            "description": "The start date of the range to query for in RFC3339 format",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end_date",
            "description": "The end date of the range to query for in RFC3339 format",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Financing"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/onchain_address_group": {
      "post": {
        "summary": "Create Onchain Address Book Entry",
        "description": "Creates an entry to the portfolio's onchain address groups.",
        "operationId": "PrimeRESTAPI_CreateOnchainAddressGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.ActivityCreationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "address_group": {
                  "$ref": "#/definitions/coinbase.public_rest_api.AddressGroup"
                }
              },
              "title": "ChangeOnchainAddressGroupRequest is a request to create or update a new onchain address group",
              "required": [
                "address_group"
              ]
            }
          }
        ],
        "tags": [
          "Onchain Address Book"
        ]
      },
      "put": {
        "summary": "Update Onchain Address Book Entry",
        "description": "Updates an entry to the portfolio's onchain address groups.",
        "operationId": "PrimeRESTAPI_UpdateOnchainAddressGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.ActivityCreationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "address_group": {
                  "$ref": "#/definitions/coinbase.public_rest_api.AddressGroup"
                }
              },
              "title": "ChangeOnchainAddressGroupRequest is a request to create or update a new onchain address group",
              "required": [
                "address_group"
              ]
            }
          }
        ],
        "tags": [
          "Onchain Address Book"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/onchain_address_group/{address_group_id}": {
      "delete": {
        "summary": "Delete Onchain Address Group",
        "description": "Deletes an entry in the portfolio's onchain address groups.",
        "operationId": "PrimeRESTAPI_DeleteOnchainAddressGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.ActivityCreationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "address_group_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Onchain Address Book"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/onchain_address_groups": {
      "get": {
        "summary": "List Onchain Address Groups",
        "description": "Lists all onchain address groups for a given portfolio ID",
        "operationId": "PrimeRESTAPI_ListOnchainAddressGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.ListOnchainAddressGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Onchain Address Groups"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/open_orders": {
      "get": {
        "summary": "List Open Orders",
        "description": "List all open orders. \u003cbr /\u003e\u003cbr /\u003e\u003cb\u003eCaution:\u003c/b\u003e The maximum number of orders returned is 1000. If a client has more than 1000 open orders, an error is returned prompting the user to use Websocket API, or FIX API to stream open orders.",
        "operationId": "PrimeRESTAPI_GetOpenOrders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetOpenOrdersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "product_ids",
            "description": "List of products by which to filter the response",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order_type",
            "description": "An order type by which to filter the response\n\n - UNKNOWN_ORDER_TYPE: nil value\n - MARKET: A [market order](https://en.wikipedia.org/wiki/Order_(exchange)#Market_order)\n - LIMIT: A [limit order](https://en.wikipedia.org/wiki/Order_(exchange)#Limit_order)\n - TWAP: A [time-weighted average price order](https://en.wikipedia.org/wiki/Time-weighted_average_price)\n - BLOCK: A [block trade](https://en.wikipedia.org/wiki/Block_trade)\n - VWAP: A [volume-weighted average price order](https://en.wikipedia.org/wiki/Volume-weighted_average_price)\n - STOP_LIMIT: A [conditional order combined of stop order and limit order](https://en.wikipedia.org/wiki/Order_(exchange)#Stop-limit_order)\n - RFQ: A [request for quote](https://en.wikipedia.org/wiki/Request_for_quote)",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_ORDER_TYPE",
              "MARKET",
              "LIMIT",
              "TWAP",
              "BLOCK",
              "VWAP",
              "STOP_LIMIT",
              "RFQ"
            ],
            "default": "UNKNOWN_ORDER_TYPE"
          },
          {
            "name": "cursor",
            "description": "\u003cb\u003eDeprecated\u003c/b\u003e - this endpoint always returns one page with at most 1000 orders. If you need to retrieve more than 1000 orders, use the WebSocket API instead.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "\u003cb\u003eDeprecated\u003c/b\u003e - the limit for this endpoint is always 1000. If you need to retrieve more than 1000 orders, use the WebSocket API instead.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "start_date",
            "description": "A start date for the orders to be queried from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "order_side",
            "description": "An order side to filter on.\n\n - UNKNOWN_ORDER_SIDE: nil value\n - BUY: Buy order\n - SELL: Sell order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_ORDER_SIDE",
              "BUY",
              "SELL"
            ],
            "default": "UNKNOWN_ORDER_SIDE"
          },
          {
            "name": "end_date",
            "description": "An end date for the orders to be queried from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/order": {
      "post": {
        "summary": "Create Order",
        "description": "Create an order.",
        "operationId": "PrimeRESTAPI_CreateOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.CreateOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio that owns the order",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "product_id": {
                  "type": "string",
                  "title": "The ID of the product being traded for the order (e.g. `BTC-USD`)"
                },
                "side": {
                  "$ref": "#/definitions/coinbase.public_rest_api.OrderSide",
                  "example": "BUY",
                  "description": "The side of the order"
                },
                "client_order_id": {
                  "type": "string",
                  "title": "A client-generated order ID used for reference purposes"
                },
                "type": {
                  "$ref": "#/definitions/coinbase.public_rest_api.OrderType",
                  "example": "LIMIT",
                  "description": "The type of order placed. Block and RFQ orders are not supported. Leverage the /rfq and /accept_quote endpoints to submit RFQ order types",
                  "title": "The type of the order"
                },
                "base_quantity": {
                  "type": "string",
                  "title": "Order size in base asset units (either `base_quantity` or `quote_value` is required)"
                },
                "quote_value": {
                  "type": "string",
                  "title": "Order size in quote asset units, i.e. the amount the user wants to spend (when buying) or receive (when selling); the quantity in base units will be determined based on the market liquidity and indicated `quote_value` (either `base_quantity` or `quote_value` is required)"
                },
                "limit_price": {
                  "type": "string",
                  "title": "The limit price (required for TWAP, VWAP, LIMIT, and STOP_LIMIT orders)"
                },
                "start_time": {
                  "type": "string",
                  "format": "date-time",
                  "title": "The start time of the order in UTC (TWAP only)"
                },
                "expiry_time": {
                  "type": "string",
                  "format": "date-time",
                  "title": "The expiry time of the order in UTC (TWAP, VWAP, LIMIT, and STOP_LIMIT GTD only)"
                },
                "time_in_force": {
                  "$ref": "#/definitions/coinbase.public_rest_api.TimeInForceType",
                  "title": "Time in force"
                },
                "stp_id": {
                  "type": "string",
                  "title": "An optional self trade prevention id (in the form of a UUID). The value is only honored for certain clients who are permitted to specify a custom self trade prevention id"
                },
                "display_quote_size": {
                  "type": "string"
                },
                "display_base_size": {
                  "type": "string"
                },
                "is_raise_exact": {
                  "type": "boolean"
                },
                "historical_pov": {
                  "type": "string",
                  "title": "Historical percentage of volume"
                },
                "stop_price": {
                  "type": "string",
                  "title": "Specifies the stop price at which the order activates. The order is activated if the last trade price on Coinbase Exchange crosses the stop price specified on the order"
                },
                "settl_currency": {
                  "type": "string",
                  "description": "next: 19",
                  "title": "The currency in which the settlement will be made"
                }
              },
              "required": [
                "product_id",
                "side",
                "client_order_id",
                "type"
              ]
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/order_preview": {
      "post": {
        "summary": "Get Order Preview",
        "description": "Retrieve an order preview.",
        "operationId": "PrimeRESTAPI_OrderPreview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.PostOrderPreviewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio that owns the order",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "product_id": {
                  "type": "string",
                  "title": "The ID of the product being traded for the order (e.g. `BTC-USD`)"
                },
                "side": {
                  "$ref": "#/definitions/coinbase.public_rest_api.OrderSide",
                  "example": "BUY",
                  "description": "The side of the order"
                },
                "type": {
                  "$ref": "#/definitions/coinbase.public_rest_api.OrderType",
                  "example": "LIMIT",
                  "description": "The type of order placed. Block and RFQ orders are not supported. Leverage the /rfq and /accept_quote endpoints to submit RFQ order types",
                  "title": "The type of the order"
                },
                "base_quantity": {
                  "type": "string",
                  "title": "Order size in base asset units (either `base_quantity` or `quote_value` is required)"
                },
                "quote_value": {
                  "type": "string",
                  "title": "Order size in quote asset units, i.e. the amount the user wants to spend (when buying) or receive (when selling); the quantity in base units will be determined based on the market liquidity and indicated `quote_value` (either `base_quantity` or `quote_value` is required)"
                },
                "limit_price": {
                  "type": "string",
                  "title": "The limit price (required for TWAP, VWAP, LIMIT and STOP_LIMIT orders)"
                },
                "start_time": {
                  "type": "string",
                  "format": "date-time",
                  "title": "The start time of the order in UTC (TWAP, VWAP only)"
                },
                "expiry_time": {
                  "type": "string",
                  "format": "date-time",
                  "title": "The expiry time of the order in UTC (TWAP, VWAP, LIMIT and STOP_LIMIT GTD only)"
                },
                "time_in_force": {
                  "$ref": "#/definitions/coinbase.public_rest_api.TimeInForceType",
                  "title": "Time in force"
                },
                "is_raise_exact": {
                  "type": "boolean",
                  "title": "Raise Exact order flag"
                },
                "historical_pov": {
                  "type": "string",
                  "title": "Historical percentage of volume"
                },
                "stop_price": {
                  "type": "string",
                  "title": "Specifies the stop price at which the order activates. The order is activated if the last trade price on Coinbase Exchange crosses the stop price specified on the order"
                },
                "settl_currency": {
                  "type": "string",
                  "description": "next: 15",
                  "title": "The currency in which the settlement will be made"
                }
              },
              "required": [
                "product_id",
                "side",
                "type"
              ]
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/orders": {
      "get": {
        "summary": "List Portfolio Orders",
        "description": "List historical orders for a given portfolio. This endpoint returns a payload with a default limit of 100 if not specified by the user. The maximum allowed limit is 3000. \u003cbr /\u003e\u003cbr /\u003e\u003cb\u003eCaution:\u003c/b\u003e Currently, you cannot query open orders with this endpoint: use List Open Orders if you have less than 1000 open orders, otherwise use Websocket API, or FIX API to stream open orders.",
        "operationId": "PrimeRESTAPI_GetOrders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetOrdersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "order_statuses",
            "description": "List of statuses by which to filter the response\n\n - UNKNOWN_ORDER_STATUS: nil value\n - OPEN: The order is open but unfilled\n - FILLED: The order was filled\n - CANCELLED: The order was cancelled\n - EXPIRED: The order has expired\n - FAILED: Order submission failed\n - PENDING: The order has been sent but is not yet confirmed",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN_ORDER_STATUS",
                "OPEN",
                "FILLED",
                "CANCELLED",
                "EXPIRED",
                "FAILED",
                "PENDING"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "product_ids",
            "description": "List of products by which to filter the response",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order_type",
            "description": "Order type by which to filter the response\n\n - UNKNOWN_ORDER_TYPE: nil value\n - MARKET: A [market order](https://en.wikipedia.org/wiki/Order_(exchange)#Market_order)\n - LIMIT: A [limit order](https://en.wikipedia.org/wiki/Order_(exchange)#Limit_order)\n - TWAP: A [time-weighted average price order](https://en.wikipedia.org/wiki/Time-weighted_average_price)\n - BLOCK: A [block trade](https://en.wikipedia.org/wiki/Block_trade)\n - VWAP: A [volume-weighted average price order](https://en.wikipedia.org/wiki/Volume-weighted_average_price)\n - STOP_LIMIT: A [conditional order combined of stop order and limit order](https://en.wikipedia.org/wiki/Order_(exchange)#Stop-limit_order)\n - RFQ: A [request for quote](https://en.wikipedia.org/wiki/Request_for_quote)",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_ORDER_TYPE",
              "MARKET",
              "LIMIT",
              "TWAP",
              "BLOCK",
              "VWAP",
              "STOP_LIMIT",
              "RFQ"
            ],
            "default": "UNKNOWN_ORDER_TYPE"
          },
          {
            "name": "cursor",
            "description": "Cursor used for pagination (last consumed record)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "order_side",
            "description": "An order side to filter on.\n\n - UNKNOWN_ORDER_SIDE: nil value\n - BUY: Buy order\n - SELL: Sell order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_ORDER_SIDE",
              "BUY",
              "SELL"
            ],
            "default": "UNKNOWN_ORDER_SIDE"
          },
          {
            "name": "start_date",
            "description": "A start date for the orders to be queried from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "description": "An end date for the orders to be queried from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/orders/{order_id}": {
      "get": {
        "summary": "Get Order by Order ID",
        "description": "Retrieve an order by order ID.",
        "operationId": "PrimeRESTAPI_GetOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "order_id",
            "description": "Order ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/orders/{order_id}/cancel": {
      "post": {
        "summary": "Cancel Order",
        "description": "Cancel an order. (Filled orders cannot be canceled.)",
        "operationId": "PrimeRESTAPI_CancelOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.CancelOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio under which the order was placed",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "order_id",
            "description": "The order ID generated by Coinbase upon order submission",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/orders/{order_id}/fills": {
      "get": {
        "summary": "List Order Fills",
        "description": "Retrieve fills on a given order. This endpoint returns a payload with a default limit of 100 if not specified by the user. The maximum allowed limit is 3000.",
        "operationId": "PrimeRESTAPI_GetOrderFills",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetOrderFillsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID associated with the order",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "order_id",
            "description": "The order ID generated by Coinbase",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Cursor used for pagination (last consumed record)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/products": {
      "get": {
        "summary": "List Portfolio Products",
        "description": "List tradable products for a given portfolio.",
        "operationId": "PrimeRESTAPI_GetPortfolioProducts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPortfolioProductsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Cursor used for pagination (last consumed record)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/rfq": {
      "post": {
        "summary": "Create Quote Request",
        "description": "A Quote Request is the start of the RFQ process. Coinbase Prime sends a Quote Request to Liquidity Providers (LPs) on behalf of a customer looking to participate in an RFQ trade.\n\nAlways required: portfolio_id, product_id, side, client_quote_id, and limit_price. One of either base_quantity or quote_value is always required.",
        "operationId": "PrimeRESTAPI_CreateQuoteRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.QuoteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio that owns the order",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "product_id": {
                  "type": "string",
                  "title": "The ID of the product being traded for the order (e.g. `BTC-USD`)"
                },
                "side": {
                  "$ref": "#/definitions/coinbase.public_rest_api.OrderSide",
                  "example": "BUY",
                  "description": "The side of the order"
                },
                "client_quote_id": {
                  "type": "string",
                  "example": "f69a20b1-4ac4-420e-90b5-814a12565bfa",
                  "description": "A client-generated order ID used for reference purposes (note: order will be rejected if this ID is not unique among all currently active orders)",
                  "title": "Based off of Order"
                },
                "base_quantity": {
                  "type": "string",
                  "title": "Order size in base asset units (either `base_quantity` or `quote_value` is required)"
                },
                "quote_value": {
                  "type": "string",
                  "title": "Order size in quote asset units, i.e. the amount the user wants to spend (when buying) or receive (when selling); the quantity in base units will be determined based on the market liquidity and indicated `quote_value` (either `base_quantity` or `quote_value` is required)"
                },
                "limit_price": {
                  "type": "string",
                  "title": "The limit price"
                },
                "settl_currency": {
                  "type": "string",
                  "title": "The currency in which the settlement will be made"
                }
              },
              "description": "based off PostOrderPreviewRequest",
              "title": "RFQ",
              "required": [
                "product_id",
                "side",
                "client_quote_id",
                "size",
                "limit_price"
              ]
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/transactions": {
      "get": {
        "summary": "List Portfolio Transactions",
        "description": "List transactions for a given portfolio (only transactions that affect balances are accessible).",
        "operationId": "PrimeRESTAPI_GetPortfolioTransactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPortfolioTransactionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "symbols",
            "description": "A case insensitive list of symbols by which to filter the response",
            "in": "query",
            "required": false,
            "type": "string",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "description": "The transaction types by which to filter the response\n\n - TRANSACTION_TYPE_UNKNOWN: An unknown transaction type\n - DEPOSIT: A fiat or crypto deposit\n - WITHDRAWAL: A fiat or crypto withdrawal\n - INTERNAL_DEPOSIT: An internal fiat or crypto deposit\n - INTERNAL_WITHDRAWAL: An internal fiat or crypto withdrawal\n - SWEEP_DEPOSIT: Internal automated deposit to a cold address from a restored address\n - SWEEP_WITHDRAWAL: Internal automated withdrawal from a restored address to a cold address\n - PROXY_DEPOSIT: On-chain deposit of funds into proxy contract from cold address\n - PROXY_WITHDRAWAL: On-chain withdrawal of funds from proxy contract to cold address\n - BILLING_WITHDRAWAL: Coinbase Prime automated invoice settlement payment\n - REWARD: Reward payment to an associated address for a staked asset\n - COINBASE_REFUND: Coinbase Prime refund for the leftover amount for a CPFP (child pays for parent) transaction\n - TRANSACTION_TYPE_OTHER: An OTHER type of transaction\n - WITHDRAWAL_ADJUSTMENT: A manual adjustment withdrawal transaction\n - DEPOSIT_ADJUSTMENT: A manual adjustment deposit transaction\n - KEY_REGISTRATION: An on-chain registration for an address\n - DELEGATION: An on-chain delegation transaction\n - UNDELEGATION: An on-chain undelegation transaction\n - RESTAKE: On-chain restaking transaction\n - COMPLETE_UNBONDING: On-chain unbonding event transaction\n - WITHDRAW_UNBONDED: On-chain event indicating unbonding period is over\n - STAKE_ACCOUNT_CREATE: On-chain transaction to begin staking from an address\n - CHANGE_VALIDATOR: On-chain transaction alter validator\n - STAKE: On-chain transaction to begin staking in Cryptocurrency network\n - UNSTAKE: On-chain transaction to stop staking in Cryptocurrency network\n - REMOVE_AUTHORIZED_PARTY: On-chain transaction to remove a party from a multi-signature wallet\n - STAKE_AUTHORIZE_WITH_SEED: On-chain transaction to begin staking from a seed account\n - SLASH: On-chain transaction indicating a slash event has occurred\n - COINBASE_DEPOSIT: On-chain transaction deposit for the purpose of transaction operations\n - CONVERSION: Internal conversion between two assets\n - CLAIM_REWARDS: On-chain transaction to claim rewards from Vote Account\n - VOTE_AUTHORIZE: On-chain transaction to transfer the reward claiming permission to other pubkey\n - WEB3_TRANSACTION: On-chain transaction initiated with Prime Onchain Wallet\nDeprecated: Use ONCHAIN_TRANSACTION instead\n - ONCHAIN_TRANSACTION: On-chain transaction initiated with Prime Onchain Wallet",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "TRANSACTION_TYPE_UNKNOWN",
                "DEPOSIT",
                "WITHDRAWAL",
                "INTERNAL_DEPOSIT",
                "INTERNAL_WITHDRAWAL",
                "SWEEP_DEPOSIT",
                "SWEEP_WITHDRAWAL",
                "PROXY_DEPOSIT",
                "PROXY_WITHDRAWAL",
                "BILLING_WITHDRAWAL",
                "REWARD",
                "COINBASE_REFUND",
                "TRANSACTION_TYPE_OTHER",
                "WITHDRAWAL_ADJUSTMENT",
                "DEPOSIT_ADJUSTMENT",
                "KEY_REGISTRATION",
                "DELEGATION",
                "UNDELEGATION",
                "RESTAKE",
                "COMPLETE_UNBONDING",
                "WITHDRAW_UNBONDED",
                "STAKE_ACCOUNT_CREATE",
                "CHANGE_VALIDATOR",
                "STAKE",
                "UNSTAKE",
                "REMOVE_AUTHORIZED_PARTY",
                "STAKE_AUTHORIZE_WITH_SEED",
                "SLASH",
                "COINBASE_DEPOSIT",
                "CONVERSION",
                "CLAIM_REWARDS",
                "VOTE_AUTHORIZE",
                "WEB3_TRANSACTION",
                "ONCHAIN_TRANSACTION"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start_time",
            "description": "UTC timestamp from which to filter the response (inclusive, ISO-8601 format)",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_time",
            "description": "UTC timestamp until which to filter the response (exclusive, ISO-8601 format)",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Page sorting direction",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "Transactions"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/transactions/{transaction_id}": {
      "get": {
        "summary": "Get Transaction by Transaction ID",
        "description": "Retrieve a specific transaction by its transaction ID (only transactions that affect balances are accessible).",
        "operationId": "PrimeRESTAPI_GetTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "transaction_id",
            "description": "The transaction ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Transactions"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/users": {
      "get": {
        "summary": "List Portfolio Users",
        "description": "List all users associated with a given portfolio.",
        "operationId": "PrimeRESTAPI_GetPortfolioUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetPortfolioUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "Cursor used for pagination (last consumed record)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets": {
      "get": {
        "summary": "List Portfolio Wallets",
        "description": "List all wallets associated with a given portfolio.",
        "operationId": "PrimeRESTAPI_GetWallets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetWalletsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "The wallet type\n\n - VAULT: A crypto vault\n - TRADING: A trading wallet\n - WALLET_TYPE_OTHER: Other wallet types (like consumer, etc)\n - QC: A QC Wallet\n - ONCHAIN: An Onchain wallet",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_WALLET_TYPE",
              "VAULT",
              "TRADING",
              "WALLET_TYPE_OTHER",
              "QC",
              "ONCHAIN"
            ],
            "default": "UNKNOWN_WALLET_TYPE"
          },
          {
            "name": "cursor",
            "description": "Cursor used for pagination (last consumed record)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of wallets to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Sorting order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "symbols",
            "description": "The wallet symbol",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Wallets"
        ]
      },
      "post": {
        "summary": "Create Wallet",
        "description": "Create a wallet. Note: The first ONCHAIN wallet for each network family must be created through the Prime UI.",
        "operationId": "PrimeRESTAPI_CreateWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.CreateWalletResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "title": "The name of the wallet"
                },
                "symbol": {
                  "type": "string",
                  "title": "The asset stored in the wallet. Should not be specified when wallet_type is ONCHAIN"
                },
                "wallet_type": {
                  "$ref": "#/definitions/coinbase.public_rest_api.WalletType",
                  "title": "The wallet type"
                },
                "idempotency_key": {
                  "type": "string",
                  "title": "idem"
                },
                "network_family": {
                  "$ref": "#/definitions/coinbase.public_rest_api.NetworkFamily",
                  "title": "The network family. Required only when wallet_type is ONCHAIN"
                },
                "network": {
                  "$ref": "#/definitions/coinbase.public_rest_api.Network",
                  "title": "The network the wallet is valid on (e.g. ethereum-mainnet) -- only for vault wallets"
                }
              },
              "required": [
                "name",
                "symbol"
              ]
            }
          }
        ],
        "tags": [
          "Wallets"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}": {
      "get": {
        "summary": "Get Wallet by Wallet ID",
        "description": "Retrieve a specific wallet by Wallet ID.",
        "operationId": "PrimeRESTAPI_GetWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetWalletResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "description": "Wallet ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Wallets"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/balance": {
      "get": {
        "summary": "Get Wallet Balance",
        "description": "Query balance for a specific wallet.",
        "operationId": "PrimeRESTAPI_GetWalletBalance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetWalletBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "description": "Wallet ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Balances"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/conversion": {
      "post": {
        "summary": "Create Conversion",
        "description": "Perform a conversion between 2 assets.",
        "operationId": "PrimeRESTAPI_CreateConversion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.CreateConversionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The ID of the portfolio",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "description": "The wallet ID that the conversion will originate from",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "string",
                  "example": "50.50",
                  "description": "The amount in whole units to convert"
                },
                "destination": {
                  "type": "string",
                  "example": "e84255eb-2e21-439e-a1d0-f5dd1e1292b9",
                  "description": "The UUID of the destination wallet"
                },
                "idempotency_key": {
                  "type": "string",
                  "example": "e84255eb-2e21-439e-a1d0-f5dd1e1292b9",
                  "description": "The idempotency key associated with this conversion"
                },
                "source_symbol": {
                  "type": "string",
                  "example": "USD",
                  "description": "The currency symbol to convert from"
                },
                "destination_symbol": {
                  "type": "string",
                  "example": "USDC",
                  "description": "The currency symbol to convert to"
                }
              },
              "required": [
                "amount",
                "destination",
                "idempotency_key",
                "source_symbol",
                "destination_symbol"
              ]
            }
          }
        ],
        "tags": [
          "Transactions"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/deposit_instructions": {
      "get": {
        "summary": "Get Wallet Deposit Instructions",
        "description": "Retrieve a specific wallet's deposit instructions.",
        "operationId": "PrimeRESTAPI_GetWalletDepositInstructions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetWalletDepositInstructionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "description": "The wallet ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deposit_type",
            "description": "The deposit type\n\n - UNKNOWN_WALLET_DEPOSIT_TYPE: nil value\n - CRYPTO: A cryptocurrency deposit\n - WIRE: A wire deposit\n - SEN: DEPRECATED. A Silvergate Exchange Network deposit\n - SWIFT: A SWIFT deposit\n - SEPA: A SEPA deposit (Single Euro Payments Area)",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "UNKNOWN_WALLET_DEPOSIT_TYPE",
              "CRYPTO",
              "WIRE",
              "SEN",
              "SWIFT",
              "SEPA"
            ],
            "default": "UNKNOWN_WALLET_DEPOSIT_TYPE"
          },
          {
            "name": "network.id",
            "description": "The name of the network\n\nThe network id: base, bitcoin, ethereum, solana etc",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "network.type",
            "description": "The network type\n\nThe network type: mainnet, testnet, etc",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Wallets"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/onchain_transaction": {
      "post": {
        "summary": "Create Onchain Transaction",
        "description": "Create an onchain transaction.",
        "operationId": "PrimeRESTAPI_CreateOnchainTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.CreateOnchainTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "description": "The wallet ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "raw_unsigned_txn": {
                  "type": "string",
                  "example": "[EVM Example]: 02f00180830f424085057db95cdf825208942225166893d26f2064a15cc84f5b897591a7e6938642a13798e59d80c0808080\n[Solana Example]: 010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080010002045bae9ac3406b6ad02953cef2646a07966df84f35c0d754d5cc628d452299fcc606c34c7ae7b6d15777787f4f5217d8f2537e7efecabf3d96c39952ed2144322e00000000000000000000000000000000000000000000000000000000000000000306466fe5211732ffecadba72c39be7bc8ce5bbc5f7126b2c439b3a40000000dc34215f010238fbe5a955301891d29cdc1ea2b1f175e36c01c7cde0126ba58303020200010c02000000364b16000000000003000903102700000000000003000502400d030000",
                  "description": "Raw unsigned transaction in Hex format (Supports EVM and Solana)"
                },
                "rpc": {
                  "$ref": "#/definitions/coinbase.public_rest_api.RpcConfig",
                  "description": "RPC configuration for transaction broadcast"
                },
                "evm_params": {
                  "$ref": "#/definitions/coinbase.public_rest_api.CreateOnchainTransactionRequest.EvmParams"
                }
              },
              "required": [
                "raw_unsigned_txn"
              ]
            }
          }
        ],
        "tags": [
          "Transactions"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/staking/initiate": {
      "post": {
        "summary": "Request to stake or delegate a wallet",
        "description": "Creates an execution request to stake or delegate funds to a validator",
        "operationId": "PrimeRESTAPI_StakingInitiate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.StakingInitiateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "description": "The wallet ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "idempotency_key": {
                  "type": "string",
                  "description": "The client generated idempotency key for requested execution. Subsequent requests using the same key will fail"
                },
                "inputs": {
                  "$ref": "#/definitions/coinbase.public_rest_api.StakingInputs",
                  "description": "Custom inputs for staking. Requirements vary by asset"
                }
              },
              "required": [
                "portfolio_id",
                "idempotency_key"
              ]
            }
          }
        ],
        "tags": [
          "Staking"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/staking/unstake": {
      "post": {
        "summary": "Request to unstake a wallet",
        "description": "Creates an execution request to unstake delegated or staked funds in a wallet",
        "operationId": "PrimeRESTAPI_StakingUnstake",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.StakingUnstakeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "description": "The wallet ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "idempotency_key": {
                  "type": "string",
                  "description": "The client generated idempotency key for requested execution. Subsequent requests using the same key will fail"
                },
                "inputs": {
                  "$ref": "#/definitions/coinbase.public_rest_api.StakingInputs",
                  "description": "Custom inputs for unstaking. Requirements vary by asset"
                }
              },
              "required": [
                "portfolio_id",
                "idempotency_key"
              ]
            }
          }
        ],
        "tags": [
          "Staking"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/transactions": {
      "get": {
        "summary": "List Wallet Transactions",
        "description": "Retrieve transactions for a given wallet (only transactions that affect balances are accessible).",
        "operationId": "PrimeRESTAPI_GetWalletTransactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetWalletTransactionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "description": "The wallet ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "types",
            "description": "The transaction types by which to filter the response\n\n - TRANSACTION_TYPE_UNKNOWN: An unknown transaction type\n - DEPOSIT: A fiat or crypto deposit\n - WITHDRAWAL: A fiat or crypto withdrawal\n - INTERNAL_DEPOSIT: An internal fiat or crypto deposit\n - INTERNAL_WITHDRAWAL: An internal fiat or crypto withdrawal\n - SWEEP_DEPOSIT: Internal automated deposit to a cold address from a restored address\n - SWEEP_WITHDRAWAL: Internal automated withdrawal from a restored address to a cold address\n - PROXY_DEPOSIT: On-chain deposit of funds into proxy contract from cold address\n - PROXY_WITHDRAWAL: On-chain withdrawal of funds from proxy contract to cold address\n - BILLING_WITHDRAWAL: Coinbase Prime automated invoice settlement payment\n - REWARD: Reward payment to an associated address for a staked asset\n - COINBASE_REFUND: Coinbase Prime refund for the leftover amount for a CPFP (child pays for parent) transaction\n - TRANSACTION_TYPE_OTHER: An OTHER type of transaction\n - WITHDRAWAL_ADJUSTMENT: A manual adjustment withdrawal transaction\n - DEPOSIT_ADJUSTMENT: A manual adjustment deposit transaction\n - KEY_REGISTRATION: An on-chain registration for an address\n - DELEGATION: An on-chain delegation transaction\n - UNDELEGATION: An on-chain undelegation transaction\n - RESTAKE: On-chain restaking transaction\n - COMPLETE_UNBONDING: On-chain unbonding event transaction\n - WITHDRAW_UNBONDED: On-chain event indicating unbonding period is over\n - STAKE_ACCOUNT_CREATE: On-chain transaction to begin staking from an address\n - CHANGE_VALIDATOR: On-chain transaction alter validator\n - STAKE: On-chain transaction to begin staking in Cryptocurrency network\n - UNSTAKE: On-chain transaction to stop staking in Cryptocurrency network\n - REMOVE_AUTHORIZED_PARTY: On-chain transaction to remove a party from a multi-signature wallet\n - STAKE_AUTHORIZE_WITH_SEED: On-chain transaction to begin staking from a seed account\n - SLASH: On-chain transaction indicating a slash event has occurred\n - COINBASE_DEPOSIT: On-chain transaction deposit for the purpose of transaction operations\n - CONVERSION: Internal conversion between two assets\n - CLAIM_REWARDS: On-chain transaction to claim rewards from Vote Account\n - VOTE_AUTHORIZE: On-chain transaction to transfer the reward claiming permission to other pubkey\n - WEB3_TRANSACTION: On-chain transaction initiated with Prime Onchain Wallet\nDeprecated: Use ONCHAIN_TRANSACTION instead\n - ONCHAIN_TRANSACTION: On-chain transaction initiated with Prime Onchain Wallet",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "TRANSACTION_TYPE_UNKNOWN",
                "DEPOSIT",
                "WITHDRAWAL",
                "INTERNAL_DEPOSIT",
                "INTERNAL_WITHDRAWAL",
                "SWEEP_DEPOSIT",
                "SWEEP_WITHDRAWAL",
                "PROXY_DEPOSIT",
                "PROXY_WITHDRAWAL",
                "BILLING_WITHDRAWAL",
                "REWARD",
                "COINBASE_REFUND",
                "TRANSACTION_TYPE_OTHER",
                "WITHDRAWAL_ADJUSTMENT",
                "DEPOSIT_ADJUSTMENT",
                "KEY_REGISTRATION",
                "DELEGATION",
                "UNDELEGATION",
                "RESTAKE",
                "COMPLETE_UNBONDING",
                "WITHDRAW_UNBONDED",
                "STAKE_ACCOUNT_CREATE",
                "CHANGE_VALIDATOR",
                "STAKE",
                "UNSTAKE",
                "REMOVE_AUTHORIZED_PARTY",
                "STAKE_AUTHORIZE_WITH_SEED",
                "SLASH",
                "COINBASE_DEPOSIT",
                "CONVERSION",
                "CLAIM_REWARDS",
                "VOTE_AUTHORIZE",
                "WEB3_TRANSACTION",
                "ONCHAIN_TRANSACTION"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start_time",
            "description": "UTC timestamp from which to filter the response (inclusive, ISO-8601 format)",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_time",
            "description": "UTC timestamp until which to filter the response (exclusive, ISO-8601 format)",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_direction",
            "description": "Page sorting direction",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          }
        ],
        "tags": [
          "Transactions"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/transfers": {
      "post": {
        "summary": "Create Transfer",
        "description": "Create a wallet transfer.",
        "operationId": "PrimeRESTAPI_CreateWalletTransfer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.CreateWalletTransferResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "description": "The wallet ID that the transfer will originate from",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "string",
                  "description": "The amount in whole units to send"
                },
                "destination": {
                  "type": "string",
                  "description": "The UUID of the destination wallet"
                },
                "idempotency_key": {
                  "type": "string",
                  "description": "The idempotency key associated with this transfer"
                },
                "currency_symbol": {
                  "type": "string",
                  "description": "The currency symbol to transfer"
                }
              },
              "title": "Create a transfer between two wallets",
              "required": [
                "amount",
                "destination",
                "idempotency_key",
                "currency_symbol"
              ]
            }
          }
        ],
        "tags": [
          "Transactions"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/web3_balances": {
      "get": {
        "summary": "List Onchain Wallet Balances",
        "description": "Query balances for a specific onchain wallet.",
        "operationId": "PrimeRESTAPI_ListWeb3WalletBalances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.ListWeb3WalletBalancesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "Portfolio to retrieve balances for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "description": "Onchain wallet to retrieve balances for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "visibility_statuses",
            "description": "Visibility statuses to filter balances on. Leaving this field empty will return only VISIBLE balances.\n\n - UNKNOWN_VISIBILITY_STATUS: nil\n - VISIBLE: Visible\n - HIDDEN: Hidden\n - SPAM: Spam",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN_VISIBILITY_STATUS",
                "VISIBLE",
                "HIDDEN",
                "SPAM"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "cursor",
            "description": "Id to retrieve additional results strictly after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Number of items to retrieve. Defaults to 100 with a max size of 500.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Balances"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/wallets/{wallet_id}/withdrawals": {
      "post": {
        "summary": "Create Withdrawal",
        "description": "Create a withdrawal.",
        "operationId": "PrimeRESTAPI_CreateWalletWithdrawal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.CreateWalletWithdrawalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The portfolio ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wallet_id",
            "description": "The wallet ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "string",
                  "description": "The amount in whole units of the withdrawal"
                },
                "destination_type": {
                  "$ref": "#/definitions/coinbase.public_rest_api.DestinationType",
                  "description": "The destination type of the withdrawal"
                },
                "idempotency_key": {
                  "type": "string",
                  "description": "The idempotency key associated with the withdrawal"
                },
                "currency_symbol": {
                  "type": "string",
                  "description": "The currency symbol for the withdrawal"
                },
                "payment_method": {
                  "$ref": "#/definitions/coinbase.public_rest_api.PaymentMethodDestination",
                  "description": "The payment method destination information"
                },
                "blockchain_address": {
                  "$ref": "#/definitions/coinbase.public_rest_api.BlockchainAddress",
                  "description": "The external destination information"
                }
              },
              "required": [
                "amount",
                "destination_type",
                "idempotency_key",
                "currency_symbol"
              ]
            }
          }
        ],
        "tags": [
          "Transactions"
        ]
      }
    },
    "/v1/portfolios/{portfolio_id}/withdrawal_power": {
      "get": {
        "summary": "Get Portfolio Withdrawal Power",
        "description": "Returns the nominal quantity of a given asset that can be withdrawn based on holdings and current portfolio equity.",
        "operationId": "PrimeRESTAPI_GetWithdrawalPower",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_rest_api.GetWithdrawalPowerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_id",
            "description": "The unique ID of the portfolio",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "symbol",
            "description": "The currency symbol",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Financing"
        ]
      }
    }
  },
  "definitions": {
    "coinbase.custody.api.ActivityType": {
      "type": "string",
      "enum": [
        "ACTIVITY_TYPE_UNKNOWN",
        "ACTIVITY_TYPE_GOVERNANCE_VOTE",
        "ACTIVITY_TYPE_INVITATION",
        "ACTIVITY_TYPE_WALLET_CHANGE",
        "ACTIVITY_TYPE_API_KEY_CHANGE",
        "ACTIVITY_TYPE_SETTINGS_CHANGE",
        "ACTIVITY_TYPE_BILLING_PREFERENCE_CHANGE",
        "ACTIVITY_TYPE_PAYMENT_METHOD_CHANGE",
        "ACTIVITY_TYPE_WITHDRAWAL",
        "ACTIVITY_TYPE_DEPOSIT",
        "ACTIVITY_TYPE_CREATE_WALLET",
        "ACTIVITY_TYPE_REMOVE_WALLET",
        "ACTIVITY_TYPE_UPDATE_WALLET",
        "ACTIVITY_TYPE_CAST_VOTE",
        "ACTIVITY_TYPE_ENABLE_VOTING",
        "ACTIVITY_TYPE_STAKE",
        "ACTIVITY_TYPE_UNSTAKE",
        "ACTIVITY_TYPE_CHANGE_VALIDATOR",
        "ACTIVITY_TYPE_RESTAKE",
        "ACTIVITY_TYPE_ADDRESS_BOOK",
        "ACTIVITY_TYPE_TEAM_MEMBERS",
        "ACTIVITY_TYPE_BILLING",
        "ACTIVITY_TYPE_SECURITY",
        "ACTIVITY_TYPE_API",
        "ACTIVITY_TYPE_SETTINGS",
        "ACTIVITY_TYPE_SMART_CONTRACT",
        "ACTIVITY_TYPE_USER_CHANGE_REQUEST_NO_PAS",
        "ACTIVITY_TYPE_WEB3_TRANSACTION",
        "ACTIVITY_TYPE_WEB3_MESSAGE",
        "ACTIVITY_TYPE_CLAIM_REWARDS"
      ],
      "default": "ACTIVITY_TYPE_UNKNOWN",
      "title": "- ACTIVITY_TYPE_WITHDRAWAL: PrimeActivityService Custody ActivityTypes that will replace the above"
    },
    "coinbase.custody.api.AddressBookEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "UUID identifying this address book entry"
        },
        "currency_symbol": {
          "type": "string",
          "description": "Currency symbol"
        },
        "name": {
          "type": "string",
          "description": "Name for this address book entry"
        },
        "address": {
          "type": "string",
          "description": "Cryptocurrency address"
        },
        "account_identifier": {
          "type": "string",
          "description": "Memo or destination tag for currencies which support them"
        },
        "account_identifier_name": {
          "type": "string",
          "description": "Name of the account identifier. For instance Destination Tag"
        },
        "state": {
          "type": "string",
          "description": "State of this address book entry"
        },
        "explorer_link": {
          "type": "string",
          "description": "Link to a blockchain explorer"
        },
        "last_used_at": {
          "type": "string",
          "format": "date-time",
          "description": "When this entry was last used for a transaction"
        },
        "added_at": {
          "type": "string",
          "format": "date-time",
          "description": "When this entry was added to the address book"
        },
        "added_by": {
          "$ref": "#/definitions/coinbase.custody.api.DisplayUser",
          "description": "User who created this address book entry"
        },
        "type": {
          "$ref": "#/definitions/coinbase.custody.api.AddressBookType",
          "description": "Type of address book entry"
        },
        "counterparty_id": {
          "type": "string",
          "description": "counterparty id"
        }
      },
      "required": [
        "id",
        "name",
        "state",
        "added_by"
      ]
    },
    "coinbase.custody.api.AddressBookType": {
      "type": "string",
      "enum": [
        "ADDRESS_BOOK_TYPE_UNSPECIFIED",
        "ADDRESS_BOOK_TYPE_ADDRESS",
        "ADDRESS_BOOK_TYPE_COUNTERPARTY_ID"
      ],
      "default": "ADDRESS_BOOK_TYPE_UNSPECIFIED"
    },
    "coinbase.custody.api.DisplayUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User UUID"
        },
        "name": {
          "type": "string",
          "description": "User full name"
        },
        "avatar_url": {
          "type": "string",
          "description": "User avatar URL"
        }
      },
      "required": [
        "id",
        "name",
        "avatar_url"
      ]
    },
    "coinbase.public_rest_api.AcceptQuoteResponse": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string"
        }
      }
    },
    "coinbase.public_rest_api.Accrual": {
      "type": "object",
      "properties": {
        "accrual_id": {
          "type": "string",
          "example": "9227410b-d2d2-4646-950d-df126601bf2a",
          "description": "The accrual ID"
        },
        "date": {
          "type": "string",
          "example": "2023-05-01T12:00:00Z",
          "description": "The date of accrual in UTC"
        },
        "portfolio_id": {
          "type": "string",
          "example": "e8bbed13-fa33-41de-86d5-4335d8f08166",
          "description": "The unique ID of the portfolio"
        },
        "symbol": {
          "type": "string",
          "example": "BTC",
          "description": "The currency symbol"
        },
        "loan_type": {
          "$ref": "#/definitions/coinbase.public_rest_api.LoanType",
          "example": "POST_TRADE_CREDIT",
          "description": "The type of loan"
        },
        "interest_rate": {
          "type": "string",
          "example": 0.05,
          "description": "The daily or annualized interest rate for the loan, see rate_type"
        },
        "nominal_accrual": {
          "type": "string",
          "example": 0.00013699,
          "description": "Daily accrual amount in the principal currency"
        },
        "notional_accrual": {
          "type": "string",
          "example": 4.07,
          "description": "Daily USD accrued interest"
        },
        "conversion_rate": {
          "type": "string",
          "example": 29687.94,
          "description": "Accrual rate used to convert from principal to USD accrual"
        },
        "loan_amount": {
          "type": "string",
          "example": 1.05,
          "description": "Outstanding principal of the loan"
        },
        "benchmark": {
          "$ref": "#/definitions/coinbase.public_rest_api.Benchmark",
          "example": "ZERO",
          "description": "Source of where interest rate is fetched from"
        },
        "benchmark_rate": {
          "type": "string",
          "example": 0.0005,
          "description": "Daily interest rate fetched from the benchmark source"
        },
        "spread": {
          "type": "string",
          "example": 0.0001,
          "description": "Daily spread offset from the benchmark rate"
        },
        "rate_type": {
          "$ref": "#/definitions/coinbase.public_rest_api.RateType",
          "example": "BPS",
          "description": "Type of interest rate"
        },
        "loan_amount_notional": {
          "type": "string",
          "example": 1.05,
          "description": "Outstanding principal of the loan in USD"
        },
        "nominal_open_borrow_sod": {
          "type": "string",
          "example": 1.05,
          "description": "Settled open borrow as of start-of-day in the principal currency"
        },
        "notional_open_borrow_sod": {
          "type": "string",
          "example": 1.05,
          "description": "Settled open borrow as of start-of-day in USD"
        }
      }
    },
    "coinbase.public_rest_api.Action": {
      "type": "string",
      "enum": [
        "OTHER_ACTION",
        "ACTION_APPROVE",
        "ACTION_REJECT",
        "ACTION_INITIATE",
        "ACTION_CANCEL"
      ],
      "default": "OTHER_ACTION",
      "title": "Action is the available user action types"
    },
    "coinbase.public_rest_api.Activity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique id for the account activity"
        },
        "reference_id": {
          "type": "string",
          "description": "A reference for orders and transactions, n/a for other category types"
        },
        "category": {
          "$ref": "#/definitions/coinbase.public_rest_api.ActivityCategory",
          "description": "Activity category [order, transaction, account, admin]"
        },
        "type": {
          "$ref": "#/definitions/coinbase.public_rest_api.ActivityType",
          "description": "Activity type"
        },
        "secondary_type": {
          "$ref": "#/definitions/coinbase.public_rest_api.ActivitySecondaryType",
          "description": "Activity secondary type"
        },
        "status": {
          "$ref": "#/definitions/coinbase.public_rest_api.ActivityStatus",
          "description": "Activity status"
        },
        "created_by": {
          "type": "string",
          "description": "Id of user who created the activity"
        },
        "title": {
          "type": "string",
          "description": "Title of the activity"
        },
        "description": {
          "type": "string",
          "description": "Description detail of the activity"
        },
        "user_actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.UserAction"
          },
          "description": "Actions related to the Activity"
        },
        "transactions_metadata": {
          "$ref": "#/definitions/coinbase.public_rest_api.ActivityMetadataTransactions"
        },
        "account_metadata": {
          "$ref": "#/definitions/coinbase.public_rest_api.ActivityMetadataAccount"
        },
        "orders_metadata": {
          "$ref": "#/definitions/coinbase.public_rest_api.ActivityMetadataOrders"
        },
        "symbols": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of currencies included in an activity"
        },
        "created_at": {
          "type": "string",
          "description": "Time activity was created at"
        },
        "updated_at": {
          "type": "string",
          "description": "Time for latest status update of account activity"
        },
        "hierarchy_type": {
          "$ref": "#/definitions/coinbase.public_rest_api.HierarchyType",
          "description": "Hierarchy Type of the activity"
        }
      }
    },
    "coinbase.public_rest_api.ActivityCategory": {
      "type": "string",
      "enum": [
        "OTHER_ACTIVITY_CATEGORY",
        "ACTIVITY_CATEGORY_ORDER",
        "ACTIVITY_CATEGORY_TRANSACTION",
        "ACTIVITY_CATEGORY_ACCOUNT",
        "ACTIVITY_CATEGORY_ADMIN",
        "ACTIVITY_CATEGORY_ALLOCATION",
        "ACTIVITY_CATEGORY_LENDING"
      ],
      "default": "OTHER_ACTIVITY_CATEGORY"
    },
    "coinbase.public_rest_api.ActivityCreationResponse": {
      "type": "object",
      "properties": {
        "activity_type": {
          "$ref": "#/definitions/coinbase.custody.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "activity_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.public_rest_api.ActivityLevel": {
      "type": "string",
      "enum": [
        "ACTIVITY_LEVEL_ALL",
        "ACTIVITY_LEVEL_PORTFOLIO",
        "ACTIVITY_LEVEL_ENTITY"
      ],
      "default": "ACTIVITY_LEVEL_ALL"
    },
    "coinbase.public_rest_api.ActivityMetadataAccount": {
      "type": "object",
      "properties": {
        "consensus": {
          "$ref": "#/definitions/coinbase.public_rest_api.ActivityMetadataConsensus",
          "description": "Metadata showing approval deadline and bool if transaction has passed consensus"
        }
      }
    },
    "coinbase.public_rest_api.ActivityMetadataConsensus": {
      "type": "object",
      "properties": {
        "approval_deadline": {
          "type": "string",
          "description": "Deadline for approval of an activity"
        },
        "has_passed_consensus": {
          "type": "boolean",
          "description": "If activity has passed consensus threshold"
        }
      }
    },
    "coinbase.public_rest_api.ActivityMetadataOrders": {
      "type": "object"
    },
    "coinbase.public_rest_api.ActivityMetadataTransactions": {
      "type": "object",
      "properties": {
        "consensus": {
          "$ref": "#/definitions/coinbase.public_rest_api.ActivityMetadataConsensus"
        }
      }
    },
    "coinbase.public_rest_api.ActivitySecondaryType": {
      "type": "string",
      "enum": [
        "NO_SECONDARY_TYPE",
        "ACTIVITY_SECONDARY_TYPE_BUY",
        "ACTIVITY_SECONDARY_TYPE_SELL",
        "ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER",
        "ACTIVITY_SECONDARY_TYPE_SWEEP_TRANSFER_TYPE",
        "ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER",
        "ACTIVITY_SECONDARY_TYPE_WEB3_WALLET"
      ],
      "default": "NO_SECONDARY_TYPE",
      "title": "- ACTIVITY_SECONDARY_TYPE_BUY: Order secondary types\n - ACTIVITY_SECONDARY_TYPE_INTERNAL_TRANSFER: Transaction secondary types\n - ACTIVITY_SECONDARY_TYPE_WEB3_SIGNER: Onchain secondary types"
    },
    "coinbase.public_rest_api.ActivityStatus": {
      "type": "string",
      "enum": [
        "OTHER_ACTIVITY_STATUS",
        "ACTIVITY_STATUS_CANCELLED",
        "ACTIVITY_STATUS_PROCESSING",
        "ACTIVITY_STATUS_COMPLETED",
        "ACTIVITY_STATUS_EXPIRED",
        "ACTIVITY_STATUS_REJECTED",
        "ACTIVITY_STATUS_FAILED"
      ],
      "default": "OTHER_ACTIVITY_STATUS"
    },
    "coinbase.public_rest_api.ActivityType": {
      "type": "string",
      "enum": [
        "OTHER_ACTIVITY_TYPE",
        "ACTIVITY_TYPE_LIMIT_ORDER",
        "ACTIVITY_TYPE_MARKET_ORDER",
        "ACTIVITY_TYPE_TWAP_ORDER",
        "ACTIVITY_TYPE_BLOCK_TRADE",
        "ACTIVITY_TYPE_VWAP_ORDER",
        "ACTIVITY_TYPE_STOP_LIMIT_ORDER",
        "ACTIVITY_TYPE_DEPOSIT",
        "ACTIVITY_TYPE_WITHDRAWAL",
        "ACTIVITY_TYPE_INTERNAL_TRANSFER",
        "ACTIVITY_TYPE_CREATE_WALLET",
        "ACTIVITY_TYPE_REMOVE_WALLET",
        "ACTIVITY_TYPE_UPDATE_WALLET",
        "ACTIVITY_TYPE_CAST_VOTE",
        "ACTIVITY_TYPE_ENABLE_VOTING",
        "ACTIVITY_TYPE_STAKE",
        "ACTIVITY_TYPE_UNSTAKE",
        "ACTIVITY_TYPE_CHANGE_VALIDATOR",
        "ACTIVITY_TYPE_RESTAKE",
        "ACTIVITY_TYPE_ADDRESS_BOOK",
        "ACTIVITY_TYPE_TEAM_MEMBERS",
        "ACTIVITY_TYPE_BILLING",
        "ACTIVITY_TYPE_SECURITY",
        "ACTIVITY_TYPE_API",
        "ACTIVITY_TYPE_SETTINGS",
        "ACTIVITY_TYPE_SMART_CONTRACT",
        "ACTIVITY_TYPE_ALLOCATION_IN",
        "ACTIVITY_TYPE_ALLOCATION_OUT",
        "ACTIVITY_TYPE_ALLOCATION_IN_REVERSAL",
        "ACTIVITY_TYPE_ALLOCATION_OUT_REVERSAL",
        "ACTIVITY_TYPE_CONVERSION",
        "ACTIVITY_TYPE_PRINCIPAL_OUT",
        "ACTIVITY_TYPE_PRINCIPAL_IN",
        "ACTIVITY_TYPE_COLLATERAL_OUT",
        "ACTIVITY_TYPE_COLLATERAL_IN",
        "ACTIVITY_TYPE_INTEREST_OUT",
        "ACTIVITY_TYPE_INTEREST_IN",
        "ACTIVITY_TYPE_WEB3_MESSAGE",
        "ACTIVITY_TYPE_WEB3_TRANSACTION",
        "ACTIVITY_TYPE_WEB3_DEVICE_RECOVERY",
        "ACTIVITY_TYPE_WEB3_RECREATE_BACKUP",
        "ACTIVITY_TYPE_WEB3_ONBOARDING"
      ],
      "default": "OTHER_ACTIVITY_TYPE"
    },
    "coinbase.public_rest_api.AddressEntry": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "chain_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of compatible chain IDs for a given address, empty for Solana"
        }
      }
    },
    "coinbase.public_rest_api.AddressGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "network_type": {
          "$ref": "#/definitions/coinbase.public_rest_api.NetworkType"
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.AddressEntry"
          },
          "title": "A list of addresses within the group"
        },
        "added_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "coinbase.public_rest_api.AggregatedFiatBalance": {
      "type": "object",
      "properties": {
        "total": {
          "type": "string"
        },
        "holds": {
          "type": "string"
        }
      }
    },
    "coinbase.public_rest_api.Allocation": {
      "type": "object",
      "properties": {
        "root_id": {
          "type": "string",
          "description": "The ID that ties together an allocation and all of its legs."
        },
        "reversal_id": {
          "type": "string",
          "description": "The ID of the allocation if this allocation is a reversal. In this case, the root_id would be the original allocation ID."
        },
        "allocation_completed_at": {
          "type": "string",
          "format": "date-time",
          "description": "Time the final leg of the root allocation was completed."
        },
        "user_id": {
          "type": "string",
          "description": "The ID of the user that created the allocation."
        },
        "product_id": {
          "type": "string",
          "description": "The ID of the product of the orders allocated."
        },
        "side": {
          "$ref": "#/definitions/coinbase.public_rest_api.OrderSide",
          "description": "The allocation order side."
        },
        "avg_price": {
          "type": "string",
          "description": "Price the allocation was done at."
        },
        "base_quantity": {
          "type": "string",
          "description": "Amount allocated in base asset units."
        },
        "quote_value": {
          "type": "string",
          "description": "Amount allocated in quote asset units."
        },
        "fees_allocated": {
          "type": "string",
          "description": "Fees from original trade execution allocated in quote asset units."
        },
        "status": {
          "$ref": "#/definitions/coinbase.public_rest_api.AllocationStatus",
          "description": "The allocation status."
        },
        "source": {
          "type": "string",
          "description": "Portfolio ID of the source portfolio."
        },
        "order_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "All order IDs that were aggregated to calculate the avg_price, quantity to allocate in each leg. Each order_id should tie back to the single allocation root_id.",
          "title": "slice"
        },
        "destinations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.DestinationAlloc"
          },
          "description": "Array of objects, each containing the leg ID, destination portfolio ID and amount in chosen units allocated to each portfolio: [{leg_id, portfolio_id, allocation_base, allocation_quote}, {leg_id, portfolio_id, allocation_base, allocation_quote}...]"
        },
        "netting_id": {
          "type": "string",
          "description": "The netting ID of the allocation, not empty if the allocation was submitted as part of a net allocation"
        }
      }
    },
    "coinbase.public_rest_api.AllocationLeg": {
      "type": "object",
      "properties": {
        "allocation_leg_id": {
          "type": "string",
          "description": "The ID of the portfolio of the allocation leg"
        },
        "destination_portfolio_id": {
          "type": "string",
          "description": "The ID of the destination portfolio of the allocation leg"
        },
        "amount": {
          "type": "string",
          "description": "The amount size for the allocation leg"
        }
      },
      "required": [
        "allocation_leg_id",
        "destination_portfolio_id",
        "amount"
      ]
    },
    "coinbase.public_rest_api.AllocationSizeType": {
      "type": "string",
      "enum": [
        "ALLOCATION_SIZE_TYPE_UNKNOWN",
        "BASE",
        "QUOTE",
        "PERCENT"
      ],
      "default": "ALLOCATION_SIZE_TYPE_UNKNOWN"
    },
    "coinbase.public_rest_api.AllocationStatus": {
      "type": "string",
      "enum": [
        "ALLOCATION_STATUS_UNSPECIFIED",
        "ALLOCATION_STATUS_ALLOCATION_PENDING",
        "ALLOCATION_STATUS_ALLOCATION_ACCEPTED",
        "ALLOCATION_STATUS_ALLOCATION_ALLOCATED",
        "ALLOCATION_STATUS_ALLOCATION_REJECTED"
      ],
      "default": "ALLOCATION_STATUS_UNSPECIFIED"
    },
    "coinbase.public_rest_api.AmountDue": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "example": "BTC",
          "description": "The currency this loan is due in"
        },
        "amount": {
          "type": "string",
          "example": "4000",
          "description": "The amount due"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "example": "2021-05-31T09:59:59Z",
          "description": "The date this settlement is due, expressed in UTC"
        }
      }
    },
    "coinbase.public_rest_api.Asset": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Bitcoin",
          "description": "The name of the asset"
        },
        "symbol": {
          "type": "string",
          "example": "BTC",
          "description": "The mutable series of letters used to identify the asset"
        },
        "decimal_precision": {
          "type": "string",
          "example": "8",
          "description": "The number of decimals supported for the asset"
        },
        "trading_supported": {
          "type": "boolean",
          "example": true,
          "description": "Indicates whether this asset can be traded"
        },
        "explorer_url": {
          "type": "string",
          "example": "https://live.blockcypher.com/btc/",
          "description": "Base URL to our recommended block explorer (crypto only)"
        },
        "networks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.NetworkDetails"
          },
          "description": "List of networks supported by this asset"
        }
      }
    },
    "coinbase.public_rest_api.AssetBalance": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string",
          "example": "e8bbed13-fa33-41de-86d5-4335d8f08166",
          "description": "The unique ID of the portfolio"
        },
        "symbol": {
          "type": "string",
          "example": "BTC",
          "description": "The currency symbol"
        },
        "amount": {
          "type": "string",
          "example": 4000,
          "description": "Balance amount"
        },
        "notional_amount": {
          "type": "string",
          "example": 4000,
          "description": "Notional balance amount"
        },
        "conversion_rate": {
          "type": "string",
          "example": 1000,
          "description": "Conversion rate"
        }
      }
    },
    "coinbase.public_rest_api.AssetChange": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/coinbase.public_rest_api.AssetChangeType",
          "example": "BALANCE_TRANSFER",
          "description": "The type of asset change"
        },
        "symbol": {
          "type": "string",
          "example": "ETH",
          "description": "The currency symbol associated with the balance operation"
        },
        "amount": {
          "type": "string",
          "example": "100",
          "description": "The amount in whole units being transferred or approved"
        },
        "collection": {
          "$ref": "#/definitions/coinbase.public_rest_api.NFTCollection",
          "description": "NFT collection information for item operations"
        },
        "item": {
          "$ref": "#/definitions/coinbase.public_rest_api.NFTItem",
          "description": "NFT item information for item operations"
        }
      }
    },
    "coinbase.public_rest_api.AssetChangeType": {
      "type": "string",
      "enum": [
        "ASSET_CHANGE_TYPE_UNKNOWN",
        "BALANCE_TRANSFER",
        "BALANCE_APPROVAL",
        "ITEM_TRANSFER",
        "ITEM_APPROVAL",
        "ITEM_APPROVAL_ALL"
      ],
      "default": "ASSET_CHANGE_TYPE_UNKNOWN",
      "title": "AssetChangeType identifies the type of asset change"
    },
    "coinbase.public_rest_api.Balance": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string",
          "example": "BTC",
          "description": "The display symbol for the asset"
        },
        "amount": {
          "type": "string",
          "example": "109.42",
          "description": "The total amount in whole units with full precision. Includes the `holds` amount."
        },
        "holds": {
          "type": "string",
          "example": "2",
          "description": "Amount that is currently held in obligation to an open order's position or a pending withdrawal"
        },
        "bonded_amount": {
          "type": "string",
          "example": "109.42",
          "description": "Amount that is currently locked due to bonding/staking, potentially subject to an unbonding period, in whole units"
        },
        "reserved_amount": {
          "type": "string",
          "example": "109.42",
          "description": "Amount that must remain in the wallet due to the protocol, in whole units"
        },
        "unbonding_amount": {
          "type": "string",
          "example": "109.42",
          "description": "Amount that is in the process of unbonding, in whole units"
        },
        "unvested_amount": {
          "type": "string",
          "example": "109.42",
          "description": "Unrealized amount subject to a vesting schedule, in whole units"
        },
        "pending_rewards_amount": {
          "type": "string",
          "example": "109.42",
          "description": "Pending bonding/staking rewards that have not yet been realized, in whole units"
        },
        "past_rewards_amount": {
          "type": "string",
          "example": "109.42",
          "description": "Previously realized bonding/staking rewards, in whole units"
        },
        "bondable_amount": {
          "type": "string",
          "example": "109.42",
          "description": "Amount available for bonding/staking, in whole units"
        },
        "withdrawable_amount": {
          "type": "string",
          "example": "109.42",
          "description": "Amount available to withdraw, in whole units"
        },
        "fiat_amount": {
          "type": "string",
          "example": "109.42",
          "description": "The total amount in fiat unit"
        },
        "unbondable_amount": {
          "type": "string",
          "example": "109.42",
          "description": "Amount available for unbonding/unstaking, in whole units"
        }
      }
    },
    "coinbase.public_rest_api.Benchmark": {
      "type": "string",
      "enum": [
        "BENCHMARK_UNSET",
        "ZERO",
        "SOFR_360",
        "SOFR_365",
        "CRYPTO_RFR"
      ],
      "default": "BENCHMARK_UNSET"
    },
    "coinbase.public_rest_api.BlockchainAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "The address on the network",
          "title": "The address"
        },
        "account_identifier": {
          "type": "string",
          "description": "The account identifier (used on some chains to distinguish accounts using the same address)",
          "title": "The destination value's account_identifier (MEMO/DESTINATION TAG) value\n for the withdrawal"
        },
        "network": {
          "$ref": "#/definitions/coinbase.public_rest_api.Network",
          "description": "The network this address belongs to",
          "title": "The network"
        }
      }
    },
    "coinbase.public_rest_api.BuyingPower": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string",
          "example": "e8bbed13-fa33-41de-86d5-4335d8f08166",
          "description": "The unique ID of the portfolio"
        },
        "base_currency": {
          "type": "string",
          "example": "BTC",
          "description": "The symbol for the base currency"
        },
        "quote_currency": {
          "type": "string",
          "example": "USD",
          "description": "The symbol for the quote currency"
        },
        "base_buying_power": {
          "type": "string",
          "example": 3.8533347963443316,
          "description": "The buying power for the base currency"
        },
        "quote_buying_power": {
          "type": "string",
          "example": 2051207.48454131992255,
          "description": "The buying power for the quote currency"
        }
      }
    },
    "coinbase.public_rest_api.CancelFuturesSweepResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true,
          "description": "Success"
        },
        "request_id": {
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "description": "Request ID"
        }
      }
    },
    "coinbase.public_rest_api.CancelOrderResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "82c879c1-84e1-44ed-a8c2-1ac239cf09ad",
          "description": "The unique UUID for the order"
        }
      }
    },
    "coinbase.public_rest_api.Commission": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Hardcode type to all_in. When we support cost+, we will have cost_plus type"
        },
        "rate": {
          "type": "string",
          "description": "Commission rate (in whole percentage. Commission of 15bps is \"0.0015\")"
        },
        "trading_volume": {
          "type": "string",
          "description": "Average 30 days over past 3 months (e.g. 90 days divided by 3)"
        }
      }
    },
    "coinbase.public_rest_api.Conversion": {
      "type": "object",
      "properties": {
        "conversion_details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.ConversionDetail"
          },
          "description": "Conversion details"
        },
        "short_collateral": {
          "$ref": "#/definitions/coinbase.public_rest_api.ShortCollateral",
          "description": "Short Collateral"
        },
        "conversion_datetime": {
          "type": "string",
          "example": "2023-05-01T12:00:00Z",
          "description": "The UTC date time used for conversion"
        },
        "portfolio_id": {
          "type": "string",
          "description": "Portfolio Id"
        }
      }
    },
    "coinbase.public_rest_api.ConversionDetail": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string",
          "example": "BTC",
          "description": "The currency symbol"
        },
        "tf_balance": {
          "type": "string",
          "example": 20000,
          "description": "Trade finance balance after the conversion"
        },
        "notional_tf_balance": {
          "type": "string",
          "example": 4000,
          "description": "Notional trade finance balance after the conversion"
        },
        "converted_balance": {
          "type": "string",
          "example": 1000,
          "description": "Converted balance"
        },
        "notional_converted_balance": {
          "type": "string",
          "example": 1000,
          "description": "Notional converted balance"
        },
        "interest_rate": {
          "type": "string",
          "example": 0.1,
          "description": "Interest rate"
        },
        "conversion_rate": {
          "type": "string",
          "example": 0.1,
          "description": "Conversion rate"
        }
      }
    },
    "coinbase.public_rest_api.CreateAllocationRequest": {
      "type": "object",
      "properties": {
        "allocation_id": {
          "type": "string",
          "description": "The ID of the allocation"
        },
        "source_portfolio_id": {
          "type": "string",
          "description": "The source portfolio id for the allocation"
        },
        "product_id": {
          "type": "string",
          "description": "The product for the allocation"
        },
        "order_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of order ids in the allocation"
        },
        "allocation_legs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.AllocationLeg"
          },
          "description": "The list of allocation_legs for the allocation"
        },
        "size_type": {
          "$ref": "#/definitions/coinbase.public_rest_api.AllocationSizeType",
          "description": "The size type of the legs"
        },
        "remainder_destination_portfolio": {
          "type": "string",
          "description": "The portfolio where to allocate the remainder of the size"
        },
        "netting_id": {
          "type": "string",
          "description": "The ID to identify an in-flight net allocation."
        }
      }
    },
    "coinbase.public_rest_api.CreateAllocationResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.public_rest_api.CreateAllocationResponseBody"
        }
      }
    },
    "coinbase.public_rest_api.CreateAllocationResponseBody": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "The success boolean for the post allocation"
        },
        "allocation_id": {
          "type": "string",
          "description": "The allocation id for the post allocation"
        },
        "failure_reason": {
          "type": "string",
          "description": "The failure reason for the post allocation"
        }
      },
      "required": [
        "success",
        "allocation_id",
        "failure_reason"
      ]
    },
    "coinbase.public_rest_api.CreateConversionResponse": {
      "type": "object",
      "properties": {
        "activity_id": {
          "type": "string",
          "example": "e84255eb-2e21-439e-a1d0-f5dd1e1292b9",
          "description": "The activity ID for the conversion"
        },
        "source_symbol": {
          "type": "string",
          "example": "USD",
          "description": "The currency symbol to convert from"
        },
        "destination_symbol": {
          "type": "string",
          "example": "USDC",
          "description": "The currency symbol to convert to"
        },
        "amount": {
          "type": "string",
          "example": "50.50",
          "description": "The amount in whole units to convert"
        },
        "destination": {
          "type": "string",
          "example": "e84255eb-2e21-439e-a1d0-f5dd1e1292b9",
          "description": "The UUID of the destination wallet"
        },
        "source": {
          "type": "string",
          "example": "e84255eb-2e21-439e-a1d0-f5dd1e1292b9",
          "description": "The UUID of the source wallet"
        },
        "transaction_id": {
          "type": "string",
          "example": "e84255eb-2e21-439e-a1d0-f5dd1e1292b9",
          "description": "The UUID of the conversion transaction"
        }
      }
    },
    "coinbase.public_rest_api.CreateNetAllocationResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/coinbase.public_rest_api.CreateNetAllocationResponseBody"
        }
      }
    },
    "coinbase.public_rest_api.CreateNetAllocationResponseBody": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "The success boolean for the post net allocation"
        },
        "netting_id": {
          "type": "string",
          "description": "The netting_id for the post net allocation"
        },
        "buy_allocation_id": {
          "type": "string",
          "description": "The allocation id of the buy allocation in net allocation"
        },
        "sell_allocation_id": {
          "type": "string",
          "description": "The allocation id of the sell allocation in net allocation"
        },
        "failure_reason": {
          "type": "string",
          "description": "The failure reason for the post net allocation"
        }
      },
      "required": [
        "success",
        "netting_id",
        "buy_allocation_id",
        "sell_allocation_id",
        "failure_reason"
      ]
    },
    "coinbase.public_rest_api.CreateNewLocatesResponse": {
      "type": "object",
      "properties": {
        "locate_id": {
          "type": "string"
        }
      }
    },
    "coinbase.public_rest_api.CreateOnchainTransactionRequest.EvmParams": {
      "type": "object",
      "properties": {
        "disable_dynamic_gas": {
          "type": "boolean",
          "example": false,
          "description": "Option to disable dynamic gas price adjustment for EVM transactions prior to signing and broadcast. Defaults to false."
        },
        "disable_dynamic_nonce": {
          "type": "boolean",
          "example": false,
          "description": "Option to disable dynamic nonce when creating a transaction. Defaults to false."
        },
        "replaced_transaction_id": {
          "type": "string",
          "example": "0bf7bf1e-bafa-4d7e-9312-fa0bf3b63f27",
          "description": "Transaction ID to replace (for speed-up/cancel operations). Common use cases: 1) Gas Price Adjustments: When a transaction is stuck due to low gas price, a new transaction with the same nonce but higher gas price can be submitted to replace it. 2) Transaction Cancellation: A user might want to cancel a pending transaction by replacing it with a new transaction (often a 0-value transfer to themselves with higher gas price). Note: When using this field, the disable_dynamic_nonce option must be set to false because the nonce will be automatically managed by the system."
        },
        "chain_id": {
          "type": "string",
          "example": 1,
          "description": "Chain ID for EVM transactions. (EVM-only)"
        },
        "network_name": {
          "type": "string",
          "example": "Ethereum",
          "description": "Network name for EVM transactions. (EVM-only)"
        }
      }
    },
    "coinbase.public_rest_api.CreateOnchainTransactionResponse": {
      "type": "object",
      "properties": {
        "transaction_id": {
          "type": "string",
          "example": "0bf7bf1e-bafa-4d7e-9312-fa0bf3b63f27",
          "description": "Unique identifier for the created transaction"
        }
      }
    },
    "coinbase.public_rest_api.CreateOrderResponse": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "example": "ba0eb21c-672b-44de-8342-d6363cef87f0",
          "description": "The order ID generated by Coinbase"
        }
      }
    },
    "coinbase.public_rest_api.CreatePortfolioAddressBookEntryResponse": {
      "type": "object",
      "properties": {
        "activity_type": {
          "$ref": "#/definitions/coinbase.custody.api.ActivityType"
        },
        "num_approvals_remaining": {
          "type": "integer",
          "format": "int32"
        },
        "activity_id": {
          "type": "string"
        }
      },
      "required": [
        "activity_type",
        "num_approvals_remaining",
        "activity_id"
      ]
    },
    "coinbase.public_rest_api.CreateWalletResponse": {
      "type": "object",
      "properties": {
        "activity_id": {
          "type": "string",
          "title": "The id of activity"
        },
        "name": {
          "type": "string",
          "title": "The name of the wallet"
        },
        "symbol": {
          "type": "string",
          "title": "The asset stored in the wallet"
        },
        "wallet_type": {
          "$ref": "#/definitions/coinbase.public_rest_api.WalletType",
          "title": "The type of wallet"
        },
        "network_family": {
          "$ref": "#/definitions/coinbase.public_rest_api.NetworkFamily",
          "title": "The network family"
        }
      }
    },
    "coinbase.public_rest_api.CreateWalletTransferResponse": {
      "type": "object",
      "properties": {
        "activity_id": {
          "type": "string",
          "description": "The activity ID for the transfer"
        },
        "approval_url": {
          "type": "string",
          "description": "A URL to the activity associated with this transfer for approval"
        },
        "symbol": {
          "type": "string",
          "description": "The currency symbol of the transfer"
        },
        "amount": {
          "type": "string",
          "description": "The amount of the transfer"
        },
        "fee": {
          "type": "string",
          "description": "The network fee associated with the transfer"
        },
        "destination_address": {
          "type": "string",
          "description": "The destination address of the transfer"
        },
        "destination_type": {
          "type": "string",
          "description": "The destination type of the transfer",
          "title": "NOTE\n\tIf Vault:\n\t\tdisplay vault name\n\tIf Trading\n\t\tdisplay trading name"
        },
        "source_address": {
          "type": "string",
          "description": "The source address used for the transfer"
        },
        "source_type": {
          "type": "string",
          "description": "The source type used for the transfer",
          "title": "NOTE\n\tIf Vault:\n\t\tdisplay vault name\n\tIf Trading\n\t\tdisplay trading name"
        },
        "transaction_id": {
          "type": "string",
          "description": "The id of the just created transaction"
        }
      }
    },
    "coinbase.public_rest_api.CreateWalletWithdrawalResponse": {
      "type": "object",
      "properties": {
        "activity_id": {
          "type": "string",
          "description": "The activity ID associated with the withdrawal"
        },
        "approval_url": {
          "type": "string",
          "description": "A URL to the activity in the Prime application"
        },
        "symbol": {
          "type": "string",
          "description": "The currency symbol associated with the withdrawal"
        },
        "amount": {
          "type": "string",
          "description": "The amount of the withdrawal"
        },
        "fee": {
          "type": "string",
          "description": "The network fee associated with the withdrawal"
        },
        "destination_type": {
          "type": "string",
          "description": "The destination type used for the withdrawal",
          "title": "The type of the end destination for the withdrawal"
        },
        "source_type": {
          "type": "string",
          "description": "The source type used for the withdrawal"
        },
        "blockchain_destination": {
          "$ref": "#/definitions/coinbase.public_rest_api.BlockchainAddress",
          "description": "The destination address"
        },
        "blockchain_source": {
          "$ref": "#/definitions/coinbase.public_rest_api.BlockchainAddress",
          "description": "The source address"
        },
        "transaction_id": {
          "type": "string",
          "description": "The id of the just created transaction"
        }
      }
    },
    "coinbase.public_rest_api.DefiBalance": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string",
          "title": "Network this asset is on (ie \"ethereum-mainnet\")"
        },
        "protocol": {
          "type": "string",
          "title": "a set of rules and standards that define how data is exchanged (ie \"Aave V4 \")"
        },
        "net_usd_value": {
          "type": "string",
          "title": "Total USD value"
        }
      }
    },
    "coinbase.public_rest_api.DestinationAlloc": {
      "type": "object",
      "properties": {
        "leg_id": {
          "type": "string",
          "description": "The ID unique to each leg of an allocation."
        },
        "portfolio_id": {
          "type": "string",
          "description": "Portfolio ID of the source portfolio."
        },
        "allocation_base": {
          "type": "string",
          "description": "Amount allocated in base asset units."
        },
        "allocation_quote": {
          "type": "string",
          "description": "Amount allocated in quote asset units."
        },
        "fees_allocated_leg": {
          "type": "string",
          "description": "Pro rata fees for each leg. Adding up the fees for each leg will sum up to equal the total allocation level fees."
        }
      }
    },
    "coinbase.public_rest_api.DestinationType": {
      "type": "string",
      "enum": [
        "UNKNOWN_DESTINATION",
        "DESTINATION_PAYMENT_METHOD",
        "DESTINATION_BLOCKCHAIN",
        "DESTINATION_WALLET"
      ],
      "default": "UNKNOWN_DESTINATION",
      "title": "- UNKNOWN_DESTINATION: nil value\n - DESTINATION_PAYMENT_METHOD: A fiat bank account linked to a payment method id via Payment Method Service\n - DESTINATION_BLOCKCHAIN: A blockchain network address\n - DESTINATION_WALLET: An on platform wallet UUID \nNOTE: this is not usable in the withdrawals endpoint\n      only transfers"
    },
    "coinbase.public_rest_api.EntityBalance": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string",
          "example": "BTC",
          "description": "The display symbol for the asset"
        },
        "long_amount": {
          "type": "string",
          "example": "109.42",
          "description": "The long balance"
        },
        "long_notional": {
          "type": "string",
          "example": "109.42",
          "description": "The long balance in notional value"
        },
        "short_amount": {
          "type": "string",
          "example": "109.42",
          "description": "The short balance"
        },
        "short_notional": {
          "type": "string",
          "example": "109.42",
          "description": "The short balance in notional value"
        }
      }
    },
    "coinbase.public_rest_api.EntityUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "54496de6-7cbd-4abb-8489-2675c4d1f8f7",
          "description": "The unique ID of the user"
        },
        "name": {
          "type": "string",
          "example": "Frank Malone",
          "description": "The name of the user"
        },
        "email": {
          "type": "string",
          "example": "user@coinbase.com",
          "description": "The email of the user"
        },
        "entity_id": {
          "type": "string",
          "example": "2c521d6c-1cfb-4371-bf9c-5a42938d3e75",
          "description": "The entity to which this user and associated permissions are identified"
        },
        "role": {
          "$ref": "#/definitions/coinbase.public_rest_api.UserRole",
          "description": "The role of the user."
        }
      }
    },
    "coinbase.public_rest_api.EstimatedNetworkFees": {
      "type": "object",
      "properties": {
        "lower_bound": {
          "type": "string",
          "example": "1.99",
          "description": "Estimated lower bound for networks fees (in whole units)"
        },
        "upper_bound": {
          "type": "string",
          "example": "2.99",
          "description": "Estimated upper bound for network fees (in whole units)"
        }
      }
    },
    "coinbase.public_rest_api.ExistingLocate": {
      "type": "object",
      "properties": {
        "locate_id": {
          "type": "string",
          "example": "9227410b-d2d2-4646-950d-df126601bf2a",
          "description": "The locate ID"
        },
        "entity_id": {
          "type": "string",
          "example": "e8bbed13-fa33-41de-86d5-4335d8f08166",
          "description": "The unique ID of the entity"
        },
        "portfolio_id": {
          "type": "string",
          "example": "e8bbed13-fa33-41de-86d5-4335d8f08166",
          "description": "The unique ID of the portfolio"
        },
        "symbol": {
          "type": "string",
          "example": "BTC",
          "description": "The currency symbol"
        },
        "requested_amount": {
          "type": "string",
          "example": 5.22,
          "description": "The requested locate amount"
        },
        "interest_rate": {
          "type": "string",
          "example": 0.05,
          "description": "The interest rate of PM loan"
        },
        "status": {
          "type": "string",
          "example": "filled",
          "description": "The locate status"
        },
        "approved_amount": {
          "type": "string",
          "example": 2.5,
          "description": "The approved locate amount"
        },
        "conversion_date": {
          "type": "string",
          "example": "2023-01-01T00:00:00Z",
          "description": "Deprecated: Use locate_date instead"
        },
        "created_at": {
          "type": "string",
          "example": "2023-01-01T00:00:00Z",
          "description": "The date when the locate was submitted in RFC3339 format"
        },
        "locate_date": {
          "type": "string",
          "example": "2023-01-01T00:00:00Z",
          "description": "The locate date from the CreateNewLocatesRequest in RFC3339 format"
        }
      }
    },
    "coinbase.public_rest_api.FcmFuturesSweep": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "description": "Sweep ID"
        },
        "requested_amount": {
          "$ref": "#/definitions/coinbase.public_rest_api.FcmFuturesSweep.RequestAmount",
          "example": "1000.00",
          "description": "Requested amount"
        },
        "should_sweep_all": {
          "type": "boolean",
          "example": true,
          "description": "Should sweep all"
        },
        "status": {
          "$ref": "#/definitions/coinbase.public_rest_api.FcmFuturesSweepStatus",
          "example": "FCM_FUTURES_SWEEP_STATUS_PENDING",
          "description": "Sweep status"
        },
        "scheduled_time": {
          "type": "string",
          "format": "date-time",
          "example": "2021-01-01T00:00:00Z",
          "description": "Scheduled time"
        }
      }
    },
    "coinbase.public_rest_api.FcmFuturesSweep.RequestAmount": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "example": "USD",
          "description": "Currency"
        },
        "amount": {
          "type": "string",
          "example": "1000.00",
          "description": "Amount"
        }
      }
    },
    "coinbase.public_rest_api.FcmFuturesSweepStatus": {
      "type": "string",
      "enum": [
        "FCM_FUTURES_SWEEP_STATUS_UNSPECIFIED",
        "FCM_FUTURES_SWEEP_STATUS_PENDING",
        "FCM_FUTURES_SWEEP_STATUS_CLOSED",
        "FCM_FUTURES_SWEEP_STATUS_CANCELED",
        "FCM_FUTURES_SWEEP_STATUS_PROCESSING"
      ],
      "default": "FCM_FUTURES_SWEEP_STATUS_UNSPECIFIED"
    },
    "coinbase.public_rest_api.FcmPosition": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "string",
          "example": "BTC-31JAN24-CDE",
          "description": "Product ID"
        },
        "side": {
          "$ref": "#/definitions/coinbase.public_rest_api.FcmPositionSide",
          "example": "LONG",
          "description": "Position side"
        },
        "number_of_contracts": {
          "type": "string",
          "example": "10",
          "description": "Number of contracts"
        },
        "daily_realized_pnl": {
          "type": "string",
          "example": "10.12",
          "description": "Daily realized PNL"
        },
        "unrealized_pnl": {
          "type": "string",
          "example": "10.12",
          "description": "Unrealized PNL"
        },
        "current_price": {
          "type": "string",
          "example": "10.12",
          "description": "Current price of position"
        },
        "avg_entry_price": {
          "type": "string",
          "example": "10.12",
          "description": "Average entry price"
        },
        "expiration_time": {
          "type": "string",
          "format": "date-time",
          "example": "2021-01-01T00:00:00Z",
          "description": "Expiration time of position"
        }
      }
    },
    "coinbase.public_rest_api.FcmPositionSide": {
      "type": "string",
      "enum": [
        "FCM_POSITION_SIDE_UNSPECIFIED",
        "LONG",
        "SHORT"
      ],
      "default": "FCM_POSITION_SIDE_UNSPECIFIED"
    },
    "coinbase.public_rest_api.Fill": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "dc376e5b-84fa-4bdf-9f13-537b1bde8fc3",
          "description": "The unique ID of the fill"
        },
        "order_id": {
          "type": "string",
          "example": "ba1115bc-7b3c-4b6b-ae38-585f3ab59271",
          "description": "The order ID of the fill"
        },
        "product_id": {
          "type": "string",
          "example": "BTC-USD",
          "description": "The product ID of the fill"
        },
        "client_product_id": {
          "type": "string",
          "example": "BTC-USDC",
          "description": "The client product ID of the fill indicating the settlement currency"
        },
        "side": {
          "$ref": "#/definitions/coinbase.public_rest_api.OrderSide"
        },
        "filled_quantity": {
          "type": "string",
          "example": "100",
          "description": "Filled size (in base asset units)"
        },
        "filled_value": {
          "type": "string",
          "example": "25",
          "description": "Filled value (in quote asset units)"
        },
        "price": {
          "type": "string",
          "example": "140.91",
          "description": "The price of the fill"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "example": "2021-05-31T11:59:59Z",
          "description": "The date and time of the fill"
        },
        "commission": {
          "type": "string",
          "example": "5.55",
          "description": "The commission incurred for the fill"
        },
        "venue": {
          "type": "string",
          "example": "Coinbase",
          "description": "The name of the venue"
        }
      }
    },
    "coinbase.public_rest_api.GetActivityResponse": {
      "type": "object",
      "properties": {
        "activity": {
          "$ref": "#/definitions/coinbase.public_rest_api.Activity",
          "description": "Activity returned"
        }
      },
      "required": [
        "activity"
      ]
    },
    "coinbase.public_rest_api.GetAllocationResponse": {
      "type": "object",
      "properties": {
        "allocation": {
          "$ref": "#/definitions/coinbase.public_rest_api.Allocation"
        }
      }
    },
    "coinbase.public_rest_api.GetAllocationsByClientNettingIdResponse": {
      "type": "object",
      "properties": {
        "allocations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Allocation"
          }
        }
      }
    },
    "coinbase.public_rest_api.GetBuyingPowerResponse": {
      "type": "object",
      "properties": {
        "buying_power": {
          "$ref": "#/definitions/coinbase.public_rest_api.BuyingPower"
        }
      }
    },
    "coinbase.public_rest_api.GetEntityActivitiesResponse": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Activity",
            "required": [
              "activities"
            ]
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse"
        }
      },
      "required": [
        "activities",
        "pagination"
      ]
    },
    "coinbase.public_rest_api.GetEntityAssetsResponse": {
      "type": "object",
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Asset"
          },
          "title": "List of assets"
        }
      }
    },
    "coinbase.public_rest_api.GetEntityPaymentMethodDetailsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaymentMethodDetails"
        }
      }
    },
    "coinbase.public_rest_api.GetEntityPaymentMethodsResponse": {
      "type": "object",
      "properties": {
        "payment_methods": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.PaymentMethodSummary"
          }
        }
      }
    },
    "coinbase.public_rest_api.GetEntityUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.EntityUser"
          },
          "description": "The entity users."
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse",
          "title": "Pagination information"
        }
      }
    },
    "coinbase.public_rest_api.GetExistingLocatesResponse": {
      "type": "object",
      "properties": {
        "locates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.ExistingLocate"
          }
        }
      }
    },
    "coinbase.public_rest_api.GetFcmBalanceResponse": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "description": "Portfolio ID"
        },
        "cfm_usd_balance": {
          "type": "string",
          "example": "1000.00",
          "description": "CFM USD balance"
        },
        "unrealized_pnl": {
          "type": "string",
          "example": "10.12",
          "description": "Unrealized PNL"
        },
        "daily_realized_pnl": {
          "type": "string",
          "example": "10.12",
          "description": "Daily realized PNL"
        },
        "excess_liquidity": {
          "type": "string",
          "example": "10.12",
          "description": "Excess liquidity"
        },
        "futures_buying_power": {
          "type": "string",
          "example": "10.12",
          "description": "Futures buying power"
        },
        "initial_margin": {
          "type": "string",
          "example": "10.12",
          "description": "Initial margin"
        },
        "maintenance_margin": {
          "type": "string",
          "example": "10.12",
          "description": "Maintenance margin"
        },
        "clearing_account_id": {
          "type": "string",
          "example": "CFS1234567",
          "description": "Clearing account ID"
        }
      }
    },
    "coinbase.public_rest_api.GetFuturesSweepsResponse": {
      "type": "object",
      "properties": {
        "sweeps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.FcmFuturesSweep"
          }
        },
        "auto_sweep": {
          "type": "boolean"
        }
      }
    },
    "coinbase.public_rest_api.GetInterestAccrualsResponse": {
      "type": "object",
      "properties": {
        "total_notional_accrual": {
          "type": "string"
        },
        "accruals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Accrual"
          }
        }
      }
    },
    "coinbase.public_rest_api.GetInvoicesResponse": {
      "type": "object",
      "properties": {
        "invoices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Invoice"
          }
        }
      }
    },
    "coinbase.public_rest_api.GetLocateAvailabilitiesResponse": {
      "type": "object",
      "properties": {
        "locates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Locate"
          }
        }
      }
    },
    "coinbase.public_rest_api.GetMarginConversionsResponse": {
      "type": "object",
      "properties": {
        "conversions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Conversion"
          }
        }
      }
    },
    "coinbase.public_rest_api.GetMarginInformationResponse": {
      "type": "object",
      "properties": {
        "margin_information": {
          "$ref": "#/definitions/coinbase.public_rest_api.MarginInformation"
        }
      }
    },
    "coinbase.public_rest_api.GetMarginSummariesResponse": {
      "type": "object",
      "properties": {
        "margin_summaries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.MarginSummaryHistorical"
          }
        }
      }
    },
    "coinbase.public_rest_api.GetOpenOrdersResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Order"
          },
          "title": "Requested orders"
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse",
          "description": "\u003cb\u003eDeprecated\u003c/b\u003e - open open_orders endpoint always responds with one page.",
          "title": "Pagination information"
        }
      }
    },
    "coinbase.public_rest_api.GetOrderFillsResponse": {
      "type": "object",
      "properties": {
        "fills": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Fill"
          },
          "title": "Fills associated with the order"
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse",
          "title": "Pagination information"
        }
      }
    },
    "coinbase.public_rest_api.GetOrderResponse": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/coinbase.public_rest_api.Order",
          "title": "Order details"
        }
      }
    },
    "coinbase.public_rest_api.GetOrdersResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Order"
          },
          "title": "List of orders"
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse",
          "title": "Pagination information"
        }
      }
    },
    "coinbase.public_rest_api.GetPortfolioActivitiesResponse": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Activity",
            "required": [
              "activities"
            ]
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse"
        }
      },
      "required": [
        "activities",
        "pagination"
      ]
    },
    "coinbase.public_rest_api.GetPortfolioActivityResponse": {
      "type": "object",
      "properties": {
        "activity": {
          "$ref": "#/definitions/coinbase.public_rest_api.Activity",
          "description": "Activity returned"
        }
      },
      "required": [
        "activity"
      ]
    },
    "coinbase.public_rest_api.GetPortfolioAddressBookResponse": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.custody.api.AddressBookEntry"
          },
          "description": "List of addresses added to Address Book"
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse"
        }
      },
      "required": [
        "addresses",
        "pagination"
      ]
    },
    "coinbase.public_rest_api.GetPortfolioAllocationsResponse": {
      "type": "object",
      "properties": {
        "allocations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Allocation"
          },
          "description": "List of allocations."
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse"
        }
      }
    },
    "coinbase.public_rest_api.GetPortfolioBalancesResponse": {
      "type": "object",
      "properties": {
        "balances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Balance"
          },
          "description": "A list of balances."
        },
        "type": {
          "$ref": "#/definitions/coinbase.public_rest_api.PortfolioBalanceType"
        },
        "trading_balances": {
          "$ref": "#/definitions/coinbase.public_rest_api.AggregatedFiatBalance"
        },
        "vault_balances": {
          "$ref": "#/definitions/coinbase.public_rest_api.AggregatedFiatBalance"
        },
        "prime_custody_balances": {
          "$ref": "#/definitions/coinbase.public_rest_api.AggregatedFiatBalance"
        }
      }
    },
    "coinbase.public_rest_api.GetPortfolioCommissionResponse": {
      "type": "object",
      "properties": {
        "commission": {
          "$ref": "#/definitions/coinbase.public_rest_api.Commission",
          "title": "the commission configuration"
        }
      }
    },
    "coinbase.public_rest_api.GetPortfolioFillsResponse": {
      "type": "object",
      "properties": {
        "fills": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Fill"
          },
          "title": "Fills associated with the portfolio"
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse",
          "title": "Pagination information"
        }
      }
    },
    "coinbase.public_rest_api.GetPortfolioInterestAccrualsResponse": {
      "type": "object",
      "properties": {
        "total_notional_accrual": {
          "type": "string"
        },
        "accruals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Accrual"
          }
        }
      }
    },
    "coinbase.public_rest_api.GetPortfolioProductsResponse": {
      "type": "object",
      "properties": {
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Product"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse",
          "title": "Pagination information"
        }
      }
    },
    "coinbase.public_rest_api.GetPortfolioResponse": {
      "type": "object",
      "properties": {
        "portfolio": {
          "$ref": "#/definitions/coinbase.public_rest_api.Portfolio",
          "description": "The portfolio details."
        }
      }
    },
    "coinbase.public_rest_api.GetPortfolioTransactionsResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Transaction"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse"
        }
      }
    },
    "coinbase.public_rest_api.GetPortfolioUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.PortfolioUser"
          },
          "description": "The portfolio users."
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse",
          "title": "Pagination information"
        }
      }
    },
    "coinbase.public_rest_api.GetPortfoliosResponse": {
      "type": "object",
      "properties": {
        "portfolios": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Portfolio"
          },
          "description": "A list of portfolios."
        }
      }
    },
    "coinbase.public_rest_api.GetPositionsResponse": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.FcmPosition"
          }
        },
        "clearing_account_id": {
          "type": "string",
          "example": "CFS1234567",
          "description": "Clearing account ID"
        }
      }
    },
    "coinbase.public_rest_api.GetPostTradeCreditResponse": {
      "type": "object",
      "properties": {
        "post_trade_credit": {
          "$ref": "#/definitions/coinbase.public_rest_api.PostTradeCreditInformation",
          "description": "The post trade credit information."
        }
      }
    },
    "coinbase.public_rest_api.GetTFTieredPricingFeesResponse": {
      "type": "object",
      "properties": {
        "fees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.TieredPricingFee"
          }
        }
      }
    },
    "coinbase.public_rest_api.GetTransactionResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/coinbase.public_rest_api.Transaction"
        }
      }
    },
    "coinbase.public_rest_api.GetWalletAddressesResponse": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.BlockchainAddress"
          },
          "title": "Addresses"
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse",
          "title": "paginated response"
        }
      },
      "required": [
        "addresses",
        "pagination"
      ]
    },
    "coinbase.public_rest_api.GetWalletBalanceResponse": {
      "type": "object",
      "properties": {
        "balance": {
          "$ref": "#/definitions/coinbase.public_rest_api.Balance"
        }
      }
    },
    "coinbase.public_rest_api.GetWalletDepositInstructionsResponse": {
      "type": "object",
      "properties": {
        "crypto_instructions": {
          "$ref": "#/definitions/coinbase.public_rest_api.WalletCryptoDepositInstructions"
        },
        "fiat_instructions": {
          "$ref": "#/definitions/coinbase.public_rest_api.WalletFiatDepositInstructions"
        }
      }
    },
    "coinbase.public_rest_api.GetWalletResponse": {
      "type": "object",
      "properties": {
        "wallet": {
          "$ref": "#/definitions/coinbase.public_rest_api.Wallet"
        }
      }
    },
    "coinbase.public_rest_api.GetWalletTransactionsResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Transaction"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse"
        }
      }
    },
    "coinbase.public_rest_api.GetWalletsResponse": {
      "type": "object",
      "properties": {
        "wallets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Wallet"
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse"
        }
      }
    },
    "coinbase.public_rest_api.GetWithdrawalPowerResponse": {
      "type": "object",
      "properties": {
        "withdrawal_power": {
          "$ref": "#/definitions/coinbase.public_rest_api.WithdrawalPower"
        }
      }
    },
    "coinbase.public_rest_api.HierarchyType": {
      "type": "string",
      "enum": [
        "HIERARCHY_TYPE_UNSPECIFIED",
        "HIERARCHY_TYPE_PORTFOLIO",
        "HIERARCHY_TYPE_ENTITY"
      ],
      "default": "HIERARCHY_TYPE_UNSPECIFIED",
      "title": "HierarchyType are the enums for various hierarchies within Prime, ex Entity, Organization, Portfolio"
    },
    "coinbase.public_rest_api.Invoice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "billing_month": {
          "type": "integer",
          "format": "int32"
        },
        "billing_year": {
          "type": "integer",
          "format": "int32"
        },
        "due_date": {
          "type": "string"
        },
        "invoice_number": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/coinbase.public_rest_api.InvoiceState"
        },
        "usd_amount_paid": {
          "type": "number",
          "format": "double"
        },
        "usd_amount_owed": {
          "type": "number",
          "format": "double"
        },
        "invoice_items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.InvoiceItem"
          }
        }
      },
      "title": "Invoice"
    },
    "coinbase.public_rest_api.InvoiceItem": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "currency_symbol": {
          "type": "string"
        },
        "invoice_type": {
          "$ref": "#/definitions/coinbase.public_rest_api.InvoiceType"
        },
        "rate": {
          "type": "number",
          "format": "double"
        },
        "quantity": {
          "type": "number",
          "format": "double"
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "average_auc": {
          "type": "number",
          "format": "double"
        },
        "total": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "Invoice item"
    },
    "coinbase.public_rest_api.InvoiceState": {
      "type": "string",
      "enum": [
        "INVOICE_STATE_UNSPECIFIED",
        "INVOICE_STATE_IMPORTED",
        "INVOICE_STATE_BILLED",
        "INVOICE_STATE_PARTIALLY_PAID",
        "INVOICE_STATE_PAID"
      ],
      "default": "INVOICE_STATE_UNSPECIFIED",
      "title": "States"
    },
    "coinbase.public_rest_api.InvoiceType": {
      "type": "string",
      "enum": [
        "INVOICE_TYPE_UNSPECIFIED",
        "INVOICE_TYPE_AUC_FEE",
        "INVOICE_TYPE_MINIMUM_FEE",
        "INVOICE_TYPE_WITHDRAWAL_FEE",
        "INVOICE_TYPE_NEW_WALLET_FEE",
        "INVOICE_TYPE_STAKING_FEE"
      ],
      "default": "INVOICE_TYPE_UNSPECIFIED",
      "title": "Types"
    },
    "coinbase.public_rest_api.ListAggregateEntityPositionsResponse": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Position",
            "required": [
              "positions"
            ]
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse"
        }
      },
      "required": [
        "positions",
        "pagination"
      ]
    },
    "coinbase.public_rest_api.ListEntityBalancesResponse": {
      "type": "object",
      "properties": {
        "balances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.EntityBalance",
            "required": [
              "balances"
            ]
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse"
        }
      },
      "required": [
        "balances",
        "pagination"
      ]
    },
    "coinbase.public_rest_api.ListEntityPositionsResponse": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Position",
            "required": [
              "activities"
            ]
          }
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse"
        }
      },
      "required": [
        "positions",
        "pagination"
      ]
    },
    "coinbase.public_rest_api.ListOnchainAddressGroupsResponse": {
      "type": "object",
      "properties": {
        "address_groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.AddressGroup"
          }
        }
      },
      "required": [
        "address_groups"
      ]
    },
    "coinbase.public_rest_api.ListWeb3WalletBalancesResponse": {
      "type": "object",
      "properties": {
        "balances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.Web3Balance"
          },
          "title": "List of balances in the onchain wallet"
        },
        "pagination": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaginatedResponse"
        },
        "defi_balances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.DefiBalance"
          },
          "description": "DeFi balances only return for the initial request. No pagination support."
        }
      }
    },
    "coinbase.public_rest_api.LoanInfo": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string",
          "example": "e8bbed13-fa33-41de-86d5-4335d8f08166",
          "description": "The unique ID of the portfolio"
        },
        "symbol": {
          "type": "string",
          "example": "BTC",
          "description": "The currency symbol"
        },
        "amount": {
          "type": "string",
          "example": 10,
          "description": "Balance amount"
        },
        "notional_amount": {
          "type": "string",
          "example": 250000,
          "description": "Notional balance amount"
        },
        "due_date": {
          "type": "string",
          "example": 1000,
          "description": "Settlement due date"
        }
      }
    },
    "coinbase.public_rest_api.LoanType": {
      "type": "string",
      "enum": [
        "LOAN_TYPE_UNSET",
        "BILATERAL_LENDING",
        "TRADE_FINANCE",
        "PORTFOLIO_MARGIN",
        "SHORT_COLLATERAL_LOAN",
        "SHORT_COLLATERAL"
      ],
      "default": "LOAN_TYPE_UNSET"
    },
    "coinbase.public_rest_api.Locate": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string",
          "example": "BTC",
          "description": "The currency symbol"
        },
        "quantity": {
          "type": "string",
          "example": 100,
          "description": "The available quantity located"
        },
        "rate": {
          "type": "string",
          "example": 0.05,
          "description": "The interest rate for located symbol"
        }
      }
    },
    "coinbase.public_rest_api.MarginAddOn": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "description": "margin add on amount"
        },
        "add_on_type": {
          "$ref": "#/definitions/coinbase.public_rest_api.MarginAddOnType",
          "description": "type of margin add on"
        }
      }
    },
    "coinbase.public_rest_api.MarginAddOnType": {
      "type": "string",
      "enum": [
        "MARGIN_ADD_ON_TYPE_UNSPECIFIED",
        "SINGLE_COIN_STRESS",
        "CONCENTRATION_STRESS",
        "MACRO_STRESS",
        "SHORT_BIASED_STRESS"
      ],
      "default": "MARGIN_ADD_ON_TYPE_UNSPECIFIED"
    },
    "coinbase.public_rest_api.MarginCallRecord": {
      "type": "object",
      "properties": {
        "margin_call_id": {
          "type": "string",
          "example": "e8bbed13-fa33-41de-86d5-4335d8f08122",
          "description": "The unique ID of the margin call"
        },
        "initial_notional_amount": {
          "type": "string",
          "example": "123.45",
          "description": "The initial margin call amount in notional value"
        },
        "outstanding_notional_amount": {
          "type": "string",
          "example": "122.45",
          "description": "The outstanding margin call amount in notional value"
        },
        "created_at": {
          "type": "string",
          "example": "2023-01-01T00:00:00Z5",
          "description": "The time the margin call is created in RFC3330 format"
        },
        "due_at": {
          "type": "string",
          "example": "2023-01-01T00:00:00Z",
          "description": "The time the margin call is due in RFC3339 format"
        }
      }
    },
    "coinbase.public_rest_api.MarginInformation": {
      "type": "object",
      "properties": {
        "margin_call_records": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.MarginCallRecord"
          },
          "description": "The current margin call records"
        },
        "margin_summary": {
          "$ref": "#/definitions/coinbase.public_rest_api.MarginSummary"
        }
      }
    },
    "coinbase.public_rest_api.MarginSummary": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "example": "e8bbed13-fa33-41de-86d5-4335d8f08166",
          "description": "The unique ID of the entity"
        },
        "margin_equity": {
          "type": "string",
          "example": 2539231.590357535399411179,
          "description": "The margin equity at the entity level. Margin Equity = LMV + SMV + Trading Cash Balance + Short Collateral - Pending Withdrawals"
        },
        "margin_requirement": {
          "type": "string",
          "example": 15131.7252798840904068469,
          "description": "USD notional value of required equity in entity portfolios"
        },
        "excess_deficit": {
          "type": "string",
          "example": 2524099.86507765091,
          "description": "margin_equity - margin_requirement"
        },
        "pm_credit_consumed": {
          "type": "string",
          "example": 10000,
          "description": "The raw amount of portfolio margin credit used"
        },
        "tf_credit_limit": {
          "type": "string",
          "example": 2000000,
          "description": "The maximum trade finance credit limit. This field is deprecated and will be removed in the future."
        },
        "tf_credit_consumed": {
          "type": "string",
          "example": 20000,
          "description": "The amount of trade finance credit used (USD). This field is deprecated and will be removed in the future."
        },
        "tf_adjusted_asset_value": {
          "type": "string",
          "example": 40000,
          "description": "TF Asset Adjusted Value (USD). This field is deprecated and will be removed in the future."
        },
        "tf_adjusted_liability_value": {
          "type": "string",
          "example": 40000,
          "description": "TF Adjusted Liability Value (USD). This field is deprecated and will be removed in the future."
        },
        "tf_adjusted_credit_consumed": {
          "type": "string",
          "example": 30000,
          "description": "The amount of adjusted credit used. This field is deprecated and will be removed in the future."
        },
        "tf_adjusted_equity": {
          "type": "string",
          "example": 30000,
          "description": "The amount of adjusted equity. This field is deprecated and will be removed in the future."
        },
        "frozen": {
          "type": "boolean",
          "example": false,
          "description": "Whether or not a entity is frozen due to balance outstanding or other reason"
        },
        "frozen_reason": {
          "type": "string",
          "description": "The reason why a entity is frozen"
        },
        "tf_enabled": {
          "type": "boolean",
          "example": true,
          "description": "Whether TF is enabled for the entity. This field is deprecated and will be removed in the future."
        },
        "pm_enabled": {
          "type": "boolean",
          "example": true,
          "description": "Whether PM is enabled for the entity"
        },
        "market_rates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.MarketRate"
          },
          "description": "Market rates for the list of assets"
        },
        "asset_balances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.AssetBalance"
          },
          "description": "Asset Balances across portfolios"
        },
        "tf_loans": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.LoanInfo"
          },
          "description": "Trade finance debit loan amounts. This field is deprecated and will be removed in the future."
        },
        "pm_loans": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.LoanInfo"
          },
          "description": "Portfolio Margin debit loan amounts"
        },
        "short_collateral": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.LoanInfo"
          },
          "description": "Short collateral amounts"
        },
        "gross_market_value": {
          "type": "string",
          "description": "Gross market value (GMV) = LMV + Abs (SMV)"
        },
        "net_market_value": {
          "type": "string",
          "description": "Net Market Value (NMV) = LMV + SMV"
        },
        "long_market_value": {
          "type": "string",
          "description": "Long Market Value (LMV) = Sum of positive notional for all assets"
        },
        "non_marginable_long_market_value": {
          "type": "string",
          "description": "Non_Marginable LMV: Sum of positive notional for each non-margin eligible coin"
        },
        "short_market_value": {
          "type": "string",
          "description": "Short Market Value (SMV) = Sum of negative notional for each margin eligible coin"
        },
        "gross_leverage": {
          "type": "string",
          "description": "Gross Leverage = GMV / Margin Requirement"
        },
        "net_exposure": {
          "type": "string",
          "description": "Net Exposure = (LMV + SMV) / GMV"
        },
        "portfolio_stress_triggered": {
          "$ref": "#/definitions/coinbase.public_rest_api.MarginAddOn",
          "description": "The dominant portfolio add-on triggered"
        },
        "pm_asset_info": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.PMAssetInfo"
          },
          "description": "PM asset info netted across the entity"
        },
        "pm_credit_limit": {
          "type": "string",
          "example": 1000000,
          "description": "PM limit that monitors gross notional borrowings (crypto + fiat)"
        },
        "pm_margin_limit": {
          "type": "string",
          "example": 200000,
          "description": "PM limit that monitors excess deficit"
        },
        "pm_margin_consumed": {
          "type": "string",
          "example": 5000,
          "description": "The amount of the margin limit that is consumed by the excess deficit"
        }
      }
    },
    "coinbase.public_rest_api.MarginSummaryHistorical": {
      "type": "object",
      "properties": {
        "conversion_datetime": {
          "type": "string",
          "example": "2023-05-01T12:00:00Z",
          "description": "The UTC date time used for conversion"
        },
        "conversion_date": {
          "type": "string",
          "example": "2023-05-01",
          "description": "The date used for conversion"
        },
        "margin_summary": {
          "$ref": "#/definitions/coinbase.public_rest_api.MarginSummary",
          "description": "Margin summary of the conversion"
        }
      }
    },
    "coinbase.public_rest_api.MarketRate": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string",
          "example": "BTC",
          "description": "The currency symbol"
        },
        "rate": {
          "type": "string",
          "example": "27,123",
          "description": "The current market rate of currency"
        }
      }
    },
    "coinbase.public_rest_api.MatchMetadata": {
      "type": "object",
      "properties": {
        "reference_id": {
          "type": "string",
          "description": "The reference id of the match"
        },
        "settlement_date": {
          "type": "string",
          "description": "The settlement date of the match"
        }
      }
    },
    "coinbase.public_rest_api.NFTCollection": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "NFT collection name"
        }
      }
    },
    "coinbase.public_rest_api.NFTItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "NFT item name"
        }
      }
    },
    "coinbase.public_rest_api.Network": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The network id: base, bitcoin, ethereum, solana etc",
          "title": "The name of the network"
        },
        "type": {
          "type": "string",
          "description": "The network type: mainnet, testnet, etc",
          "title": "The network type"
        }
      }
    },
    "coinbase.public_rest_api.NetworkDetails": {
      "type": "object",
      "properties": {
        "network": {
          "$ref": "#/definitions/coinbase.public_rest_api.Network",
          "description": "Indicates network information like network id and type"
        },
        "name": {
          "type": "string",
          "example": "Ethereum",
          "description": "The name of the network"
        },
        "max_decimals": {
          "type": "string",
          "example": "8",
          "description": "The maximum number of decimals supported for this network"
        },
        "default": {
          "type": "boolean",
          "example": true,
          "description": "Indicates whether this network is the default network for the asset"
        },
        "trading_supported": {
          "type": "boolean",
          "example": true,
          "description": "Indicates whether this network supports trading"
        },
        "vault_supported": {
          "type": "boolean",
          "example": true,
          "description": "Indicates whether this network supports vault"
        },
        "prime_custody_supported": {
          "type": "boolean",
          "example": true,
          "description": "Indicates whether this network supports prime custody"
        },
        "destination_tag_required": {
          "type": "boolean",
          "example": true,
          "description": "Indicates whether this network requires a destination tag"
        },
        "network_link": {
          "type": "string",
          "example": "https://live.blockcypher.com/btc/",
          "description": "Base URL to our recommended block explorer (crypto only)"
        }
      }
    },
    "coinbase.public_rest_api.NetworkFamily": {
      "type": "string",
      "enum": [
        "NETWORK_FAMILY_UNSPECIFIED",
        "NETWORK_FAMILY_EVM",
        "NETWORK_FAMILY_SOLANA"
      ],
      "default": "NETWORK_FAMILY_UNSPECIFIED"
    },
    "coinbase.public_rest_api.NetworkType": {
      "type": "string",
      "enum": [
        "NETWORK_TYPE_UNSPECIFIED",
        "NETWORK_TYPE_EVM",
        "NETWORK_TYPE_SOLANA"
      ],
      "default": "NETWORK_TYPE_UNSPECIFIED"
    },
    "coinbase.public_rest_api.OnchainTransactionDetails": {
      "type": "object",
      "properties": {
        "signed_transaction": {
          "type": "string",
          "example": "01ac1872bb2967df00124a7fd15e470a10aab04852e19fc6f...",
          "description": "The signed transaction data"
        },
        "risk_assessment": {
          "$ref": "#/definitions/coinbase.public_rest_api.RiskAssessment",
          "description": "Risk assessment details for the transaction"
        },
        "chain_id": {
          "type": "string",
          "example": "1",
          "description": "The blockchain network chain ID. Will be empty for Solana transactions."
        },
        "nonce": {
          "type": "string",
          "example": "42",
          "description": "The transaction nonce. Only present for EVM-based blockchain transactions."
        },
        "replaced_transaction_id": {
          "type": "string",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "description": "The ID of the transaction that this transaction replaced"
        },
        "destination_address": {
          "type": "string",
          "example": "0x742d35Cc6634C0532925a3b844Bc454e4438f44e",
          "description": "The destination address for the transaction"
        },
        "skip_broadcast": {
          "type": "boolean",
          "example": false,
          "description": "If set to true, the transaction will not be broadcast to the network. You can still retrieve the signed transaction from the GetTransaction endpoint by transaction ID once the transaction is created."
        },
        "failure_reason": {
          "type": "string",
          "example": "insufficient_funds",
          "description": "Reason for transaction failure if applicable"
        },
        "signing_status": {
          "$ref": "#/definitions/coinbase.public_rest_api.SigningStatus",
          "example": "SIGNED",
          "description": "The signing status of the transaction"
        }
      }
    },
    "coinbase.public_rest_api.Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "82c879c1-84e1-44ed-a8c2-1ac239cf09ad",
          "description": "The unique order ID generated by Coinbase"
        },
        "user_id": {
          "type": "string",
          "example": "42",
          "description": "The ID of the user that created the order"
        },
        "portfolio_id": {
          "type": "string",
          "example": "3e1fe27e-26fe-46d8-b118-c752a2ae6b47",
          "description": "The ID of the portfolio that owns the order"
        },
        "product_id": {
          "type": "string",
          "example": "BTC-USD",
          "description": "The ID of the product being traded by the order"
        },
        "side": {
          "$ref": "#/definitions/coinbase.public_rest_api.OrderSide",
          "example": "BUY",
          "description": "The side of the order"
        },
        "client_order_id": {
          "type": "string",
          "example": "f69a20b1-4ac4-420e-90b5-814a12565bfa",
          "description": "A client-generated order ID used for reference purposes (note: order will be rejected if this ID is not unique among all currently active orders)"
        },
        "type": {
          "$ref": "#/definitions/coinbase.public_rest_api.OrderType",
          "example": "LIMIT",
          "description": "The type of order placed"
        },
        "base_quantity": {
          "type": "string",
          "example": "50",
          "description": "Order size in base asset units (either `base_quantity` or `quote_value` is required)"
        },
        "quote_value": {
          "type": "string",
          "example": "100",
          "description": "Order size in quote asset units, i.e. the amount the user wants to spend (when buying) or receive (when selling); the quantity in base units will be determined based on the market liquidity and indicated `quote_value`. Either `base_quantity` or `quote_value` is required"
        },
        "limit_price": {
          "type": "string",
          "example": "50.12",
          "description": "The limit price (required for TWAP, VWAP, LIMIT and STOP_LIMIT orders)"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "example": "2021-05-31T09:59:59Z",
          "description": "The start time of the order in UTC (only applies to TWAP, VWAP orders.)"
        },
        "expiry_time": {
          "type": "string",
          "format": "date-time",
          "example": "2021-05-31T10:59:59Z",
          "description": "The expiry time of the order in UTC (applies to TWAP, VWAP, LIMIT, and STOP_LIMIT orders with `time_in_force` set to `GTD`)"
        },
        "status": {
          "$ref": "#/definitions/coinbase.public_rest_api.OrderStatus",
          "example": "FILLED",
          "description": "The current status of the order"
        },
        "time_in_force": {
          "$ref": "#/definitions/coinbase.public_rest_api.TimeInForceType",
          "example": "GTC",
          "description": "The time in force of the order"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2021-05-31T10:59:59Z",
          "description": "The order creation time as a UTC timestamp"
        },
        "filled_quantity": {
          "type": "string",
          "example": "100",
          "description": "Size filled (in base asset units)"
        },
        "filled_value": {
          "type": "string",
          "example": "100",
          "description": "Market value filled (in quote asset units)"
        },
        "average_filled_price": {
          "type": "string",
          "example": "50.19",
          "description": "Indicates the average `filled_price`"
        },
        "commission": {
          "type": "string",
          "example": "4.99",
          "description": "Total commission paid on this order (in quote asset units) -- only applicable for partially- or fully-filled orders"
        },
        "exchange_fee": {
          "type": "string",
          "example": "2.50",
          "description": "Fee charged by the exchange for Cost Plus commission configurations. Exchange fee will be 0 for All In commission configurations."
        },
        "historical_pov": {
          "type": "string",
          "example": "2.50",
          "description": "historical pov for the order"
        },
        "stop_price": {
          "type": "string",
          "example": "50.12",
          "description": "Specifies the stop price at which the order activates. The order is activated if the last trade price on Coinbase Exchange crosses the stop price specified on the order"
        },
        "net_average_filled_price": {
          "type": "string",
          "example": "57.68",
          "description": "Indicates the average `filled_price` net of commissions and fees"
        },
        "user_context": {
          "type": "string",
          "example": "User initiated cancellation",
          "description": "Indicates a user friendly message for regarding various aspects of the order such as cancellation or rejection reasons"
        },
        "client_product_id": {
          "type": "string",
          "example": "BTC-USDC",
          "description": "The client product ID of the fill indicating the settlement currency"
        }
      }
    },
    "coinbase.public_rest_api.OrderSide": {
      "type": "string",
      "enum": [
        "UNKNOWN_ORDER_SIDE",
        "BUY",
        "SELL"
      ],
      "default": "UNKNOWN_ORDER_SIDE",
      "description": "- UNKNOWN_ORDER_SIDE: nil value\n - BUY: Buy order\n - SELL: Sell order",
      "title": "Order side"
    },
    "coinbase.public_rest_api.OrderStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN_ORDER_STATUS",
        "OPEN",
        "FILLED",
        "CANCELLED",
        "EXPIRED",
        "FAILED",
        "PENDING"
      ],
      "default": "UNKNOWN_ORDER_STATUS",
      "description": "- UNKNOWN_ORDER_STATUS: nil value\n - OPEN: The order is open but unfilled\n - FILLED: The order was filled\n - CANCELLED: The order was cancelled\n - EXPIRED: The order has expired\n - FAILED: Order submission failed\n - PENDING: The order has been sent but is not yet confirmed",
      "title": "Indicates the order status"
    },
    "coinbase.public_rest_api.OrderType": {
      "type": "string",
      "enum": [
        "UNKNOWN_ORDER_TYPE",
        "MARKET",
        "LIMIT",
        "TWAP",
        "BLOCK",
        "VWAP",
        "STOP_LIMIT",
        "RFQ"
      ],
      "default": "UNKNOWN_ORDER_TYPE",
      "description": "- UNKNOWN_ORDER_TYPE: nil value\n - MARKET: A [market order](https://en.wikipedia.org/wiki/Order_(exchange)#Market_order)\n - LIMIT: A [limit order](https://en.wikipedia.org/wiki/Order_(exchange)#Limit_order)\n - TWAP: A [time-weighted average price order](https://en.wikipedia.org/wiki/Time-weighted_average_price)\n - BLOCK: A [block trade](https://en.wikipedia.org/wiki/Block_trade)\n - VWAP: A [volume-weighted average price order](https://en.wikipedia.org/wiki/Volume-weighted_average_price)\n - STOP_LIMIT: A [conditional order combined of stop order and limit order](https://en.wikipedia.org/wiki/Order_(exchange)#Stop-limit_order)\n - RFQ: A [request for quote](https://en.wikipedia.org/wiki/Request_for_quote)",
      "title": "Strategy (execution algorithm)"
    },
    "coinbase.public_rest_api.PMAssetInfo": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string",
          "description": "The currency symbol"
        },
        "amount": {
          "type": "string",
          "description": "Nominal amount of the currency"
        },
        "price": {
          "type": "string",
          "description": "Spot price for the currency"
        },
        "notional_amount": {
          "type": "string",
          "description": "Notional amount of the currency"
        },
        "asset_tier": {
          "type": "string",
          "description": "Asset tier of the currency"
        },
        "margin_eligible": {
          "type": "boolean",
          "description": "Whether the currency is margin eligible"
        },
        "base_margin_requirement": {
          "type": "string",
          "description": "Base margin requirement of the currency"
        },
        "base_margin_requirement_notional": {
          "type": "string",
          "description": "Notional amount of the currency's base margin requirement"
        },
        "adv_30d": {
          "type": "string",
          "description": "The 30d adv of the currency"
        },
        "hist_5d_vol": {
          "type": "string",
          "description": "Historic 5d volatility of the currency"
        },
        "hist_30d_vol": {
          "type": "string",
          "description": "Historic 30d volatility of the currency"
        },
        "hist_90d_vol": {
          "type": "string",
          "description": "Historic 90d volatility of the currency"
        },
        "volatility_addon": {
          "type": "string",
          "description": "Volatility margin addon of the currency position"
        },
        "liquidity_addon": {
          "type": "string",
          "description": "Liquidity margin addon of the currency position"
        },
        "total_position_margin": {
          "type": "string",
          "description": "Total position margin of the currency"
        },
        "short_nominal": {
          "type": "string",
          "description": "Nominal short position of the currency"
        },
        "long_nominal": {
          "type": "string",
          "description": "Nominal long position of the currency"
        }
      }
    },
    "coinbase.public_rest_api.PaginatedResponse": {
      "type": "object",
      "properties": {
        "next_cursor": {
          "type": "string",
          "description": "Cursor to navigate to next page"
        },
        "sort_direction": {
          "$ref": "#/definitions/coinbase.public_rest_api.SortDirection",
          "description": "Page sorting direction"
        },
        "has_next": {
          "type": "boolean",
          "description": "A boolean value indicating whether there are more items to paginate through"
        }
      },
      "required": [
        "next_cursor",
        "sort_direction",
        "has_next"
      ]
    },
    "coinbase.public_rest_api.PaymentMethodDestination": {
      "type": "object",
      "properties": {
        "payment_method_id": {
          "type": "string",
          "title": "The payment method id to pay out"
        }
      }
    },
    "coinbase.public_rest_api.PaymentMethodDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "payment_method_type": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaymentMethodType"
        },
        "name": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "bank_code": {
          "type": "string"
        }
      }
    },
    "coinbase.public_rest_api.PaymentMethodSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "payment_method_type": {
          "$ref": "#/definitions/coinbase.public_rest_api.PaymentMethodType"
        },
        "bank_name": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "bank_name_2": {
          "type": "string"
        }
      }
    },
    "coinbase.public_rest_api.PaymentMethodType": {
      "type": "string",
      "enum": [
        "UNKNOWN_PAYMENT_METHOD_TYPE",
        "METHOD_WIRE",
        "METHOD_SEN",
        "METHOD_SWIFT"
      ],
      "default": "UNKNOWN_PAYMENT_METHOD_TYPE",
      "description": "- UNKNOWN_PAYMENT_METHOD_TYPE: nil value\n - METHOD_WIRE: Wire transfer\n - METHOD_SEN: Silvergate exchange network\n - METHOD_SWIFT: Swift",
      "title": "Indicates the payment method type"
    },
    "coinbase.public_rest_api.Portfolio": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "e8bbed13-fa33-41de-86d5-4335d8f08166",
          "description": "The unique ID of the portfolio"
        },
        "name": {
          "type": "string",
          "example": "CryptoBalances",
          "description": "The name of the portfolio"
        },
        "entity_id": {
          "type": "string",
          "example": "2c521d6c-1cfb-4371-bf9c-5a42938d3e75",
          "description": "The ID of the entity to which the portfolio is associated"
        },
        "organization_id": {
          "type": "string",
          "example": "4c1d4464-e53b-429f-a81d-71ae7e2e687c",
          "description": "The ID of the organization to which the portfolio is associated"
        },
        "entity_name": {
          "type": "string",
          "example": "Sample Prime Entity",
          "description": "The name of the entity to which the portfolio is associated"
        }
      }
    },
    "coinbase.public_rest_api.PortfolioBalanceType": {
      "type": "string",
      "enum": [
        "UNKNOWN_BALANCE_TYPE",
        "TRADING_BALANCES",
        "VAULT_BALANCES",
        "TOTAL_BALANCES",
        "PRIME_CUSTODY_BALANCES",
        "UNIFIED_TOTAL_BALANCES"
      ],
      "default": "UNKNOWN_BALANCE_TYPE",
      "title": "- UNKNOWN_BALANCE_TYPE: nil\n - TRADING_BALANCES: Trading balances\n - VAULT_BALANCES: Vault balances\n - TOTAL_BALANCES: Total balances (The sum of vault and trading + prime custody)\n - PRIME_CUSTODY_BALANCES: Prime custody balances\n - UNIFIED_TOTAL_BALANCES: Unified total balance across networks and wallet types (vault + trading + prime custody)"
    },
    "coinbase.public_rest_api.PortfolioUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the user."
        },
        "name": {
          "type": "string",
          "description": "The name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "portfolio_id": {
          "type": "string",
          "description": "The portfolio to which this user and associated permissions are identified."
        },
        "entity_id": {
          "type": "string",
          "description": "The entity to which this user and associated permissions are identified."
        },
        "role": {
          "$ref": "#/definitions/coinbase.public_rest_api.UserRole",
          "description": "The role of the user."
        }
      }
    },
    "coinbase.public_rest_api.Position": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string",
          "example": "BTC",
          "description": "Asset symbol"
        },
        "long": {
          "type": "string",
          "example": "10",
          "description": "The long position based on 'reference' value"
        },
        "short": {
          "type": "string",
          "example": "10",
          "description": "The short position based on 'reference' value"
        },
        "position_reference": {
          "$ref": "#/definitions/coinbase.public_rest_api.PositionReference",
          "description": "Position Reference"
        }
      }
    },
    "coinbase.public_rest_api.PositionReference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "e8bbed13-fa33-41de-86d5-4335d8f08166",
          "description": "Reference ID"
        },
        "type": {
          "$ref": "#/definitions/coinbase.public_rest_api.PositionReferenceType",
          "example": "POSITION_REFERENCE_TYPE_ENTITY",
          "description": "Reference type"
        }
      }
    },
    "coinbase.public_rest_api.PositionReferenceType": {
      "type": "string",
      "enum": [
        "POSITION_REFERENCE_TYPE_UNSPECIFIED",
        "ENTITY",
        "PORTFOLIO"
      ],
      "default": "POSITION_REFERENCE_TYPE_UNSPECIFIED"
    },
    "coinbase.public_rest_api.PostOrderPreviewResponse": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string",
          "example": "3e1fe27e-26fe-46d8-b118-c752a2ae6b47",
          "description": "The ID of the portfolio that owns the order"
        },
        "product_id": {
          "type": "string",
          "example": "BTC-USD",
          "description": "The ID of the product being traded by the order"
        },
        "side": {
          "$ref": "#/definitions/coinbase.public_rest_api.OrderSide",
          "example": "BUY",
          "description": "The side of the order"
        },
        "type": {
          "$ref": "#/definitions/coinbase.public_rest_api.OrderType",
          "example": "LIMIT",
          "description": "The type of order placed"
        },
        "base_quantity": {
          "type": "string",
          "example": "50",
          "description": "Order size in base asset units (either `base_quantity` or `quote_value` is required)"
        },
        "quote_value": {
          "type": "string",
          "example": "100",
          "description": "Order size in quote asset units, i.e. the amount the user wants to spend (when buying) or receive (when selling); the quantity in base units will be determined based on the market liquidity and indicated `quote_value`. Either `base_quantity` or `quote_value` is required"
        },
        "limit_price": {
          "type": "string",
          "example": "50.12",
          "description": "The limit price (required for TWAP, VWAP, LIMIT, and STOP_LIMIT orders)"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "example": "2021-05-31T09:59:59Z",
          "description": "The start time of the order in UTC (only applies to TWAP orders.)"
        },
        "expiry_time": {
          "type": "string",
          "format": "date-time",
          "example": "2021-05-31T10:59:59Z",
          "description": "The expiry time of the order in UTC (TWAP, VWAP, LIMIT and STOP_LIMIT GTD only). Required for TWAP and VWAP orders if historical_pov is unspecified"
        },
        "time_in_force": {
          "$ref": "#/definitions/coinbase.public_rest_api.TimeInForceType",
          "example": "GTC",
          "description": "The time in force of the order"
        },
        "commission": {
          "type": "string",
          "example": "4.99",
          "description": "Indicate the total commission paid on this order in quote currency - only applicable if the order has any fills"
        },
        "slippage": {
          "type": "string",
          "example": "0.05",
          "description": "How much slippage is expected"
        },
        "best_bid": {
          "type": "string",
          "example": "10",
          "description": "Current best bid for order book"
        },
        "best_ask": {
          "type": "string",
          "example": "10",
          "description": "Current best ask for order book"
        },
        "average_filled_price": {
          "type": "string",
          "example": "50.19",
          "description": "Indicate expected average filled price based on the current order book"
        },
        "order_total": {
          "type": "string",
          "example": "123",
          "description": "Order quantity + fees"
        },
        "historical_pov": {
          "type": "string",
          "example": "0.5",
          "description": "The estimated participation rate for a TWAP/VWAP order. This field can be specified instead of expiry time, and will be used to compute the expiry time of the order based on historical participation rate."
        }
      }
    },
    "coinbase.public_rest_api.PostTradeCreditInformation": {
      "type": "object",
      "properties": {
        "portfolio_id": {
          "type": "string",
          "example": "e8bbed13-fa33-41de-86d5-4335d8f08166",
          "description": "The unique ID of the portfolio"
        },
        "currency": {
          "type": "string",
          "example": "USD",
          "description": "The currency symbol credit is denoted in"
        },
        "limit": {
          "type": "string",
          "example": "100000",
          "description": "The maximum credit limit"
        },
        "utilized": {
          "type": "string",
          "example": "4000",
          "description": "The amount of credit used"
        },
        "available": {
          "type": "string",
          "example": "96000",
          "description": "The amount of credit available"
        },
        "frozen": {
          "type": "boolean",
          "example": "true",
          "description": "Whether or not a portfolio is frozen due to balance outstanding or other reason"
        },
        "frozen_reason": {
          "type": "string",
          "example": "Portfolio frozen manually by admin",
          "description": "The reason why the portfolio is frozen"
        },
        "amounts_due": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.AmountDue"
          }
        },
        "enabled": {
          "type": "boolean",
          "example": "true",
          "description": "Whether the portfolio has credit enabled"
        },
        "adjusted_credit_utilized": {
          "type": "string",
          "example": "5000",
          "description": "The amount of adjusted credit used"
        },
        "adjusted_portfolio_equity": {
          "type": "string",
          "example": "2000",
          "description": "The amount of adjusted portfolio equity"
        }
      }
    },
    "coinbase.public_rest_api.Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "BTC-USD",
          "description": "The product ID, written as `BASE-QUOTE`"
        },
        "base_increment": {
          "type": "string",
          "example": "1",
          "description": "The smallest permitted unit of denomination for the base asset (varies by product)"
        },
        "quote_increment": {
          "type": "string",
          "example": "1",
          "description": "The smallest permitted unit of denomination for the quote asset (varies by product)"
        },
        "base_min_size": {
          "type": "string",
          "example": "100",
          "description": "The minimum size (in base asset units) for which an order can be placed"
        },
        "quote_min_size": {
          "type": "string",
          "example": "100",
          "description": "The minimum size (in quote asset units) for which an order can be placed"
        },
        "base_max_size": {
          "type": "string",
          "example": "1000",
          "description": "The maximum size (in base asset units) for which an order can be placed"
        },
        "quote_max_size": {
          "type": "string",
          "example": "1000",
          "description": "The maximum size (in quote asset units) for which an order can be placed"
        },
        "permissions": {
          "type": "array",
          "example": "PRODUCT_PERMISSION_READ",
          "items": {
            "$ref": "#/definitions/coinbase.public_rest_api.ProductPermissions"
          },
          "description": "Permissions given to the user for a product",
          "title": "Permissions for the product based on portfolio"
        },
        "price_increment": {
          "type": "string",
          "example": "0.01",
          "description": "The smallest permitted price increment for the product"
        },
        "rfq_product_details": {
          "$ref": "#/definitions/coinbase.public_rest_api.RFQProductDetails",
          "description": "Details for RFQ products"
        }
      }
    },
    "coinbase.public_rest_api.ProductPermissions": {
      "type": "string",
      "enum": [
        "PRODUCT_PERMISSION_UNKNOWN",
        "PRODUCT_PERMISSION_READ",
        "PRODUCT_PERMISSION_TRADE",
        "PRODUCT_PERMISSION_LENDING"
      ],
      "default": "PRODUCT_PERMISSION_UNKNOWN"
    },
    "coinbase.public_rest_api.QuoteResponse": {
      "type": "object",
      "properties": {
        "quote_id": {
          "type": "string"
        },
        "expiration_time": {
          "type": "string",
          "format": "date-time"
        },
        "best_price": {
          "type": "string"
        },
        "order_total": {
          "type": "string",
          "title": "total quote amount for previewing"
        },
        "price_inclusive_of_fees": {
          "type": "string"
        }
      },
      "title": "Copied from https://github.cbhq.net/institutional/trading/blob/3e6da61aceb64c7cbe6f0c0f8fbdb98fd3e868dc/proxy/trading/protos/coinbase/brokerage/proxy/trading/api/orderentry.proto#L366-L370"
    },
    "coinbase.public_rest_api.RFQProductDetails": {
      "type": "object",
      "properties": {
        "tradable": {
          "type": "boolean"
        },
        "min_notional_size": {
          "type": "string"
        },
        "max_notional_size": {
          "type": "string"
        }
      }
    },
    "coinbase.public_rest_api.RateType": {
      "type": "string",
      "enum": [
        "RATE_TYPE_UNSET",
        "BPS",
        "APR_360",
        "APR_365",
        "APR"
      ],
      "default": "RATE_TYPE_UNSET"
    },
    "coinbase.public_rest_api.RiskAssessment": {
      "type": "object",
      "properties": {
        "compliance_risk_detected": {
          "type": "boolean",
          "example": false,
          "description": "Indicates if the transaction has been flagged for compliance concerns"
        },
        "security_risk_detected": {
          "type": "boolean",
          "example": false,
          "description": "Indicates if the transaction has been flagged for security concerns"
        }
      },
      "title": "New message for risk assessment details"
    },
    "coinbase.public_rest_api.RpcConfig": {
      "type": "object",
      "properties": {
        "skip_broadcast": {
          "type": "boolean",
          "example": false,
          "description": "If true, transaction will not be broadcast to the network"
        },
        "url": {
          "type": "string",
          "example": "https://rpc.flashbots.net/fast",
          "description": "Custom blockchain node RPC URL. (EVM-only)"
        }
      }
    },
    "coinbase.public_rest_api.ScheduleFuturesSweepResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true,
          "description": "Success"
        },
        "request_id": {
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "description": "Request ID"
        }
      }
    },
    "coinbase.public_rest_api.SetAutoSweepResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true,
          "description": "Success"
        }
      }
    },
    "coinbase.public_rest_api.ShortCollateral": {
      "type": "object",
      "properties": {
        "old_balance": {
          "type": "string",
          "example": 1000,
          "description": "Existing short collateral balance"
        },
        "new_balance": {
          "type": "string",
          "example": 1000,
          "description": "New short collateral balance required"
        },
        "loan_interest_rate": {
          "type": "string",
          "example": 0.1,
          "description": "Loan interest rate"
        },
        "collateral_interest_rate": {
          "type": "string",
          "example": 0.1,
          "description": "Collateral interest rate"
        }
      }
    },
    "coinbase.public_rest_api.SigningStatus": {
      "type": "string",
      "enum": [
        "SIGNING_STATUS_UNKNOWN",
        "SIGNED",
        "UNSIGNED"
      ],
      "default": "SIGNING_STATUS_UNKNOWN",
      "title": "- SIGNING_STATUS_UNKNOWN: Unknown signing status\n - SIGNED: Transaction has been signed\n - UNSIGNED: Transaction is unsigned"
    },
    "coinbase.public_rest_api.SortDirection": {
      "type": "string",
      "enum": [
        "DESC",
        "ASC"
      ],
      "default": "DESC"
    },
    "coinbase.public_rest_api.StakingInitiateResponse": {
      "type": "object",
      "properties": {
        "wallet_id": {
          "type": "string",
          "description": "The wallet ID"
        },
        "transaction_id": {
          "type": "string",
          "description": "ID of the newly created transaction, can be used to fetch details of the current state of execution"
        },
        "activity_id": {
          "type": "string",
          "description": "The ID for the activity generated for this request"
        }
      },
      "required": [
        "wallet_id",
        "transaction_id",
        "activity_id"
      ]
    },
    "coinbase.public_rest_api.StakingInputs": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "description": "Optional amount to stake or unstake. If omitted, the wallet will stake or unstake the maximum amount available"
        }
      }
    },
    "coinbase.public_rest_api.StakingUnstakeResponse": {
      "type": "object",
      "properties": {
        "wallet_id": {
          "type": "string",
          "description": "The wallet ID"
        },
        "transaction_id": {
          "type": "string",
          "description": "ID of the newly created transaction, can be used to fetch details of the current state of execution"
        },
        "activity_id": {
          "type": "string",
          "description": "The ID for the activity generated for this request"
        }
      },
      "required": [
        "wallet_id",
        "transaction_id",
        "activity_id"
      ]
    },
    "coinbase.public_rest_api.TieredPricingFee": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string",
          "example": "BTC",
          "description": "Asset symbol"
        },
        "fee": {
          "type": "string",
          "example": "4",
          "description": "The fee in bps"
        }
      }
    },
    "coinbase.public_rest_api.TimeInForceType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TIME_IN_FORCE",
        "GOOD_UNTIL_DATE_TIME",
        "GOOD_UNTIL_CANCELLED",
        "IMMEDIATE_OR_CANCEL",
        "FILL_OR_KILL"
      ],
      "default": "UNKNOWN_TIME_IN_FORCE",
      "description": "- UNKNOWN_TIME_IN_FORCE: nil value\n - GOOD_UNTIL_DATE_TIME: Expires at a certain date/time\n - GOOD_UNTIL_CANCELLED: Order stays on the books until cancelled\n - IMMEDIATE_OR_CANCEL: Order is executed immediately at submission or is cancelled\n - FILL_OR_KILL: Order is executed immediately and fully at submission or is cancelled",
      "title": "Indicates the order time validity"
    },
    "coinbase.public_rest_api.Transaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "BTC-USD",
          "description": "The ID of the transaction"
        },
        "wallet_id": {
          "type": "string",
          "example": "cde8dd34-b6cf-4c2c-82bc-5f86adacc868",
          "description": "The wallet ID of the transaction"
        },
        "portfolio_id": {
          "type": "string",
          "example": "0a66a8c0-24ea-4f18-b14f-8c9cf7c1ba40",
          "description": "The portfolio ID of the transaction"
        },
        "type": {
          "$ref": "#/definitions/coinbase.public_rest_api.TransactionType",
          "example": "DEPOSIT",
          "description": "The type of transaction"
        },
        "status": {
          "$ref": "#/definitions/coinbase.public_rest_api.TransactionStatus",
          "example": "APPROVED",
          "description": "The status of the transaction"
        },
        "symbol": {
          "type": "string",
          "example": "BTC",
          "description": "The asset symbol"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2021-05-31T11:59:59Z",
          "description": "The transaction creation time (as a UTC timestamp)"
        },
        "completed_at": {
          "type": "string",
          "format": "date-time",
          "example": "2021-05-31T12:09:31Z",
          "description": "The transaction completion time (as a UTC timestamp)"
        },
        "amount": {
          "type": "string",
          "example": "100",
          "description": "The transaction amount in whole units"
        },
        "transfer_from": {
          "$ref": "#/definitions/coinbase.public_rest_api.TransferLocation",
          "example": "0x9adce14b8e03705ac39999420a74eaed33bbdc8c9aba01f9a3aec0",
          "description": "The sender as either a bank account number, a crypto address, or an internal wallet ID"
        },
        "transfer_to": {
          "$ref": "#/definitions/coinbase.public_rest_api.TransferLocation",
          "example": "0x9adce14b8e03705ac342388ac35cd94ae4da74eaed33bbdc8c9aba01f9a3aec0",
          "description": "The receiver as either a bank account number, a crypto address, or an internal wallet ID"
        },
        "network_fees": {
          "type": "string",
          "example": "1.99",
          "description": "The blockchain network fees (in whole units) required in order to broadcast the transaction"
        },
        "fees": {
          "type": "string",
          "example": "4.53",
          "description": "The fees that the customer paid for the transaction (in whole units)"
        },
        "fee_symbol": {
          "type": "string",
          "example": "USD",
          "description": "The asset in which fees will be paid"
        },
        "blockchain_ids": {
          "type": "array",
          "example": [
            "0x9adce14b8e03705ac342388ac35cd94ae4da74eaed33bbdc8c9aba01f9a3aec0"
          ],
          "items": {
            "type": "string"
          },
          "description": "The cryptocurrency network transaction hashes/IDs generated upon broadcast"
        },
        "transaction_id": {
          "type": "string",
          "example": "A1B2C3D4",
          "description": "The 8 character alphanumeric short form id for the transaction"
        },
        "destination_symbol": {
          "type": "string",
          "example": "USD",
          "description": "The destination asset symbol"
        },
        "estimated_network_fees": {
          "$ref": "#/definitions/coinbase.public_rest_api.EstimatedNetworkFees",
          "description": "The estimated blockchain network fees (in whole units) required in order to broadcast the transaction"
        },
        "network": {
          "type": "string",
          "example": "ethereum-mainnet",
          "description": "The network name specific to web3/onchain wallet transactions"
        },
        "estimated_asset_changes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.AssetChange"
          },
          "description": "The estimated asset changes (web3)"
        },
        "metadata": {
          "$ref": "#/definitions/coinbase.public_rest_api.TransactionMetadata",
          "description": "The transaction metadata which contains different metadata types"
        },
        "idempotency_key": {
          "type": "string",
          "description": "The idempotency key associated with the transaction creation request"
        },
        "onchain_details": {
          "$ref": "#/definitions/coinbase.public_rest_api.OnchainTransactionDetails",
          "description": "Details specific to onchain wallet transactions. Only present when type is ONCHAIN_TRANSACTION",
          "title": "Onchain transaction specific fields"
        },
        "network_info": {
          "$ref": "#/definitions/coinbase.public_rest_api.Network",
          "description": "The network information specific to onchain transactions out of trading/vault wallets."
        }
      }
    },
    "coinbase.public_rest_api.TransactionMetadata": {
      "type": "object",
      "properties": {
        "match_metadata": {
          "$ref": "#/definitions/coinbase.public_rest_api.MatchMetadata",
          "description": "Metadata pertaining to a match transaction"
        },
        "web3_transaction_metadata": {
          "$ref": "#/definitions/coinbase.public_rest_api.Web3TransactionMetadata",
          "description": "Metadata pertaining to a web3 transaction"
        }
      }
    },
    "coinbase.public_rest_api.TransactionStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN_TRANSACTION_STATUS",
        "TRANSACTION_CREATED",
        "TRANSACTION_REQUESTED",
        "TRANSACTION_APPROVED",
        "TRANSACTION_GASSING",
        "TRANSACTION_GASSED",
        "TRANSACTION_PROVISIONED",
        "TRANSACTION_PLANNED",
        "TRANSACTION_PROCESSING",
        "TRANSACTION_RESTORED",
        "TRANSACTION_DONE",
        "TRANSACTION_IMPORT_PENDING",
        "TRANSACTION_IMPORTED",
        "TRANSACTION_CANCELLED",
        "TRANSACTION_REJECTED",
        "TRANSACTION_DELAYED",
        "TRANSACTION_RETRIED",
        "TRANSACTION_FAILED",
        "TRANSACTION_EXPIRED",
        "TRANSACTION_BROADCASTING",
        "OTHER_TRANSACTION_STATUS",
        "TRANSACTION_CONSTRUCTED"
      ],
      "default": "UNKNOWN_TRANSACTION_STATUS",
      "description": "- UNKNOWN_TRANSACTION_STATUS: An Unknown Transaction status\n - TRANSACTION_CREATED: The Transaction has been created and is awaiting Consensus approval\nThis is a non-terminal status\n - TRANSACTION_REQUESTED: The Transaction has reached User Consensus and is awaiting Coinbase Prime approval\nThis is a non-terminal status\n - TRANSACTION_APPROVED: The Transaction has been authorized by Coinbase Prime\nThis is a non-terminal status\n - TRANSACTION_GASSING: The transaction is awaiting blockchain resources for broadcast\nThis is a non-terminal status\n - TRANSACTION_GASSED: The transaction has received blockchain resources for broadcasting\nThis is a non-terminal status\n - TRANSACTION_PROVISIONED: The transaction has been provisioned and is awaiting planning\nThis is a non-terminal status\n - TRANSACTION_PLANNED: The transaction has been constructed. \nThis is a non-terminal status\n - TRANSACTION_PROCESSING: The transaction is currently processing and awaiting finalization\nThis is a non-terminal status\n - TRANSACTION_RESTORED: The transaction has been broadcasted to the network.\nThis is a non-terminal status\n - TRANSACTION_DONE: The transaction has confirmed on-chain and finished. \nThis is a terminal status\n - TRANSACTION_IMPORT_PENDING: The transaction deposit has been detected and is awaiting finalization.\nThis is a non-terminal status\n - TRANSACTION_IMPORTED: The transaction deposit and reward has been detected.\nThis is a terminal status\n - TRANSACTION_CANCELLED: The transaction has been cancelled\nThis is a terminal status\n - TRANSACTION_REJECTED: The transaction was rejected before construction and broadcasting.\nThis is a terminal status\n - TRANSACTION_DELAYED: The transaction s taking longer than expected to confirm on-chain.\nThis is a non-terminal status\n - TRANSACTION_RETRIED: The transaction has been recreated and retried, this occurs when network congestion results in transfers becoming extremely delayed due to insufficient fees or network resources such as CPU, RAM, or NET\nThis is a terminal status\n - TRANSACTION_FAILED: The transaction failed on-chain (the fee was spent but the operation failed).\nThis is a terminal status\n - TRANSACTION_EXPIRED: The transaction has expired.\nThis is a terminal status\n - TRANSACTION_BROADCASTING: The transaction is currently broadcasting to the cryptocurrency network.\nThis is a non-terminal status\n - OTHER_TRANSACTION_STATUS: The transaction has reached an OTHER status.\nThis is a non-terminal status\n - TRANSACTION_CONSTRUCTED: The transaction  bctx is constructed but not yet broadcasting on chain\nThis is a non-terminal status",
      "title": "Indicates the transaction status"
    },
    "coinbase.public_rest_api.TransactionType": {
      "type": "string",
      "enum": [
        "TRANSACTION_TYPE_UNKNOWN",
        "DEPOSIT",
        "WITHDRAWAL",
        "INTERNAL_DEPOSIT",
        "INTERNAL_WITHDRAWAL",
        "SWEEP_DEPOSIT",
        "SWEEP_WITHDRAWAL",
        "PROXY_DEPOSIT",
        "PROXY_WITHDRAWAL",
        "BILLING_WITHDRAWAL",
        "REWARD",
        "COINBASE_REFUND",
        "TRANSACTION_TYPE_OTHER",
        "WITHDRAWAL_ADJUSTMENT",
        "DEPOSIT_ADJUSTMENT",
        "KEY_REGISTRATION",
        "DELEGATION",
        "UNDELEGATION",
        "RESTAKE",
        "COMPLETE_UNBONDING",
        "WITHDRAW_UNBONDED",
        "STAKE_ACCOUNT_CREATE",
        "CHANGE_VALIDATOR",
        "STAKE",
        "UNSTAKE",
        "REMOVE_AUTHORIZED_PARTY",
        "STAKE_AUTHORIZE_WITH_SEED",
        "SLASH",
        "COINBASE_DEPOSIT",
        "CONVERSION",
        "CLAIM_REWARDS",
        "VOTE_AUTHORIZE",
        "WEB3_TRANSACTION",
        "ONCHAIN_TRANSACTION"
      ],
      "default": "TRANSACTION_TYPE_UNKNOWN",
      "description": "- TRANSACTION_TYPE_UNKNOWN: An unknown transaction type\n - DEPOSIT: A fiat or crypto deposit\n - WITHDRAWAL: A fiat or crypto withdrawal\n - INTERNAL_DEPOSIT: An internal fiat or crypto deposit\n - INTERNAL_WITHDRAWAL: An internal fiat or crypto withdrawal\n - SWEEP_DEPOSIT: Internal automated deposit to a cold address from a restored address\n - SWEEP_WITHDRAWAL: Internal automated withdrawal from a restored address to a cold address\n - PROXY_DEPOSIT: On-chain deposit of funds into proxy contract from cold address\n - PROXY_WITHDRAWAL: On-chain withdrawal of funds from proxy contract to cold address\n - BILLING_WITHDRAWAL: Coinbase Prime automated invoice settlement payment\n - REWARD: Reward payment to an associated address for a staked asset\n - COINBASE_REFUND: Coinbase Prime refund for the leftover amount for a CPFP (child pays for parent) transaction\n - TRANSACTION_TYPE_OTHER: An OTHER type of transaction\n - WITHDRAWAL_ADJUSTMENT: A manual adjustment withdrawal transaction\n - DEPOSIT_ADJUSTMENT: A manual adjustment deposit transaction\n - KEY_REGISTRATION: An on-chain registration for an address\n - DELEGATION: An on-chain delegation transaction\n - UNDELEGATION: An on-chain undelegation transaction\n - RESTAKE: On-chain restaking transaction\n - COMPLETE_UNBONDING: On-chain unbonding event transaction\n - WITHDRAW_UNBONDED: On-chain event indicating unbonding period is over\n - STAKE_ACCOUNT_CREATE: On-chain transaction to begin staking from an address\n - CHANGE_VALIDATOR: On-chain transaction alter validator\n - STAKE: On-chain transaction to begin staking in Cryptocurrency network\n - UNSTAKE: On-chain transaction to stop staking in Cryptocurrency network\n - REMOVE_AUTHORIZED_PARTY: On-chain transaction to remove a party from a multi-signature wallet\n - STAKE_AUTHORIZE_WITH_SEED: On-chain transaction to begin staking from a seed account\n - SLASH: On-chain transaction indicating a slash event has occurred\n - COINBASE_DEPOSIT: On-chain transaction deposit for the purpose of transaction operations\n - CONVERSION: Internal conversion between two assets\n - CLAIM_REWARDS: On-chain transaction to claim rewards from Vote Account\n - VOTE_AUTHORIZE: On-chain transaction to transfer the reward claiming permission to other pubkey\n - WEB3_TRANSACTION: On-chain transaction initiated with Prime Onchain Wallet\nDeprecated: Use ONCHAIN_TRANSACTION instead\n - ONCHAIN_TRANSACTION: On-chain transaction initiated with Prime Onchain Wallet",
      "title": "Indicates the transaction type"
    },
    "coinbase.public_rest_api.TransferLocation": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/coinbase.public_rest_api.TransferLocationType",
          "example": "wallet",
          "description": "Type of the transfer location: \"payment_method\", \"wallet\" or \"address\""
        },
        "value": {
          "type": "string",
          "example": "0bf7bf1e-bafa-4d7e-9312-fa0bf3b63f27",
          "description": "The value of the transfer location: payment method ID, wallet ID or crypto address"
        }
      }
    },
    "coinbase.public_rest_api.TransferLocationType": {
      "type": "string",
      "enum": [
        "TRANSFER_LOCATION_TYPE_UNKNOWN",
        "PAYMENT_METHOD",
        "WALLET",
        "ADDRESS",
        "OTHER",
        "MULTIPLE_ADDRESSES",
        "COUNTERPARTY_ID"
      ],
      "default": "TRANSFER_LOCATION_TYPE_UNKNOWN",
      "title": "- TRANSFER_LOCATION_TYPE_UNKNOWN: The nil value\n - PAYMENT_METHOD: The ID of a fiat payment method\n - WALLET: The ID of a wallet\n - ADDRESS: A cryptocurrency address\n - OTHER: Another type of transfer location: Blockchain Network, Coinbase\n - MULTIPLE_ADDRESSES: Multiple cryptocurrency addresses\n - COUNTERPARTY_ID: Counterparty ID"
    },
    "coinbase.public_rest_api.UserAction": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/coinbase.public_rest_api.Action",
          "description": "User action related to the activity"
        },
        "user_id": {
          "type": "string",
          "description": "Id of the user who executed the action"
        },
        "timestamp": {
          "type": "string",
          "description": "Time the action was taken"
        }
      }
    },
    "coinbase.public_rest_api.UserRole": {
      "type": "string",
      "enum": [
        "USER_ROLE_UNKNOWN",
        "AUDITOR",
        "SIGNATORY",
        "ADMIN",
        "INITIATOR",
        "REVIEWER",
        "TRADER",
        "FULL_TRADER",
        "TEAM_MANAGER",
        "APPROVER"
      ],
      "default": "USER_ROLE_UNKNOWN",
      "description": "- USER_ROLE_UNKNOWN: nil value\n - AUDITOR: An auditor\n - SIGNATORY: A signatory\n - ADMIN: An admin\n - INITIATOR: An initiator\n - REVIEWER: A reviewer\n - TRADER: A trader\n - FULL_TRADER: A trader with full permissions\n - TEAM_MANAGER: A team manager\n - APPROVER: An approver",
      "title": "Indicates the user's role"
    },
    "coinbase.public_rest_api.VisibilityStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN_VISIBILITY_STATUS",
        "VISIBLE",
        "HIDDEN",
        "SPAM"
      ],
      "default": "UNKNOWN_VISIBILITY_STATUS",
      "title": "- UNKNOWN_VISIBILITY_STATUS: nil\n - VISIBLE: Visible\n - HIDDEN: Hidden\n - SPAM: Spam"
    },
    "coinbase.public_rest_api.Wallet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The unique UUID for the wallet"
        },
        "name": {
          "type": "string",
          "title": "The name of the wallet"
        },
        "symbol": {
          "type": "string",
          "title": "The asset stored in the wallet"
        },
        "type": {
          "$ref": "#/definitions/coinbase.public_rest_api.WalletType",
          "title": "The type of wallet"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "The UTC timestamp when this wallet was created"
        },
        "address": {
          "type": "string",
          "title": "The active address of the wallet"
        },
        "visibility": {
          "$ref": "#/definitions/coinbase.public_rest_api.WalletVisibility",
          "title": "The visibility of the wallet"
        },
        "network": {
          "$ref": "#/definitions/coinbase.public_rest_api.Network",
          "title": "The network the wallet is valid on (e.g. ethereum-mainnet)\nnote: this field is only available for vault wallets"
        }
      }
    },
    "coinbase.public_rest_api.WalletCryptoDepositInstructions": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "e84255eb-2e21-439e-a1d0-f5dd1e1292b9",
          "description": "The ID of the wallet"
        },
        "name": {
          "type": "string",
          "example": "Wallet 1",
          "description": "The name of the wallet"
        },
        "type": {
          "$ref": "#/definitions/coinbase.public_rest_api.WalletDepositInstructionType",
          "example": "Crypto",
          "description": "The type of deposit"
        },
        "address": {
          "type": "string",
          "example": "ca13fdc4-e459-4fd9-868e-82291343b213",
          "description": "The address of the wallet"
        },
        "account_identifier": {
          "type": "string",
          "example": "387879289",
          "description": "The tag/memo of the address, if applicable -- required for certain assets (e.g. XRP, XLM, etc.)"
        },
        "account_identifier_name": {
          "type": "string",
          "example": "memo",
          "description": "The blockchain network's terminology for the unique identifier used to identify the receiver of the transaction (different blockchain networks use different names, such as `destination_tag` or `memo`)"
        },
        "network": {
          "$ref": "#/definitions/coinbase.public_rest_api.Network",
          "example": "ethereum-mainnet",
          "description": "The network the deposit address is valid on (e.g. ethereum-mainnet)"
        }
      }
    },
    "coinbase.public_rest_api.WalletDepositInstructionType": {
      "type": "string",
      "enum": [
        "UNKNOWN_WALLET_DEPOSIT_TYPE",
        "CRYPTO",
        "WIRE",
        "SEN",
        "SWIFT",
        "SEPA"
      ],
      "default": "UNKNOWN_WALLET_DEPOSIT_TYPE",
      "description": "- UNKNOWN_WALLET_DEPOSIT_TYPE: nil value\n - CRYPTO: A cryptocurrency deposit\n - WIRE: A wire deposit\n - SEN: DEPRECATED. A Silvergate Exchange Network deposit\n - SWIFT: A SWIFT deposit\n - SEPA: A SEPA deposit (Single Euro Payments Area)",
      "title": "Indicates the wallet's deposit instruction type"
    },
    "coinbase.public_rest_api.WalletFiatDepositInstructions": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the wallet"
        },
        "name": {
          "type": "string",
          "title": "The name of the wallet"
        },
        "type": {
          "$ref": "#/definitions/coinbase.public_rest_api.WalletDepositInstructionType",
          "title": "Wire or SEN"
        },
        "account_number": {
          "type": "string",
          "title": "The fiat account number"
        },
        "routing_number": {
          "type": "string",
          "title": "The fiat routing number"
        },
        "reference_code": {
          "type": "string",
          "title": "Reference code to be used as a memo/description"
        }
      }
    },
    "coinbase.public_rest_api.WalletType": {
      "type": "string",
      "enum": [
        "UNKNOWN_WALLET_TYPE",
        "VAULT",
        "TRADING",
        "WALLET_TYPE_OTHER",
        "QC",
        "ONCHAIN"
      ],
      "default": "UNKNOWN_WALLET_TYPE",
      "description": "- VAULT: A crypto vault\n - TRADING: A trading wallet\n - WALLET_TYPE_OTHER: Other wallet types (like consumer, etc)\n - QC: A QC Wallet\n - ONCHAIN: An Onchain wallet",
      "title": "Indicates the wallet type"
    },
    "coinbase.public_rest_api.WalletVisibility": {
      "type": "string",
      "enum": [
        "WALLET_VISIBILITY_UNSPECIFIED",
        "WALLET_VISIBILITY_VISIBLE",
        "WALLET_VISIBILITY_HIDDEN"
      ],
      "default": "WALLET_VISIBILITY_UNSPECIFIED"
    },
    "coinbase.public_rest_api.Web3Asset": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string",
          "title": "Network this asset is on (ie \"ethereum-mainnet\")"
        },
        "contract_address": {
          "type": "string",
          "description": "Contract Address of this asset (empty for native assets)."
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of this asset."
        },
        "token_id": {
          "type": "string",
          "description": "Token ID of this asset (empty for non  NFT assets)."
        },
        "name": {
          "type": "string",
          "description": "Name of this asset, either the name of the crypto token or the NFT collection name."
        }
      }
    },
    "coinbase.public_rest_api.Web3Balance": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/coinbase.public_rest_api.Web3Asset",
          "title": "Asset"
        },
        "amount": {
          "type": "string",
          "example": "109.42",
          "description": "The total amount in whole units with full precision."
        },
        "visibility_status": {
          "$ref": "#/definitions/coinbase.public_rest_api.VisibilityStatus",
          "description": "Visibility status of the balance."
        }
      }
    },
    "coinbase.public_rest_api.Web3TransactionMetadata": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "The transaction type label of the confirmed transaction post settlement"
        },
        "confirmed_asset_changes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coinbase.public_rest_api.AssetChange"
          },
          "description": "The confirmed asset changes (onchain)"
        }
      }
    },
    "coinbase.public_rest_api.WithdrawalPower": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string",
          "example": "BTC",
          "description": "The currency symbol"
        },
        "amount": {
          "type": "string",
          "example": 2.84882377,
          "description": "Withdrawal power"
        }
      }
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "google.rpc.Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    }
  }
}
