package com.coinbase.prime.model;

import com.coinbase.prime.model.LimitOrderEdit;
import com.coinbase.prime.model.OrderEdit;
import com.coinbase.prime.model.enums.OrderSide;
import com.coinbase.prime.model.enums.OrderStatus;
import com.coinbase.prime.model.enums.OrderType;
import com.coinbase.prime.model.enums.TimeInForceType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Order {
    /**
     * The unique order ID generated by Coinbase
     */
    private String id;

    /**
     * The ID of the user that created the order
     */
    private String userId;

    /**
     * The ID of the portfolio that owns the order
     */
    private String portfolioId;

    /**
     * The ID of the product being traded by the order
     */
    private String productId;

    private OrderSide side;

    /**
     * A client-generated order ID used for reference purposes (note: order will be rejected if this ID is not unique among all currently active orders)
     */
    private String clientOrderId;

    private OrderType type;

    /**
     * Order size in base asset units (either &#x60;base_quantity&#x60; or &#x60;quote_value&#x60; is required)
     */
    private String baseQuantity;

    /**
     * Order size in quote asset units, i.e. the amount the user wants to spend (when buying) or receive (when selling); the quantity in base units will be determined based on the market liquidity and indicated &#x60;quote_value&#x60;. Either &#x60;base_quantity&#x60; or &#x60;quote_value&#x60; is required
     */
    private String quoteValue;

    /**
     * The limit price (required for TWAP, VWAP, LIMIT and STOP_LIMIT orders)
     */
    private String limitPrice;

    /**
     * The start time of the order in UTC (only applies to TWAP, VWAP orders.)
     */
    private OffsetDateTime startTime;

    /**
     * The expiry time of the order in UTC (applies to TWAP, VWAP, LIMIT, and STOP_LIMIT orders with &#x60;time_in_force&#x60; set to &#x60;GTD&#x60;)
     */
    private OffsetDateTime expiryTime;

    private OrderStatus status;

    private TimeInForceType timeInForce;

    /**
     * The order creation time as a UTC timestamp
     */
    private OffsetDateTime createdAt;

    /**
     * Size filled (in base asset units)
     */
    private String filledQuantity;

    /**
     * Market value filled (in quote asset units)
     */
    private String filledValue;

    /**
     * Indicates the average &#x60;filled_price&#x60;
     */
    private String averageFilledPrice;

    /**
     * Total commission paid on this order (in quote asset units) -- only applicable for partially- or fully-filled orders
     */
    private String commission;

    /**
     * Fee charged by the exchange for Cost Plus commission configurations. Exchange fee will be 0 for All In commission configurations.
     */
    private String exchangeFee;

    /**
     * historical pov for the order
     */
    private String historicalPov;

    /**
     * Specifies the stop price at which the order activates. The order is activated if the last trade price on Coinbase Exchange crosses the stop price specified on the order
     */
    private String stopPrice;

    /**
     * Indicates the average &#x60;filled_price&#x60; net of commissions and fees
     */
    private String netAverageFilledPrice;

    /**
     * Indicates a user friendly message for regarding various aspects of the order such as cancellation or rejection reasons
     */
    private String userContext;

    /**
     * The client product ID of the fill indictating the settlment currency
     */
    private String clientProductId;

    /**
     * Post-only flag - indicates whether the order was placed as post-only
     */
    private Boolean postOnly;

    /**
     * The history of order edits (deprecated: use edit_history instead)
     */
    private List<LimitOrderEdit> orderEditHistory;

    /**
     * Indicates if this was a raise exact order (size inclusive of fees for sell orders in quote)
     */
    private Boolean isRaiseExact;

    /**
     * Display size for the order
     */
    private String displaySize;

    /**
     * The history of order edits
     */
    private List<OrderEdit> editHistory;

    /**
     * The maximum order size that will show up on venue order books (in quote currency).
     */
    private String displayQuoteSize;

    /**
     * The maximum order size that will show up on venue order books (in base currency).
     */
    private String displayBaseSize;

    public Order() {
    }

    public Order(Builder builder) {
        this.id = builder.id;
        this.userId = builder.userId;
        this.portfolioId = builder.portfolioId;
        this.productId = builder.productId;
        this.side = builder.side;
        this.clientOrderId = builder.clientOrderId;
        this.type = builder.type;
        this.baseQuantity = builder.baseQuantity;
        this.quoteValue = builder.quoteValue;
        this.limitPrice = builder.limitPrice;
        this.startTime = builder.startTime;
        this.expiryTime = builder.expiryTime;
        this.status = builder.status;
        this.timeInForce = builder.timeInForce;
        this.createdAt = builder.createdAt;
        this.filledQuantity = builder.filledQuantity;
        this.filledValue = builder.filledValue;
        this.averageFilledPrice = builder.averageFilledPrice;
        this.commission = builder.commission;
        this.exchangeFee = builder.exchangeFee;
        this.historicalPov = builder.historicalPov;
        this.stopPrice = builder.stopPrice;
        this.netAverageFilledPrice = builder.netAverageFilledPrice;
        this.userContext = builder.userContext;
        this.clientProductId = builder.clientProductId;
        this.postOnly = builder.postOnly;
        this.orderEditHistory = builder.orderEditHistory;
        this.isRaiseExact = builder.isRaiseExact;
        this.displaySize = builder.displaySize;
        this.editHistory = builder.editHistory;
        this.displayQuoteSize = builder.displayQuoteSize;
        this.displayBaseSize = builder.displayBaseSize;
    }
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }
    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }
    public String getPortfolioId() {
        return portfolioId;
    }

    public void setPortfolioId(String portfolioId) {
        this.portfolioId = portfolioId;
    }
    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }
    public OrderSide getSide() {
        return side;
    }

    public void setSide(OrderSide side) {
        this.side = side;
    }
    public String getClientOrderId() {
        return clientOrderId;
    }

    public void setClientOrderId(String clientOrderId) {
        this.clientOrderId = clientOrderId;
    }
    public OrderType getType() {
        return type;
    }

    public void setType(OrderType type) {
        this.type = type;
    }
    public String getBaseQuantity() {
        return baseQuantity;
    }

    public void setBaseQuantity(String baseQuantity) {
        this.baseQuantity = baseQuantity;
    }
    public String getQuoteValue() {
        return quoteValue;
    }

    public void setQuoteValue(String quoteValue) {
        this.quoteValue = quoteValue;
    }
    public String getLimitPrice() {
        return limitPrice;
    }

    public void setLimitPrice(String limitPrice) {
        this.limitPrice = limitPrice;
    }
    public OffsetDateTime getStartTime() {
        return startTime;
    }

    public void setStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
    }
    public OffsetDateTime getExpiryTime() {
        return expiryTime;
    }

    public void setExpiryTime(OffsetDateTime expiryTime) {
        this.expiryTime = expiryTime;
    }
    public OrderStatus getStatus() {
        return status;
    }

    public void setStatus(OrderStatus status) {
        this.status = status;
    }
    public TimeInForceType getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(TimeInForceType timeInForce) {
        this.timeInForce = timeInForce;
    }
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }
    public String getFilledQuantity() {
        return filledQuantity;
    }

    public void setFilledQuantity(String filledQuantity) {
        this.filledQuantity = filledQuantity;
    }
    public String getFilledValue() {
        return filledValue;
    }

    public void setFilledValue(String filledValue) {
        this.filledValue = filledValue;
    }
    public String getAverageFilledPrice() {
        return averageFilledPrice;
    }

    public void setAverageFilledPrice(String averageFilledPrice) {
        this.averageFilledPrice = averageFilledPrice;
    }
    public String getCommission() {
        return commission;
    }

    public void setCommission(String commission) {
        this.commission = commission;
    }
    public String getExchangeFee() {
        return exchangeFee;
    }

    public void setExchangeFee(String exchangeFee) {
        this.exchangeFee = exchangeFee;
    }
    public String getHistoricalPov() {
        return historicalPov;
    }

    public void setHistoricalPov(String historicalPov) {
        this.historicalPov = historicalPov;
    }
    public String getStopPrice() {
        return stopPrice;
    }

    public void setStopPrice(String stopPrice) {
        this.stopPrice = stopPrice;
    }
    public String getNetAverageFilledPrice() {
        return netAverageFilledPrice;
    }

    public void setNetAverageFilledPrice(String netAverageFilledPrice) {
        this.netAverageFilledPrice = netAverageFilledPrice;
    }
    public String getUserContext() {
        return userContext;
    }

    public void setUserContext(String userContext) {
        this.userContext = userContext;
    }
    public String getClientProductId() {
        return clientProductId;
    }

    public void setClientProductId(String clientProductId) {
        this.clientProductId = clientProductId;
    }
    public Boolean getPostOnly() {
        return postOnly;
    }

    public void setPostOnly(Boolean postOnly) {
        this.postOnly = postOnly;
    }
    public List<LimitOrderEdit> getOrderEditHistory() {
        return orderEditHistory;
    }

    public void setOrderEditHistory(List<LimitOrderEdit> orderEditHistory) {
        this.orderEditHistory = orderEditHistory;
    }
    public Boolean getIsRaiseExact() {
        return isRaiseExact;
    }

    public void setIsRaiseExact(Boolean isRaiseExact) {
        this.isRaiseExact = isRaiseExact;
    }
    public String getDisplaySize() {
        return displaySize;
    }

    public void setDisplaySize(String displaySize) {
        this.displaySize = displaySize;
    }
    public List<OrderEdit> getEditHistory() {
        return editHistory;
    }

    public void setEditHistory(List<OrderEdit> editHistory) {
        this.editHistory = editHistory;
    }
    public String getDisplayQuoteSize() {
        return displayQuoteSize;
    }

    public void setDisplayQuoteSize(String displayQuoteSize) {
        this.displayQuoteSize = displayQuoteSize;
    }
    public String getDisplayBaseSize() {
        return displayBaseSize;
    }

    public void setDisplayBaseSize(String displayBaseSize) {
        this.displayBaseSize = displayBaseSize;
    }
    public static class Builder {
        private String id;

        private String userId;

        private String portfolioId;

        private String productId;

        private OrderSide side;

        private String clientOrderId;

        private OrderType type;

        private String baseQuantity;

        private String quoteValue;

        private String limitPrice;

        private OffsetDateTime startTime;

        private OffsetDateTime expiryTime;

        private OrderStatus status;

        private TimeInForceType timeInForce;

        private OffsetDateTime createdAt;

        private String filledQuantity;

        private String filledValue;

        private String averageFilledPrice;

        private String commission;

        private String exchangeFee;

        private String historicalPov;

        private String stopPrice;

        private String netAverageFilledPrice;

        private String userContext;

        private String clientProductId;

        private Boolean postOnly;

        private List<LimitOrderEdit> orderEditHistory;

        private Boolean isRaiseExact;

        private String displaySize;

        private List<OrderEdit> editHistory;

        private String displayQuoteSize;

        private String displayBaseSize;

        public Builder id(String id) {
            this.id = id;
            return this;
        }

        public Builder userId(String userId) {
            this.userId = userId;
            return this;
        }

        public Builder portfolioId(String portfolioId) {
            this.portfolioId = portfolioId;
            return this;
        }

        public Builder productId(String productId) {
            this.productId = productId;
            return this;
        }

        public Builder side(OrderSide side) {
            this.side = side;
            return this;
        }

        public Builder clientOrderId(String clientOrderId) {
            this.clientOrderId = clientOrderId;
            return this;
        }

        public Builder type(OrderType type) {
            this.type = type;
            return this;
        }

        public Builder baseQuantity(String baseQuantity) {
            this.baseQuantity = baseQuantity;
            return this;
        }

        public Builder quoteValue(String quoteValue) {
            this.quoteValue = quoteValue;
            return this;
        }

        public Builder limitPrice(String limitPrice) {
            this.limitPrice = limitPrice;
            return this;
        }

        public Builder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }

        public Builder expiryTime(OffsetDateTime expiryTime) {
            this.expiryTime = expiryTime;
            return this;
        }

        public Builder status(OrderStatus status) {
            this.status = status;
            return this;
        }

        public Builder timeInForce(TimeInForceType timeInForce) {
            this.timeInForce = timeInForce;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder filledQuantity(String filledQuantity) {
            this.filledQuantity = filledQuantity;
            return this;
        }

        public Builder filledValue(String filledValue) {
            this.filledValue = filledValue;
            return this;
        }

        public Builder averageFilledPrice(String averageFilledPrice) {
            this.averageFilledPrice = averageFilledPrice;
            return this;
        }

        public Builder commission(String commission) {
            this.commission = commission;
            return this;
        }

        public Builder exchangeFee(String exchangeFee) {
            this.exchangeFee = exchangeFee;
            return this;
        }

        public Builder historicalPov(String historicalPov) {
            this.historicalPov = historicalPov;
            return this;
        }

        public Builder stopPrice(String stopPrice) {
            this.stopPrice = stopPrice;
            return this;
        }

        public Builder netAverageFilledPrice(String netAverageFilledPrice) {
            this.netAverageFilledPrice = netAverageFilledPrice;
            return this;
        }

        public Builder userContext(String userContext) {
            this.userContext = userContext;
            return this;
        }

        public Builder clientProductId(String clientProductId) {
            this.clientProductId = clientProductId;
            return this;
        }

        public Builder postOnly(Boolean postOnly) {
            this.postOnly = postOnly;
            return this;
        }

        public Builder orderEditHistory(List<LimitOrderEdit> orderEditHistory) {
            this.orderEditHistory = orderEditHistory;
            return this;
        }

        public Builder isRaiseExact(Boolean isRaiseExact) {
            this.isRaiseExact = isRaiseExact;
            return this;
        }

        public Builder displaySize(String displaySize) {
            this.displaySize = displaySize;
            return this;
        }

        public Builder editHistory(List<OrderEdit> editHistory) {
            this.editHistory = editHistory;
            return this;
        }

        public Builder displayQuoteSize(String displayQuoteSize) {
            this.displayQuoteSize = displayQuoteSize;
            return this;
        }

        public Builder displayBaseSize(String displayBaseSize) {
            this.displayBaseSize = displayBaseSize;
            return this;
        }

        public Order build() {
            return new Order(this);
        }
    }
}

