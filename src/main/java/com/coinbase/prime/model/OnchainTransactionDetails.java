/*
 * Copyright 2025-present Coinbase Global, Inc.
 *
 * This file is generated by Openapi Generator https://github.com/openapitools/openapi-generator
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *  Do not edit the class manually.
 */

package com.coinbase.prime.model;
import com.coinbase.prime.model.RiskAssessment;
import com.coinbase.prime.model.enums.SigningStatus;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;

public class OnchainTransactionDetails {
    /**
     * The signed transaction data
     */
    @JsonProperty("signed_transaction")
    private String signedTransaction;

    @JsonProperty("risk_assessment")
    private RiskAssessment riskAssessment;

    /**
     * The blockchain network chain ID. Will be empty for Solana transactions.
     */
    @JsonProperty("chain_id")
    private String chainId;

    /**
     * The transaction nonce. Only present for EVM-based blockchain transactions.
     */
    @JsonProperty("nonce")
    private String nonce;

    /**
     * The ID of the transaction that this transaction replaced
     */
    @JsonProperty("replaced_transaction_id")
    private String replacedTransactionId;

    /**
     * The destination address for the transaction
     */
    @JsonProperty("destination_address")
    private String destinationAddress;

    /**
     * If set to true, the transaction will not be broadcast to the network. You can still retrieve the signed transaction from the GetTransaction endpoint by transaction ID once the transaction is created.
     */
    @JsonProperty("skip_broadcast")
    private Boolean skipBroadcast;

    /**
     * Reason for transaction failure if applicable
     */
    @JsonProperty("failure_reason")
    private String failureReason;

    @JsonProperty("signing_status")
    private SigningStatus signingStatus;

    public OnchainTransactionDetails() {
    }

    public OnchainTransactionDetails(Builder builder) {
        this.signedTransaction = builder.signedTransaction;
        this.riskAssessment = builder.riskAssessment;
        this.chainId = builder.chainId;
        this.nonce = builder.nonce;
        this.replacedTransactionId = builder.replacedTransactionId;
        this.destinationAddress = builder.destinationAddress;
        this.skipBroadcast = builder.skipBroadcast;
        this.failureReason = builder.failureReason;
        this.signingStatus = builder.signingStatus;
    }
    public String getSignedTransaction() {
        return signedTransaction;
    }

    public void setSignedTransaction(String signedTransaction) {
        this.signedTransaction = signedTransaction;
    }
    public RiskAssessment getRiskAssessment() {
        return riskAssessment;
    }

    public void setRiskAssessment(RiskAssessment riskAssessment) {
        this.riskAssessment = riskAssessment;
    }
    public String getChainId() {
        return chainId;
    }

    public void setChainId(String chainId) {
        this.chainId = chainId;
    }
    public String getNonce() {
        return nonce;
    }

    public void setNonce(String nonce) {
        this.nonce = nonce;
    }
    public String getReplacedTransactionId() {
        return replacedTransactionId;
    }

    public void setReplacedTransactionId(String replacedTransactionId) {
        this.replacedTransactionId = replacedTransactionId;
    }
    public String getDestinationAddress() {
        return destinationAddress;
    }

    public void setDestinationAddress(String destinationAddress) {
        this.destinationAddress = destinationAddress;
    }
    public Boolean getSkipBroadcast() {
        return skipBroadcast;
    }

    public void setSkipBroadcast(Boolean skipBroadcast) {
        this.skipBroadcast = skipBroadcast;
    }
    public String getFailureReason() {
        return failureReason;
    }

    public void setFailureReason(String failureReason) {
        this.failureReason = failureReason;
    }
    public SigningStatus getSigningStatus() {
        return signingStatus;
    }

    public void setSigningStatus(SigningStatus signingStatus) {
        this.signingStatus = signingStatus;
    }
    public static class Builder {
        private String signedTransaction;

        private RiskAssessment riskAssessment;

        private String chainId;

        private String nonce;

        private String replacedTransactionId;

        private String destinationAddress;

        private Boolean skipBroadcast;

        private String failureReason;

        private SigningStatus signingStatus;

        public Builder signedTransaction(String signedTransaction) {
            this.signedTransaction = signedTransaction;
            return this;
        }

        public Builder riskAssessment(RiskAssessment riskAssessment) {
            this.riskAssessment = riskAssessment;
            return this;
        }

        public Builder chainId(String chainId) {
            this.chainId = chainId;
            return this;
        }

        public Builder nonce(String nonce) {
            this.nonce = nonce;
            return this;
        }

        public Builder replacedTransactionId(String replacedTransactionId) {
            this.replacedTransactionId = replacedTransactionId;
            return this;
        }

        public Builder destinationAddress(String destinationAddress) {
            this.destinationAddress = destinationAddress;
            return this;
        }

        public Builder skipBroadcast(Boolean skipBroadcast) {
            this.skipBroadcast = skipBroadcast;
            return this;
        }

        public Builder failureReason(String failureReason) {
            this.failureReason = failureReason;
            return this;
        }

        public Builder signingStatus(SigningStatus signingStatus) {
            this.signingStatus = signingStatus;
            return this;
        }

        public OnchainTransactionDetails build() {
            return new OnchainTransactionDetails(this);
        }
    }
}

